
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	200116c8 	.word	0x200116c8
   10004:	00014901 	.word	0x00014901
   10008:	00022e0d 	.word	0x00022e0d
   1000c:	000148b9 	.word	0x000148b9
   10010:	000148b9 	.word	0x000148b9
   10014:	000148b9 	.word	0x000148b9
   10018:	000148b9 	.word	0x000148b9
   1001c:	000148b9 	.word	0x000148b9
	...
   1002c:	00014019 	.word	0x00014019
   10030:	000148b9 	.word	0x000148b9
   10034:	00000000 	.word	0x00000000
   10038:	00013f81 	.word	0x00013f81
   1003c:	000148b9 	.word	0x000148b9

00010040 <_irq_vector_table>:
   10040:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10050:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10060:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10070:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10080:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10090:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   100a0:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   100b0:	000165d9 000140bd 000140bd 000140bd     .e...@...@...@..
   100c0:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   100d0:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   100e0:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   100f0:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10100:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10110:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10120:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10130:	000140bd 000140bd 000140bd 000140bd     .@...@...@...@..
   10140:	000140bd                                .@..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10210:	0001a918 00000001 00010000 00010000     ................
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00010240 <__aeabi_drsub>:
   10240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10244:	e002      	b.n	1024c <__adddf3>
   10246:	bf00      	nop

00010248 <__aeabi_dsub>:
   10248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001024c <__adddf3>:
   1024c:	b530      	push	{r4, r5, lr}
   1024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10252:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10256:	ea94 0f05 	teq	r4, r5
   1025a:	bf08      	it	eq
   1025c:	ea90 0f02 	teqeq	r0, r2
   10260:	bf1f      	itttt	ne
   10262:	ea54 0c00 	orrsne.w	ip, r4, r0
   10266:	ea55 0c02 	orrsne.w	ip, r5, r2
   1026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10272:	f000 80e2 	beq.w	1043a <__adddf3+0x1ee>
   10276:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1027e:	bfb8      	it	lt
   10280:	426d      	neglt	r5, r5
   10282:	dd0c      	ble.n	1029e <__adddf3+0x52>
   10284:	442c      	add	r4, r5
   10286:	ea80 0202 	eor.w	r2, r0, r2
   1028a:	ea81 0303 	eor.w	r3, r1, r3
   1028e:	ea82 0000 	eor.w	r0, r2, r0
   10292:	ea83 0101 	eor.w	r1, r3, r1
   10296:	ea80 0202 	eor.w	r2, r0, r2
   1029a:	ea81 0303 	eor.w	r3, r1, r3
   1029e:	2d36      	cmp	r5, #54	; 0x36
   102a0:	bf88      	it	hi
   102a2:	bd30      	pophi	{r4, r5, pc}
   102a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   102a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   102ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   102b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   102b4:	d002      	beq.n	102bc <__adddf3+0x70>
   102b6:	4240      	negs	r0, r0
   102b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   102bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   102c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   102c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   102c8:	d002      	beq.n	102d0 <__adddf3+0x84>
   102ca:	4252      	negs	r2, r2
   102cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102d0:	ea94 0f05 	teq	r4, r5
   102d4:	f000 80a7 	beq.w	10426 <__adddf3+0x1da>
   102d8:	f1a4 0401 	sub.w	r4, r4, #1
   102dc:	f1d5 0e20 	rsbs	lr, r5, #32
   102e0:	db0d      	blt.n	102fe <__adddf3+0xb2>
   102e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   102e6:	fa22 f205 	lsr.w	r2, r2, r5
   102ea:	1880      	adds	r0, r0, r2
   102ec:	f141 0100 	adc.w	r1, r1, #0
   102f0:	fa03 f20e 	lsl.w	r2, r3, lr
   102f4:	1880      	adds	r0, r0, r2
   102f6:	fa43 f305 	asr.w	r3, r3, r5
   102fa:	4159      	adcs	r1, r3
   102fc:	e00e      	b.n	1031c <__adddf3+0xd0>
   102fe:	f1a5 0520 	sub.w	r5, r5, #32
   10302:	f10e 0e20 	add.w	lr, lr, #32
   10306:	2a01      	cmp	r2, #1
   10308:	fa03 fc0e 	lsl.w	ip, r3, lr
   1030c:	bf28      	it	cs
   1030e:	f04c 0c02 	orrcs.w	ip, ip, #2
   10312:	fa43 f305 	asr.w	r3, r3, r5
   10316:	18c0      	adds	r0, r0, r3
   10318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10320:	d507      	bpl.n	10332 <__adddf3+0xe6>
   10322:	f04f 0e00 	mov.w	lr, #0
   10326:	f1dc 0c00 	rsbs	ip, ip, #0
   1032a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1032e:	eb6e 0101 	sbc.w	r1, lr, r1
   10332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10336:	d31b      	bcc.n	10370 <__adddf3+0x124>
   10338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1033c:	d30c      	bcc.n	10358 <__adddf3+0x10c>
   1033e:	0849      	lsrs	r1, r1, #1
   10340:	ea5f 0030 	movs.w	r0, r0, rrx
   10344:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10348:	f104 0401 	add.w	r4, r4, #1
   1034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10354:	f080 809a 	bcs.w	1048c <__adddf3+0x240>
   10358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1035c:	bf08      	it	eq
   1035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10362:	f150 0000 	adcs.w	r0, r0, #0
   10366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1036a:	ea41 0105 	orr.w	r1, r1, r5
   1036e:	bd30      	pop	{r4, r5, pc}
   10370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10374:	4140      	adcs	r0, r0
   10376:	eb41 0101 	adc.w	r1, r1, r1
   1037a:	3c01      	subs	r4, #1
   1037c:	bf28      	it	cs
   1037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   10382:	d2e9      	bcs.n	10358 <__adddf3+0x10c>
   10384:	f091 0f00 	teq	r1, #0
   10388:	bf04      	itt	eq
   1038a:	4601      	moveq	r1, r0
   1038c:	2000      	moveq	r0, #0
   1038e:	fab1 f381 	clz	r3, r1
   10392:	bf08      	it	eq
   10394:	3320      	addeq	r3, #32
   10396:	f1a3 030b 	sub.w	r3, r3, #11
   1039a:	f1b3 0220 	subs.w	r2, r3, #32
   1039e:	da0c      	bge.n	103ba <__adddf3+0x16e>
   103a0:	320c      	adds	r2, #12
   103a2:	dd08      	ble.n	103b6 <__adddf3+0x16a>
   103a4:	f102 0c14 	add.w	ip, r2, #20
   103a8:	f1c2 020c 	rsb	r2, r2, #12
   103ac:	fa01 f00c 	lsl.w	r0, r1, ip
   103b0:	fa21 f102 	lsr.w	r1, r1, r2
   103b4:	e00c      	b.n	103d0 <__adddf3+0x184>
   103b6:	f102 0214 	add.w	r2, r2, #20
   103ba:	bfd8      	it	le
   103bc:	f1c2 0c20 	rsble	ip, r2, #32
   103c0:	fa01 f102 	lsl.w	r1, r1, r2
   103c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   103c8:	bfdc      	itt	le
   103ca:	ea41 010c 	orrle.w	r1, r1, ip
   103ce:	4090      	lslle	r0, r2
   103d0:	1ae4      	subs	r4, r4, r3
   103d2:	bfa2      	ittt	ge
   103d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   103d8:	4329      	orrge	r1, r5
   103da:	bd30      	popge	{r4, r5, pc}
   103dc:	ea6f 0404 	mvn.w	r4, r4
   103e0:	3c1f      	subs	r4, #31
   103e2:	da1c      	bge.n	1041e <__adddf3+0x1d2>
   103e4:	340c      	adds	r4, #12
   103e6:	dc0e      	bgt.n	10406 <__adddf3+0x1ba>
   103e8:	f104 0414 	add.w	r4, r4, #20
   103ec:	f1c4 0220 	rsb	r2, r4, #32
   103f0:	fa20 f004 	lsr.w	r0, r0, r4
   103f4:	fa01 f302 	lsl.w	r3, r1, r2
   103f8:	ea40 0003 	orr.w	r0, r0, r3
   103fc:	fa21 f304 	lsr.w	r3, r1, r4
   10400:	ea45 0103 	orr.w	r1, r5, r3
   10404:	bd30      	pop	{r4, r5, pc}
   10406:	f1c4 040c 	rsb	r4, r4, #12
   1040a:	f1c4 0220 	rsb	r2, r4, #32
   1040e:	fa20 f002 	lsr.w	r0, r0, r2
   10412:	fa01 f304 	lsl.w	r3, r1, r4
   10416:	ea40 0003 	orr.w	r0, r0, r3
   1041a:	4629      	mov	r1, r5
   1041c:	bd30      	pop	{r4, r5, pc}
   1041e:	fa21 f004 	lsr.w	r0, r1, r4
   10422:	4629      	mov	r1, r5
   10424:	bd30      	pop	{r4, r5, pc}
   10426:	f094 0f00 	teq	r4, #0
   1042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1042e:	bf06      	itte	eq
   10430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10434:	3401      	addeq	r4, #1
   10436:	3d01      	subne	r5, #1
   10438:	e74e      	b.n	102d8 <__adddf3+0x8c>
   1043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1043e:	bf18      	it	ne
   10440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10444:	d029      	beq.n	1049a <__adddf3+0x24e>
   10446:	ea94 0f05 	teq	r4, r5
   1044a:	bf08      	it	eq
   1044c:	ea90 0f02 	teqeq	r0, r2
   10450:	d005      	beq.n	1045e <__adddf3+0x212>
   10452:	ea54 0c00 	orrs.w	ip, r4, r0
   10456:	bf04      	itt	eq
   10458:	4619      	moveq	r1, r3
   1045a:	4610      	moveq	r0, r2
   1045c:	bd30      	pop	{r4, r5, pc}
   1045e:	ea91 0f03 	teq	r1, r3
   10462:	bf1e      	ittt	ne
   10464:	2100      	movne	r1, #0
   10466:	2000      	movne	r0, #0
   10468:	bd30      	popne	{r4, r5, pc}
   1046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1046e:	d105      	bne.n	1047c <__adddf3+0x230>
   10470:	0040      	lsls	r0, r0, #1
   10472:	4149      	adcs	r1, r1
   10474:	bf28      	it	cs
   10476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1047a:	bd30      	pop	{r4, r5, pc}
   1047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10480:	bf3c      	itt	cc
   10482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10486:	bd30      	popcc	{r4, r5, pc}
   10488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10494:	f04f 0000 	mov.w	r0, #0
   10498:	bd30      	pop	{r4, r5, pc}
   1049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1049e:	bf1a      	itte	ne
   104a0:	4619      	movne	r1, r3
   104a2:	4610      	movne	r0, r2
   104a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   104a8:	bf1c      	itt	ne
   104aa:	460b      	movne	r3, r1
   104ac:	4602      	movne	r2, r0
   104ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   104b2:	bf06      	itte	eq
   104b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   104b8:	ea91 0f03 	teqeq	r1, r3
   104bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   104c0:	bd30      	pop	{r4, r5, pc}
   104c2:	bf00      	nop

000104c4 <__aeabi_ui2d>:
   104c4:	f090 0f00 	teq	r0, #0
   104c8:	bf04      	itt	eq
   104ca:	2100      	moveq	r1, #0
   104cc:	4770      	bxeq	lr
   104ce:	b530      	push	{r4, r5, lr}
   104d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104d8:	f04f 0500 	mov.w	r5, #0
   104dc:	f04f 0100 	mov.w	r1, #0
   104e0:	e750      	b.n	10384 <__adddf3+0x138>
   104e2:	bf00      	nop

000104e4 <__aeabi_i2d>:
   104e4:	f090 0f00 	teq	r0, #0
   104e8:	bf04      	itt	eq
   104ea:	2100      	moveq	r1, #0
   104ec:	4770      	bxeq	lr
   104ee:	b530      	push	{r4, r5, lr}
   104f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   104fc:	bf48      	it	mi
   104fe:	4240      	negmi	r0, r0
   10500:	f04f 0100 	mov.w	r1, #0
   10504:	e73e      	b.n	10384 <__adddf3+0x138>
   10506:	bf00      	nop

00010508 <__aeabi_f2d>:
   10508:	0042      	lsls	r2, r0, #1
   1050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1050e:	ea4f 0131 	mov.w	r1, r1, rrx
   10512:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10516:	bf1f      	itttt	ne
   10518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10524:	4770      	bxne	lr
   10526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1052a:	bf08      	it	eq
   1052c:	4770      	bxeq	lr
   1052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   10532:	bf04      	itt	eq
   10534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   10538:	4770      	bxeq	lr
   1053a:	b530      	push	{r4, r5, lr}
   1053c:	f44f 7460 	mov.w	r4, #896	; 0x380
   10540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10548:	e71c      	b.n	10384 <__adddf3+0x138>
   1054a:	bf00      	nop

0001054c <__aeabi_ul2d>:
   1054c:	ea50 0201 	orrs.w	r2, r0, r1
   10550:	bf08      	it	eq
   10552:	4770      	bxeq	lr
   10554:	b530      	push	{r4, r5, lr}
   10556:	f04f 0500 	mov.w	r5, #0
   1055a:	e00a      	b.n	10572 <__aeabi_l2d+0x16>

0001055c <__aeabi_l2d>:
   1055c:	ea50 0201 	orrs.w	r2, r0, r1
   10560:	bf08      	it	eq
   10562:	4770      	bxeq	lr
   10564:	b530      	push	{r4, r5, lr}
   10566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1056a:	d502      	bpl.n	10572 <__aeabi_l2d+0x16>
   1056c:	4240      	negs	r0, r0
   1056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10572:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10576:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1057e:	f43f aed8 	beq.w	10332 <__adddf3+0xe6>
   10582:	f04f 0203 	mov.w	r2, #3
   10586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1058a:	bf18      	it	ne
   1058c:	3203      	addne	r2, #3
   1058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10592:	bf18      	it	ne
   10594:	3203      	addne	r2, #3
   10596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1059a:	f1c2 0320 	rsb	r3, r2, #32
   1059e:	fa00 fc03 	lsl.w	ip, r0, r3
   105a2:	fa20 f002 	lsr.w	r0, r0, r2
   105a6:	fa01 fe03 	lsl.w	lr, r1, r3
   105aa:	ea40 000e 	orr.w	r0, r0, lr
   105ae:	fa21 f102 	lsr.w	r1, r1, r2
   105b2:	4414      	add	r4, r2
   105b4:	e6bd      	b.n	10332 <__adddf3+0xe6>
   105b6:	bf00      	nop

000105b8 <__aeabi_dmul>:
   105b8:	b570      	push	{r4, r5, r6, lr}
   105ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   105be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   105c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   105c6:	bf1d      	ittte	ne
   105c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   105cc:	ea94 0f0c 	teqne	r4, ip
   105d0:	ea95 0f0c 	teqne	r5, ip
   105d4:	f000 f8de 	bleq	10794 <__aeabi_dmul+0x1dc>
   105d8:	442c      	add	r4, r5
   105da:	ea81 0603 	eor.w	r6, r1, r3
   105de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   105e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   105e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   105ea:	bf18      	it	ne
   105ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   105f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   105f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   105f8:	d038      	beq.n	1066c <__aeabi_dmul+0xb4>
   105fa:	fba0 ce02 	umull	ip, lr, r0, r2
   105fe:	f04f 0500 	mov.w	r5, #0
   10602:	fbe1 e502 	umlal	lr, r5, r1, r2
   10606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1060a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1060e:	f04f 0600 	mov.w	r6, #0
   10612:	fbe1 5603 	umlal	r5, r6, r1, r3
   10616:	f09c 0f00 	teq	ip, #0
   1061a:	bf18      	it	ne
   1061c:	f04e 0e01 	orrne.w	lr, lr, #1
   10620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1062c:	d204      	bcs.n	10638 <__aeabi_dmul+0x80>
   1062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10632:	416d      	adcs	r5, r5
   10634:	eb46 0606 	adc.w	r6, r6, r6
   10638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   10648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10650:	bf88      	it	hi
   10652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10656:	d81e      	bhi.n	10696 <__aeabi_dmul+0xde>
   10658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1065c:	bf08      	it	eq
   1065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10662:	f150 0000 	adcs.w	r0, r0, #0
   10666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1066a:	bd70      	pop	{r4, r5, r6, pc}
   1066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10670:	ea46 0101 	orr.w	r1, r6, r1
   10674:	ea40 0002 	orr.w	r0, r0, r2
   10678:	ea81 0103 	eor.w	r1, r1, r3
   1067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10680:	bfc2      	ittt	gt
   10682:	ebd4 050c 	rsbsgt	r5, r4, ip
   10686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1068a:	bd70      	popgt	{r4, r5, r6, pc}
   1068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10690:	f04f 0e00 	mov.w	lr, #0
   10694:	3c01      	subs	r4, #1
   10696:	f300 80ab 	bgt.w	107f0 <__aeabi_dmul+0x238>
   1069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1069e:	bfde      	ittt	le
   106a0:	2000      	movle	r0, #0
   106a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   106a6:	bd70      	pople	{r4, r5, r6, pc}
   106a8:	f1c4 0400 	rsb	r4, r4, #0
   106ac:	3c20      	subs	r4, #32
   106ae:	da35      	bge.n	1071c <__aeabi_dmul+0x164>
   106b0:	340c      	adds	r4, #12
   106b2:	dc1b      	bgt.n	106ec <__aeabi_dmul+0x134>
   106b4:	f104 0414 	add.w	r4, r4, #20
   106b8:	f1c4 0520 	rsb	r5, r4, #32
   106bc:	fa00 f305 	lsl.w	r3, r0, r5
   106c0:	fa20 f004 	lsr.w	r0, r0, r4
   106c4:	fa01 f205 	lsl.w	r2, r1, r5
   106c8:	ea40 0002 	orr.w	r0, r0, r2
   106cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   106d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   106d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   106d8:	fa21 f604 	lsr.w	r6, r1, r4
   106dc:	eb42 0106 	adc.w	r1, r2, r6
   106e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   106e4:	bf08      	it	eq
   106e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   106ea:	bd70      	pop	{r4, r5, r6, pc}
   106ec:	f1c4 040c 	rsb	r4, r4, #12
   106f0:	f1c4 0520 	rsb	r5, r4, #32
   106f4:	fa00 f304 	lsl.w	r3, r0, r4
   106f8:	fa20 f005 	lsr.w	r0, r0, r5
   106fc:	fa01 f204 	lsl.w	r2, r1, r4
   10700:	ea40 0002 	orr.w	r0, r0, r2
   10704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1070c:	f141 0100 	adc.w	r1, r1, #0
   10710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10714:	bf08      	it	eq
   10716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1071a:	bd70      	pop	{r4, r5, r6, pc}
   1071c:	f1c4 0520 	rsb	r5, r4, #32
   10720:	fa00 f205 	lsl.w	r2, r0, r5
   10724:	ea4e 0e02 	orr.w	lr, lr, r2
   10728:	fa20 f304 	lsr.w	r3, r0, r4
   1072c:	fa01 f205 	lsl.w	r2, r1, r5
   10730:	ea43 0302 	orr.w	r3, r3, r2
   10734:	fa21 f004 	lsr.w	r0, r1, r4
   10738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1073c:	fa21 f204 	lsr.w	r2, r1, r4
   10740:	ea20 0002 	bic.w	r0, r0, r2
   10744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   10748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1074c:	bf08      	it	eq
   1074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10752:	bd70      	pop	{r4, r5, r6, pc}
   10754:	f094 0f00 	teq	r4, #0
   10758:	d10f      	bne.n	1077a <__aeabi_dmul+0x1c2>
   1075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1075e:	0040      	lsls	r0, r0, #1
   10760:	eb41 0101 	adc.w	r1, r1, r1
   10764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10768:	bf08      	it	eq
   1076a:	3c01      	subeq	r4, #1
   1076c:	d0f7      	beq.n	1075e <__aeabi_dmul+0x1a6>
   1076e:	ea41 0106 	orr.w	r1, r1, r6
   10772:	f095 0f00 	teq	r5, #0
   10776:	bf18      	it	ne
   10778:	4770      	bxne	lr
   1077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1077e:	0052      	lsls	r2, r2, #1
   10780:	eb43 0303 	adc.w	r3, r3, r3
   10784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   10788:	bf08      	it	eq
   1078a:	3d01      	subeq	r5, #1
   1078c:	d0f7      	beq.n	1077e <__aeabi_dmul+0x1c6>
   1078e:	ea43 0306 	orr.w	r3, r3, r6
   10792:	4770      	bx	lr
   10794:	ea94 0f0c 	teq	r4, ip
   10798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1079c:	bf18      	it	ne
   1079e:	ea95 0f0c 	teqne	r5, ip
   107a2:	d00c      	beq.n	107be <__aeabi_dmul+0x206>
   107a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107a8:	bf18      	it	ne
   107aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107ae:	d1d1      	bne.n	10754 <__aeabi_dmul+0x19c>
   107b0:	ea81 0103 	eor.w	r1, r1, r3
   107b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107b8:	f04f 0000 	mov.w	r0, #0
   107bc:	bd70      	pop	{r4, r5, r6, pc}
   107be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107c2:	bf06      	itte	eq
   107c4:	4610      	moveq	r0, r2
   107c6:	4619      	moveq	r1, r3
   107c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107cc:	d019      	beq.n	10802 <__aeabi_dmul+0x24a>
   107ce:	ea94 0f0c 	teq	r4, ip
   107d2:	d102      	bne.n	107da <__aeabi_dmul+0x222>
   107d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   107d8:	d113      	bne.n	10802 <__aeabi_dmul+0x24a>
   107da:	ea95 0f0c 	teq	r5, ip
   107de:	d105      	bne.n	107ec <__aeabi_dmul+0x234>
   107e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   107e4:	bf1c      	itt	ne
   107e6:	4610      	movne	r0, r2
   107e8:	4619      	movne	r1, r3
   107ea:	d10a      	bne.n	10802 <__aeabi_dmul+0x24a>
   107ec:	ea81 0103 	eor.w	r1, r1, r3
   107f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   107f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   107fc:	f04f 0000 	mov.w	r0, #0
   10800:	bd70      	pop	{r4, r5, r6, pc}
   10802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1080a:	bd70      	pop	{r4, r5, r6, pc}

0001080c <__aeabi_ddiv>:
   1080c:	b570      	push	{r4, r5, r6, lr}
   1080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1081a:	bf1d      	ittte	ne
   1081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10820:	ea94 0f0c 	teqne	r4, ip
   10824:	ea95 0f0c 	teqne	r5, ip
   10828:	f000 f8a7 	bleq	1097a <__aeabi_ddiv+0x16e>
   1082c:	eba4 0405 	sub.w	r4, r4, r5
   10830:	ea81 0e03 	eor.w	lr, r1, r3
   10834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10838:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1083c:	f000 8088 	beq.w	10950 <__aeabi_ddiv+0x144>
   10840:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   10848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10850:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   10858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10864:	429d      	cmp	r5, r3
   10866:	bf08      	it	eq
   10868:	4296      	cmpeq	r6, r2
   1086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   10872:	d202      	bcs.n	1087a <__aeabi_ddiv+0x6e>
   10874:	085b      	lsrs	r3, r3, #1
   10876:	ea4f 0232 	mov.w	r2, r2, rrx
   1087a:	1ab6      	subs	r6, r6, r2
   1087c:	eb65 0503 	sbc.w	r5, r5, r3
   10880:	085b      	lsrs	r3, r3, #1
   10882:	ea4f 0232 	mov.w	r2, r2, rrx
   10886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1088e:	ebb6 0e02 	subs.w	lr, r6, r2
   10892:	eb75 0e03 	sbcs.w	lr, r5, r3
   10896:	bf22      	ittt	cs
   10898:	1ab6      	subcs	r6, r6, r2
   1089a:	4675      	movcs	r5, lr
   1089c:	ea40 000c 	orrcs.w	r0, r0, ip
   108a0:	085b      	lsrs	r3, r3, #1
   108a2:	ea4f 0232 	mov.w	r2, r2, rrx
   108a6:	ebb6 0e02 	subs.w	lr, r6, r2
   108aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   108ae:	bf22      	ittt	cs
   108b0:	1ab6      	subcs	r6, r6, r2
   108b2:	4675      	movcs	r5, lr
   108b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   108b8:	085b      	lsrs	r3, r3, #1
   108ba:	ea4f 0232 	mov.w	r2, r2, rrx
   108be:	ebb6 0e02 	subs.w	lr, r6, r2
   108c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   108c6:	bf22      	ittt	cs
   108c8:	1ab6      	subcs	r6, r6, r2
   108ca:	4675      	movcs	r5, lr
   108cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   108d0:	085b      	lsrs	r3, r3, #1
   108d2:	ea4f 0232 	mov.w	r2, r2, rrx
   108d6:	ebb6 0e02 	subs.w	lr, r6, r2
   108da:	eb75 0e03 	sbcs.w	lr, r5, r3
   108de:	bf22      	ittt	cs
   108e0:	1ab6      	subcs	r6, r6, r2
   108e2:	4675      	movcs	r5, lr
   108e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   108e8:	ea55 0e06 	orrs.w	lr, r5, r6
   108ec:	d018      	beq.n	10920 <__aeabi_ddiv+0x114>
   108ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   108f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   108f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   108fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   108fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1090a:	d1c0      	bne.n	1088e <__aeabi_ddiv+0x82>
   1090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10910:	d10b      	bne.n	1092a <__aeabi_ddiv+0x11e>
   10912:	ea41 0100 	orr.w	r1, r1, r0
   10916:	f04f 0000 	mov.w	r0, #0
   1091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1091e:	e7b6      	b.n	1088e <__aeabi_ddiv+0x82>
   10920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10924:	bf04      	itt	eq
   10926:	4301      	orreq	r1, r0
   10928:	2000      	moveq	r0, #0
   1092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1092e:	bf88      	it	hi
   10930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10934:	f63f aeaf 	bhi.w	10696 <__aeabi_dmul+0xde>
   10938:	ebb5 0c03 	subs.w	ip, r5, r3
   1093c:	bf04      	itt	eq
   1093e:	ebb6 0c02 	subseq.w	ip, r6, r2
   10942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10946:	f150 0000 	adcs.w	r0, r0, #0
   1094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1094e:	bd70      	pop	{r4, r5, r6, pc}
   10950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1095c:	bfc2      	ittt	gt
   1095e:	ebd4 050c 	rsbsgt	r5, r4, ip
   10962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10966:	bd70      	popgt	{r4, r5, r6, pc}
   10968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1096c:	f04f 0e00 	mov.w	lr, #0
   10970:	3c01      	subs	r4, #1
   10972:	e690      	b.n	10696 <__aeabi_dmul+0xde>
   10974:	ea45 0e06 	orr.w	lr, r5, r6
   10978:	e68d      	b.n	10696 <__aeabi_dmul+0xde>
   1097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1097e:	ea94 0f0c 	teq	r4, ip
   10982:	bf08      	it	eq
   10984:	ea95 0f0c 	teqeq	r5, ip
   10988:	f43f af3b 	beq.w	10802 <__aeabi_dmul+0x24a>
   1098c:	ea94 0f0c 	teq	r4, ip
   10990:	d10a      	bne.n	109a8 <__aeabi_ddiv+0x19c>
   10992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10996:	f47f af34 	bne.w	10802 <__aeabi_dmul+0x24a>
   1099a:	ea95 0f0c 	teq	r5, ip
   1099e:	f47f af25 	bne.w	107ec <__aeabi_dmul+0x234>
   109a2:	4610      	mov	r0, r2
   109a4:	4619      	mov	r1, r3
   109a6:	e72c      	b.n	10802 <__aeabi_dmul+0x24a>
   109a8:	ea95 0f0c 	teq	r5, ip
   109ac:	d106      	bne.n	109bc <__aeabi_ddiv+0x1b0>
   109ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   109b2:	f43f aefd 	beq.w	107b0 <__aeabi_dmul+0x1f8>
   109b6:	4610      	mov	r0, r2
   109b8:	4619      	mov	r1, r3
   109ba:	e722      	b.n	10802 <__aeabi_dmul+0x24a>
   109bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   109c0:	bf18      	it	ne
   109c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   109c6:	f47f aec5 	bne.w	10754 <__aeabi_dmul+0x19c>
   109ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   109ce:	f47f af0d 	bne.w	107ec <__aeabi_dmul+0x234>
   109d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   109d6:	f47f aeeb 	bne.w	107b0 <__aeabi_dmul+0x1f8>
   109da:	e712      	b.n	10802 <__aeabi_dmul+0x24a>

000109dc <__aeabi_d2f>:
   109dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   109e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   109e4:	bf24      	itt	cs
   109e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   109ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   109ee:	d90d      	bls.n	10a0c <__aeabi_d2f+0x30>
   109f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   109f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   109f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   109fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10a04:	bf08      	it	eq
   10a06:	f020 0001 	biceq.w	r0, r0, #1
   10a0a:	4770      	bx	lr
   10a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10a10:	d121      	bne.n	10a56 <__aeabi_d2f+0x7a>
   10a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10a16:	bfbc      	itt	lt
   10a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10a1c:	4770      	bxlt	lr
   10a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10a26:	f1c2 0218 	rsb	r2, r2, #24
   10a2a:	f1c2 0c20 	rsb	ip, r2, #32
   10a2e:	fa10 f30c 	lsls.w	r3, r0, ip
   10a32:	fa20 f002 	lsr.w	r0, r0, r2
   10a36:	bf18      	it	ne
   10a38:	f040 0001 	orrne.w	r0, r0, #1
   10a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10a44:	fa03 fc0c 	lsl.w	ip, r3, ip
   10a48:	ea40 000c 	orr.w	r0, r0, ip
   10a4c:	fa23 f302 	lsr.w	r3, r3, r2
   10a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10a54:	e7cc      	b.n	109f0 <__aeabi_d2f+0x14>
   10a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10a5a:	d107      	bne.n	10a6c <__aeabi_d2f+0x90>
   10a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10a60:	bf1e      	ittt	ne
   10a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10a6a:	4770      	bxne	lr
   10a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10a78:	4770      	bx	lr
   10a7a:	bf00      	nop

00010a7c <__aeabi_ldivmod>:
   10a7c:	b97b      	cbnz	r3, 10a9e <__aeabi_ldivmod+0x22>
   10a7e:	b972      	cbnz	r2, 10a9e <__aeabi_ldivmod+0x22>
   10a80:	2900      	cmp	r1, #0
   10a82:	bfbe      	ittt	lt
   10a84:	2000      	movlt	r0, #0
   10a86:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   10a8a:	e006      	blt.n	10a9a <__aeabi_ldivmod+0x1e>
   10a8c:	bf08      	it	eq
   10a8e:	2800      	cmpeq	r0, #0
   10a90:	bf1c      	itt	ne
   10a92:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   10a96:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10a9a:	f000 b9b7 	b.w	10e0c <__aeabi_idiv0>
   10a9e:	f1ad 0c08 	sub.w	ip, sp, #8
   10aa2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10aa6:	2900      	cmp	r1, #0
   10aa8:	db09      	blt.n	10abe <__aeabi_ldivmod+0x42>
   10aaa:	2b00      	cmp	r3, #0
   10aac:	db1a      	blt.n	10ae4 <__aeabi_ldivmod+0x68>
   10aae:	f000 f84d 	bl	10b4c <__udivmoddi4>
   10ab2:	f8dd e004 	ldr.w	lr, [sp, #4]
   10ab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10aba:	b004      	add	sp, #16
   10abc:	4770      	bx	lr
   10abe:	4240      	negs	r0, r0
   10ac0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10ac4:	2b00      	cmp	r3, #0
   10ac6:	db1b      	blt.n	10b00 <__aeabi_ldivmod+0x84>
   10ac8:	f000 f840 	bl	10b4c <__udivmoddi4>
   10acc:	f8dd e004 	ldr.w	lr, [sp, #4]
   10ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10ad4:	b004      	add	sp, #16
   10ad6:	4240      	negs	r0, r0
   10ad8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10adc:	4252      	negs	r2, r2
   10ade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10ae2:	4770      	bx	lr
   10ae4:	4252      	negs	r2, r2
   10ae6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10aea:	f000 f82f 	bl	10b4c <__udivmoddi4>
   10aee:	f8dd e004 	ldr.w	lr, [sp, #4]
   10af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10af6:	b004      	add	sp, #16
   10af8:	4240      	negs	r0, r0
   10afa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10afe:	4770      	bx	lr
   10b00:	4252      	negs	r2, r2
   10b02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10b06:	f000 f821 	bl	10b4c <__udivmoddi4>
   10b0a:	f8dd e004 	ldr.w	lr, [sp, #4]
   10b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10b12:	b004      	add	sp, #16
   10b14:	4252      	negs	r2, r2
   10b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10b1a:	4770      	bx	lr

00010b1c <__aeabi_uldivmod>:
   10b1c:	b953      	cbnz	r3, 10b34 <__aeabi_uldivmod+0x18>
   10b1e:	b94a      	cbnz	r2, 10b34 <__aeabi_uldivmod+0x18>
   10b20:	2900      	cmp	r1, #0
   10b22:	bf08      	it	eq
   10b24:	2800      	cmpeq	r0, #0
   10b26:	bf1c      	itt	ne
   10b28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   10b2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10b30:	f000 b96c 	b.w	10e0c <__aeabi_idiv0>
   10b34:	f1ad 0c08 	sub.w	ip, sp, #8
   10b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10b3c:	f000 f806 	bl	10b4c <__udivmoddi4>
   10b40:	f8dd e004 	ldr.w	lr, [sp, #4]
   10b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10b48:	b004      	add	sp, #16
   10b4a:	4770      	bx	lr

00010b4c <__udivmoddi4>:
   10b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b50:	9d08      	ldr	r5, [sp, #32]
   10b52:	4604      	mov	r4, r0
   10b54:	4688      	mov	r8, r1
   10b56:	2b00      	cmp	r3, #0
   10b58:	d17d      	bne.n	10c56 <__udivmoddi4+0x10a>
   10b5a:	428a      	cmp	r2, r1
   10b5c:	4617      	mov	r7, r2
   10b5e:	d93f      	bls.n	10be0 <__udivmoddi4+0x94>
   10b60:	fab2 f282 	clz	r2, r2
   10b64:	b142      	cbz	r2, 10b78 <__udivmoddi4+0x2c>
   10b66:	f1c2 0020 	rsb	r0, r2, #32
   10b6a:	4091      	lsls	r1, r2
   10b6c:	4097      	lsls	r7, r2
   10b6e:	fa24 f000 	lsr.w	r0, r4, r0
   10b72:	4094      	lsls	r4, r2
   10b74:	ea40 0801 	orr.w	r8, r0, r1
   10b78:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   10b7c:	0c23      	lsrs	r3, r4, #16
   10b7e:	fa1f fe87 	uxth.w	lr, r7
   10b82:	fbb8 f6fc 	udiv	r6, r8, ip
   10b86:	fb0c 8116 	mls	r1, ip, r6, r8
   10b8a:	fb06 f00e 	mul.w	r0, r6, lr
   10b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   10b92:	4298      	cmp	r0, r3
   10b94:	d905      	bls.n	10ba2 <__udivmoddi4+0x56>
   10b96:	18fb      	adds	r3, r7, r3
   10b98:	d202      	bcs.n	10ba0 <__udivmoddi4+0x54>
   10b9a:	4298      	cmp	r0, r3
   10b9c:	f200 8124 	bhi.w	10de8 <__udivmoddi4+0x29c>
   10ba0:	3e01      	subs	r6, #1
   10ba2:	1a19      	subs	r1, r3, r0
   10ba4:	b2a3      	uxth	r3, r4
   10ba6:	fbb1 f0fc 	udiv	r0, r1, ip
   10baa:	fb0c 1110 	mls	r1, ip, r0, r1
   10bae:	fb00 fe0e 	mul.w	lr, r0, lr
   10bb2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10bb6:	45a6      	cmp	lr, r4
   10bb8:	d905      	bls.n	10bc6 <__udivmoddi4+0x7a>
   10bba:	193c      	adds	r4, r7, r4
   10bbc:	d202      	bcs.n	10bc4 <__udivmoddi4+0x78>
   10bbe:	45a6      	cmp	lr, r4
   10bc0:	f200 810f 	bhi.w	10de2 <__udivmoddi4+0x296>
   10bc4:	3801      	subs	r0, #1
   10bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   10bca:	eba4 040e 	sub.w	r4, r4, lr
   10bce:	2600      	movs	r6, #0
   10bd0:	b11d      	cbz	r5, 10bda <__udivmoddi4+0x8e>
   10bd2:	40d4      	lsrs	r4, r2
   10bd4:	2300      	movs	r3, #0
   10bd6:	e9c5 4300 	strd	r4, r3, [r5]
   10bda:	4631      	mov	r1, r6
   10bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10be0:	b902      	cbnz	r2, 10be4 <__udivmoddi4+0x98>
   10be2:	deff      	udf	#255	; 0xff
   10be4:	fab2 f282 	clz	r2, r2
   10be8:	2a00      	cmp	r2, #0
   10bea:	d150      	bne.n	10c8e <__udivmoddi4+0x142>
   10bec:	1bcb      	subs	r3, r1, r7
   10bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10bf2:	fa1f f887 	uxth.w	r8, r7
   10bf6:	2601      	movs	r6, #1
   10bf8:	0c21      	lsrs	r1, r4, #16
   10bfa:	fbb3 fcfe 	udiv	ip, r3, lr
   10bfe:	fb0e 301c 	mls	r0, lr, ip, r3
   10c02:	460b      	mov	r3, r1
   10c04:	fb08 f90c 	mul.w	r9, r8, ip
   10c08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10c0c:	4589      	cmp	r9, r1
   10c0e:	d90a      	bls.n	10c26 <__udivmoddi4+0xda>
   10c10:	1879      	adds	r1, r7, r1
   10c12:	bf2c      	ite	cs
   10c14:	2301      	movcs	r3, #1
   10c16:	2300      	movcc	r3, #0
   10c18:	4589      	cmp	r9, r1
   10c1a:	d902      	bls.n	10c22 <__udivmoddi4+0xd6>
   10c1c:	2b00      	cmp	r3, #0
   10c1e:	f000 80d9 	beq.w	10dd4 <__udivmoddi4+0x288>
   10c22:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10c26:	eba1 0109 	sub.w	r1, r1, r9
   10c2a:	b2a3      	uxth	r3, r4
   10c2c:	fbb1 f0fe 	udiv	r0, r1, lr
   10c30:	fb0e 1110 	mls	r1, lr, r0, r1
   10c34:	fb08 f800 	mul.w	r8, r8, r0
   10c38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10c3c:	45a0      	cmp	r8, r4
   10c3e:	d905      	bls.n	10c4c <__udivmoddi4+0x100>
   10c40:	193c      	adds	r4, r7, r4
   10c42:	d202      	bcs.n	10c4a <__udivmoddi4+0xfe>
   10c44:	45a0      	cmp	r8, r4
   10c46:	f200 80c9 	bhi.w	10ddc <__udivmoddi4+0x290>
   10c4a:	3801      	subs	r0, #1
   10c4c:	eba4 0408 	sub.w	r4, r4, r8
   10c50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10c54:	e7bc      	b.n	10bd0 <__udivmoddi4+0x84>
   10c56:	428b      	cmp	r3, r1
   10c58:	d909      	bls.n	10c6e <__udivmoddi4+0x122>
   10c5a:	2d00      	cmp	r5, #0
   10c5c:	f000 80b1 	beq.w	10dc2 <__udivmoddi4+0x276>
   10c60:	2600      	movs	r6, #0
   10c62:	e9c5 0100 	strd	r0, r1, [r5]
   10c66:	4630      	mov	r0, r6
   10c68:	4631      	mov	r1, r6
   10c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c6e:	fab3 f683 	clz	r6, r3
   10c72:	2e00      	cmp	r6, #0
   10c74:	d146      	bne.n	10d04 <__udivmoddi4+0x1b8>
   10c76:	428b      	cmp	r3, r1
   10c78:	f0c0 80a6 	bcc.w	10dc8 <__udivmoddi4+0x27c>
   10c7c:	4282      	cmp	r2, r0
   10c7e:	f240 80a3 	bls.w	10dc8 <__udivmoddi4+0x27c>
   10c82:	4630      	mov	r0, r6
   10c84:	2d00      	cmp	r5, #0
   10c86:	d0a8      	beq.n	10bda <__udivmoddi4+0x8e>
   10c88:	e9c5 4800 	strd	r4, r8, [r5]
   10c8c:	e7a5      	b.n	10bda <__udivmoddi4+0x8e>
   10c8e:	4097      	lsls	r7, r2
   10c90:	f1c2 0320 	rsb	r3, r2, #32
   10c94:	fa01 f002 	lsl.w	r0, r1, r2
   10c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10c9c:	40d9      	lsrs	r1, r3
   10c9e:	fa24 f303 	lsr.w	r3, r4, r3
   10ca2:	fa1f f887 	uxth.w	r8, r7
   10ca6:	4094      	lsls	r4, r2
   10ca8:	4303      	orrs	r3, r0
   10caa:	fbb1 f0fe 	udiv	r0, r1, lr
   10cae:	0c1e      	lsrs	r6, r3, #16
   10cb0:	fb0e 1110 	mls	r1, lr, r0, r1
   10cb4:	fb00 fc08 	mul.w	ip, r0, r8
   10cb8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   10cbc:	458c      	cmp	ip, r1
   10cbe:	d909      	bls.n	10cd4 <__udivmoddi4+0x188>
   10cc0:	1879      	adds	r1, r7, r1
   10cc2:	bf2c      	ite	cs
   10cc4:	2601      	movcs	r6, #1
   10cc6:	2600      	movcc	r6, #0
   10cc8:	458c      	cmp	ip, r1
   10cca:	d902      	bls.n	10cd2 <__udivmoddi4+0x186>
   10ccc:	2e00      	cmp	r6, #0
   10cce:	f000 8093 	beq.w	10df8 <__udivmoddi4+0x2ac>
   10cd2:	3801      	subs	r0, #1
   10cd4:	eba1 010c 	sub.w	r1, r1, ip
   10cd8:	b29b      	uxth	r3, r3
   10cda:	fbb1 f6fe 	udiv	r6, r1, lr
   10cde:	fb0e 1116 	mls	r1, lr, r6, r1
   10ce2:	fb06 fc08 	mul.w	ip, r6, r8
   10ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   10cea:	458c      	cmp	ip, r1
   10cec:	d905      	bls.n	10cfa <__udivmoddi4+0x1ae>
   10cee:	1879      	adds	r1, r7, r1
   10cf0:	d202      	bcs.n	10cf8 <__udivmoddi4+0x1ac>
   10cf2:	458c      	cmp	ip, r1
   10cf4:	f200 8087 	bhi.w	10e06 <__udivmoddi4+0x2ba>
   10cf8:	3e01      	subs	r6, #1
   10cfa:	eba1 030c 	sub.w	r3, r1, ip
   10cfe:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   10d02:	e779      	b.n	10bf8 <__udivmoddi4+0xac>
   10d04:	f1c6 0720 	rsb	r7, r6, #32
   10d08:	fa03 f406 	lsl.w	r4, r3, r6
   10d0c:	fa02 fc06 	lsl.w	ip, r2, r6
   10d10:	fa01 fe06 	lsl.w	lr, r1, r6
   10d14:	40fa      	lsrs	r2, r7
   10d16:	fa20 f807 	lsr.w	r8, r0, r7
   10d1a:	40f9      	lsrs	r1, r7
   10d1c:	fa00 f306 	lsl.w	r3, r0, r6
   10d20:	4322      	orrs	r2, r4
   10d22:	ea48 040e 	orr.w	r4, r8, lr
   10d26:	ea4f 4812 	mov.w	r8, r2, lsr #16
   10d2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   10d2e:	fa1f f982 	uxth.w	r9, r2
   10d32:	fbb1 faf8 	udiv	sl, r1, r8
   10d36:	fb08 111a 	mls	r1, r8, sl, r1
   10d3a:	fb0a f009 	mul.w	r0, sl, r9
   10d3e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   10d42:	4570      	cmp	r0, lr
   10d44:	d90a      	bls.n	10d5c <__udivmoddi4+0x210>
   10d46:	eb12 0e0e 	adds.w	lr, r2, lr
   10d4a:	bf2c      	ite	cs
   10d4c:	2101      	movcs	r1, #1
   10d4e:	2100      	movcc	r1, #0
   10d50:	4570      	cmp	r0, lr
   10d52:	d901      	bls.n	10d58 <__udivmoddi4+0x20c>
   10d54:	2900      	cmp	r1, #0
   10d56:	d052      	beq.n	10dfe <__udivmoddi4+0x2b2>
   10d58:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   10d5c:	ebae 0e00 	sub.w	lr, lr, r0
   10d60:	b2a4      	uxth	r4, r4
   10d62:	fbbe f0f8 	udiv	r0, lr, r8
   10d66:	fb08 ee10 	mls	lr, r8, r0, lr
   10d6a:	fb00 f909 	mul.w	r9, r0, r9
   10d6e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   10d72:	45f1      	cmp	r9, lr
   10d74:	d905      	bls.n	10d82 <__udivmoddi4+0x236>
   10d76:	eb12 0e0e 	adds.w	lr, r2, lr
   10d7a:	d201      	bcs.n	10d80 <__udivmoddi4+0x234>
   10d7c:	45f1      	cmp	r9, lr
   10d7e:	d838      	bhi.n	10df2 <__udivmoddi4+0x2a6>
   10d80:	3801      	subs	r0, #1
   10d82:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   10d86:	ebae 0e09 	sub.w	lr, lr, r9
   10d8a:	fba0 890c 	umull	r8, r9, r0, ip
   10d8e:	45ce      	cmp	lr, r9
   10d90:	4641      	mov	r1, r8
   10d92:	464c      	mov	r4, r9
   10d94:	d302      	bcc.n	10d9c <__udivmoddi4+0x250>
   10d96:	d106      	bne.n	10da6 <__udivmoddi4+0x25a>
   10d98:	4543      	cmp	r3, r8
   10d9a:	d204      	bcs.n	10da6 <__udivmoddi4+0x25a>
   10d9c:	3801      	subs	r0, #1
   10d9e:	ebb8 010c 	subs.w	r1, r8, ip
   10da2:	eb69 0402 	sbc.w	r4, r9, r2
   10da6:	b315      	cbz	r5, 10dee <__udivmoddi4+0x2a2>
   10da8:	1a5a      	subs	r2, r3, r1
   10daa:	eb6e 0e04 	sbc.w	lr, lr, r4
   10dae:	40f2      	lsrs	r2, r6
   10db0:	fa0e f707 	lsl.w	r7, lr, r7
   10db4:	fa2e f306 	lsr.w	r3, lr, r6
   10db8:	2600      	movs	r6, #0
   10dba:	4317      	orrs	r7, r2
   10dbc:	e9c5 7300 	strd	r7, r3, [r5]
   10dc0:	e70b      	b.n	10bda <__udivmoddi4+0x8e>
   10dc2:	462e      	mov	r6, r5
   10dc4:	4628      	mov	r0, r5
   10dc6:	e708      	b.n	10bda <__udivmoddi4+0x8e>
   10dc8:	1a84      	subs	r4, r0, r2
   10dca:	eb61 0103 	sbc.w	r1, r1, r3
   10dce:	2001      	movs	r0, #1
   10dd0:	4688      	mov	r8, r1
   10dd2:	e757      	b.n	10c84 <__udivmoddi4+0x138>
   10dd4:	f1ac 0c02 	sub.w	ip, ip, #2
   10dd8:	4439      	add	r1, r7
   10dda:	e724      	b.n	10c26 <__udivmoddi4+0xda>
   10ddc:	3802      	subs	r0, #2
   10dde:	443c      	add	r4, r7
   10de0:	e734      	b.n	10c4c <__udivmoddi4+0x100>
   10de2:	3802      	subs	r0, #2
   10de4:	443c      	add	r4, r7
   10de6:	e6ee      	b.n	10bc6 <__udivmoddi4+0x7a>
   10de8:	3e02      	subs	r6, #2
   10dea:	443b      	add	r3, r7
   10dec:	e6d9      	b.n	10ba2 <__udivmoddi4+0x56>
   10dee:	462e      	mov	r6, r5
   10df0:	e6f3      	b.n	10bda <__udivmoddi4+0x8e>
   10df2:	3802      	subs	r0, #2
   10df4:	4496      	add	lr, r2
   10df6:	e7c4      	b.n	10d82 <__udivmoddi4+0x236>
   10df8:	3802      	subs	r0, #2
   10dfa:	4439      	add	r1, r7
   10dfc:	e76a      	b.n	10cd4 <__udivmoddi4+0x188>
   10dfe:	f1aa 0a02 	sub.w	sl, sl, #2
   10e02:	4496      	add	lr, r2
   10e04:	e7aa      	b.n	10d5c <__udivmoddi4+0x210>
   10e06:	3e02      	subs	r6, #2
   10e08:	4439      	add	r1, r7
   10e0a:	e776      	b.n	10cfa <__udivmoddi4+0x1ae>

00010e0c <__aeabi_idiv0>:
   10e0c:	4770      	bx	lr
   10e0e:	bf00      	nop

00010e10 <strcmp>:
   10e10:	f810 2b01 	ldrb.w	r2, [r0], #1
   10e14:	f811 3b01 	ldrb.w	r3, [r1], #1
   10e18:	2a01      	cmp	r2, #1
   10e1a:	bf28      	it	cs
   10e1c:	429a      	cmpcs	r2, r3
   10e1e:	d0f7      	beq.n	10e10 <strcmp>
   10e20:	1ad0      	subs	r0, r2, r3
   10e22:	4770      	bx	lr

00010e24 <strlen>:
   10e24:	4603      	mov	r3, r0
   10e26:	f813 2b01 	ldrb.w	r2, [r3], #1
   10e2a:	2a00      	cmp	r2, #0
   10e2c:	d1fb      	bne.n	10e26 <strlen+0x2>
   10e2e:	1a18      	subs	r0, r3, r0
   10e30:	3801      	subs	r0, #1
   10e32:	4770      	bx	lr
   10e34:	0000      	movs	r0, r0
	...

00010e38 <parse_response>:
	NET_DBG("tx_tm_f:         %x", pkt->tx_tm_f);
}

static int32_t parse_response(uint8_t *data, uint16_t len, uint32_t orig_ts,
			    struct sntp_time *time)
{
   10e38:	b430      	push	{r4, r5}
	struct sntp_pkt *pkt = (struct sntp_pkt *)data;
	uint32_t ts;

	sntp_pkt_dump(pkt);

	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   10e3a:	6984      	ldr	r4, [r0, #24]
   10e3c:	0a21      	lsrs	r1, r4, #8
   10e3e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
   10e42:	ea41 6114 	orr.w	r1, r1, r4, lsr #24
   10e46:	0225      	lsls	r5, r4, #8
   10e48:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
   10e4c:	4329      	orrs	r1, r5
   10e4e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
   10e52:	4291      	cmp	r1, r2
   10e54:	d153      	bne.n	10efe <parse_response+0xc6>
		NET_DBG("Mismatch originate timestamp: %d, expect: %d",
			ntohl(pkt->orig_tm_s), orig_ts);
		return -EINVAL;
	}

	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   10e56:	7802      	ldrb	r2, [r0, #0]
   10e58:	f002 0207 	and.w	r2, r2, #7
   10e5c:	2a04      	cmp	r2, #4
   10e5e:	d151      	bne.n	10f04 <parse_response+0xcc>
		 */
		NET_DBG("Unexpected mode: %d", SNTP_GET_MODE(pkt->lvm));
		return -EINVAL;
	}

	if (pkt->stratum == SNTP_STRATUM_KOD) {
   10e60:	7842      	ldrb	r2, [r0, #1]
   10e62:	2a00      	cmp	r2, #0
   10e64:	d051      	beq.n	10f0a <parse_response+0xd2>
		NET_DBG("kiss-o'-death stratum");
		return -EBUSY;
	}

	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   10e66:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10e68:	0a0a      	lsrs	r2, r1, #8
   10e6a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   10e6e:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
   10e72:	020c      	lsls	r4, r1, #8
   10e74:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   10e78:	4322      	orrs	r2, r4
   10e7a:	ea52 6201 	orrs.w	r2, r2, r1, lsl #24
   10e7e:	d10c      	bne.n	10e9a <parse_response+0x62>
   10e80:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   10e82:	0a0a      	lsrs	r2, r1, #8
   10e84:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   10e88:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
   10e8c:	020c      	lsls	r4, r1, #8
   10e8e:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   10e92:	4322      	orrs	r2, r4
   10e94:	ea52 6201 	orrs.w	r2, r2, r1, lsl #24
   10e98:	d03a      	beq.n	10f10 <parse_response+0xd8>
		NET_DBG("zero transmit timestamp");
		return -EINVAL;
	}

	time->fraction = ntohl(pkt->tx_tm_f);
   10e9a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   10e9c:	0a0a      	lsrs	r2, r1, #8
   10e9e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   10ea2:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
   10ea6:	020c      	lsls	r4, r1, #8
   10ea8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   10eac:	4322      	orrs	r2, r4
   10eae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   10eb2:	609a      	str	r2, [r3, #8]
	ts = ntohl(pkt->tx_tm_s);
   10eb4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   10eb6:	0a01      	lsrs	r1, r0, #8
   10eb8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
   10ebc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
   10ec0:	0202      	lsls	r2, r0, #8
   10ec2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   10ec6:	430a      	orrs	r2, r1

	/* Check if most significant bit is set */
	if (ts & 0x80000000) {
   10ec8:	ea52 6200 	orrs.w	r2, r2, r0, lsl #24
   10ecc:	d40a      	bmi.n	10ee4 <parse_response+0xac>
		}
	} else {
		/* UTC time is reckoned from 6h 28m 16s UTC
		 * on 7 February 2036.
		 */
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   10ece:	a117      	add	r1, pc, #92	; (adr r1, 10f2c <parse_response+0xf4>)
   10ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
   10ed4:	1880      	adds	r0, r0, r2
   10ed6:	f141 0100 	adc.w	r1, r1, #0
   10eda:	e9c3 0100 	strd	r0, r1, [r3]
	}

	return 0;
   10ede:	2000      	movs	r0, #0
}
   10ee0:	bc30      	pop	{r4, r5}
   10ee2:	4770      	bx	lr
		if (ts >= OFFSET_1970_JAN_1) {
   10ee4:	4910      	ldr	r1, [pc, #64]	; (10f28 <parse_response+0xf0>)
   10ee6:	428a      	cmp	r2, r1
   10ee8:	d915      	bls.n	10f16 <parse_response+0xde>
			time->seconds = ts - OFFSET_1970_JAN_1;
   10eea:	a10d      	add	r1, pc, #52	; (adr r1, 10f20 <parse_response+0xe8>)
   10eec:	e9d1 0100 	ldrd	r0, r1, [r1]
   10ef0:	1880      	adds	r0, r0, r2
   10ef2:	f141 0100 	adc.w	r1, r1, #0
   10ef6:	e9c3 0100 	strd	r0, r1, [r3]
	return 0;
   10efa:	2000      	movs	r0, #0
   10efc:	e7f0      	b.n	10ee0 <parse_response+0xa8>
		return -EINVAL;
   10efe:	f06f 0015 	mvn.w	r0, #21
   10f02:	e7ed      	b.n	10ee0 <parse_response+0xa8>
		return -EINVAL;
   10f04:	f06f 0015 	mvn.w	r0, #21
   10f08:	e7ea      	b.n	10ee0 <parse_response+0xa8>
		return -EBUSY;
   10f0a:	f06f 000f 	mvn.w	r0, #15
   10f0e:	e7e7      	b.n	10ee0 <parse_response+0xa8>
		return -EINVAL;
   10f10:	f06f 0015 	mvn.w	r0, #21
   10f14:	e7e4      	b.n	10ee0 <parse_response+0xa8>
			return -EINVAL;
   10f16:	f06f 0015 	mvn.w	r0, #21
   10f1a:	e7e1      	b.n	10ee0 <parse_response+0xa8>
   10f1c:	f3af 8000 	nop.w
   10f20:	7c558180 	.word	0x7c558180
   10f24:	ffffffff 	.word	0xffffffff
   10f28:	83aa7e7f 	.word	0x83aa7e7f
   10f2c:	7c558180 	.word	0x7c558180
	...

00010f38 <clock_settime>:
 *
 * Note that only the `CLOCK_REALTIME` clock can be set using this
 * call.
 */
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
   10f38:	b570      	push	{r4, r5, r6, lr}
   10f3a:	b084      	sub	sp, #16
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   10f3c:	2801      	cmp	r0, #1
   10f3e:	d13f      	bne.n	10fc0 <clock_settime+0x88>
   10f40:	460c      	mov	r4, r1
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   10f42:	f015 fb41 	bl	265c8 <z_impl_k_uptime_ticks>
   10f46:	460b      	mov	r3, r1
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   10f48:	4a23      	ldr	r2, [pc, #140]	; (10fd8 <clock_settime+0xa0>)
   10f4a:	fba0 0102 	umull	r0, r1, r0, r2
   10f4e:	fb02 1103 	mla	r1, r2, r3, r1
   10f52:	0bc3      	lsrs	r3, r0, #15
   10f54:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   10f58:	0bcd      	lsrs	r5, r1, #15
		errno = EINVAL;
		return -1;
	}

	uint64_t elapsed_nsecs = k_ticks_to_ns_floor64(k_uptime_ticks());
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   10f5a:	6820      	ldr	r0, [r4, #0]
   10f5c:	6866      	ldr	r6, [r4, #4]
   10f5e:	fba0 0102 	umull	r0, r1, r0, r2
   10f62:	fb02 1106 	mla	r1, r2, r6, r1
   10f66:	68a2      	ldr	r2, [r4, #8]
   10f68:	1880      	adds	r0, r0, r2
   10f6a:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
		- elapsed_nsecs;
   10f6e:	1ac4      	subs	r4, r0, r3
   10f70:	eb61 0505 	sbc.w	r5, r1, r5

	base.tv_sec = delta / NSEC_PER_SEC;
   10f74:	a316      	add	r3, pc, #88	; (adr r3, 10fd0 <clock_settime+0x98>)
   10f76:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f7a:	4620      	mov	r0, r4
   10f7c:	4629      	mov	r1, r5
   10f7e:	f7ff fd7d 	bl	10a7c <__aeabi_ldivmod>
   10f82:	e9cd 0100 	strd	r0, r1, [sp]
	base.tv_nsec = delta % NSEC_PER_SEC;
   10f86:	a312      	add	r3, pc, #72	; (adr r3, 10fd0 <clock_settime+0x98>)
   10f88:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f8c:	4620      	mov	r0, r4
   10f8e:	4629      	mov	r1, r5
   10f90:	f7ff fd74 	bl	10a7c <__aeabi_ldivmod>
   10f94:	9202      	str	r2, [sp, #8]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   10f96:	f04f 0320 	mov.w	r3, #32
   10f9a:	f3ef 8511 	mrs	r5, BASEPRI
   10f9e:	f383 8812 	msr	BASEPRI_MAX, r3
   10fa2:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
   10fa6:	4c0d      	ldr	r4, [pc, #52]	; (10fdc <clock_settime+0xa4>)
   10fa8:	ab04      	add	r3, sp, #16
   10faa:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   10fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10fb2:	f385 8811 	msr	BASEPRI, r5
   10fb6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
   10fba:	2000      	movs	r0, #0
}
   10fbc:	b004      	add	sp, #16
   10fbe:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   10fc0:	f011 ffe9 	bl	22f96 <__errno>
   10fc4:	2316      	movs	r3, #22
   10fc6:	6003      	str	r3, [r0, #0]
		return -1;
   10fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10fcc:	e7f6      	b.n	10fbc <clock_settime+0x84>
   10fce:	bf00      	nop
   10fd0:	3b9aca00 	.word	0x3b9aca00
   10fd4:	00000000 	.word	0x00000000
   10fd8:	3b9aca00 	.word	0x3b9aca00
   10fdc:	2000ca48 	.word	0x2000ca48

00010fe0 <get_edrx_value>:
	};
	static const uint16_t edrx_lookup_nbiot[16] = {
		2, 2, 2, 4, 2, 8, 2, 2, 2, 16, 32, 64, 128, 256, 512, 1024
	};

	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   10fe0:	b302      	cbz	r2, 11024 <get_edrx_value+0x44>
{
   10fe2:	b510      	push	{r4, lr}
   10fe4:	4614      	mov	r4, r2
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   10fe6:	290f      	cmp	r1, #15
   10fe8:	d81f      	bhi.n	1102a <get_edrx_value+0x4a>
		return -EINVAL;
	}

	switch (lte_mode) {
   10fea:	2807      	cmp	r0, #7
   10fec:	d004      	beq.n	10ff8 <get_edrx_value+0x18>
   10fee:	2809      	cmp	r0, #9
   10ff0:	d010      	beq.n	11014 <get_edrx_value+0x34>
   10ff2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   10ff6:	e014      	b.n	11022 <get_edrx_value+0x42>
	case LTE_LC_LTE_MODE_LTEM:
		multiplier = edrx_lookup_ltem[idx];
   10ff8:	4b0f      	ldr	r3, [pc, #60]	; (11038 <get_edrx_value+0x58>)
   10ffa:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
		break;
	default:
		return -ENOTCONN;
	}

	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   10ffe:	b168      	cbz	r0, 1101c <get_edrx_value+0x3c>
   11000:	f7ff fa70 	bl	104e4 <__aeabi_i2d>
   11004:	a30a      	add	r3, pc, #40	; (adr r3, 11030 <get_edrx_value+0x50>)
   11006:	e9d3 2300 	ldrd	r2, r3, [r3]
   1100a:	f7ff fad5 	bl	105b8 <__aeabi_dmul>
   1100e:	f7ff fce5 	bl	109dc <__aeabi_d2f>
   11012:	e004      	b.n	1101e <get_edrx_value+0x3e>
		multiplier = edrx_lookup_nbiot[idx];
   11014:	4b09      	ldr	r3, [pc, #36]	; (1103c <get_edrx_value+0x5c>)
   11016:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
		break;
   1101a:	e7f0      	b.n	10ffe <get_edrx_value+0x1e>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1101c:	4808      	ldr	r0, [pc, #32]	; (11040 <get_edrx_value+0x60>)
   1101e:	6020      	str	r0, [r4, #0]

	return 0;
   11020:	2000      	movs	r0, #0
}
   11022:	bd10      	pop	{r4, pc}
		return -EINVAL;
   11024:	f06f 0015 	mvn.w	r0, #21
}
   11028:	4770      	bx	lr
		return -EINVAL;
   1102a:	f06f 0015 	mvn.w	r0, #21
   1102e:	e7f8      	b.n	11022 <get_edrx_value+0x42>
   11030:	47ae147b 	.word	0x47ae147b
   11034:	40247ae1 	.word	0x40247ae1
   11038:	00029648 	.word	0x00029648
   1103c:	00029668 	.word	0x00029668
   11040:	40a3d70a 	.word	0x40a3d70a

00011044 <adc_sample>:
	.user_data = NULL,
	.extra_samplings = 7,
};

static void adc_sample(void)
{	
   11044:	b500      	push	{lr}
   11046:	b087      	sub	sp, #28
	float threshold = 1700;
	float max_val = 0;
	const struct adc_sequence sequence = {
   11048:	2300      	movs	r3, #0
   1104a:	f8ad 3015 	strh.w	r3, [sp, #21]
   1104e:	f88d 3017 	strb.w	r3, [sp, #23]
   11052:	4b19      	ldr	r3, [pc, #100]	; (110b8 <adc_sample+0x74>)
   11054:	9301      	str	r3, [sp, #4]
   11056:	2301      	movs	r3, #1
   11058:	9302      	str	r3, [sp, #8]
   1105a:	4b18      	ldr	r3, [pc, #96]	; (110bc <adc_sample+0x78>)
   1105c:	9303      	str	r3, [sp, #12]
   1105e:	2310      	movs	r3, #16
   11060:	9304      	str	r3, [sp, #16]
   11062:	230a      	movs	r3, #10
   11064:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer = m_sample_buffer,
		.buffer_size = sizeof(m_sample_buffer),
		.resolution = ADC_RESOLUTION,
	};

	if (!adc_dev) {
   11068:	4b15      	ldr	r3, [pc, #84]	; (110c0 <adc_sample+0x7c>)
   1106a:	681b      	ldr	r3, [r3, #0]
   1106c:	b303      	cbz	r3, 110b0 <adc_sample+0x6c>
	}
	while(true){
		int ret;

		//Fetches the values in the adc buffer
		ret = adc_read(adc_dev, &sequence);
   1106e:	4b14      	ldr	r3, [pc, #80]	; (110c0 <adc_sample+0x7c>)
   11070:	6818      	ldr	r0, [r3, #0]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   11072:	6883      	ldr	r3, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   11074:	685b      	ldr	r3, [r3, #4]
   11076:	a901      	add	r1, sp, #4
   11078:	4798      	blx	r3

		//Itterates over the adc values
		for (int i = 0; i < BUFFER_SIZE; i++) {
   1107a:	2300      	movs	r3, #0
   1107c:	e000      	b.n	11080 <adc_sample+0x3c>
   1107e:	3301      	adds	r3, #1
   11080:	2b07      	cmp	r3, #7
   11082:	dcf4      	bgt.n	1106e <adc_sample+0x2a>
			float adc_voltage = 0;
			adc_voltage = (float)(((float)m_sample_buffer[i] / 1023.0f) *
   11084:	4a0d      	ldr	r2, [pc, #52]	; (110bc <adc_sample+0x78>)
   11086:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
   1108a:	ee07 2a10 	vmov	s14, r2
   1108e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   11092:	eddf 6a0c 	vldr	s13, [pc, #48]	; 110c4 <adc_sample+0x80>
   11096:	eec7 7a26 	vdiv.f32	s15, s14, s13
   1109a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 110c8 <adc_sample+0x84>
   1109e:	ee67 7a87 	vmul.f32	s15, s15, s14
			// if(adc_voltage >= max_val){
			// 	max_val = adc_voltage;
			// 	//printk("Value: %f ", max_val);
			// }
			//If the value exceeds the threshold the the function returns
			if(adc_voltage >= threshold){
   110a2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 110cc <adc_sample+0x88>
   110a6:	eef4 7ac7 	vcmpe.f32	s15, s14
   110aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   110ae:	dbe6      	blt.n	1107e <adc_sample+0x3a>
				return;
			}
		}

	}
}
   110b0:	b007      	add	sp, #28
   110b2:	f85d fb04 	ldr.w	pc, [sp], #4
   110b6:	bf00      	nop
   110b8:	00027e0c 	.word	0x00027e0c
   110bc:	2000d8b4 	.word	0x2000d8b4
   110c0:	2000d8b0 	.word	0x2000d8b0
   110c4:	447fc000 	.word	0x447fc000
   110c8:	45610000 	.word	0x45610000
   110cc:	44d48000 	.word	0x44d48000

000110d0 <cert_provision>:

BUILD_ASSERT(sizeof(cert) < KB(4), "Certificate too large");

/* Provision certificate to modem */
int cert_provision(void)
{
   110d0:	b510      	push	{r4, lr}
   110d2:	b082      	sub	sp, #8
	/* It may be sufficient for you application to check whether the correct
	 * certificate is provisioned with a given tag directly using modem_key_mgmt_cmp().
	 * Here, for the sake of the completeness, we check that a certificate exists
	 * before comparing it with what we expect it to be.
	 */
	err = modem_key_mgmt_exists(TLS_SEC_TAG, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &exists);
   110d4:	f10d 0207 	add.w	r2, sp, #7
   110d8:	2100      	movs	r1, #0
   110da:	202a      	movs	r0, #42	; 0x2a
   110dc:	f008 f976 	bl	193cc <modem_key_mgmt_exists>
	if (err) {
   110e0:	bb30      	cbnz	r0, 11130 <cert_provision+0x60>
		printk("Failed to check for certificates err %d\n", err);
		return err;
	}

	if (exists) {
   110e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   110e6:	b1a3      	cbz	r3, 11112 <cert_provision+0x42>
		mismatch = modem_key_mgmt_cmp(TLS_SEC_TAG,
   110e8:	4c1b      	ldr	r4, [pc, #108]	; (11158 <cert_provision+0x88>)
   110ea:	4620      	mov	r0, r4
   110ec:	f7ff fe9a 	bl	10e24 <strlen>
   110f0:	4603      	mov	r3, r0
   110f2:	4622      	mov	r2, r4
   110f4:	2100      	movs	r1, #0
   110f6:	202a      	movs	r0, #42	; 0x2a
   110f8:	f008 f926 	bl	19348 <modem_key_mgmt_cmp>
					      MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN,
					      cert, strlen(cert));
		if (!mismatch) {
   110fc:	4604      	mov	r4, r0
   110fe:	b1e8      	cbz	r0, 1113c <cert_provision+0x6c>
			printk("Certificate match\n");
			return 0;
		}

		printk("Certificate mismatch\n");
   11100:	4816      	ldr	r0, [pc, #88]	; (1115c <cert_provision+0x8c>)
   11102:	f010 fd53 	bl	21bac <printk>
		err = modem_key_mgmt_delete(TLS_SEC_TAG, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN);
   11106:	2100      	movs	r1, #0
   11108:	202a      	movs	r0, #42	; 0x2a
   1110a:	f008 f93f 	bl	1938c <modem_key_mgmt_delete>
		if (err) {
   1110e:	4601      	mov	r1, r0
   11110:	b9c0      	cbnz	r0, 11144 <cert_provision+0x74>
			printk("Failed to delete existing certificate, err %d\n", err);
		}
	}

	printk("Provisioning certificate\n");
   11112:	4813      	ldr	r0, [pc, #76]	; (11160 <cert_provision+0x90>)
   11114:	f010 fd4a 	bl	21bac <printk>

	/*  Provision certificate to the modem */
	err = modem_key_mgmt_write(TLS_SEC_TAG,
   11118:	f240 7383 	movw	r3, #1923	; 0x783
   1111c:	4a0e      	ldr	r2, [pc, #56]	; (11158 <cert_provision+0x88>)
   1111e:	2100      	movs	r1, #0
   11120:	202a      	movs	r0, #42	; 0x2a
   11122:	f008 f8e5 	bl	192f0 <modem_key_mgmt_write>
				   MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN,
				   cert, sizeof(cert) - 1);
	if (err) {
   11126:	4604      	mov	r4, r0
   11128:	b980      	cbnz	r0, 1114c <cert_provision+0x7c>
		printk("Failed to provision certificate, err %d\n", err);
		return err;
	}

	return 0;
}
   1112a:	4620      	mov	r0, r4
   1112c:	b002      	add	sp, #8
   1112e:	bd10      	pop	{r4, pc}
   11130:	4604      	mov	r4, r0
		printk("Failed to check for certificates err %d\n", err);
   11132:	4601      	mov	r1, r0
   11134:	480b      	ldr	r0, [pc, #44]	; (11164 <cert_provision+0x94>)
   11136:	f010 fd39 	bl	21bac <printk>
		return err;
   1113a:	e7f6      	b.n	1112a <cert_provision+0x5a>
			printk("Certificate match\n");
   1113c:	480a      	ldr	r0, [pc, #40]	; (11168 <cert_provision+0x98>)
   1113e:	f010 fd35 	bl	21bac <printk>
			return 0;
   11142:	e7f2      	b.n	1112a <cert_provision+0x5a>
			printk("Failed to delete existing certificate, err %d\n", err);
   11144:	4809      	ldr	r0, [pc, #36]	; (1116c <cert_provision+0x9c>)
   11146:	f010 fd31 	bl	21bac <printk>
   1114a:	e7e2      	b.n	11112 <cert_provision+0x42>
		printk("Failed to provision certificate, err %d\n", err);
   1114c:	4601      	mov	r1, r0
   1114e:	4808      	ldr	r0, [pc, #32]	; (11170 <cert_provision+0xa0>)
   11150:	f010 fd2c 	bl	21bac <printk>
		return err;
   11154:	e7e9      	b.n	1112a <cert_provision+0x5a>
   11156:	bf00      	nop
   11158:	00027680 	.word	0x00027680
   1115c:	00027288 	.word	0x00027288
   11160:	000272d0 	.word	0x000272d0
   11164:	00027248 	.word	0x00027248
   11168:	00027274 	.word	0x00027274
   1116c:	000272a0 	.word	0x000272a0
   11170:	000272ec 	.word	0x000272ec

00011174 <tls_setup>:

/* Setup TLS options on a given socket */
int tls_setup(int fd)
{
   11174:	b530      	push	{r4, r5, lr}
   11176:	b085      	sub	sp, #20
   11178:	4604      	mov	r4, r0
	int err;
	int verify;

	/* Security tag that we have provisioned the certificate with */
	const sec_tag_t tls_sec_tag[] = {
   1117a:	232a      	movs	r3, #42	; 0x2a
   1117c:	9302      	str	r3, [sp, #8]
		NONE = 0,
		OPTIONAL = 1,
		REQUIRED = 2,
	};

	verify = REQUIRED;
   1117e:	2302      	movs	r3, #2
   11180:	9303      	str	r3, [sp, #12]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   11182:	2304      	movs	r3, #4
   11184:	9300      	str	r3, [sp, #0]
   11186:	ab03      	add	r3, sp, #12
   11188:	2205      	movs	r2, #5
   1118a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1118e:	f011 fde5 	bl	22d5c <z_impl_zsock_setsockopt>

	err = setsockopt(fd, SOL_TLS, TLS_PEER_VERIFY, &verify, sizeof(verify));
	if (err) {
   11192:	b9c0      	cbnz	r0, 111c6 <tls_setup+0x52>
   11194:	2304      	movs	r3, #4
   11196:	9300      	str	r3, [sp, #0]
   11198:	ab02      	add	r3, sp, #8
   1119a:	2201      	movs	r2, #1
   1119c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   111a0:	4620      	mov	r0, r4
   111a2:	f011 fddb 	bl	22d5c <z_impl_zsock_setsockopt>
	/* Associate the socket with the security tag
	 * we have provisioned the certificate with.
	 */
	err = setsockopt(fd, SOL_TLS, TLS_SEC_TAG_LIST, tls_sec_tag,
			 sizeof(tls_sec_tag));
	if (err) {
   111a6:	4605      	mov	r5, r0
   111a8:	b9a8      	cbnz	r0, 111d6 <tls_setup+0x62>
   111aa:	231e      	movs	r3, #30
   111ac:	9300      	str	r3, [sp, #0]
   111ae:	4b11      	ldr	r3, [pc, #68]	; (111f4 <tls_setup+0x80>)
   111b0:	2202      	movs	r2, #2
   111b2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   111b6:	4620      	mov	r0, r4
   111b8:	f011 fdd0 	bl	22d5c <z_impl_zsock_setsockopt>
		printk("Failed to setup TLS sec tag, err %d\n", errno);
		return err;
	}

	err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, HTTPS_HOSTNAME, sizeof(HTTPS_HOSTNAME) - 1);
	if (err) {
   111bc:	4605      	mov	r5, r0
   111be:	b988      	cbnz	r0, 111e4 <tls_setup+0x70>
		printk("Failed to setup TLS hostname, err %d\n", errno);
		return err;
	}
	return 0;
}
   111c0:	4628      	mov	r0, r5
   111c2:	b005      	add	sp, #20
   111c4:	bd30      	pop	{r4, r5, pc}
   111c6:	4605      	mov	r5, r0
		printk("Failed to setup peer verification, err %d\n", errno);
   111c8:	f011 fee5 	bl	22f96 <__errno>
   111cc:	6801      	ldr	r1, [r0, #0]
   111ce:	480a      	ldr	r0, [pc, #40]	; (111f8 <tls_setup+0x84>)
   111d0:	f010 fcec 	bl	21bac <printk>
		return err;
   111d4:	e7f4      	b.n	111c0 <tls_setup+0x4c>
		printk("Failed to setup TLS sec tag, err %d\n", errno);
   111d6:	f011 fede 	bl	22f96 <__errno>
   111da:	6801      	ldr	r1, [r0, #0]
   111dc:	4807      	ldr	r0, [pc, #28]	; (111fc <tls_setup+0x88>)
   111de:	f010 fce5 	bl	21bac <printk>
		return err;
   111e2:	e7ed      	b.n	111c0 <tls_setup+0x4c>
		printk("Failed to setup TLS hostname, err %d\n", errno);
   111e4:	f011 fed7 	bl	22f96 <__errno>
   111e8:	6801      	ldr	r1, [r0, #0]
   111ea:	4805      	ldr	r0, [pc, #20]	; (11200 <tls_setup+0x8c>)
   111ec:	f010 fcde 	bl	21bac <printk>
		return err;
   111f0:	e7e6      	b.n	111c0 <tls_setup+0x4c>
   111f2:	bf00      	nop
   111f4:	0002736c 	.word	0x0002736c
   111f8:	00027318 	.word	0x00027318
   111fc:	00027344 	.word	0x00027344
   11200:	0002738c 	.word	0x0002738c

00011204 <setup_adc>:

void setup_adc(){
   11204:	b508      	push	{r3, lr}
	int err;

	printk("nRF53 SAADC sampling AIN0 (P0.13)\n");
   11206:	4811      	ldr	r0, [pc, #68]	; (1124c <setup_adc+0x48>)
   11208:	f010 fcd0 	bl	21bac <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1120c:	4810      	ldr	r0, [pc, #64]	; (11250 <setup_adc+0x4c>)
   1120e:	f00d fb17 	bl	1e840 <z_impl_device_get_binding>

	adc_dev = device_get_binding("ADC_0");
   11212:	4b10      	ldr	r3, [pc, #64]	; (11254 <setup_adc+0x50>)
   11214:	6018      	str	r0, [r3, #0]
	if (!adc_dev) {
   11216:	b158      	cbz	r0, 11230 <setup_adc+0x2c>
		printk("device_get_binding ADC_0 failed\n");
		printk("Error: %d", adc_dev);
	}
	err = adc_channel_setup(adc_dev, &m_1st_channel_cfg);
   11218:	4b0e      	ldr	r3, [pc, #56]	; (11254 <setup_adc+0x50>)
   1121a:	6818      	ldr	r0, [r3, #0]
	const struct adc_driver_api *api =
   1121c:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	490d      	ldr	r1, [pc, #52]	; (11258 <setup_adc+0x54>)
   11222:	4798      	blx	r3
	if (err) {
   11224:	4601      	mov	r1, r0
   11226:	b960      	cbnz	r0, 11242 <setup_adc+0x3e>

	/* Trigger offset calibration
	 * As this generates a _DONE and _RESULT event
	 * the first result will be incorrect.
	 */
	NRF_SAADC_NS->TASKS_CALIBRATEOFFSET = 1;
   11228:	4b0c      	ldr	r3, [pc, #48]	; (1125c <setup_adc+0x58>)
   1122a:	2201      	movs	r2, #1
   1122c:	60da      	str	r2, [r3, #12]
	
}
   1122e:	bd08      	pop	{r3, pc}
		printk("device_get_binding ADC_0 failed\n");
   11230:	480b      	ldr	r0, [pc, #44]	; (11260 <setup_adc+0x5c>)
   11232:	f010 fcbb 	bl	21bac <printk>
		printk("Error: %d", adc_dev);
   11236:	4b07      	ldr	r3, [pc, #28]	; (11254 <setup_adc+0x50>)
   11238:	6819      	ldr	r1, [r3, #0]
   1123a:	480a      	ldr	r0, [pc, #40]	; (11264 <setup_adc+0x60>)
   1123c:	f010 fcb6 	bl	21bac <printk>
   11240:	e7ea      	b.n	11218 <setup_adc+0x14>
		printk("Error in adc setup: %d\n", err);
   11242:	4809      	ldr	r0, [pc, #36]	; (11268 <setup_adc+0x64>)
   11244:	f010 fcb2 	bl	21bac <printk>
   11248:	e7ee      	b.n	11228 <setup_adc+0x24>
   1124a:	bf00      	nop
   1124c:	000273b4 	.word	0x000273b4
   11250:	000273d8 	.word	0x000273d8
   11254:	2000d8b0 	.word	0x2000d8b0
   11258:	00027e04 	.word	0x00027e04
   1125c:	4000e000 	.word	0x4000e000
   11260:	000273e0 	.word	0x000273e0
   11264:	00027404 	.word	0x00027404
   11268:	00027410 	.word	0x00027410

0001126c <main>:

void main(void)
{
   1126c:	b530      	push	{r4, r5, lr}
   1126e:	b099      	sub	sp, #100	; 0x64
	int fd;
	char *p;
	int bytes;
	size_t off;
	struct addrinfo *res;
	struct addrinfo hints = {
   11270:	2250      	movs	r2, #80	; 0x50
   11272:	2100      	movs	r1, #0
   11274:	a803      	add	r0, sp, #12
   11276:	f015 fb04 	bl	26882 <memset>
   1127a:	2301      	movs	r3, #1
   1127c:	9305      	str	r3, [sp, #20]
   1127e:	9306      	str	r3, [sp, #24]
		.ai_family = AF_INET,
		.ai_socktype = SOCK_STREAM,
	};

	printk("HTTPS client sample started\n\r");
   11280:	4859      	ldr	r0, [pc, #356]	; (113e8 <main+0x17c>)
   11282:	f010 fc93 	bl	21bac <printk>

#if !defined(CONFIG_SAMPLE_TFM_MBEDTLS)
	/* Provision certificates before connecting to the LTE network */
	err = cert_provision();
   11286:	f7ff ff23 	bl	110d0 <cert_provision>
	if (err) {
   1128a:	b108      	cbz	r0, 11290 <main+0x24>
		while(true){
			NULL;
		}
	}
	lte_lc_power_off();
}
   1128c:	b019      	add	sp, #100	; 0x64
   1128e:	bd30      	pop	{r4, r5, pc}
	printk("Waiting for network.. ");
   11290:	4856      	ldr	r0, [pc, #344]	; (113ec <main+0x180>)
   11292:	f010 fc8b 	bl	21bac <printk>
	err = lte_lc_init_and_connect();
   11296:	f013 fa4a 	bl	2472e <lte_lc_init_and_connect>
	if (err) {
   1129a:	4601      	mov	r1, r0
   1129c:	bb90      	cbnz	r0, 11304 <main+0x98>
	printk("OK\n");
   1129e:	4854      	ldr	r0, [pc, #336]	; (113f0 <main+0x184>)
   112a0:	f010 fc84 	bl	21bac <printk>
	printk("Setting up adc...\n");
   112a4:	4853      	ldr	r0, [pc, #332]	; (113f4 <main+0x188>)
   112a6:	f010 fc81 	bl	21bac <printk>
	setup_adc();
   112aa:	f7ff ffab 	bl	11204 <setup_adc>
	printk("Setup done!\n");
   112ae:	4852      	ldr	r0, [pc, #328]	; (113f8 <main+0x18c>)
   112b0:	f010 fc7c 	bl	21bac <printk>
			printk("Entering measuring state\n");
   112b4:	4851      	ldr	r0, [pc, #324]	; (113fc <main+0x190>)
   112b6:	f010 fc79 	bl	21bac <printk>
			adc_sample();
   112ba:	f7ff fec3 	bl	11044 <adc_sample>
			printk("Leaving measuring state\n");
   112be:	4850      	ldr	r0, [pc, #320]	; (11400 <main+0x194>)
   112c0:	f010 fc74 	bl	21bac <printk>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   112c4:	ab17      	add	r3, sp, #92	; 0x5c
   112c6:	aa03      	add	r2, sp, #12
   112c8:	2100      	movs	r1, #0
   112ca:	484e      	ldr	r0, [pc, #312]	; (11404 <main+0x198>)
   112cc:	f011 fc5c 	bl	22b88 <zsock_getaddrinfo>
			if (err) {
   112d0:	b9e0      	cbnz	r0, 1130c <main+0xa0>
			((struct sockaddr_in *)res->ai_addr)->sin_port = htons(HTTPS_PORT);
   112d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   112d4:	699b      	ldr	r3, [r3, #24]
   112d6:	f64b 3201 	movw	r2, #47873	; 0xbb01
   112da:	805a      	strh	r2, [r3, #2]
	return z_impl_zsock_socket(family, type, proto);
   112dc:	f44f 7281 	mov.w	r2, #258	; 0x102
   112e0:	2101      	movs	r1, #1
   112e2:	4608      	mov	r0, r1
   112e4:	f002 fa58 	bl	13798 <z_impl_zsock_socket>
   112e8:	4604      	mov	r4, r0
			if (fd == -1) {
   112ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   112ee:	d014      	beq.n	1131a <main+0xae>
			err = tls_setup(fd);
   112f0:	f7ff ff40 	bl	11174 <tls_setup>
			if (err) {
   112f4:	b1a8      	cbz	r0, 11322 <main+0xb6>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   112f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
   112f8:	f011 fc4a 	bl	22b90 <zsock_freeaddrinfo>
	return z_impl_zsock_close(sock);
   112fc:	4620      	mov	r0, r4
   112fe:	f011 fc5b 	bl	22bb8 <z_impl_zsock_close>
		while(true){
   11302:	e7fe      	b.n	11302 <main+0x96>
		printk("Failed to connect to the LTE network, err %d\n", err);
   11304:	4840      	ldr	r0, [pc, #256]	; (11408 <main+0x19c>)
   11306:	f010 fc51 	bl	21bac <printk>
		return;
   1130a:	e7bf      	b.n	1128c <main+0x20>
				printk("getaddrinfo() failed, err %d\n", errno);
   1130c:	f011 fe43 	bl	22f96 <__errno>
   11310:	6801      	ldr	r1, [r0, #0]
   11312:	483e      	ldr	r0, [pc, #248]	; (1140c <main+0x1a0>)
   11314:	f010 fc4a 	bl	21bac <printk>
				return;
   11318:	e7b8      	b.n	1128c <main+0x20>
				printk("Failed to open socket!\n");
   1131a:	483d      	ldr	r0, [pc, #244]	; (11410 <main+0x1a4>)
   1131c:	f010 fc46 	bl	21bac <printk>
				goto clean_up;
   11320:	e7e9      	b.n	112f6 <main+0x8a>
			printk("Connecting to %s\n", HTTPS_HOSTNAME);
   11322:	4938      	ldr	r1, [pc, #224]	; (11404 <main+0x198>)
   11324:	483b      	ldr	r0, [pc, #236]	; (11414 <main+0x1a8>)
   11326:	f010 fc41 	bl	21bac <printk>
			err = connect(fd, res->ai_addr, sizeof(struct sockaddr_in));
   1132a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1132c:	6999      	ldr	r1, [r3, #24]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1132e:	2208      	movs	r2, #8
   11330:	4620      	mov	r0, r4
   11332:	f011 fc66 	bl	22c02 <z_impl_zsock_connect>
			if (err) {
   11336:	2800      	cmp	r0, #0
   11338:	d140      	bne.n	113bc <main+0x150>
			sprintf(send_buf, HTTP_HEAD2, 666);
   1133a:	f240 239a 	movw	r3, #666	; 0x29a
   1133e:	9300      	str	r3, [sp, #0]
   11340:	4b35      	ldr	r3, [pc, #212]	; (11418 <main+0x1ac>)
   11342:	22ab      	movs	r2, #171	; 0xab
   11344:	2100      	movs	r1, #0
   11346:	4835      	ldr	r0, [pc, #212]	; (1141c <main+0x1b0>)
   11348:	f015 faa3 	bl	26892 <__sprintf_chk>
			off = 0;
   1134c:	2500      	movs	r5, #0
				bytes = send(fd, &send_buf[off], sizeof(HTTP_HEAD) - 1, 0);
   1134e:	4933      	ldr	r1, [pc, #204]	; (1141c <main+0x1b0>)
   11350:	4429      	add	r1, r5
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   11352:	2300      	movs	r3, #0
   11354:	9301      	str	r3, [sp, #4]
   11356:	9300      	str	r3, [sp, #0]
   11358:	22aa      	movs	r2, #170	; 0xaa
   1135a:	4620      	mov	r0, r4
   1135c:	f011 fc79 	bl	22c52 <z_impl_zsock_sendto>
				if (bytes < 0) {
   11360:	2800      	cmp	r0, #0
   11362:	db32      	blt.n	113ca <main+0x15e>
				off += bytes;
   11364:	4405      	add	r5, r0
			} while (off < HTTP_HEAD_LEN);
   11366:	2da9      	cmp	r5, #169	; 0xa9
   11368:	d9f1      	bls.n	1134e <main+0xe2>
			printk("Sent %d bytes\n", off);
   1136a:	4629      	mov	r1, r5
   1136c:	482c      	ldr	r0, [pc, #176]	; (11420 <main+0x1b4>)
   1136e:	f010 fc1d 	bl	21bac <printk>
			off = 0;
   11372:	2500      	movs	r5, #0
				bytes = recv(fd, &recv_buf[off], RECV_BUF_SIZE - off, 0);
   11374:	492b      	ldr	r1, [pc, #172]	; (11424 <main+0x1b8>)
   11376:	4429      	add	r1, r5
   11378:	f5c5 6200 	rsb	r2, r5, #2048	; 0x800
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1137c:	2300      	movs	r3, #0
   1137e:	9301      	str	r3, [sp, #4]
   11380:	9300      	str	r3, [sp, #0]
   11382:	4620      	mov	r0, r4
   11384:	f011 fc96 	bl	22cb4 <z_impl_zsock_recvfrom>
				if (bytes < 0) {
   11388:	2800      	cmp	r0, #0
   1138a:	db25      	blt.n	113d8 <main+0x16c>
				off += bytes;
   1138c:	4405      	add	r5, r0
			} while (bytes != 0 /* peer closed connection */);
   1138e:	2800      	cmp	r0, #0
   11390:	d1f0      	bne.n	11374 <main+0x108>
			printk("Received %d bytes\n", off);
   11392:	4629      	mov	r1, r5
   11394:	4824      	ldr	r0, [pc, #144]	; (11428 <main+0x1bc>)
   11396:	f010 fc09 	bl	21bac <printk>
			p = strstr(recv_buf, "\r\n");
   1139a:	4924      	ldr	r1, [pc, #144]	; (1142c <main+0x1c0>)
   1139c:	4821      	ldr	r0, [pc, #132]	; (11424 <main+0x1b8>)
   1139e:	f015 fadb 	bl	26958 <strstr>
			if (p) {
   113a2:	b138      	cbz	r0, 113b4 <main+0x148>
				off = p - recv_buf;
   113a4:	491f      	ldr	r1, [pc, #124]	; (11424 <main+0x1b8>)
   113a6:	1a43      	subs	r3, r0, r1
				recv_buf[off + 1] = '\0';
   113a8:	3301      	adds	r3, #1
   113aa:	2200      	movs	r2, #0
   113ac:	54ca      	strb	r2, [r1, r3]
				printk("\n>\t %s\n\n", recv_buf);
   113ae:	4820      	ldr	r0, [pc, #128]	; (11430 <main+0x1c4>)
   113b0:	f010 fbfc 	bl	21bac <printk>
			printk("Finished, closing socket.\n");
   113b4:	481f      	ldr	r0, [pc, #124]	; (11434 <main+0x1c8>)
   113b6:	f010 fbf9 	bl	21bac <printk>
   113ba:	e79c      	b.n	112f6 <main+0x8a>
				printk("connect() failed, err: %d\n", errno);
   113bc:	f011 fdeb 	bl	22f96 <__errno>
   113c0:	6801      	ldr	r1, [r0, #0]
   113c2:	481d      	ldr	r0, [pc, #116]	; (11438 <main+0x1cc>)
   113c4:	f010 fbf2 	bl	21bac <printk>
				goto clean_up;
   113c8:	e795      	b.n	112f6 <main+0x8a>
					printk("send() failed, err %d\n", errno);
   113ca:	f011 fde4 	bl	22f96 <__errno>
   113ce:	6801      	ldr	r1, [r0, #0]
   113d0:	481a      	ldr	r0, [pc, #104]	; (1143c <main+0x1d0>)
   113d2:	f010 fbeb 	bl	21bac <printk>
					goto clean_up;
   113d6:	e78e      	b.n	112f6 <main+0x8a>
					printk("recv() failed, err %d\n", errno);
   113d8:	f011 fddd 	bl	22f96 <__errno>
   113dc:	6801      	ldr	r1, [r0, #0]
   113de:	4818      	ldr	r0, [pc, #96]	; (11440 <main+0x1d4>)
   113e0:	f010 fbe4 	bl	21bac <printk>
					goto clean_up;
   113e4:	e787      	b.n	112f6 <main+0x8a>
   113e6:	bf00      	nop
   113e8:	00027428 	.word	0x00027428
   113ec:	00027448 	.word	0x00027448
   113f0:	00027490 	.word	0x00027490
   113f4:	00027494 	.word	0x00027494
   113f8:	000274a8 	.word	0x000274a8
   113fc:	000274b8 	.word	0x000274b8
   11400:	000274d4 	.word	0x000274d4
   11404:	0002736c 	.word	0x0002736c
   11408:	00027460 	.word	0x00027460
   1140c:	000274f0 	.word	0x000274f0
   11410:	00027510 	.word	0x00027510
   11414:	00027528 	.word	0x00027528
   11418:	00027558 	.word	0x00027558
   1141c:	2000e0c4 	.word	0x2000e0c4
   11420:	0002761c 	.word	0x0002761c
   11424:	2000d8c4 	.word	0x2000d8c4
   11428:	00027644 	.word	0x00027644
   1142c:	00029b4c 	.word	0x00029b4c
   11430:	00027658 	.word	0x00027658
   11434:	00027664 	.word	0x00027664
   11438:	0002753c 	.word	0x0002753c
   1143c:	00027604 	.word	0x00027604
   11440:	0002762c 	.word	0x0002762c

00011444 <_check_fd>:
	errno = ENFILE;
	return -1;
}

static int _check_fd(int fd)
{
   11444:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11446:	2803      	cmp	r0, #3
   11448:	d808      	bhi.n	1145c <_check_fd+0x18>
		return -1;
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
   1144a:	0140      	lsls	r0, r0, #5
   1144c:	3008      	adds	r0, #8
   1144e:	4b0a      	ldr	r3, [pc, #40]	; (11478 <_check_fd+0x34>)
   11450:	4418      	add	r0, r3
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11452:	e8d0 3faf 	lda	r3, [r0]
   11456:	b143      	cbz	r3, 1146a <_check_fd+0x26>
		errno = EBADF;
		return -1;
	}

	return 0;
   11458:	2000      	movs	r0, #0
}
   1145a:	bd08      	pop	{r3, pc}
		errno = EBADF;
   1145c:	f011 fd9b 	bl	22f96 <__errno>
   11460:	2309      	movs	r3, #9
   11462:	6003      	str	r3, [r0, #0]
		return -1;
   11464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11468:	e7f7      	b.n	1145a <_check_fd+0x16>
		errno = EBADF;
   1146a:	f011 fd94 	bl	22f96 <__errno>
   1146e:	2309      	movs	r3, #9
   11470:	6003      	str	r3, [r0, #0]
		return -1;
   11472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11476:	e7f0      	b.n	1145a <_check_fd+0x16>
   11478:	2000e170 	.word	0x2000e170

0001147c <_find_fd_entry>:
{
   1147c:	b508      	push	{r3, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1147e:	2000      	movs	r0, #0
   11480:	2803      	cmp	r0, #3
   11482:	dc09      	bgt.n	11498 <_find_fd_entry+0x1c>
		if (!atomic_get(&fdtable[fd].refcount)) {
   11484:	0143      	lsls	r3, r0, #5
   11486:	f103 0208 	add.w	r2, r3, #8
   1148a:	4b07      	ldr	r3, [pc, #28]	; (114a8 <_find_fd_entry+0x2c>)
   1148c:	4413      	add	r3, r2
   1148e:	e8d3 3faf 	lda	r3, [r3]
   11492:	b13b      	cbz	r3, 114a4 <_find_fd_entry+0x28>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11494:	3001      	adds	r0, #1
   11496:	e7f3      	b.n	11480 <_find_fd_entry+0x4>
	errno = ENFILE;
   11498:	f011 fd7d 	bl	22f96 <__errno>
   1149c:	2317      	movs	r3, #23
   1149e:	6003      	str	r3, [r0, #0]
	return -1;
   114a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   114a4:	bd08      	pop	{r3, pc}
   114a6:	bf00      	nop
   114a8:	2000e170 	.word	0x2000e170

000114ac <z_fd_unref>:
{
   114ac:	b430      	push	{r4, r5}
   114ae:	4602      	mov	r2, r0
		old_rc = atomic_get(&fdtable[fd].refcount);
   114b0:	0153      	lsls	r3, r2, #5
   114b2:	f103 0108 	add.w	r1, r3, #8
   114b6:	4b0f      	ldr	r3, [pc, #60]	; (114f4 <z_fd_unref+0x48>)
   114b8:	440b      	add	r3, r1
   114ba:	e8d3 1faf 	lda	r1, [r3]
   114be:	460c      	mov	r4, r1
		if (!old_rc) {
   114c0:	b1a9      	cbz	r1, 114ee <z_fd_unref+0x42>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   114c2:	1e48      	subs	r0, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   114c4:	e8d3 5fef 	ldaex	r5, [r3]
   114c8:	428d      	cmp	r5, r1
   114ca:	d104      	bne.n	114d6 <z_fd_unref+0x2a>
   114cc:	e8c3 0fec 	stlex	ip, r0, [r3]
   114d0:	f1bc 0f00 	cmp.w	ip, #0
   114d4:	d1f6      	bne.n	114c4 <z_fd_unref+0x18>
   114d6:	d1eb      	bne.n	114b0 <z_fd_unref+0x4>
	if (old_rc != 1) {
   114d8:	2c01      	cmp	r4, #1
   114da:	d106      	bne.n	114ea <z_fd_unref+0x3e>
	fdtable[fd].obj = NULL;
   114dc:	4b05      	ldr	r3, [pc, #20]	; (114f4 <z_fd_unref+0x48>)
   114de:	0151      	lsls	r1, r2, #5
   114e0:	eb03 1242 	add.w	r2, r3, r2, lsl #5
   114e4:	2000      	movs	r0, #0
   114e6:	5058      	str	r0, [r3, r1]
	fdtable[fd].vtable = NULL;
   114e8:	6050      	str	r0, [r2, #4]
}
   114ea:	bc30      	pop	{r4, r5}
   114ec:	4770      	bx	lr
			return 0;
   114ee:	4608      	mov	r0, r1
   114f0:	e7fb      	b.n	114ea <z_fd_unref+0x3e>
   114f2:	bf00      	nop
   114f4:	2000e170 	.word	0x2000e170

000114f8 <z_fd_ref>:
	return atomic_inc(&fdtable[fd].refcount) + 1;
   114f8:	0140      	lsls	r0, r0, #5
   114fa:	3008      	adds	r0, #8
   114fc:	4b05      	ldr	r3, [pc, #20]	; (11514 <z_fd_ref+0x1c>)
   114fe:	4403      	add	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11500:	e8d3 0fef 	ldaex	r0, [r3]
   11504:	1c42      	adds	r2, r0, #1
   11506:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1150a:	2900      	cmp	r1, #0
   1150c:	d1f8      	bne.n	11500 <z_fd_ref+0x8>
}
   1150e:	3001      	adds	r0, #1
   11510:	4770      	bx	lr
   11512:	bf00      	nop
   11514:	2000e170 	.word	0x2000e170

00011518 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   11518:	b570      	push	{r4, r5, r6, lr}
   1151a:	4604      	mov	r4, r0
   1151c:	460d      	mov	r5, r1
   1151e:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   11520:	f7ff ff90 	bl	11444 <_check_fd>
   11524:	2800      	cmp	r0, #0
   11526:	db0f      	blt.n	11548 <z_get_fd_obj+0x30>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   11528:	b12d      	cbz	r5, 11536 <z_get_fd_obj+0x1e>
   1152a:	4b08      	ldr	r3, [pc, #32]	; (1154c <z_get_fd_obj+0x34>)
   1152c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   11530:	685b      	ldr	r3, [r3, #4]
   11532:	42ab      	cmp	r3, r5
   11534:	d103      	bne.n	1153e <z_get_fd_obj+0x26>
		errno = err;
		return NULL;
	}

	return entry->obj;
   11536:	0164      	lsls	r4, r4, #5
   11538:	4b04      	ldr	r3, [pc, #16]	; (1154c <z_get_fd_obj+0x34>)
   1153a:	5918      	ldr	r0, [r3, r4]
}
   1153c:	bd70      	pop	{r4, r5, r6, pc}
		errno = err;
   1153e:	f011 fd2a 	bl	22f96 <__errno>
   11542:	6006      	str	r6, [r0, #0]
		return NULL;
   11544:	2000      	movs	r0, #0
   11546:	e7f9      	b.n	1153c <z_get_fd_obj+0x24>
		return NULL;
   11548:	2000      	movs	r0, #0
   1154a:	e7f7      	b.n	1153c <z_get_fd_obj+0x24>
   1154c:	2000e170 	.word	0x2000e170

00011550 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   11550:	b570      	push	{r4, r5, r6, lr}
   11552:	4604      	mov	r4, r0
   11554:	460e      	mov	r6, r1
   11556:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   11558:	f7ff ff74 	bl	11444 <_check_fd>
   1155c:	2800      	cmp	r0, #0
   1155e:	db10      	blt.n	11582 <z_get_fd_obj_and_vtable+0x32>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   11560:	4b09      	ldr	r3, [pc, #36]	; (11588 <z_get_fd_obj_and_vtable+0x38>)
   11562:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   11566:	685b      	ldr	r3, [r3, #4]
   11568:	6033      	str	r3, [r6, #0]

	if (lock) {
   1156a:	b135      	cbz	r5, 1157a <z_get_fd_obj_and_vtable+0x2a>
		*lock = &entry->lock;
   1156c:	0163      	lsls	r3, r4, #5
   1156e:	f103 0208 	add.w	r2, r3, #8
   11572:	4b05      	ldr	r3, [pc, #20]	; (11588 <z_get_fd_obj_and_vtable+0x38>)
   11574:	4413      	add	r3, r2
   11576:	3304      	adds	r3, #4
   11578:	602b      	str	r3, [r5, #0]
	}

	return entry->obj;
   1157a:	0164      	lsls	r4, r4, #5
   1157c:	4b02      	ldr	r3, [pc, #8]	; (11588 <z_get_fd_obj_and_vtable+0x38>)
   1157e:	5918      	ldr	r0, [r3, r4]
}
   11580:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   11582:	2000      	movs	r0, #0
   11584:	e7fc      	b.n	11580 <z_get_fd_obj_and_vtable+0x30>
   11586:	bf00      	nop
   11588:	2000e170 	.word	0x2000e170

0001158c <z_reserve_fd>:

int z_reserve_fd(void)
{
   1158c:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   1158e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11596:	480e      	ldr	r0, [pc, #56]	; (115d0 <z_reserve_fd+0x44>)
   11598:	f00d fd4e 	bl	1f038 <z_impl_k_mutex_lock>
	int fd;

	(void)k_mutex_lock(&fdtable_lock, K_FOREVER);

	fd = _find_fd_entry();
   1159c:	f7ff ff6e 	bl	1147c <_find_fd_entry>
	if (fd >= 0) {
   115a0:	1e04      	subs	r4, r0, #0
   115a2:	da04      	bge.n	115ae <z_reserve_fd+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   115a4:	480a      	ldr	r0, [pc, #40]	; (115d0 <z_reserve_fd+0x44>)
   115a6:	f00d fdd1 	bl	1f14c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   115aa:	4620      	mov	r0, r4
   115ac:	bd10      	pop	{r4, pc}
		(void)z_fd_ref(fd);
   115ae:	4620      	mov	r0, r4
   115b0:	f7ff ffa2 	bl	114f8 <z_fd_ref>
		fdtable[fd].obj = NULL;
   115b4:	4807      	ldr	r0, [pc, #28]	; (115d4 <z_reserve_fd+0x48>)
   115b6:	0163      	lsls	r3, r4, #5
   115b8:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   115bc:	2200      	movs	r2, #0
   115be:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   115c0:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   115c2:	3308      	adds	r3, #8
   115c4:	4418      	add	r0, r3
   115c6:	3004      	adds	r0, #4
	return z_impl_k_mutex_init(mutex);
   115c8:	f014 fc26 	bl	25e18 <z_impl_k_mutex_init>
   115cc:	e7ea      	b.n	115a4 <z_reserve_fd+0x18>
   115ce:	bf00      	nop
   115d0:	2000c818 	.word	0x2000c818
   115d4:	2000e170 	.word	0x2000e170

000115d8 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   115d8:	b538      	push	{r3, r4, r5, lr}
   115da:	4603      	mov	r3, r0
   115dc:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   115de:	4a09      	ldr	r2, [pc, #36]	; (11604 <z_finalize_fd+0x2c>)
   115e0:	015d      	lsls	r5, r3, #5
   115e2:	eb02 1443 	add.w	r4, r2, r3, lsl #5
   115e6:	5151      	str	r1, [r2, r5]
	fdtable[fd].vtable = vtable;
   115e8:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   115ea:	b150      	cbz	r0, 11602 <z_finalize_fd+0x2a>
   115ec:	68c2      	ldr	r2, [r0, #12]
   115ee:	b142      	cbz	r2, 11602 <z_finalize_fd+0x2a>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   115f0:	462b      	mov	r3, r5
   115f2:	3308      	adds	r3, #8
   115f4:	4a03      	ldr	r2, [pc, #12]	; (11604 <z_finalize_fd+0x2c>)
   115f6:	4413      	add	r3, r2
   115f8:	3304      	adds	r3, #4
   115fa:	f240 1205 	movw	r2, #261	; 0x105
   115fe:	f010 fa08 	bl	21a12 <z_fdtable_call_ioctl>
					   &fdtable[fd].lock);
	}
}
   11602:	bd38      	pop	{r3, r4, r5, pc}
   11604:	2000e170 	.word	0x2000e170

00011608 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   11608:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1160a:	680b      	ldr	r3, [r1, #0]
   1160c:	3301      	adds	r3, #1
   1160e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   11610:	4b01      	ldr	r3, [pc, #4]	; (11618 <char_out+0x10>)
   11612:	681b      	ldr	r3, [r3, #0]
   11614:	4798      	blx	r3
}
   11616:	bd08      	pop	{r3, pc}
   11618:	2000c5e0 	.word	0x2000c5e0

0001161c <__printk_hook_install>:
	_char_out = fn;
   1161c:	4b01      	ldr	r3, [pc, #4]	; (11624 <__printk_hook_install+0x8>)
   1161e:	6018      	str	r0, [r3, #0]
}
   11620:	4770      	bx	lr
   11622:	bf00      	nop
   11624:	2000c5e0 	.word	0x2000c5e0

00011628 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   11628:	b500      	push	{lr}
   1162a:	b083      	sub	sp, #12
   1162c:	4602      	mov	r2, r0
   1162e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   11630:	2100      	movs	r1, #0
   11632:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   11634:	a901      	add	r1, sp, #4
   11636:	4803      	ldr	r0, [pc, #12]	; (11644 <vprintk+0x1c>)
   11638:	f000 fbe0 	bl	11dfc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1163c:	b003      	add	sp, #12
   1163e:	f85d fb04 	ldr.w	pc, [sp], #4
   11642:	bf00      	nop
   11644:	00011609 	.word	0x00011609

00011648 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11648:	b510      	push	{r4, lr}
   1164a:	b084      	sub	sp, #16
   1164c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1164e:	9001      	str	r0, [sp, #4]
   11650:	9102      	str	r1, [sp, #8]
   11652:	2100      	movs	r1, #0
   11654:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   11656:	a901      	add	r1, sp, #4
   11658:	4805      	ldr	r0, [pc, #20]	; (11670 <vsnprintk+0x28>)
   1165a:	f000 fbcf 	bl	11dfc <cbvprintf>

	if (ctx.count < ctx.max) {
   1165e:	9b03      	ldr	r3, [sp, #12]
   11660:	9a02      	ldr	r2, [sp, #8]
   11662:	4293      	cmp	r3, r2
   11664:	da01      	bge.n	1166a <vsnprintk+0x22>
		str[ctx.count] = '\0';
   11666:	2200      	movs	r2, #0
   11668:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   1166a:	9803      	ldr	r0, [sp, #12]
   1166c:	b004      	add	sp, #16
   1166e:	bd10      	pop	{r4, pc}
   11670:	00021b7b 	.word	0x00021b7b

00011674 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11678:	b083      	sub	sp, #12
   1167a:	4604      	mov	r4, r0
   1167c:	4608      	mov	r0, r1
   1167e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11680:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11682:	f013 0f08 	tst.w	r3, #8
   11686:	d105      	bne.n	11694 <process_event+0x20>
   11688:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1168c:	2300      	movs	r3, #0
   1168e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   11690:	9301      	str	r3, [sp, #4]
}
   11692:	e069      	b.n	11768 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   11694:	2901      	cmp	r1, #1
   11696:	d009      	beq.n	116ac <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11698:	f043 0320 	orr.w	r3, r3, #32
   1169c:	8323      	strh	r3, [r4, #24]
   1169e:	f385 8811 	msr	BASEPRI, r5
   116a2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   116a6:	b003      	add	sp, #12
   116a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   116ac:	f043 0310 	orr.w	r3, r3, #16
   116b0:	8323      	strh	r3, [r4, #24]
   116b2:	e7f4      	b.n	1169e <process_event+0x2a>
			evt = process_recheck(mgr);
   116b4:	4620      	mov	r0, r4
   116b6:	f010 fabc 	bl	21c32 <process_recheck>
   116ba:	e057      	b.n	1176c <process_event+0xf8>
			res = mgr->last_res;
   116bc:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   116c0:	464a      	mov	r2, r9
   116c2:	4669      	mov	r1, sp
   116c4:	4620      	mov	r0, r4
   116c6:	f010 facd 	bl	21c64 <process_complete>
		onoff_transition_fn transit = NULL;
   116ca:	2700      	movs	r7, #0
   116cc:	e05a      	b.n	11784 <process_event+0x110>
			transit = mgr->transitions->start;
   116ce:	6923      	ldr	r3, [r4, #16]
   116d0:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   116d2:	2106      	movs	r1, #6
   116d4:	4620      	mov	r0, r4
   116d6:	f010 fa85 	bl	21be4 <set_state>
		res = 0;
   116da:	f04f 0900 	mov.w	r9, #0
   116de:	e051      	b.n	11784 <process_event+0x110>
			transit = mgr->transitions->stop;
   116e0:	6923      	ldr	r3, [r4, #16]
   116e2:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   116e4:	2104      	movs	r1, #4
   116e6:	4620      	mov	r0, r4
   116e8:	f010 fa7c 	bl	21be4 <set_state>
		res = 0;
   116ec:	f04f 0900 	mov.w	r9, #0
   116f0:	e048      	b.n	11784 <process_event+0x110>
			transit = mgr->transitions->reset;
   116f2:	6923      	ldr	r3, [r4, #16]
   116f4:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   116f6:	2105      	movs	r1, #5
   116f8:	4620      	mov	r0, r4
   116fa:	f010 fa73 	bl	21be4 <set_state>
		res = 0;
   116fe:	f04f 0900 	mov.w	r9, #0
   11702:	e03f      	b.n	11784 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   11704:	2200      	movs	r2, #0
   11706:	e046      	b.n	11796 <process_event+0x122>
   11708:	2200      	movs	r2, #0
   1170a:	e044      	b.n	11796 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1170c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   11710:	8323      	strh	r3, [r4, #24]
   11712:	f385 8811 	msr	BASEPRI, r5
   11716:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1171a:	2900      	cmp	r1, #0
   1171c:	d144      	bne.n	117a8 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1171e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   11720:	b12b      	cbz	r3, 1172e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   11722:	464b      	mov	r3, r9
   11724:	4642      	mov	r2, r8
   11726:	4669      	mov	r1, sp
   11728:	4620      	mov	r0, r4
   1172a:	f010 fb11 	bl	21d50 <notify_all>
			if (transit != NULL) {
   1172e:	b117      	cbz	r7, 11736 <process_event+0xc2>
				transit(mgr, transition_complete);
   11730:	4925      	ldr	r1, [pc, #148]	; (117c8 <process_event+0x154>)
   11732:	4620      	mov	r0, r4
   11734:	47b8      	blx	r7
	__asm__ volatile(
   11736:	f04f 0320 	mov.w	r3, #32
   1173a:	f3ef 8511 	mrs	r5, BASEPRI
   1173e:	f383 8812 	msr	BASEPRI_MAX, r3
   11742:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11746:	8b23      	ldrh	r3, [r4, #24]
   11748:	f023 0308 	bic.w	r3, r3, #8
   1174c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1174e:	8b23      	ldrh	r3, [r4, #24]
   11750:	f013 0f10 	tst.w	r3, #16
   11754:	d02e      	beq.n	117b4 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11756:	f023 0310 	bic.w	r3, r3, #16
   1175a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1175c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1175e:	8b26      	ldrh	r6, [r4, #24]
   11760:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   11764:	2800      	cmp	r0, #0
   11766:	d09a      	beq.n	1169e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   11768:	2802      	cmp	r0, #2
   1176a:	d0a3      	beq.n	116b4 <process_event+0x40>
		if (evt == EVT_NOP) {
   1176c:	2800      	cmp	r0, #0
   1176e:	d096      	beq.n	1169e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   11770:	2801      	cmp	r0, #1
   11772:	d0a3      	beq.n	116bc <process_event+0x48>
		} else if (evt == EVT_START) {
   11774:	2803      	cmp	r0, #3
   11776:	d0aa      	beq.n	116ce <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   11778:	2804      	cmp	r0, #4
   1177a:	d0b1      	beq.n	116e0 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   1177c:	2805      	cmp	r0, #5
   1177e:	d0b8      	beq.n	116f2 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   11780:	2700      	movs	r7, #0
		res = 0;
   11782:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11784:	8b23      	ldrh	r3, [r4, #24]
   11786:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1178a:	45b0      	cmp	r8, r6
   1178c:	d0ba      	beq.n	11704 <process_event+0x90>
   1178e:	68a2      	ldr	r2, [r4, #8]
   11790:	2a00      	cmp	r2, #0
   11792:	d0b9      	beq.n	11708 <process_event+0x94>
   11794:	2201      	movs	r2, #1
		if (do_monitors
   11796:	4611      	mov	r1, r2
   11798:	2a00      	cmp	r2, #0
   1179a:	d1b7      	bne.n	1170c <process_event+0x98>
   1179c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   1179e:	2a00      	cmp	r2, #0
   117a0:	d1b4      	bne.n	1170c <process_event+0x98>
		    || (transit != NULL)) {
   117a2:	2f00      	cmp	r7, #0
   117a4:	d1b2      	bne.n	1170c <process_event+0x98>
   117a6:	e7d2      	b.n	1174e <process_event+0xda>
				notify_monitors(mgr, state, res);
   117a8:	464a      	mov	r2, r9
   117aa:	4641      	mov	r1, r8
   117ac:	4620      	mov	r0, r4
   117ae:	f010 fa21 	bl	21bf4 <notify_monitors>
   117b2:	e7b4      	b.n	1171e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   117b4:	f013 0f20 	tst.w	r3, #32
   117b8:	d004      	beq.n	117c4 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   117ba:	f023 0320 	bic.w	r3, r3, #32
   117be:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   117c0:	2002      	movs	r0, #2
   117c2:	e7cc      	b.n	1175e <process_event+0xea>
		evt = EVT_NOP;
   117c4:	2000      	movs	r0, #0
   117c6:	e7ca      	b.n	1175e <process_event+0xea>
   117c8:	00021d7f 	.word	0x00021d7f

000117cc <time_days_from_civil>:
 * @see http://howardhinnant.github.io/date_algorithms.html#days_from_civil
 */
static int64_t time_days_from_civil(int64_t y,
				    unsigned int m,
				    unsigned int d)
{
   117cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   117d0:	4616      	mov	r6, r2
   117d2:	461f      	mov	r7, r3
	y -= m <= 2;
   117d4:	2e02      	cmp	r6, #2
   117d6:	bf8c      	ite	hi
   117d8:	2300      	movhi	r3, #0
   117da:	2301      	movls	r3, #1
   117dc:	2200      	movs	r2, #0
   117de:	ebb0 0803 	subs.w	r8, r0, r3
   117e2:	eb61 0902 	sbc.w	r9, r1, r2

	int64_t era = (y >= 0 ? y : y - 399) / 400;
   117e6:	f1b8 0f00 	cmp.w	r8, #0
   117ea:	f179 0300 	sbcs.w	r3, r9, #0
   117ee:	db4e      	blt.n	1188e <time_days_from_civil+0xc2>
   117f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   117f4:	2300      	movs	r3, #0
   117f6:	4640      	mov	r0, r8
   117f8:	4649      	mov	r1, r9
   117fa:	f7ff f93f 	bl	10a7c <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   117fe:	4b2b      	ldr	r3, [pc, #172]	; (118ac <time_days_from_civil+0xe0>)
   11800:	fb03 8800 	mla	r8, r3, r0, r8
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   11804:	2e02      	cmp	r6, #2
   11806:	d94e      	bls.n	118a6 <time_days_from_civil+0xda>
   11808:	f06f 0202 	mvn.w	r2, #2
   1180c:	4416      	add	r6, r2
   1180e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   11812:	eb06 1306 	add.w	r3, r6, r6, lsl #4
   11816:	3302      	adds	r3, #2
   11818:	4e25      	ldr	r6, [pc, #148]	; (118b0 <time_days_from_civil+0xe4>)
   1181a:	fba6 2303 	umull	r2, r3, r6, r3
   1181e:	eb07 0793 	add.w	r7, r7, r3, lsr #2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   11822:	ea4f 0398 	mov.w	r3, r8, lsr #2
   11826:	f240 126d 	movw	r2, #365	; 0x16d
   1182a:	fb02 3208 	mla	r2, r2, r8, r3
   1182e:	4b21      	ldr	r3, [pc, #132]	; (118b4 <time_days_from_civil+0xe8>)
   11830:	fba3 3808 	umull	r3, r8, r3, r8
   11834:	eba2 1858 	sub.w	r8, r2, r8, lsr #5
   11838:	4447      	add	r7, r8

	return era * 146097 + (time_t)doe - 719468;
   1183a:	00cb      	lsls	r3, r1, #3
   1183c:	00c2      	lsls	r2, r0, #3
   1183e:	ea43 7650 	orr.w	r6, r3, r0, lsr #29
   11842:	1813      	adds	r3, r2, r0
   11844:	eb46 0201 	adc.w	r2, r6, r1
   11848:	0116      	lsls	r6, r2, #4
   1184a:	ea46 7613 	orr.w	r6, r6, r3, lsr #28
   1184e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   11852:	4632      	mov	r2, r6
   11854:	eb1c 0300 	adds.w	r3, ip, r0
   11858:	eb41 0202 	adc.w	r2, r1, r2
   1185c:	0116      	lsls	r6, r2, #4
   1185e:	ea46 7613 	orr.w	r6, r6, r3, lsr #28
   11862:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   11866:	ebbc 0300 	subs.w	r3, ip, r0
   1186a:	eb66 0201 	sbc.w	r2, r6, r1
   1186e:	0191      	lsls	r1, r2, #6
   11870:	ea41 6193 	orr.w	r1, r1, r3, lsr #26
   11874:	0198      	lsls	r0, r3, #6
   11876:	1ac4      	subs	r4, r0, r3
   11878:	eb61 0502 	sbc.w	r5, r1, r2
   1187c:	19e4      	adds	r4, r4, r7
   1187e:	f145 0500 	adc.w	r5, r5, #0
   11882:	480d      	ldr	r0, [pc, #52]	; (118b8 <time_days_from_civil+0xec>)
}
   11884:	1820      	adds	r0, r4, r0
   11886:	f145 31ff 	adc.w	r1, r5, #4294967295	; 0xffffffff
   1188a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1188e:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   11892:	f44f 72c8 	mov.w	r2, #400	; 0x190
   11896:	2300      	movs	r3, #0
   11898:	eb18 0000 	adds.w	r0, r8, r0
   1189c:	f149 31ff 	adc.w	r1, r9, #4294967295	; 0xffffffff
   118a0:	f7ff f8ec 	bl	10a7c <__aeabi_ldivmod>
   118a4:	e7ab      	b.n	117fe <time_days_from_civil+0x32>
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   118a6:	2209      	movs	r2, #9
   118a8:	e7b0      	b.n	1180c <time_days_from_civil+0x40>
   118aa:	bf00      	nop
   118ac:	fffffe70 	.word	0xfffffe70
   118b0:	cccccccd 	.word	0xcccccccd
   118b4:	51eb851f 	.word	0x51eb851f
   118b8:	fff50594 	.word	0xfff50594

000118bc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   118bc:	b410      	push	{r4}
   118be:	4604      	mov	r4, r0
	const char *sp = *str;
   118c0:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   118c2:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   118c4:	7813      	ldrb	r3, [r2, #0]
   118c6:	4908      	ldr	r1, [pc, #32]	; (118e8 <extract_decimal+0x2c>)
   118c8:	5c59      	ldrb	r1, [r3, r1]
   118ca:	f011 0f04 	tst.w	r1, #4
   118ce:	d006      	beq.n	118de <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
   118d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   118d4:	3201      	adds	r2, #1
   118d6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   118da:	3830      	subs	r0, #48	; 0x30
   118dc:	e7f2      	b.n	118c4 <extract_decimal+0x8>
	}
	*str = sp;
   118de:	6022      	str	r2, [r4, #0]
	return val;
}
   118e0:	f85d 4b04 	ldr.w	r4, [sp], #4
   118e4:	4770      	bx	lr
   118e6:	bf00      	nop
   118e8:	0002a397 	.word	0x0002a397

000118ec <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   118ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118f0:	b083      	sub	sp, #12
   118f2:	4604      	mov	r4, r0
   118f4:	460d      	mov	r5, r1
   118f6:	9201      	str	r2, [sp, #4]
   118f8:	469a      	mov	sl, r3
   118fa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   118fe:	78d3      	ldrb	r3, [r2, #3]
   11900:	4a31      	ldr	r2, [pc, #196]	; (119c8 <encode_uint+0xdc>)
   11902:	f813 b002 	ldrb.w	fp, [r3, r2]
   11906:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   1190a:	2b6f      	cmp	r3, #111	; 0x6f
   1190c:	d00f      	beq.n	1192e <encode_uint+0x42>
   1190e:	d906      	bls.n	1191e <encode_uint+0x32>
   11910:	2b70      	cmp	r3, #112	; 0x70
   11912:	d00f      	beq.n	11934 <encode_uint+0x48>
   11914:	2b78      	cmp	r3, #120	; 0x78
   11916:	d110      	bne.n	1193a <encode_uint+0x4e>
		return 16;
   11918:	f04f 0910 	mov.w	r9, #16
   1191c:	e023      	b.n	11966 <encode_uint+0x7a>
	switch (specifier) {
   1191e:	2b58      	cmp	r3, #88	; 0x58
   11920:	d002      	beq.n	11928 <encode_uint+0x3c>
   11922:	f04f 090a 	mov.w	r9, #10
   11926:	e01e      	b.n	11966 <encode_uint+0x7a>
		return 16;
   11928:	f04f 0910 	mov.w	r9, #16
   1192c:	e01b      	b.n	11966 <encode_uint+0x7a>
		return 8;
   1192e:	f04f 0908 	mov.w	r9, #8
   11932:	e018      	b.n	11966 <encode_uint+0x7a>
		return 16;
   11934:	f04f 0910 	mov.w	r9, #16
   11938:	e015      	b.n	11966 <encode_uint+0x7a>
	switch (specifier) {
   1193a:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   1193e:	e012      	b.n	11966 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   11940:	b2d2      	uxtb	r2, r2
   11942:	3230      	adds	r2, #48	; 0x30
   11944:	b2d2      	uxtb	r2, r2
   11946:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   1194a:	4632      	mov	r2, r6
   1194c:	463b      	mov	r3, r7
   1194e:	4620      	mov	r0, r4
   11950:	4629      	mov	r1, r5
   11952:	f7ff f8e3 	bl	10b1c <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   11956:	42bd      	cmp	r5, r7
   11958:	bf08      	it	eq
   1195a:	42b4      	cmpeq	r4, r6
   1195c:	d318      	bcc.n	11990 <encode_uint+0xa4>
   1195e:	45d0      	cmp	r8, sl
   11960:	d916      	bls.n	11990 <encode_uint+0xa4>
		value /= radix;
   11962:	4604      	mov	r4, r0
   11964:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   11966:	464e      	mov	r6, r9
   11968:	2700      	movs	r7, #0
   1196a:	464a      	mov	r2, r9
   1196c:	463b      	mov	r3, r7
   1196e:	4620      	mov	r0, r4
   11970:	4629      	mov	r1, r5
   11972:	f7ff f8d3 	bl	10b1c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11976:	2a09      	cmp	r2, #9
   11978:	d9e2      	bls.n	11940 <encode_uint+0x54>
   1197a:	f1bb 0f01 	cmp.w	fp, #1
   1197e:	d003      	beq.n	11988 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   11980:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11982:	3257      	adds	r2, #87	; 0x57
   11984:	b2d2      	uxtb	r2, r2
   11986:	e7de      	b.n	11946 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   11988:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1198a:	3237      	adds	r2, #55	; 0x37
   1198c:	b2d2      	uxtb	r2, r2
   1198e:	e7da      	b.n	11946 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   11990:	9b01      	ldr	r3, [sp, #4]
   11992:	781b      	ldrb	r3, [r3, #0]
   11994:	f013 0f20 	tst.w	r3, #32
   11998:	d005      	beq.n	119a6 <encode_uint+0xba>
		if (radix == 8) {
   1199a:	f1b9 0f08 	cmp.w	r9, #8
   1199e:	d006      	beq.n	119ae <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   119a0:	f1b9 0f10 	cmp.w	r9, #16
   119a4:	d009      	beq.n	119ba <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   119a6:	4640      	mov	r0, r8
   119a8:	b003      	add	sp, #12
   119aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   119ae:	9a01      	ldr	r2, [sp, #4]
   119b0:	7893      	ldrb	r3, [r2, #2]
   119b2:	f043 0308 	orr.w	r3, r3, #8
   119b6:	7093      	strb	r3, [r2, #2]
   119b8:	e7f5      	b.n	119a6 <encode_uint+0xba>
			conv->altform_0c = true;
   119ba:	9a01      	ldr	r2, [sp, #4]
   119bc:	7893      	ldrb	r3, [r2, #2]
   119be:	f043 0310 	orr.w	r3, r3, #16
   119c2:	7093      	strb	r3, [r2, #2]
   119c4:	e7ef      	b.n	119a6 <encode_uint+0xba>
   119c6:	bf00      	nop
   119c8:	0002a397 	.word	0x0002a397

000119cc <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
   119cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d0:	b089      	sub	sp, #36	; 0x24
   119d2:	4692      	mov	sl, r2
   119d4:	461d      	mov	r5, r3
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
   119d6:	2800      	cmp	r0, #0
   119d8:	f171 0300 	sbcs.w	r3, r1, #0
   119dc:	db08      	blt.n	119f0 <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
   119de:	f89a 3000 	ldrb.w	r3, [sl]
   119e2:	f013 0f08 	tst.w	r3, #8
   119e6:	d014      	beq.n	11a12 <encode_float+0x46>
		*sign = '+';
   119e8:	232b      	movs	r3, #43	; 0x2b
   119ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   119ec:	7013      	strb	r3, [r2, #0]
   119ee:	e002      	b.n	119f6 <encode_float+0x2a>
		*sign = '-';
   119f0:	232d      	movs	r3, #45	; 0x2d
   119f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   119f4:	7013      	strb	r3, [r2, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
   119f6:	f89a b003 	ldrb.w	fp, [sl, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   119fa:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   119fe:	4602      	mov	r2, r0
   11a00:	f3c1 0313 	ubfx	r3, r1, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   11a04:	b964      	cbnz	r4, 11a20 <encode_float+0x54>
   11a06:	ea52 0103 	orrs.w	r1, r2, r3
   11a0a:	d130      	bne.n	11a6e <encode_float+0xa2>
   11a0c:	f04f 0e00 	mov.w	lr, #0
   11a10:	e008      	b.n	11a24 <encode_float+0x58>
	} else if (conv->flag_space) {
   11a12:	f013 0f10 	tst.w	r3, #16
   11a16:	d0ee      	beq.n	119f6 <encode_float+0x2a>
		*sign = ' ';
   11a18:	2320      	movs	r3, #32
   11a1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11a1c:	7013      	strb	r3, [r2, #0]
   11a1e:	e7ea      	b.n	119f6 <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11a20:	f04f 0e00 	mov.w	lr, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   11a24:	f240 71ff 	movw	r1, #2047	; 0x7ff
   11a28:	428c      	cmp	r4, r1
   11a2a:	d023      	beq.n	11a74 <encode_float+0xa8>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
   11a2c:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
   11a30:	d060      	beq.n	11af4 <encode_float+0x128>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
   11a32:	ea4f 2cc3 	mov.w	ip, r3, lsl #11
   11a36:	ea4c 5c52 	orr.w	ip, ip, r2, lsr #21
   11a3a:	02d2      	lsls	r2, r2, #11
	fract &= ~SIGN_MASK;
   11a3c:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
   11a40:	9206      	str	r2, [sp, #24]
   11a42:	f8cd c01c 	str.w	ip, [sp, #28]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
   11a46:	ea44 0002 	orr.w	r0, r4, r2
   11a4a:	17e3      	asrs	r3, r4, #31
   11a4c:	ea43 010c 	orr.w	r1, r3, ip
   11a50:	ea50 0301 	orrs.w	r3, r0, r1
   11a54:	d008      	beq.n	11a68 <encode_float+0x9c>
		if (is_subnormal) {
   11a56:	f1be 0f00 	cmp.w	lr, #0
   11a5a:	d14f      	bne.n	11afc <encode_float+0x130>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   11a5c:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
   11a60:	9b07      	ldr	r3, [sp, #28]
   11a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11a66:	9307      	str	r3, [sp, #28]
		c = 'f';
   11a68:	f04f 0800 	mov.w	r8, #0
   11a6c:	e061      	b.n	11b32 <encode_float+0x166>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11a6e:	f04f 0e01 	mov.w	lr, #1
   11a72:	e7d7      	b.n	11a24 <encode_float+0x58>
		if (fract == 0) {
   11a74:	4313      	orrs	r3, r2
   11a76:	d122      	bne.n	11abe <encode_float+0xf2>
			if (isupper((int)c)) {
   11a78:	4bad      	ldr	r3, [pc, #692]	; (11d30 <encode_float+0x364>)
   11a7a:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11a7e:	f003 0303 	and.w	r3, r3, #3
   11a82:	2b01      	cmp	r3, #1
   11a84:	d011      	beq.n	11aaa <encode_float+0xde>
				*buf++ = 'i';
   11a86:	2369      	movs	r3, #105	; 0x69
   11a88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11a8a:	7013      	strb	r3, [r2, #0]
				*buf++ = 'n';
   11a8c:	236e      	movs	r3, #110	; 0x6e
   11a8e:	7053      	strb	r3, [r2, #1]
				*buf++ = 'f';
   11a90:	3203      	adds	r2, #3
   11a92:	2366      	movs	r3, #102	; 0x66
   11a94:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11a96:	708b      	strb	r3, [r1, #2]
		conv->flag_zero = false;
   11a98:	f89a 3000 	ldrb.w	r3, [sl]
   11a9c:	f36f 1386 	bfc	r3, #6, #1
   11aa0:	f88a 3000 	strb.w	r3, [sl]
		*bpe = buf;
   11aa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11aa6:	601a      	str	r2, [r3, #0]
		return bps;
   11aa8:	e192      	b.n	11dd0 <encode_float+0x404>
				*buf++ = 'I';
   11aaa:	2349      	movs	r3, #73	; 0x49
   11aac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11aae:	7013      	strb	r3, [r2, #0]
				*buf++ = 'N';
   11ab0:	234e      	movs	r3, #78	; 0x4e
   11ab2:	7053      	strb	r3, [r2, #1]
				*buf++ = 'F';
   11ab4:	3203      	adds	r2, #3
   11ab6:	2346      	movs	r3, #70	; 0x46
   11ab8:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11aba:	708b      	strb	r3, [r1, #2]
   11abc:	e7ec      	b.n	11a98 <encode_float+0xcc>
			if (isupper((int)c)) {
   11abe:	4b9c      	ldr	r3, [pc, #624]	; (11d30 <encode_float+0x364>)
   11ac0:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11ac4:	f003 0303 	and.w	r3, r3, #3
   11ac8:	2b01      	cmp	r3, #1
   11aca:	d009      	beq.n	11ae0 <encode_float+0x114>
				*buf++ = 'n';
   11acc:	236e      	movs	r3, #110	; 0x6e
   11ace:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11ad0:	7013      	strb	r3, [r2, #0]
				*buf++ = 'a';
   11ad2:	2261      	movs	r2, #97	; 0x61
   11ad4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11ad6:	704a      	strb	r2, [r1, #1]
				*buf++ = 'n';
   11ad8:	460a      	mov	r2, r1
   11ada:	3203      	adds	r2, #3
   11adc:	708b      	strb	r3, [r1, #2]
   11ade:	e7db      	b.n	11a98 <encode_float+0xcc>
				*buf++ = 'N';
   11ae0:	234e      	movs	r3, #78	; 0x4e
   11ae2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11ae4:	7013      	strb	r3, [r2, #0]
				*buf++ = 'A';
   11ae6:	2241      	movs	r2, #65	; 0x41
   11ae8:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11aea:	704a      	strb	r2, [r1, #1]
				*buf++ = 'N';
   11aec:	460a      	mov	r2, r1
   11aee:	3203      	adds	r2, #3
   11af0:	708b      	strb	r3, [r1, #2]
   11af2:	e7d1      	b.n	11a98 <encode_float+0xcc>
		c = 'f';
   11af4:	f04f 0b66 	mov.w	fp, #102	; 0x66
   11af8:	e79b      	b.n	11a32 <encode_float+0x66>
				expo--;
   11afa:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   11afc:	9b06      	ldr	r3, [sp, #24]
   11afe:	9a07      	ldr	r2, [sp, #28]
   11b00:	eb13 0803 	adds.w	r8, r3, r3
   11b04:	eb42 0902 	adc.w	r9, r2, r2
   11b08:	e9cd 8906 	strd	r8, r9, [sp, #24]
   11b0c:	f1b8 0f00 	cmp.w	r8, #0
   11b10:	f179 0300 	sbcs.w	r3, r9, #0
   11b14:	daf1      	bge.n	11afa <encode_float+0x12e>
   11b16:	e7a1      	b.n	11a5c <encode_float+0x90>
			fract >>= 1;
			expo++;
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
   11b18:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   11b1c:	0098      	lsls	r0, r3, #2
   11b1e:	ea4c 7493 	orr.w	r4, ip, r3, lsr #30
   11b22:	18c3      	adds	r3, r0, r3
   11b24:	eb44 0202 	adc.w	r2, r4, r2
   11b28:	9306      	str	r3, [sp, #24]
   11b2a:	9207      	str	r2, [sp, #28]
		expo++;
   11b2c:	1c8c      	adds	r4, r1, #2
		decexp--;
   11b2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (expo < -2) {
   11b32:	f114 0f02 	cmn.w	r4, #2
   11b36:	da26      	bge.n	11b86 <encode_float+0x1ba>
			fract >>= 1;
   11b38:	9907      	ldr	r1, [sp, #28]
   11b3a:	9b06      	ldr	r3, [sp, #24]
   11b3c:	085b      	lsrs	r3, r3, #1
   11b3e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   11b42:	084a      	lsrs	r2, r1, #1
   11b44:	9306      	str	r3, [sp, #24]
   11b46:	9207      	str	r2, [sp, #28]
			expo++;
   11b48:	4621      	mov	r1, r4
   11b4a:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   11b4c:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   11b50:	d2f2      	bcs.n	11b38 <encode_float+0x16c>
   11b52:	e7e1      	b.n	11b18 <encode_float+0x14c>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
   11b54:	9b06      	ldr	r3, [sp, #24]
   11b56:	3302      	adds	r3, #2
   11b58:	9a07      	ldr	r2, [sp, #28]
   11b5a:	f142 0200 	adc.w	r2, r2, #0
   11b5e:	9306      	str	r3, [sp, #24]
   11b60:	9207      	str	r2, [sp, #28]
		_ldiv5(&fract);
   11b62:	a806      	add	r0, sp, #24
   11b64:	f010 fbe2 	bl	2232c <_ldiv5>
		expo--;
   11b68:	3c01      	subs	r4, #1
		decexp++;
   11b6a:	f108 0801 	add.w	r8, r8, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
   11b6e:	9b06      	ldr	r3, [sp, #24]
   11b70:	9a07      	ldr	r2, [sp, #28]
   11b72:	18de      	adds	r6, r3, r3
   11b74:	eb42 0702 	adc.w	r7, r2, r2
   11b78:	e9cd 6706 	strd	r6, r7, [sp, #24]
			expo--;
   11b7c:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
   11b7e:	2e00      	cmp	r6, #0
   11b80:	f177 0300 	sbcs.w	r3, r7, #0
   11b84:	daf3      	bge.n	11b6e <encode_float+0x1a2>
	while (expo > 0) {
   11b86:	2c00      	cmp	r4, #0
   11b88:	dce4      	bgt.n	11b54 <encode_float+0x188>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
   11b8a:	f1c4 0104 	rsb	r1, r4, #4
   11b8e:	9a07      	ldr	r2, [sp, #28]
   11b90:	341c      	adds	r4, #28
   11b92:	f1a1 0020 	sub.w	r0, r1, #32
   11b96:	9b06      	ldr	r3, [sp, #24]
   11b98:	40cb      	lsrs	r3, r1
   11b9a:	fa02 f404 	lsl.w	r4, r2, r4
   11b9e:	4323      	orrs	r3, r4
   11ba0:	fa22 f000 	lsr.w	r0, r2, r0
   11ba4:	4303      	orrs	r3, r0
   11ba6:	40ca      	lsrs	r2, r1
   11ba8:	9306      	str	r3, [sp, #24]
   11baa:	9207      	str	r2, [sp, #28]

	if ((c == 'g') || (c == 'G')) {
   11bac:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   11bb0:	d012      	beq.n	11bd8 <encode_float+0x20c>
   11bb2:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   11bb6:	d00f      	beq.n	11bd8 <encode_float+0x20c>
	bool prune_zero = false;
   11bb8:	2700      	movs	r7, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
   11bba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   11bbe:	d029      	beq.n	11c14 <encode_float+0x248>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
   11bc0:	1c6c      	adds	r4, r5, #1
	}

	int digit_count = 16;
   11bc2:	2310      	movs	r3, #16
   11bc4:	9305      	str	r3, [sp, #20]

	if (decimals > 16) {
   11bc6:	429c      	cmp	r4, r3
   11bc8:	dd00      	ble.n	11bcc <encode_float+0x200>
		decimals = 16;
   11bca:	461c      	mov	r4, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
   11bcc:	2200      	movs	r2, #0
   11bce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   11bd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (decimals--) {
   11bd6:	e028      	b.n	11c2a <encode_float+0x25e>
		if (decexp < (-4 + 1) || decexp > precision) {
   11bd8:	f118 0f03 	cmn.w	r8, #3
   11bdc:	db01      	blt.n	11be2 <encode_float+0x216>
   11bde:	45a8      	cmp	r8, r5
   11be0:	dd11      	ble.n	11c06 <encode_float+0x23a>
			c += 'e' - 'g';  /* e or E */
   11be2:	f1ab 0b02 	sub.w	fp, fp, #2
   11be6:	fa5f fb8b 	uxtb.w	fp, fp
			if (precision > 0) {
   11bea:	2d00      	cmp	r5, #0
   11bec:	dd00      	ble.n	11bf0 <encode_float+0x224>
				precision--;
   11bee:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   11bf0:	f89a 3000 	ldrb.w	r3, [sl]
   11bf4:	f3c3 1740 	ubfx	r7, r3, #5, #1
   11bf8:	f013 0f20 	tst.w	r3, #32
   11bfc:	d108      	bne.n	11c10 <encode_float+0x244>
   11bfe:	2d00      	cmp	r5, #0
   11c00:	dddb      	ble.n	11bba <encode_float+0x1ee>
			prune_zero = true;
   11c02:	2701      	movs	r7, #1
   11c04:	e7d9      	b.n	11bba <encode_float+0x1ee>
			precision -= decexp;
   11c06:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
   11c0a:	f04f 0b66 	mov.w	fp, #102	; 0x66
   11c0e:	e7ef      	b.n	11bf0 <encode_float+0x224>
	bool prune_zero = false;
   11c10:	2700      	movs	r7, #0
   11c12:	e7d2      	b.n	11bba <encode_float+0x1ee>
		if (decimals < 0) {
   11c14:	eb18 0405 	adds.w	r4, r8, r5
   11c18:	d5d3      	bpl.n	11bc2 <encode_float+0x1f6>
	int digit_count = 16;
   11c1a:	2310      	movs	r3, #16
   11c1c:	9305      	str	r3, [sp, #20]
			decimals = 0;
   11c1e:	2400      	movs	r4, #0
   11c20:	e7d4      	b.n	11bcc <encode_float+0x200>
		_ldiv10(&round);
   11c22:	a802      	add	r0, sp, #8
   11c24:	f010 fba0 	bl	22368 <_ldiv10>
	while (decimals--) {
   11c28:	4634      	mov	r4, r6
   11c2a:	1e66      	subs	r6, r4, #1
   11c2c:	2c00      	cmp	r4, #0
   11c2e:	d1f8      	bne.n	11c22 <encode_float+0x256>
	}
	fract += round;
   11c30:	9b06      	ldr	r3, [sp, #24]
   11c32:	9a02      	ldr	r2, [sp, #8]
   11c34:	189b      	adds	r3, r3, r2
   11c36:	9300      	str	r3, [sp, #0]
   11c38:	9a07      	ldr	r2, [sp, #28]
   11c3a:	9b03      	ldr	r3, [sp, #12]
   11c3c:	eb42 0303 	adc.w	r3, r2, r3
   11c40:	9301      	str	r3, [sp, #4]
   11c42:	e9dd 2300 	ldrd	r2, r3, [sp]
   11c46:	e9cd 2306 	strd	r2, r3, [sp, #24]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
   11c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   11c4e:	bf08      	it	eq
   11c50:	2a00      	cmpeq	r2, #0
   11c52:	d207      	bcs.n	11c64 <encode_float+0x298>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
   11c54:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   11c58:	d145      	bne.n	11ce6 <encode_float+0x31a>
		if (decexp > 0) {
   11c5a:	f1b8 0f00 	cmp.w	r8, #0
   11c5e:	dd3d      	ble.n	11cdc <encode_float+0x310>
	char *buf = bps;
   11c60:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   11c62:	e00d      	b.n	11c80 <encode_float+0x2b4>
		_ldiv10(&fract);
   11c64:	a806      	add	r0, sp, #24
   11c66:	f010 fb7f 	bl	22368 <_ldiv10>
		decexp++;
   11c6a:	f108 0801 	add.w	r8, r8, #1
   11c6e:	e7f1      	b.n	11c54 <encode_float+0x288>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
   11c70:	a905      	add	r1, sp, #20
   11c72:	a806      	add	r0, sp, #24
   11c74:	f010 fb84 	bl	22380 <_get_digit>
   11c78:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
   11c7c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			while (decexp > 0 && digit_count > 0) {
   11c80:	f1b8 0f00 	cmp.w	r8, #0
   11c84:	dd02      	ble.n	11c8c <encode_float+0x2c0>
   11c86:	9b05      	ldr	r3, [sp, #20]
   11c88:	2b00      	cmp	r3, #0
   11c8a:	dcf1      	bgt.n	11c70 <encode_float+0x2a4>
			}

			conv->pad0_value = decexp;
   11c8c:	f8ca 8004 	str.w	r8, [sl, #4]

			decexp = 0;
   11c90:	46a0      	mov	r8, r4
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   11c92:	f89a 3000 	ldrb.w	r3, [sl]
   11c96:	f013 0f20 	tst.w	r3, #32
   11c9a:	d101      	bne.n	11ca0 <encode_float+0x2d4>
   11c9c:	2d00      	cmp	r5, #0
   11c9e:	dd02      	ble.n	11ca6 <encode_float+0x2da>
			*buf++ = '.';
   11ca0:	232e      	movs	r3, #46	; 0x2e
   11ca2:	f806 3b01 	strb.w	r3, [r6], #1
		}

		if (decexp < 0 && precision > 0) {
   11ca6:	f1b8 0f00 	cmp.w	r8, #0
   11caa:	da33      	bge.n	11d14 <encode_float+0x348>
   11cac:	2d00      	cmp	r5, #0
   11cae:	dd31      	ble.n	11d14 <encode_float+0x348>
			conv->pad0_value = -decexp;
   11cb0:	f1c8 0300 	rsb	r3, r8, #0
   11cb4:	f8ca 3004 	str.w	r3, [sl, #4]
			if (conv->pad0_value > precision) {
   11cb8:	429d      	cmp	r5, r3
   11cba:	da01      	bge.n	11cc0 <encode_float+0x2f4>
				conv->pad0_value = precision;
   11cbc:	f8ca 5004 	str.w	r5, [sl, #4]
			}

			precision -= conv->pad0_value;
   11cc0:	f8da 3004 	ldr.w	r3, [sl, #4]
   11cc4:	1aed      	subs	r5, r5, r3
			conv->pad_postdp = (conv->pad0_value > 0);
   11cc6:	2b00      	cmp	r3, #0
   11cc8:	bfd4      	ite	le
   11cca:	2300      	movle	r3, #0
   11ccc:	2301      	movgt	r3, #1
   11cce:	f89a 2002 	ldrb.w	r2, [sl, #2]
   11cd2:	f363 1245 	bfi	r2, r3, #5, #1
   11cd6:	f88a 2002 	strb.w	r2, [sl, #2]
   11cda:	e01b      	b.n	11d14 <encode_float+0x348>
			*buf++ = '0';
   11cdc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   11cde:	2330      	movs	r3, #48	; 0x30
   11ce0:	f806 3b01 	strb.w	r3, [r6], #1
   11ce4:	e7d5      	b.n	11c92 <encode_float+0x2c6>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
   11ce6:	a905      	add	r1, sp, #20
   11ce8:	a806      	add	r0, sp, #24
   11cea:	f010 fb49 	bl	22380 <_get_digit>
   11cee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   11cf0:	f806 0b01 	strb.w	r0, [r6], #1
		if (*buf++ != '0') {
   11cf4:	2830      	cmp	r0, #48	; 0x30
   11cf6:	d001      	beq.n	11cfc <encode_float+0x330>
			decexp--;
   11cf8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   11cfc:	f89a 3000 	ldrb.w	r3, [sl]
   11d00:	f013 0f20 	tst.w	r3, #32
   11d04:	d101      	bne.n	11d0a <encode_float+0x33e>
   11d06:	2d00      	cmp	r5, #0
   11d08:	dd04      	ble.n	11d14 <encode_float+0x348>
			*buf++ = '.';
   11d0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11d0c:	1c9e      	adds	r6, r3, #2
   11d0e:	232e      	movs	r3, #46	; 0x2e
   11d10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11d12:	7053      	strb	r3, [r2, #1]
		}
	}

	while (precision > 0 && digit_count > 0) {
   11d14:	2d00      	cmp	r5, #0
   11d16:	dd0d      	ble.n	11d34 <encode_float+0x368>
   11d18:	9b05      	ldr	r3, [sp, #20]
   11d1a:	2b00      	cmp	r3, #0
   11d1c:	dd0a      	ble.n	11d34 <encode_float+0x368>
		*buf++ = _get_digit(&fract, &digit_count);
   11d1e:	a905      	add	r1, sp, #20
   11d20:	a806      	add	r0, sp, #24
   11d22:	f010 fb2d 	bl	22380 <_get_digit>
   11d26:	f806 0b01 	strb.w	r0, [r6], #1
		precision--;
   11d2a:	3d01      	subs	r5, #1
   11d2c:	e7f2      	b.n	11d14 <encode_float+0x348>
   11d2e:	bf00      	nop
   11d30:	0002a397 	.word	0x0002a397
	}

	conv->pad0_pre_exp = precision;
   11d34:	f8ca 5008 	str.w	r5, [sl, #8]

	if (prune_zero) {
   11d38:	b157      	cbz	r7, 11d50 <encode_float+0x384>
		conv->pad0_pre_exp = 0;
   11d3a:	2300      	movs	r3, #0
   11d3c:	f8ca 3008 	str.w	r3, [sl, #8]
		while (*--buf == '0') {
   11d40:	4633      	mov	r3, r6
   11d42:	461e      	mov	r6, r3
   11d44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   11d48:	2a30      	cmp	r2, #48	; 0x30
   11d4a:	d0fa      	beq.n	11d42 <encode_float+0x376>
			;
		}
		if (*buf != '.') {
   11d4c:	2a2e      	cmp	r2, #46	; 0x2e
   11d4e:	d043      	beq.n	11dd8 <encode_float+0x40c>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
   11d50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   11d54:	d002      	beq.n	11d5c <encode_float+0x390>
   11d56:	f1bb 0f45 	cmp.w	fp, #69	; 0x45
   11d5a:	d12a      	bne.n	11db2 <encode_float+0x3e6>
		*buf++ = c;
   11d5c:	f886 b000 	strb.w	fp, [r6]
		if (decexp < 0) {
   11d60:	f1b8 0f00 	cmp.w	r8, #0
   11d64:	db3a      	blt.n	11ddc <encode_float+0x410>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
   11d66:	1cb2      	adds	r2, r6, #2
   11d68:	232b      	movs	r3, #43	; 0x2b
   11d6a:	7073      	strb	r3, [r6, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
   11d6c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   11d70:	dd0d      	ble.n	11d8e <encode_float+0x3c2>
			*buf++ = (decexp / 100) + '0';
   11d72:	4920      	ldr	r1, [pc, #128]	; (11df4 <encode_float+0x428>)
   11d74:	fb81 3108 	smull	r3, r1, r1, r8
   11d78:	ea4f 73e8 	mov.w	r3, r8, asr #31
   11d7c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
   11d80:	f103 0130 	add.w	r1, r3, #48	; 0x30
   11d84:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
   11d88:	2164      	movs	r1, #100	; 0x64
   11d8a:	fb01 8813 	mls	r8, r1, r3, r8
		}

		*buf++ = (decexp / 10) + '0';
   11d8e:	491a      	ldr	r1, [pc, #104]	; (11df8 <encode_float+0x42c>)
   11d90:	fb81 3108 	smull	r3, r1, r1, r8
   11d94:	ea4f 73e8 	mov.w	r3, r8, asr #31
   11d98:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   11d9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   11da0:	4616      	mov	r6, r2
   11da2:	f806 1b02 	strb.w	r1, [r6], #2
		*buf++ = (decexp % 10) + '0';
   11da6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11daa:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
   11dae:	3330      	adds	r3, #48	; 0x30
   11db0:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
   11db2:	f8da 3004 	ldr.w	r3, [sl, #4]
		|| (conv->pad0_pre_exp > 0);
   11db6:	2b00      	cmp	r3, #0
   11db8:	dd16      	ble.n	11de8 <encode_float+0x41c>
   11dba:	2401      	movs	r4, #1
	conv->pad_fp = (conv->pad0_value > 0)
   11dbc:	f89a 3002 	ldrb.w	r3, [sl, #2]
   11dc0:	f364 1386 	bfi	r3, r4, #6, #1
   11dc4:	f88a 3002 	strb.w	r3, [sl, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
   11dc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11dca:	601e      	str	r6, [r3, #0]
	*buf = 0;
   11dcc:	2300      	movs	r3, #0
   11dce:	7033      	strb	r3, [r6, #0]
	return bps;
}
   11dd0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11dd2:	b009      	add	sp, #36	; 0x24
   11dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
   11dd8:	461e      	mov	r6, r3
   11dda:	e7b9      	b.n	11d50 <encode_float+0x384>
			decexp = -decexp;
   11ddc:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
   11de0:	1cb2      	adds	r2, r6, #2
   11de2:	232d      	movs	r3, #45	; 0x2d
   11de4:	7073      	strb	r3, [r6, #1]
   11de6:	e7c1      	b.n	11d6c <encode_float+0x3a0>
		|| (conv->pad0_pre_exp > 0);
   11de8:	f8da 3008 	ldr.w	r3, [sl, #8]
   11dec:	2b00      	cmp	r3, #0
   11dee:	dde5      	ble.n	11dbc <encode_float+0x3f0>
   11df0:	2401      	movs	r4, #1
   11df2:	e7e3      	b.n	11dbc <encode_float+0x3f0>
   11df4:	51eb851f 	.word	0x51eb851f
   11df8:	66666667 	.word	0x66666667

00011dfc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e00:	b099      	sub	sp, #100	; 0x64
   11e02:	4606      	mov	r6, r0
   11e04:	460d      	mov	r5, r1
   11e06:	4617      	mov	r7, r2
   11e08:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11e0a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11e0c:	e000      	b.n	11e10 <cbvprintf+0x14>
		if (*fp != '%') {
			OUTC(*fp++);
   11e0e:	3401      	adds	r4, #1
	while (*fp != 0) {
   11e10:	7838      	ldrb	r0, [r7, #0]
   11e12:	2800      	cmp	r0, #0
   11e14:	f000 8593 	beq.w	1293e <cbvprintf+0xb42>
		if (*fp != '%') {
   11e18:	2825      	cmp	r0, #37	; 0x25
   11e1a:	d007      	beq.n	11e2c <cbvprintf+0x30>
			OUTC(*fp++);
   11e1c:	3701      	adds	r7, #1
   11e1e:	4629      	mov	r1, r5
   11e20:	47b0      	blx	r6
   11e22:	2800      	cmp	r0, #0
   11e24:	daf3      	bge.n	11e0e <cbvprintf+0x12>
	}

	return count;
#undef OUTS
#undef OUTC
}
   11e26:	b019      	add	sp, #100	; 0x64
   11e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} state = {
   11e2c:	2300      	movs	r3, #0
   11e2e:	930a      	str	r3, [sp, #40]	; 0x28
   11e30:	930b      	str	r3, [sp, #44]	; 0x2c
   11e32:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   11e34:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
   11e38:	9208      	str	r2, [sp, #32]
		char sign = 0;
   11e3a:	f88d 301f 	strb.w	r3, [sp, #31]
	*conv = (struct conversion) {
   11e3e:	930c      	str	r3, [sp, #48]	; 0x30
   11e40:	930d      	str	r3, [sp, #52]	; 0x34
   11e42:	930e      	str	r3, [sp, #56]	; 0x38
	++sp;
   11e44:	f107 0901 	add.w	r9, r7, #1
	if (*sp == '%') {
   11e48:	787b      	ldrb	r3, [r7, #1]
   11e4a:	2b25      	cmp	r3, #37	; 0x25
   11e4c:	d002      	beq.n	11e54 <cbvprintf+0x58>
	bool loop = true;
   11e4e:	f04f 0801 	mov.w	r8, #1
   11e52:	e031      	b.n	11eb8 <cbvprintf+0xbc>
		conv->specifier = *sp++;
   11e54:	f107 0902 	add.w	r9, r7, #2
   11e58:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		return sp;
   11e5c:	e1ae      	b.n	121bc <cbvprintf+0x3c0>
			conv->flag_dash = true;
   11e5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11e62:	f043 0304 	orr.w	r3, r3, #4
   11e66:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (loop) {
   11e6a:	f1b8 0f00 	cmp.w	r8, #0
   11e6e:	d020      	beq.n	11eb2 <cbvprintf+0xb6>
			++sp;
   11e70:	f109 0901 	add.w	r9, r9, #1
   11e74:	e01d      	b.n	11eb2 <cbvprintf+0xb6>
			conv->flag_plus = true;
   11e76:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11e7a:	f043 0308 	orr.w	r3, r3, #8
   11e7e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   11e82:	e7f2      	b.n	11e6a <cbvprintf+0x6e>
			conv->flag_space = true;
   11e84:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11e88:	f043 0310 	orr.w	r3, r3, #16
   11e8c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   11e90:	e7eb      	b.n	11e6a <cbvprintf+0x6e>
			conv->flag_hash = true;
   11e92:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11e96:	f043 0320 	orr.w	r3, r3, #32
   11e9a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   11e9e:	e7e4      	b.n	11e6a <cbvprintf+0x6e>
			conv->flag_zero = true;
   11ea0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11ea8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   11eac:	e7dd      	b.n	11e6a <cbvprintf+0x6e>
		switch (*sp) {
   11eae:	f04f 0800 	mov.w	r8, #0
	} while (loop);
   11eb2:	f1b8 0f00 	cmp.w	r8, #0
   11eb6:	d029      	beq.n	11f0c <cbvprintf+0x110>
		switch (*sp) {
   11eb8:	f899 3000 	ldrb.w	r3, [r9]
   11ebc:	3b20      	subs	r3, #32
   11ebe:	2b10      	cmp	r3, #16
   11ec0:	d8f5      	bhi.n	11eae <cbvprintf+0xb2>
   11ec2:	a201      	add	r2, pc, #4	; (adr r2, 11ec8 <cbvprintf+0xcc>)
   11ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11ec8:	00011e85 	.word	0x00011e85
   11ecc:	00011eaf 	.word	0x00011eaf
   11ed0:	00011eaf 	.word	0x00011eaf
   11ed4:	00011e93 	.word	0x00011e93
   11ed8:	00011eaf 	.word	0x00011eaf
   11edc:	00011eaf 	.word	0x00011eaf
   11ee0:	00011eaf 	.word	0x00011eaf
   11ee4:	00011eaf 	.word	0x00011eaf
   11ee8:	00011eaf 	.word	0x00011eaf
   11eec:	00011eaf 	.word	0x00011eaf
   11ef0:	00011eaf 	.word	0x00011eaf
   11ef4:	00011e77 	.word	0x00011e77
   11ef8:	00011eaf 	.word	0x00011eaf
   11efc:	00011e5f 	.word	0x00011e5f
   11f00:	00011eaf 	.word	0x00011eaf
   11f04:	00011eaf 	.word	0x00011eaf
   11f08:	00011ea1 	.word	0x00011ea1
	if (conv->flag_zero && conv->flag_dash) {
   11f0c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11f10:	f003 0344 	and.w	r3, r3, #68	; 0x44
   11f14:	2b44      	cmp	r3, #68	; 0x44
   11f16:	d06d      	beq.n	11ff4 <cbvprintf+0x1f8>
	sp = extract_width(conv, sp);
   11f18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	conv->width_present = true;
   11f1c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11f24:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (*sp == '*') {
   11f28:	f899 3000 	ldrb.w	r3, [r9]
   11f2c:	2b2a      	cmp	r3, #42	; 0x2a
   11f2e:	d068      	beq.n	12002 <cbvprintf+0x206>
	size_t width = extract_decimal(&sp);
   11f30:	a809      	add	r0, sp, #36	; 0x24
   11f32:	f7ff fcc3 	bl	118bc <extract_decimal>
	if (sp != wp) {
   11f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f38:	4599      	cmp	r9, r3
   11f3a:	d012      	beq.n	11f62 <cbvprintf+0x166>
		conv->width_present = true;
   11f3c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11f44:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		conv->width_value = width;
   11f48:	900d      	str	r0, [sp, #52]	; 0x34
		conv->unsupported |= ((conv->width_value < 0)
   11f4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   11f4e:	2800      	cmp	r0, #0
   11f50:	db60      	blt.n	12014 <cbvprintf+0x218>
   11f52:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   11f54:	4313      	orrs	r3, r2
   11f56:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11f5a:	f363 0241 	bfi	r2, r3, #1, #1
   11f5e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
	sp = extract_prec(conv, sp);
   11f64:	9309      	str	r3, [sp, #36]	; 0x24
	conv->prec_present = (*sp == '.');
   11f66:	781b      	ldrb	r3, [r3, #0]
   11f68:	2b2e      	cmp	r3, #46	; 0x2e
   11f6a:	bf14      	ite	ne
   11f6c:	2300      	movne	r3, #0
   11f6e:	2301      	moveq	r3, #1
   11f70:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11f74:	f363 0241 	bfi	r2, r3, #1, #1
   11f78:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d04b      	beq.n	12018 <cbvprintf+0x21c>
	++sp;
   11f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f82:	1c5a      	adds	r2, r3, #1
   11f84:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   11f86:	785b      	ldrb	r3, [r3, #1]
   11f88:	2b2a      	cmp	r3, #42	; 0x2a
   11f8a:	d048      	beq.n	1201e <cbvprintf+0x222>
	size_t prec = extract_decimal(&sp);
   11f8c:	a809      	add	r0, sp, #36	; 0x24
   11f8e:	f7ff fc95 	bl	118bc <extract_decimal>
	conv->prec_value = prec;
   11f92:	900e      	str	r0, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   11f94:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11f98:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   11f9c:	2800      	cmp	r0, #0
   11f9e:	db47      	blt.n	12030 <cbvprintf+0x234>
   11fa0:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   11fa2:	4313      	orrs	r3, r2
   11fa4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11fa8:	f363 0241 	bfi	r2, r3, #1, #1
   11fac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11fb0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	switch (*sp) {
   11fb4:	f899 3000 	ldrb.w	r3, [r9]
   11fb8:	3b4c      	subs	r3, #76	; 0x4c
   11fba:	2b2e      	cmp	r3, #46	; 0x2e
   11fbc:	f200 80dc 	bhi.w	12178 <cbvprintf+0x37c>
   11fc0:	e8df f003 	tbb	[pc, r3]
   11fc4:	dadadaca 	.word	0xdadadaca
   11fc8:	dadadada 	.word	0xdadadada
   11fcc:	dadadada 	.word	0xdadadada
   11fd0:	dadadada 	.word	0xdadadada
   11fd4:	dadadada 	.word	0xdadadada
   11fd8:	dadadada 	.word	0xdadadada
   11fdc:	dadadada 	.word	0xdadadada
   11fe0:	da6ada38 	.word	0xda6ada38
   11fe4:	dadada51 	.word	0xdadada51
   11fe8:	dadadada 	.word	0xdadadada
   11fec:	dadadac0 	.word	0xdadadac0
   11ff0:	dada      	.short	0xdada
   11ff2:	b6          	.byte	0xb6
   11ff3:	00          	.byte	0x00
		conv->flag_zero = false;
   11ff4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11ff8:	f36f 1386 	bfc	r3, #6, #1
   11ffc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   12000:	e78a      	b.n	11f18 <cbvprintf+0x11c>
		conv->width_star = true;
   12002:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12006:	f043 0301 	orr.w	r3, r3, #1
   1200a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   1200e:	464b      	mov	r3, r9
   12010:	3301      	adds	r3, #1
   12012:	e7a7      	b.n	11f64 <cbvprintf+0x168>
				      || (width != (size_t)conv->width_value));
   12014:	2201      	movs	r2, #1
   12016:	e79d      	b.n	11f54 <cbvprintf+0x158>
		return sp;
   12018:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1201c:	e7ca      	b.n	11fb4 <cbvprintf+0x1b8>
		conv->prec_star = true;
   1201e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12022:	f043 0304 	orr.w	r3, r3, #4
   12026:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   1202a:	f102 0901 	add.w	r9, r2, #1
   1202e:	e7c1      	b.n	11fb4 <cbvprintf+0x1b8>
			      || (prec != (size_t)conv->prec_value));
   12030:	2201      	movs	r2, #1
   12032:	e7b6      	b.n	11fa2 <cbvprintf+0x1a6>
		if (*++sp == 'h') {
   12034:	f109 0201 	add.w	r2, r9, #1
   12038:	f899 3001 	ldrb.w	r3, [r9, #1]
   1203c:	2b68      	cmp	r3, #104	; 0x68
   1203e:	d008      	beq.n	12052 <cbvprintf+0x256>
			conv->length_mod = LENGTH_H;
   12040:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12044:	2102      	movs	r1, #2
   12046:	f361 03c6 	bfi	r3, r1, #3, #4
   1204a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'h') {
   1204e:	4691      	mov	r9, r2
   12050:	e02b      	b.n	120aa <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_HH;
   12052:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12056:	2201      	movs	r2, #1
   12058:	f362 03c6 	bfi	r3, r2, #3, #4
   1205c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   12060:	f109 0902 	add.w	r9, r9, #2
   12064:	e021      	b.n	120aa <cbvprintf+0x2ae>
		if (*++sp == 'l') {
   12066:	f109 0201 	add.w	r2, r9, #1
   1206a:	f899 3001 	ldrb.w	r3, [r9, #1]
   1206e:	2b6c      	cmp	r3, #108	; 0x6c
   12070:	d008      	beq.n	12084 <cbvprintf+0x288>
			conv->length_mod = LENGTH_L;
   12072:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12076:	2103      	movs	r1, #3
   12078:	f361 03c6 	bfi	r3, r1, #3, #4
   1207c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'l') {
   12080:	4691      	mov	r9, r2
   12082:	e012      	b.n	120aa <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_LL;
   12084:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12088:	2204      	movs	r2, #4
   1208a:	f362 03c6 	bfi	r3, r2, #3, #4
   1208e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   12092:	f109 0902 	add.w	r9, r9, #2
   12096:	e008      	b.n	120aa <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
   12098:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1209c:	2205      	movs	r2, #5
   1209e:	f362 03c6 	bfi	r3, r2, #3, #4
   120a2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   120a6:	f109 0901 	add.w	r9, r9, #1
	conv->specifier = *sp++;
   120aa:	f819 2b01 	ldrb.w	r2, [r9], #1
   120ae:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   120b2:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   120b6:	2b37      	cmp	r3, #55	; 0x37
   120b8:	f200 8185 	bhi.w	123c6 <cbvprintf+0x5ca>
   120bc:	e8df f013 	tbh	[pc, r3, lsl #1]
   120c0:	01830131 	.word	0x01830131
   120c4:	01830183 	.word	0x01830183
   120c8:	01310131 	.word	0x01310131
   120cc:	01830131 	.word	0x01830131
   120d0:	01830183 	.word	0x01830183
   120d4:	01830183 	.word	0x01830183
   120d8:	01830183 	.word	0x01830183
   120dc:	01830183 	.word	0x01830183
   120e0:	01830183 	.word	0x01830183
   120e4:	01830183 	.word	0x01830183
   120e8:	01830183 	.word	0x01830183
   120ec:	011c0183 	.word	0x011c0183
   120f0:	01830183 	.word	0x01830183
   120f4:	01830183 	.word	0x01830183
   120f8:	01830183 	.word	0x01830183
   120fc:	01830183 	.word	0x01830183
   12100:	01830131 	.word	0x01830131
   12104:	0063011c 	.word	0x0063011c
   12108:	01310131 	.word	0x01310131
   1210c:	01830131 	.word	0x01830131
   12110:	01830063 	.word	0x01830063
   12114:	01830183 	.word	0x01830183
   12118:	01620183 	.word	0x01620183
   1211c:	0173011c 	.word	0x0173011c
   12120:	01830183 	.word	0x01830183
   12124:	01830173 	.word	0x01830173
   12128:	0183011c 	.word	0x0183011c
   1212c:	011c0183 	.word	0x011c0183
		conv->length_mod = LENGTH_Z;
   12130:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12134:	2206      	movs	r2, #6
   12136:	f362 03c6 	bfi	r3, r2, #3, #4
   1213a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   1213e:	f109 0901 	add.w	r9, r9, #1
		break;
   12142:	e7b2      	b.n	120aa <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
   12144:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12148:	2207      	movs	r2, #7
   1214a:	f362 03c6 	bfi	r3, r2, #3, #4
   1214e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   12152:	f109 0901 	add.w	r9, r9, #1
		break;
   12156:	e7a8      	b.n	120aa <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_UPPER_L;
   12158:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1215c:	2208      	movs	r2, #8
   1215e:	f362 03c6 	bfi	r3, r2, #3, #4
   12162:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   12166:	f109 0901 	add.w	r9, r9, #1
		conv->unsupported = true;
   1216a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1216e:	f043 0302 	orr.w	r3, r3, #2
   12172:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   12176:	e798      	b.n	120aa <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_NONE;
   12178:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1217c:	f36f 03c6 	bfc	r3, #3, #4
   12180:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   12184:	e791      	b.n	120aa <cbvprintf+0x2ae>
		conv->specifier_cat = SPECIFIER_SINT;
   12186:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1218a:	2101      	movs	r1, #1
   1218c:	f361 0302 	bfi	r3, r1, #0, #3
   12190:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12194:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12198:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1219c:	2b40      	cmp	r3, #64	; 0x40
   1219e:	f000 80b3 	beq.w	12308 <cbvprintf+0x50c>
		if (conv->specifier == 'c') {
   121a2:	2a63      	cmp	r2, #99	; 0x63
   121a4:	f000 80b7 	beq.w	12316 <cbvprintf+0x51a>
	conv->unsupported |= unsupported;
   121a8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   121ac:	f3c3 0240 	ubfx	r2, r3, #1, #1
   121b0:	ea48 0802 	orr.w	r8, r8, r2
   121b4:	f368 0341 	bfi	r3, r8, #1, #1
   121b8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (conv->width_star) {
   121bc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   121c0:	f013 0f01 	tst.w	r3, #1
   121c4:	f000 8112 	beq.w	123ec <cbvprintf+0x5f0>
			width = va_arg(ap, int);
   121c8:	9b05      	ldr	r3, [sp, #20]
   121ca:	1d1a      	adds	r2, r3, #4
   121cc:	9205      	str	r2, [sp, #20]
   121ce:	f8d3 8000 	ldr.w	r8, [r3]
			if (width < 0) {
   121d2:	f1b8 0f00 	cmp.w	r8, #0
   121d6:	f2c0 8100 	blt.w	123da <cbvprintf+0x5de>
		if (conv->prec_star) {
   121da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   121de:	f013 0f04 	tst.w	r3, #4
   121e2:	f000 8116 	beq.w	12412 <cbvprintf+0x616>
			int arg = va_arg(ap, int);
   121e6:	9b05      	ldr	r3, [sp, #20]
   121e8:	1d1a      	adds	r2, r3, #4
   121ea:	9205      	str	r2, [sp, #20]
   121ec:	f8d3 a000 	ldr.w	sl, [r3]
			if (arg < 0) {
   121f0:	f1ba 0f00 	cmp.w	sl, #0
   121f4:	f2c0 8104 	blt.w	12400 <cbvprintf+0x604>
		conv->pad0_value = 0;
   121f8:	2300      	movs	r3, #0
   121fa:	930d      	str	r3, [sp, #52]	; 0x34
		conv->pad0_pre_exp = 0;
   121fc:	930e      	str	r3, [sp, #56]	; 0x38
		    && (conv->specifier_cat == SPECIFIER_FP)
   121fe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12202:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   12206:	2b04      	cmp	r3, #4
   12208:	f000 810c 	beq.w	12424 <cbvprintf+0x628>
			= (enum specifier_cat_enum)conv->specifier_cat;
   1220c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12210:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
   12214:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
   12218:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1221c:	2b01      	cmp	r3, #1
   1221e:	f000 8111 	beq.w	12444 <cbvprintf+0x648>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12222:	2b02      	cmp	r3, #2
   12224:	f000 8156 	beq.w	124d4 <cbvprintf+0x6d8>
		} else if (specifier_cat == SPECIFIER_FP) {
   12228:	2b04      	cmp	r3, #4
   1222a:	f000 81a7 	beq.w	1257c <cbvprintf+0x780>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1222e:	2b03      	cmp	r3, #3
   12230:	f000 81be 	beq.w	125b0 <cbvprintf+0x7b4>
		if (conv->invalid || conv->unsupported) {
   12234:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12238:	f012 0f03 	tst.w	r2, #3
   1223c:	f040 81be 	bne.w	125bc <cbvprintf+0x7c0>
		switch (conv->specifier) {
   12240:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   12244:	3b25      	subs	r3, #37	; 0x25
   12246:	2b53      	cmp	r3, #83	; 0x53
   12248:	f200 81cb 	bhi.w	125e2 <cbvprintf+0x7e6>
   1224c:	e8df f013 	tbh	[pc, r3, lsl #1]
   12250:	01c901c2 	.word	0x01c901c2
   12254:	01c901c9 	.word	0x01c901c9
   12258:	01c901c9 	.word	0x01c901c9
   1225c:	01c901c9 	.word	0x01c901c9
   12260:	01c901c9 	.word	0x01c901c9
   12264:	01c901c9 	.word	0x01c901c9
   12268:	01c901c9 	.word	0x01c901c9
   1226c:	01c901c9 	.word	0x01c901c9
   12270:	01c901c9 	.word	0x01c901c9
   12274:	01c901c9 	.word	0x01c901c9
   12278:	01c901c9 	.word	0x01c901c9
   1227c:	01c901c9 	.word	0x01c901c9
   12280:	01c901c9 	.word	0x01c901c9
   12284:	01c901c9 	.word	0x01c901c9
   12288:	01c9028a 	.word	0x01c9028a
   1228c:	01c901c9 	.word	0x01c901c9
   12290:	028a028a 	.word	0x028a028a
   12294:	01c9028a 	.word	0x01c9028a
   12298:	01c901c9 	.word	0x01c901c9
   1229c:	01c901c9 	.word	0x01c901c9
   122a0:	01c901c9 	.word	0x01c901c9
   122a4:	01c901c9 	.word	0x01c901c9
   122a8:	01c901c9 	.word	0x01c901c9
   122ac:	01c901c9 	.word	0x01c901c9
   122b0:	01c901c9 	.word	0x01c901c9
   122b4:	022401c9 	.word	0x022401c9
   122b8:	01c901c9 	.word	0x01c901c9
   122bc:	01c901c9 	.word	0x01c901c9
   122c0:	01c901c9 	.word	0x01c901c9
   122c4:	01c901c9 	.word	0x01c901c9
   122c8:	01c9028a 	.word	0x01c9028a
   122cc:	0216020e 	.word	0x0216020e
   122d0:	028a028a 	.word	0x028a028a
   122d4:	01c9028a 	.word	0x01c9028a
   122d8:	01c90216 	.word	0x01c90216
   122dc:	01c901c9 	.word	0x01c901c9
   122e0:	026601c9 	.word	0x026601c9
   122e4:	024e0224 	.word	0x024e0224
   122e8:	01c901c9 	.word	0x01c901c9
   122ec:	01c901cb 	.word	0x01c901cb
   122f0:	01c90224 	.word	0x01c90224
   122f4:	022401c9 	.word	0x022401c9
		conv->specifier_cat = SPECIFIER_UINT;
   122f8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   122fc:	2102      	movs	r1, #2
   122fe:	f361 0302 	bfi	r3, r1, #0, #3
   12302:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   12306:	e745      	b.n	12194 <cbvprintf+0x398>
			conv->invalid = true;
   12308:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   1230c:	f041 0101 	orr.w	r1, r1, #1
   12310:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   12314:	e745      	b.n	121a2 <cbvprintf+0x3a6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12316:	f1b3 0800 	subs.w	r8, r3, #0
   1231a:	bf18      	it	ne
   1231c:	f04f 0801 	movne.w	r8, #1
   12320:	e742      	b.n	121a8 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_FP;
   12322:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12326:	2104      	movs	r1, #4
   12328:	f361 0302 	bfi	r3, r1, #0, #3
   1232c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			|| (conv->specifier == 'A');
   12330:	2a61      	cmp	r2, #97	; 0x61
   12332:	d01f      	beq.n	12374 <cbvprintf+0x578>
   12334:	2a41      	cmp	r2, #65	; 0x41
   12336:	d01b      	beq.n	12370 <cbvprintf+0x574>
   12338:	2200      	movs	r2, #0
		conv->specifier_a = (conv->specifier == 'a')
   1233a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1233e:	f362 13c7 	bfi	r3, r2, #7, #1
   12342:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (conv->specifier_a
   12346:	b2da      	uxtb	r2, r3
   12348:	f013 0f80 	tst.w	r3, #128	; 0x80
   1234c:	d142      	bne.n	123d4 <cbvprintf+0x5d8>
		if (conv->length_mod == LENGTH_L) {
   1234e:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12352:	2a18      	cmp	r2, #24
   12354:	d010      	beq.n	12378 <cbvprintf+0x57c>
		} else if ((conv->length_mod != LENGTH_NONE)
   12356:	2a00      	cmp	r2, #0
   12358:	f43f af26 	beq.w	121a8 <cbvprintf+0x3ac>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
   1235c:	2a40      	cmp	r2, #64	; 0x40
   1235e:	f43f af23 	beq.w	121a8 <cbvprintf+0x3ac>
			conv->invalid = true;
   12362:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12366:	f043 0301 	orr.w	r3, r3, #1
   1236a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1236e:	e71b      	b.n	121a8 <cbvprintf+0x3ac>
			|| (conv->specifier == 'A');
   12370:	2201      	movs	r2, #1
   12372:	e7e2      	b.n	1233a <cbvprintf+0x53e>
   12374:	2201      	movs	r2, #1
   12376:	e7e0      	b.n	1233a <cbvprintf+0x53e>
			conv->length_mod = LENGTH_NONE;
   12378:	b2db      	uxtb	r3, r3
   1237a:	f36f 03c6 	bfc	r3, #3, #4
   1237e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   12382:	e711      	b.n	121a8 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   12384:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12388:	2203      	movs	r2, #3
   1238a:	f362 0302 	bfi	r3, r2, #0, #3
   1238e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12392:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12396:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1239a:	2b40      	cmp	r3, #64	; 0x40
   1239c:	f47f af04 	bne.w	121a8 <cbvprintf+0x3ac>
			unsupported = true;
   123a0:	f04f 0801 	mov.w	r8, #1
   123a4:	e700      	b.n	121a8 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   123a6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   123aa:	2203      	movs	r2, #3
   123ac:	f362 0302 	bfi	r3, r2, #0, #3
   123b0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   123b4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   123b8:	f013 0f78 	tst.w	r3, #120	; 0x78
   123bc:	f43f aef4 	beq.w	121a8 <cbvprintf+0x3ac>
			unsupported = true;
   123c0:	f04f 0801 	mov.w	r8, #1
   123c4:	e6f0      	b.n	121a8 <cbvprintf+0x3ac>
		conv->invalid = true;
   123c6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   123ca:	f043 0301 	orr.w	r3, r3, #1
   123ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   123d2:	e6e9      	b.n	121a8 <cbvprintf+0x3ac>
			unsupported = true;
   123d4:	f04f 0801 	mov.w	r8, #1
   123d8:	e6e6      	b.n	121a8 <cbvprintf+0x3ac>
				conv->flag_dash = true;
   123da:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   123de:	f043 0304 	orr.w	r3, r3, #4
   123e2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				width = -width;
   123e6:	f1c8 0800 	rsb	r8, r8, #0
   123ea:	e6f6      	b.n	121da <cbvprintf+0x3de>
		} else if (conv->width_present) {
   123ec:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   123f0:	2b00      	cmp	r3, #0
   123f2:	db02      	blt.n	123fa <cbvprintf+0x5fe>
		int width = -1;
   123f4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   123f8:	e6ef      	b.n	121da <cbvprintf+0x3de>
			width = conv->width_value;
   123fa:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   123fe:	e6ec      	b.n	121da <cbvprintf+0x3de>
				conv->prec_present = false;
   12400:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12404:	f36f 0341 	bfc	r3, #1, #1
   12408:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   1240c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   12410:	e6f2      	b.n	121f8 <cbvprintf+0x3fc>
		} else if (conv->prec_present) {
   12412:	f013 0f02 	tst.w	r3, #2
   12416:	d002      	beq.n	1241e <cbvprintf+0x622>
			precision = conv->prec_value;
   12418:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1241c:	e6ec      	b.n	121f8 <cbvprintf+0x3fc>
		int precision = -1;
   1241e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   12422:	e6e9      	b.n	121f8 <cbvprintf+0x3fc>
		    && !conv->prec_present) {
   12424:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12428:	f013 0f02 	tst.w	r3, #2
   1242c:	f47f aeee 	bne.w	1220c <cbvprintf+0x410>
			if (conv->specifier_a) {
   12430:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   12434:	2b00      	cmp	r3, #0
   12436:	db02      	blt.n	1243e <cbvprintf+0x642>
				precision = 6;
   12438:	f04f 0a06 	mov.w	sl, #6
   1243c:	e6e6      	b.n	1220c <cbvprintf+0x410>
				precision = FRACTION_HEX;
   1243e:	f04f 0a0d 	mov.w	sl, #13
   12442:	e6e3      	b.n	1220c <cbvprintf+0x410>
			switch (length_mod) {
   12444:	1ecb      	subs	r3, r1, #3
   12446:	2b04      	cmp	r3, #4
   12448:	d804      	bhi.n	12454 <cbvprintf+0x658>
   1244a:	e8df f003 	tbb	[pc, r3]
   1244e:	1d0b      	.short	0x1d0b
   12450:	3529      	.short	0x3529
   12452:	35          	.byte	0x35
   12453:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   12454:	9b05      	ldr	r3, [sp, #20]
   12456:	1d1a      	adds	r2, r3, #4
   12458:	9205      	str	r2, [sp, #20]
   1245a:	681a      	ldr	r2, [r3, #0]
   1245c:	17d3      	asrs	r3, r2, #31
   1245e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   12462:	e006      	b.n	12472 <cbvprintf+0x676>
					value->sint = va_arg(ap, long);
   12464:	9b05      	ldr	r3, [sp, #20]
   12466:	1d1a      	adds	r2, r3, #4
   12468:	9205      	str	r2, [sp, #20]
   1246a:	681a      	ldr	r2, [r3, #0]
   1246c:	17d3      	asrs	r3, r2, #31
   1246e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   12472:	2901      	cmp	r1, #1
   12474:	d028      	beq.n	124c8 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   12476:	2902      	cmp	r1, #2
   12478:	f47f aedc 	bne.w	12234 <cbvprintf+0x438>
				value->sint = (short)value->sint;
   1247c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   12480:	17d3      	asrs	r3, r2, #31
   12482:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   12486:	e6d5      	b.n	12234 <cbvprintf+0x438>
					(sint_value_type)va_arg(ap, long long);
   12488:	9b05      	ldr	r3, [sp, #20]
   1248a:	3307      	adds	r3, #7
   1248c:	f023 0307 	bic.w	r3, r3, #7
   12490:	f103 0208 	add.w	r2, r3, #8
   12494:	9205      	str	r2, [sp, #20]
   12496:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1249a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   1249e:	e7e8      	b.n	12472 <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, intmax_t);
   124a0:	9b05      	ldr	r3, [sp, #20]
   124a2:	3307      	adds	r3, #7
   124a4:	f023 0307 	bic.w	r3, r3, #7
   124a8:	f103 0208 	add.w	r2, r3, #8
   124ac:	9205      	str	r2, [sp, #20]
   124ae:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   124b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   124b6:	e7dc      	b.n	12472 <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   124b8:	9b05      	ldr	r3, [sp, #20]
   124ba:	1d1a      	adds	r2, r3, #4
   124bc:	9205      	str	r2, [sp, #20]
   124be:	681a      	ldr	r2, [r3, #0]
   124c0:	17d3      	asrs	r3, r2, #31
				value->sint =
   124c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   124c6:	e7d4      	b.n	12472 <cbvprintf+0x676>
				value->sint = (char)value->sint;
   124c8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   124cc:	930a      	str	r3, [sp, #40]	; 0x28
   124ce:	2300      	movs	r3, #0
   124d0:	930b      	str	r3, [sp, #44]	; 0x2c
   124d2:	e6af      	b.n	12234 <cbvprintf+0x438>
			switch (length_mod) {
   124d4:	1ecb      	subs	r3, r1, #3
   124d6:	2b04      	cmp	r3, #4
   124d8:	d804      	bhi.n	124e4 <cbvprintf+0x6e8>
   124da:	e8df f003 	tbb	[pc, r3]
   124de:	1f0b      	.short	0x1f0b
   124e0:	4135      	.short	0x4135
   124e2:	41          	.byte	0x41
   124e3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   124e4:	9b05      	ldr	r3, [sp, #20]
   124e6:	1d1a      	adds	r2, r3, #4
   124e8:	9205      	str	r2, [sp, #20]
   124ea:	681b      	ldr	r3, [r3, #0]
   124ec:	930a      	str	r3, [sp, #40]	; 0x28
   124ee:	2300      	movs	r3, #0
   124f0:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   124f2:	e01e      	b.n	12532 <cbvprintf+0x736>
				    && (conv->specifier == 'c')) {
   124f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
				if ((!WCHAR_IS_SIGNED)
   124f8:	2b63      	cmp	r3, #99	; 0x63
   124fa:	d007      	beq.n	1250c <cbvprintf+0x710>
					value->uint = va_arg(ap, unsigned long);
   124fc:	9b05      	ldr	r3, [sp, #20]
   124fe:	1d1a      	adds	r2, r3, #4
   12500:	9205      	str	r2, [sp, #20]
   12502:	681b      	ldr	r3, [r3, #0]
   12504:	930a      	str	r3, [sp, #40]	; 0x28
   12506:	2300      	movs	r3, #0
   12508:	930b      	str	r3, [sp, #44]	; 0x2c
   1250a:	e012      	b.n	12532 <cbvprintf+0x736>
					value->uint = (wchar_t)va_arg(ap,
   1250c:	9b05      	ldr	r3, [sp, #20]
   1250e:	1d1a      	adds	r2, r3, #4
   12510:	9205      	str	r2, [sp, #20]
   12512:	681b      	ldr	r3, [r3, #0]
   12514:	930a      	str	r3, [sp, #40]	; 0x28
   12516:	2300      	movs	r3, #0
   12518:	930b      	str	r3, [sp, #44]	; 0x2c
   1251a:	e00a      	b.n	12532 <cbvprintf+0x736>
					(uint_value_type)va_arg(ap,
   1251c:	9b05      	ldr	r3, [sp, #20]
   1251e:	3307      	adds	r3, #7
   12520:	f023 0307 	bic.w	r3, r3, #7
   12524:	f103 0208 	add.w	r2, r3, #8
   12528:	9205      	str	r2, [sp, #20]
   1252a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1252e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   12532:	2901      	cmp	r1, #1
   12534:	d01c      	beq.n	12570 <cbvprintf+0x774>
			} else if (length_mod == LENGTH_H) {
   12536:	2902      	cmp	r1, #2
   12538:	f47f ae7c 	bne.w	12234 <cbvprintf+0x438>
				value->uint = (unsigned short)value->uint;
   1253c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12540:	930a      	str	r3, [sp, #40]	; 0x28
   12542:	2300      	movs	r3, #0
   12544:	930b      	str	r3, [sp, #44]	; 0x2c
   12546:	e675      	b.n	12234 <cbvprintf+0x438>
					(uint_value_type)va_arg(ap,
   12548:	9b05      	ldr	r3, [sp, #20]
   1254a:	3307      	adds	r3, #7
   1254c:	f023 0307 	bic.w	r3, r3, #7
   12550:	f103 0208 	add.w	r2, r3, #8
   12554:	9205      	str	r2, [sp, #20]
   12556:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1255a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   1255e:	e7e8      	b.n	12532 <cbvprintf+0x736>
					(uint_value_type)va_arg(ap, size_t);
   12560:	9b05      	ldr	r3, [sp, #20]
   12562:	1d1a      	adds	r2, r3, #4
   12564:	9205      	str	r2, [sp, #20]
   12566:	681b      	ldr	r3, [r3, #0]
				value->uint =
   12568:	930a      	str	r3, [sp, #40]	; 0x28
   1256a:	2300      	movs	r3, #0
   1256c:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   1256e:	e7e0      	b.n	12532 <cbvprintf+0x736>
				value->uint = (unsigned char)value->uint;
   12570:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   12574:	930a      	str	r3, [sp, #40]	; 0x28
   12576:	2300      	movs	r3, #0
   12578:	930b      	str	r3, [sp, #44]	; 0x2c
   1257a:	e65b      	b.n	12234 <cbvprintf+0x438>
			if (length_mod == LENGTH_UPPER_L) {
   1257c:	2908      	cmp	r1, #8
   1257e:	d00b      	beq.n	12598 <cbvprintf+0x79c>
				value->dbl = va_arg(ap, double);
   12580:	9b05      	ldr	r3, [sp, #20]
   12582:	3307      	adds	r3, #7
   12584:	f023 0307 	bic.w	r3, r3, #7
   12588:	f103 0208 	add.w	r2, r3, #8
   1258c:	9205      	str	r2, [sp, #20]
   1258e:	e9d3 2300 	ldrd	r2, r3, [r3]
   12592:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   12596:	e64d      	b.n	12234 <cbvprintf+0x438>
				value->ldbl = va_arg(ap, long double);
   12598:	9b05      	ldr	r3, [sp, #20]
   1259a:	3307      	adds	r3, #7
   1259c:	f023 0307 	bic.w	r3, r3, #7
   125a0:	f103 0208 	add.w	r2, r3, #8
   125a4:	9205      	str	r2, [sp, #20]
   125a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   125aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   125ae:	e641      	b.n	12234 <cbvprintf+0x438>
			value->ptr = va_arg(ap, void *);
   125b0:	9b05      	ldr	r3, [sp, #20]
   125b2:	1d1a      	adds	r2, r3, #4
   125b4:	9205      	str	r2, [sp, #20]
   125b6:	681b      	ldr	r3, [r3, #0]
   125b8:	930a      	str	r3, [sp, #40]	; 0x28
   125ba:	e63b      	b.n	12234 <cbvprintf+0x438>
			OUTS(sp, fp);
   125bc:	464b      	mov	r3, r9
   125be:	463a      	mov	r2, r7
   125c0:	4629      	mov	r1, r5
   125c2:	4630      	mov	r0, r6
   125c4:	f00f fef8 	bl	223b8 <outs>
   125c8:	2800      	cmp	r0, #0
   125ca:	f6ff ac2c 	blt.w	11e26 <cbvprintf+0x2a>
   125ce:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   125d0:	464f      	mov	r7, r9
			continue;
   125d2:	e41d      	b.n	11e10 <cbvprintf+0x14>
			OUTC('%');
   125d4:	4629      	mov	r1, r5
   125d6:	2025      	movs	r0, #37	; 0x25
   125d8:	47b0      	blx	r6
   125da:	2800      	cmp	r0, #0
   125dc:	f6ff ac23 	blt.w	11e26 <cbvprintf+0x2a>
   125e0:	3401      	adds	r4, #1
		fp = extract_conversion(conv, sp);
   125e2:	464f      	mov	r7, r9
			continue;
   125e4:	e414      	b.n	11e10 <cbvprintf+0x14>
			bps = (const char *)value->ptr;
   125e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (precision >= 0) {
   125e8:	f1ba 0f00 	cmp.w	sl, #0
   125ec:	db3a      	blt.n	12664 <cbvprintf+0x868>
				len = strnlen(bps, precision);
   125ee:	4651      	mov	r1, sl
   125f0:	4638      	mov	r0, r7
   125f2:	f014 f9a4 	bl	2693e <strnlen>
			bpe = bps + len;
   125f6:	4438      	add	r0, r7
   125f8:	9008      	str	r0, [sp, #32]
		if (bps == NULL) {
   125fa:	2f00      	cmp	r7, #0
   125fc:	d0f1      	beq.n	125e2 <cbvprintf+0x7e6>
		size_t nj_len = (bpe - bps);
   125fe:	9b08      	ldr	r3, [sp, #32]
   12600:	1bdb      	subs	r3, r3, r7
		if (sign != 0) {
   12602:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12606:	b100      	cbz	r0, 1260a <cbvprintf+0x80e>
			nj_len += 1U;
   12608:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1260a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1260e:	f011 0f10 	tst.w	r1, #16
   12612:	f000 80b6 	beq.w	12782 <cbvprintf+0x986>
			nj_len += 2U;
   12616:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   12618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1261a:	4413      	add	r3, r2
		if (conv->pad_fp) {
   1261c:	f011 0f40 	tst.w	r1, #64	; 0x40
   12620:	d001      	beq.n	12626 <cbvprintf+0x82a>
			nj_len += conv->pad0_pre_exp;
   12622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12624:	4413      	add	r3, r2
		if (width > 0) {
   12626:	f1b8 0f00 	cmp.w	r8, #0
   1262a:	f340 80c3 	ble.w	127b4 <cbvprintf+0x9b8>
			width -= (int)nj_len;
   1262e:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   12632:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12636:	f013 0f04 	tst.w	r3, #4
   1263a:	f040 80bb 	bne.w	127b4 <cbvprintf+0x9b8>
				if (conv->flag_zero) {
   1263e:	f013 0f40 	tst.w	r3, #64	; 0x40
   12642:	f000 80a4 	beq.w	1278e <cbvprintf+0x992>
					if (sign != 0) {
   12646:	2800      	cmp	r0, #0
   12648:	f000 80a4 	beq.w	12794 <cbvprintf+0x998>
						OUTC(sign);
   1264c:	4629      	mov	r1, r5
   1264e:	47b0      	blx	r6
   12650:	2800      	cmp	r0, #0
   12652:	f6ff abe8 	blt.w	11e26 <cbvprintf+0x2a>
   12656:	3401      	adds	r4, #1
						sign = 0;
   12658:	2300      	movs	r3, #0
   1265a:	f88d 301f 	strb.w	r3, [sp, #31]
					pad = '0';
   1265e:	f04f 0a30 	mov.w	sl, #48	; 0x30
   12662:	e099      	b.n	12798 <cbvprintf+0x99c>
				len = strlen(bps);
   12664:	4638      	mov	r0, r7
   12666:	f7fe fbdd 	bl	10e24 <strlen>
   1266a:	e7c4      	b.n	125f6 <cbvprintf+0x7fa>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1266c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1266e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			bpe = buf + 1;
   12672:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   12676:	9308      	str	r3, [sp, #32]
			bps = buf;
   12678:	af11      	add	r7, sp, #68	; 0x44
			break;
   1267a:	e7be      	b.n	125fa <cbvprintf+0x7fe>
			if (conv->flag_plus) {
   1267c:	f012 0f08 	tst.w	r2, #8
   12680:	d024      	beq.n	126cc <cbvprintf+0x8d0>
				sign = '+';
   12682:	232b      	movs	r3, #43	; 0x2b
   12684:	f88d 301f 	strb.w	r3, [sp, #31]
			sint = value->sint;
   12688:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   1268c:	2a00      	cmp	r2, #0
   1268e:	f173 0100 	sbcs.w	r1, r3, #0
   12692:	db22      	blt.n	126da <cbvprintf+0x8de>
				value->uint = (uint_value_type)sint;
   12694:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			bps = encode_uint(value->uint, conv, buf, bpe);
   12698:	9b08      	ldr	r3, [sp, #32]
   1269a:	9300      	str	r3, [sp, #0]
   1269c:	ab11      	add	r3, sp, #68	; 0x44
   1269e:	aa0c      	add	r2, sp, #48	; 0x30
   126a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   126a4:	f7ff f922 	bl	118ec <encode_uint>
   126a8:	4607      	mov	r7, r0
			if (precision >= 0) {
   126aa:	f1ba 0f00 	cmp.w	sl, #0
   126ae:	dba4      	blt.n	125fa <cbvprintf+0x7fe>
				size_t len = bpe - bps;
   126b0:	9b08      	ldr	r3, [sp, #32]
   126b2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   126b4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   126b8:	f36f 1286 	bfc	r2, #6, #1
   126bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   126c0:	459a      	cmp	sl, r3
   126c2:	d99a      	bls.n	125fa <cbvprintf+0x7fe>
					conv->pad0_value = precision - (int)len;
   126c4:	ebaa 0303 	sub.w	r3, sl, r3
   126c8:	930d      	str	r3, [sp, #52]	; 0x34
   126ca:	e796      	b.n	125fa <cbvprintf+0x7fe>
			} else if (conv->flag_space) {
   126cc:	f012 0f10 	tst.w	r2, #16
   126d0:	d0da      	beq.n	12688 <cbvprintf+0x88c>
				sign = ' ';
   126d2:	2320      	movs	r3, #32
   126d4:	f88d 301f 	strb.w	r3, [sp, #31]
   126d8:	e7d6      	b.n	12688 <cbvprintf+0x88c>
				sign = '-';
   126da:	212d      	movs	r1, #45	; 0x2d
   126dc:	f88d 101f 	strb.w	r1, [sp, #31]
				value->uint = (uint_value_type)-sint;
   126e0:	4252      	negs	r2, r2
   126e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   126e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   126ea:	e7d5      	b.n	12698 <cbvprintf+0x89c>
			if (value->ptr != NULL) {
   126ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   126ee:	b918      	cbnz	r0, 126f8 <cbvprintf+0x8fc>
			bpe = bps + 5;
   126f0:	4f94      	ldr	r7, [pc, #592]	; (12944 <cbvprintf+0xb48>)
   126f2:	9708      	str	r7, [sp, #32]
			bps = "(nil)";
   126f4:	3f05      	subs	r7, #5
			break;
   126f6:	e780      	b.n	125fa <cbvprintf+0x7fe>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   126f8:	9b08      	ldr	r3, [sp, #32]
   126fa:	9300      	str	r3, [sp, #0]
   126fc:	ab11      	add	r3, sp, #68	; 0x44
   126fe:	aa0c      	add	r2, sp, #48	; 0x30
   12700:	2100      	movs	r1, #0
   12702:	f7ff f8f3 	bl	118ec <encode_uint>
   12706:	4607      	mov	r7, r0
				conv->altform_0c = true;
   12708:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1270c:	f043 0310 	orr.w	r3, r3, #16
   12710:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
				conv->specifier = 'x';
   12714:	2378      	movs	r3, #120	; 0x78
   12716:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
				goto prec_int_pad0;
   1271a:	e7c6      	b.n	126aa <cbvprintf+0x8ae>
				store_count(conv, value->ptr, count);
   1271c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   1271e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12722:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   12726:	2b07      	cmp	r3, #7
   12728:	f63f af5b 	bhi.w	125e2 <cbvprintf+0x7e6>
   1272c:	e8df f003 	tbb	[pc, r3]
   12730:	0a080604 	.word	0x0a080604
   12734:	1816110c 	.word	0x1816110c
		*(int *)dp = count;
   12738:	6014      	str	r4, [r2, #0]
		break;
   1273a:	e752      	b.n	125e2 <cbvprintf+0x7e6>
		*(signed char *)dp = (signed char)count;
   1273c:	7014      	strb	r4, [r2, #0]
		break;
   1273e:	e750      	b.n	125e2 <cbvprintf+0x7e6>
		*(short *)dp = (short)count;
   12740:	8014      	strh	r4, [r2, #0]
		break;
   12742:	e74e      	b.n	125e2 <cbvprintf+0x7e6>
		*(long *)dp = (long)count;
   12744:	6014      	str	r4, [r2, #0]
		break;
   12746:	e74c      	b.n	125e2 <cbvprintf+0x7e6>
		*(long long *)dp = (long long)count;
   12748:	4620      	mov	r0, r4
   1274a:	17e1      	asrs	r1, r4, #31
   1274c:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   12750:	e747      	b.n	125e2 <cbvprintf+0x7e6>
		*(intmax_t *)dp = (intmax_t)count;
   12752:	4620      	mov	r0, r4
   12754:	17e1      	asrs	r1, r4, #31
   12756:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   1275a:	e742      	b.n	125e2 <cbvprintf+0x7e6>
		*(size_t *)dp = (size_t)count;
   1275c:	6014      	str	r4, [r2, #0]
		break;
   1275e:	e740      	b.n	125e2 <cbvprintf+0x7e6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12760:	6014      	str	r4, [r2, #0]
}
   12762:	e73e      	b.n	125e2 <cbvprintf+0x7e6>
				bps = encode_float(value->dbl, conv, precision,
   12764:	ab08      	add	r3, sp, #32
   12766:	9302      	str	r3, [sp, #8]
   12768:	ab11      	add	r3, sp, #68	; 0x44
   1276a:	9301      	str	r3, [sp, #4]
   1276c:	f10d 031f 	add.w	r3, sp, #31
   12770:	9300      	str	r3, [sp, #0]
   12772:	4653      	mov	r3, sl
   12774:	aa0c      	add	r2, sp, #48	; 0x30
   12776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1277a:	f7ff f927 	bl	119cc <encode_float>
   1277e:	4607      	mov	r7, r0
			break;
   12780:	e73b      	b.n	125fa <cbvprintf+0x7fe>
		} else if (conv->altform_0) {
   12782:	f011 0f08 	tst.w	r1, #8
   12786:	f43f af47 	beq.w	12618 <cbvprintf+0x81c>
			nj_len += 1U;
   1278a:	3301      	adds	r3, #1
   1278c:	e744      	b.n	12618 <cbvprintf+0x81c>
				char pad = ' ';
   1278e:	f04f 0a20 	mov.w	sl, #32
   12792:	e001      	b.n	12798 <cbvprintf+0x99c>
					pad = '0';
   12794:	f04f 0a30 	mov.w	sl, #48	; 0x30
   12798:	4643      	mov	r3, r8
				while (width-- > 0) {
   1279a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   1279e:	2b00      	cmp	r3, #0
   127a0:	dd08      	ble.n	127b4 <cbvprintf+0x9b8>
					OUTC(pad);
   127a2:	4629      	mov	r1, r5
   127a4:	4650      	mov	r0, sl
   127a6:	47b0      	blx	r6
   127a8:	2800      	cmp	r0, #0
   127aa:	f6ff ab3c 	blt.w	11e26 <cbvprintf+0x2a>
   127ae:	3401      	adds	r4, #1
				while (width-- > 0) {
   127b0:	4643      	mov	r3, r8
   127b2:	e7f2      	b.n	1279a <cbvprintf+0x99e>
		if (sign != 0) {
   127b4:	f89d 001f 	ldrb.w	r0, [sp, #31]
   127b8:	b128      	cbz	r0, 127c6 <cbvprintf+0x9ca>
			OUTC(sign);
   127ba:	4629      	mov	r1, r5
   127bc:	47b0      	blx	r6
   127be:	2800      	cmp	r0, #0
   127c0:	f6ff ab31 	blt.w	11e26 <cbvprintf+0x2a>
   127c4:	3401      	adds	r4, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   127c6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   127ca:	f013 0f40 	tst.w	r3, #64	; 0x40
   127ce:	d072      	beq.n	128b6 <cbvprintf+0xaba>
			if (conv->specifier_a) {
   127d0:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   127d4:	2b00      	cmp	r3, #0
   127d6:	db0d      	blt.n	127f4 <cbvprintf+0x9f8>
				while (isdigit((int)*cp)) {
   127d8:	7838      	ldrb	r0, [r7, #0]
   127da:	4b5b      	ldr	r3, [pc, #364]	; (12948 <cbvprintf+0xb4c>)
   127dc:	5cc3      	ldrb	r3, [r0, r3]
   127de:	f013 0f04 	tst.w	r3, #4
   127e2:	d012      	beq.n	1280a <cbvprintf+0xa0e>
					OUTC(*cp++);
   127e4:	3701      	adds	r7, #1
   127e6:	4629      	mov	r1, r5
   127e8:	47b0      	blx	r6
   127ea:	2800      	cmp	r0, #0
   127ec:	f6ff ab1b 	blt.w	11e26 <cbvprintf+0x2a>
   127f0:	3401      	adds	r4, #1
   127f2:	e7f1      	b.n	127d8 <cbvprintf+0x9dc>
				while (*cp != 'p') {
   127f4:	7838      	ldrb	r0, [r7, #0]
   127f6:	2870      	cmp	r0, #112	; 0x70
   127f8:	d044      	beq.n	12884 <cbvprintf+0xa88>
					OUTC(*cp++);
   127fa:	3701      	adds	r7, #1
   127fc:	4629      	mov	r1, r5
   127fe:	47b0      	blx	r6
   12800:	2800      	cmp	r0, #0
   12802:	f6ff ab10 	blt.w	11e26 <cbvprintf+0x2a>
   12806:	3401      	adds	r4, #1
   12808:	e7f4      	b.n	127f4 <cbvprintf+0x9f8>
				pad_len = conv->pad0_value;
   1280a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
				if (!conv->pad_postdp) {
   1280e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12812:	f013 0f20 	tst.w	r3, #32
   12816:	d010      	beq.n	1283a <cbvprintf+0xa3e>
				if (*cp == '.') {
   12818:	7838      	ldrb	r0, [r7, #0]
   1281a:	282e      	cmp	r0, #46	; 0x2e
   1281c:	d01d      	beq.n	1285a <cbvprintf+0xa5e>
				while (isdigit((int)*cp)) {
   1281e:	7838      	ldrb	r0, [r7, #0]
   12820:	4b49      	ldr	r3, [pc, #292]	; (12948 <cbvprintf+0xb4c>)
   12822:	5cc3      	ldrb	r3, [r0, r3]
   12824:	f013 0f04 	tst.w	r3, #4
   12828:	d02c      	beq.n	12884 <cbvprintf+0xa88>
					OUTC(*cp++);
   1282a:	3701      	adds	r7, #1
   1282c:	4629      	mov	r1, r5
   1282e:	47b0      	blx	r6
   12830:	2800      	cmp	r0, #0
   12832:	f6ff aaf8 	blt.w	11e26 <cbvprintf+0x2a>
   12836:	3401      	adds	r4, #1
   12838:	e7f1      	b.n	1281e <cbvprintf+0xa22>
					while (pad_len-- > 0) {
   1283a:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
   1283e:	f1ba 0f00 	cmp.w	sl, #0
   12842:	dd08      	ble.n	12856 <cbvprintf+0xa5a>
						OUTC('0');
   12844:	4629      	mov	r1, r5
   12846:	2030      	movs	r0, #48	; 0x30
   12848:	47b0      	blx	r6
   1284a:	2800      	cmp	r0, #0
   1284c:	f6ff aaeb 	blt.w	11e26 <cbvprintf+0x2a>
   12850:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   12852:	46da      	mov	sl, fp
   12854:	e7f1      	b.n	1283a <cbvprintf+0xa3e>
   12856:	46da      	mov	sl, fp
   12858:	e7de      	b.n	12818 <cbvprintf+0xa1c>
					OUTC(*cp++);
   1285a:	3701      	adds	r7, #1
   1285c:	4629      	mov	r1, r5
   1285e:	47b0      	blx	r6
   12860:	2800      	cmp	r0, #0
   12862:	f6ff aae0 	blt.w	11e26 <cbvprintf+0x2a>
   12866:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   12868:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
   1286c:	f1ba 0f00 	cmp.w	sl, #0
   12870:	ddd5      	ble.n	1281e <cbvprintf+0xa22>
						OUTC('0');
   12872:	4629      	mov	r1, r5
   12874:	2030      	movs	r0, #48	; 0x30
   12876:	47b0      	blx	r6
   12878:	2800      	cmp	r0, #0
   1287a:	f6ff aad4 	blt.w	11e26 <cbvprintf+0x2a>
   1287e:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   12880:	46da      	mov	sl, fp
   12882:	e7f1      	b.n	12868 <cbvprintf+0xa6c>
			pad_len = conv->pad0_pre_exp;
   12884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			while (pad_len-- > 0) {
   12886:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   1288a:	2b00      	cmp	r3, #0
   1288c:	dd08      	ble.n	128a0 <cbvprintf+0xaa4>
				OUTC('0');
   1288e:	4629      	mov	r1, r5
   12890:	2030      	movs	r0, #48	; 0x30
   12892:	47b0      	blx	r6
   12894:	2800      	cmp	r0, #0
   12896:	f6ff aac6 	blt.w	11e26 <cbvprintf+0x2a>
   1289a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1289c:	4653      	mov	r3, sl
   1289e:	e7f2      	b.n	12886 <cbvprintf+0xa8a>
			OUTS(cp, bpe);
   128a0:	9b08      	ldr	r3, [sp, #32]
   128a2:	463a      	mov	r2, r7
   128a4:	4629      	mov	r1, r5
   128a6:	4630      	mov	r0, r6
   128a8:	f00f fd86 	bl	223b8 <outs>
   128ac:	2800      	cmp	r0, #0
   128ae:	f6ff aaba 	blt.w	11e26 <cbvprintf+0x2a>
   128b2:	4404      	add	r4, r0
   128b4:	e033      	b.n	1291e <cbvprintf+0xb22>
			if (conv->altform_0c | conv->altform_0) {
   128b6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   128ba:	f3c3 1200 	ubfx	r2, r3, #4, #1
   128be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   128c2:	4313      	orrs	r3, r2
   128c4:	d006      	beq.n	128d4 <cbvprintf+0xad8>
				OUTC('0');
   128c6:	4629      	mov	r1, r5
   128c8:	2030      	movs	r0, #48	; 0x30
   128ca:	47b0      	blx	r6
   128cc:	2800      	cmp	r0, #0
   128ce:	f6ff aaaa 	blt.w	11e26 <cbvprintf+0x2a>
   128d2:	3401      	adds	r4, #1
			if (conv->altform_0c) {
   128d4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   128d8:	f013 0f10 	tst.w	r3, #16
   128dc:	d007      	beq.n	128ee <cbvprintf+0xaf2>
				OUTC(conv->specifier);
   128de:	4629      	mov	r1, r5
   128e0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   128e4:	47b0      	blx	r6
   128e6:	2800      	cmp	r0, #0
   128e8:	f6ff aa9d 	blt.w	11e26 <cbvprintf+0x2a>
   128ec:	3401      	adds	r4, #1
			pad_len = conv->pad0_value;
   128ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			while (pad_len-- > 0) {
   128f0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   128f4:	2b00      	cmp	r3, #0
   128f6:	dd08      	ble.n	1290a <cbvprintf+0xb0e>
				OUTC('0');
   128f8:	4629      	mov	r1, r5
   128fa:	2030      	movs	r0, #48	; 0x30
   128fc:	47b0      	blx	r6
   128fe:	2800      	cmp	r0, #0
   12900:	f6ff aa91 	blt.w	11e26 <cbvprintf+0x2a>
   12904:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   12906:	4653      	mov	r3, sl
   12908:	e7f2      	b.n	128f0 <cbvprintf+0xaf4>
			OUTS(bps, bpe);
   1290a:	9b08      	ldr	r3, [sp, #32]
   1290c:	463a      	mov	r2, r7
   1290e:	4629      	mov	r1, r5
   12910:	4630      	mov	r0, r6
   12912:	f00f fd51 	bl	223b8 <outs>
   12916:	2800      	cmp	r0, #0
   12918:	f6ff aa85 	blt.w	11e26 <cbvprintf+0x2a>
   1291c:	4404      	add	r4, r0
		while (width > 0) {
   1291e:	f1b8 0f00 	cmp.w	r8, #0
   12922:	dd09      	ble.n	12938 <cbvprintf+0xb3c>
			OUTC(' ');
   12924:	4629      	mov	r1, r5
   12926:	2020      	movs	r0, #32
   12928:	47b0      	blx	r6
   1292a:	2800      	cmp	r0, #0
   1292c:	f6ff aa7b 	blt.w	11e26 <cbvprintf+0x2a>
   12930:	3401      	adds	r4, #1
			--width;
   12932:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   12936:	e7f2      	b.n	1291e <cbvprintf+0xb22>
		fp = extract_conversion(conv, sp);
   12938:	464f      	mov	r7, r9
   1293a:	f7ff ba69 	b.w	11e10 <cbvprintf+0x14>
	return count;
   1293e:	4620      	mov	r0, r4
   12940:	f7ff ba71 	b.w	11e26 <cbvprintf+0x2a>
   12944:	00027e21 	.word	0x00027e21
   12948:	0002a397 	.word	0x0002a397

0001294c <nordicsemi_nrf91_init>:
   1294c:	f04f 0220 	mov.w	r2, #32
   12950:	f3ef 8311 	mrs	r3, BASEPRI
   12954:	f382 8812 	msr	BASEPRI_MAX, r2
   12958:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1295c:	4a04      	ldr	r2, [pc, #16]	; (12970 <nordicsemi_nrf91_init+0x24>)
   1295e:	2101      	movs	r1, #1
   12960:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   12964:	f383 8811 	msr	BASEPRI, r3
   12968:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1296c:	2000      	movs	r0, #0
   1296e:	4770      	bx	lr
   12970:	40039000 	.word	0x40039000

00012974 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12974:	b130      	cbz	r0, 12984 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   12976:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12978:	0180      	lsls	r0, r0, #6
   1297a:	4b03      	ldr	r3, [pc, #12]	; (12988 <arch_busy_wait+0x14>)
   1297c:	f043 0301 	orr.w	r3, r3, #1
   12980:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   12982:	bd08      	pop	{r3, pc}
   12984:	4770      	bx	lr
   12986:	bf00      	nop
   12988:	00027240 	.word	0x00027240

0001298c <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   1298c:	4b05      	ldr	r3, [pc, #20]	; (129a4 <is_rodata+0x18>)
   1298e:	4298      	cmp	r0, r3
   12990:	d304      	bcc.n	1299c <is_rodata+0x10>
   12992:	4b05      	ldr	r3, [pc, #20]	; (129a8 <is_rodata+0x1c>)
   12994:	4298      	cmp	r0, r3
   12996:	d303      	bcc.n	129a0 <is_rodata+0x14>
   12998:	2000      	movs	r0, #0
   1299a:	4770      	bx	lr
   1299c:	2000      	movs	r0, #0
   1299e:	4770      	bx	lr
   129a0:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   129a2:	4770      	bx	lr
   129a4:	00026dac 	.word	0x00026dac
   129a8:	0002a4ec 	.word	0x0002a4ec

000129ac <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   129ac:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   129ae:	4b06      	ldr	r3, [pc, #24]	; (129c8 <thread_set+0x1c>)
   129b0:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   129b2:	b118      	cbz	r0, 129bc <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   129b4:	4b05      	ldr	r3, [pc, #20]	; (129cc <thread_set+0x20>)
   129b6:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   129b8:	2b09      	cmp	r3, #9
   129ba:	dc00      	bgt.n	129be <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   129bc:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   129be:	4804      	ldr	r0, [pc, #16]	; (129d0 <thread_set+0x24>)
   129c0:	f00c fc44 	bl	1f24c <z_impl_k_sem_give>
}
   129c4:	e7fa      	b.n	129bc <thread_set+0x10>
   129c6:	bf00      	nop
   129c8:	2000e220 	.word	0x2000e220
   129cc:	2000e1f0 	.word	0x2000e1f0
   129d0:	2000c8ac 	.word	0x2000c8ac

000129d4 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   129d4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   129d6:	4802      	ldr	r0, [pc, #8]	; (129e0 <log_process_thread_timer_expiry_fn+0xc>)
   129d8:	f00c fc38 	bl	1f24c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   129dc:	bd08      	pop	{r3, pc}
   129de:	bf00      	nop
   129e0:	2000c8ac 	.word	0x2000c8ac

000129e4 <next_pending>:
{
   129e4:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   129e6:	4803      	ldr	r0, [pc, #12]	; (129f4 <next_pending+0x10>)
   129e8:	f00f fd2d 	bl	22446 <log_list_head_peek>
}
   129ec:	3800      	subs	r0, #0
   129ee:	bf18      	it	ne
   129f0:	2001      	movne	r0, #1
   129f2:	bd08      	pop	{r3, pc}
   129f4:	2000e1fc 	.word	0x2000e1fc

000129f8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   129f8:	b530      	push	{r4, r5, lr}
   129fa:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   129fc:	2200      	movs	r2, #0
   129fe:	490f      	ldr	r1, [pc, #60]	; (12a3c <enable_logger+0x44>)
   12a00:	480f      	ldr	r0, [pc, #60]	; (12a40 <enable_logger+0x48>)
   12a02:	f013 fe1b 	bl	2663c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12a06:	4d0f      	ldr	r5, [pc, #60]	; (12a44 <enable_logger+0x4c>)
   12a08:	2200      	movs	r2, #0
   12a0a:	2300      	movs	r3, #0
   12a0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12a10:	2400      	movs	r4, #0
   12a12:	9404      	str	r4, [sp, #16]
   12a14:	230e      	movs	r3, #14
   12a16:	9303      	str	r3, [sp, #12]
   12a18:	9402      	str	r4, [sp, #8]
   12a1a:	9401      	str	r4, [sp, #4]
   12a1c:	9400      	str	r4, [sp, #0]
   12a1e:	4b0a      	ldr	r3, [pc, #40]	; (12a48 <enable_logger+0x50>)
   12a20:	f44f 7240 	mov.w	r2, #768	; 0x300
   12a24:	4909      	ldr	r1, [pc, #36]	; (12a4c <enable_logger+0x54>)
   12a26:	4628      	mov	r0, r5
   12a28:	f013 f9b8 	bl	25d9c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12a2c:	4908      	ldr	r1, [pc, #32]	; (12a50 <enable_logger+0x58>)
   12a2e:	4628      	mov	r0, r5
   12a30:	f00c f952 	bl	1ecd8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12a34:	4620      	mov	r0, r4
   12a36:	b009      	add	sp, #36	; 0x24
   12a38:	bd30      	pop	{r4, r5, pc}
   12a3a:	bf00      	nop
   12a3c:	000129d5 	.word	0x000129d5
   12a40:	2000c918 	.word	0x2000c918
   12a44:	2000c950 	.word	0x2000c950
   12a48:	00013105 	.word	0x00013105
   12a4c:	2000fa48 	.word	0x2000fa48
   12a50:	00027e28 	.word	0x00027e28

00012a54 <z_log_get_s_mask>:
{
   12a54:	b470      	push	{r4, r5, r6}
   12a56:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   12a58:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   12a5a:	4605      	mov	r5, r0
	bool arm = false;
   12a5c:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   12a5e:	e001      	b.n	12a64 <z_log_get_s_mask+0x10>
			arm = !arm;
   12a60:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   12a64:	f813 2b01 	ldrb.w	r2, [r3], #1
   12a68:	b19a      	cbz	r2, 12a92 <z_log_get_s_mask+0x3e>
   12a6a:	428d      	cmp	r5, r1
   12a6c:	d211      	bcs.n	12a92 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   12a6e:	2a25      	cmp	r2, #37	; 0x25
   12a70:	d0f6      	beq.n	12a60 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   12a72:	2c00      	cmp	r4, #0
   12a74:	d0f6      	beq.n	12a64 <z_log_get_s_mask+0x10>
   12a76:	4e08      	ldr	r6, [pc, #32]	; (12a98 <z_log_get_s_mask+0x44>)
   12a78:	5d96      	ldrb	r6, [r2, r6]
   12a7a:	f016 0f03 	tst.w	r6, #3
   12a7e:	d0f1      	beq.n	12a64 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   12a80:	2a73      	cmp	r2, #115	; 0x73
   12a82:	d002      	beq.n	12a8a <z_log_get_s_mask+0x36>
			arg++;
   12a84:	3501      	adds	r5, #1
			arm = false;
   12a86:	2400      	movs	r4, #0
   12a88:	e7ec      	b.n	12a64 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   12a8a:	2201      	movs	r2, #1
   12a8c:	40aa      	lsls	r2, r5
   12a8e:	4310      	orrs	r0, r2
   12a90:	e7f8      	b.n	12a84 <z_log_get_s_mask+0x30>
}
   12a92:	bc70      	pop	{r4, r5, r6}
   12a94:	4770      	bx	lr
   12a96:	bf00      	nop
   12a98:	0002a397 	.word	0x0002a397

00012a9c <log_init>:
   12a9c:	4b16      	ldr	r3, [pc, #88]	; (12af8 <log_init+0x5c>)
   12a9e:	e8d3 2fef 	ldaex	r2, [r3]
   12aa2:	1c51      	adds	r1, r2, #1
   12aa4:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12aa8:	2800      	cmp	r0, #0
   12aaa:	d1f8      	bne.n	12a9e <log_init+0x2>
	if (atomic_inc(&initialized) != 0) {
   12aac:	bb1a      	cbnz	r2, 12af6 <log_init+0x5a>
{
   12aae:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   12ab0:	2400      	movs	r4, #0
   12ab2:	e009      	b.n	12ac8 <log_init+0x2c>
					   backend->cb->ctx,
   12ab4:	4b11      	ldr	r3, [pc, #68]	; (12afc <log_init+0x60>)
   12ab6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   12aba:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   12abc:	2204      	movs	r2, #4
   12abe:	6819      	ldr	r1, [r3, #0]
   12ac0:	4628      	mov	r0, r5
   12ac2:	f000 fb5f 	bl	13184 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12ac6:	3401      	adds	r4, #1
   12ac8:	4b0d      	ldr	r3, [pc, #52]	; (12b00 <log_init+0x64>)
   12aca:	4a0c      	ldr	r2, [pc, #48]	; (12afc <log_init+0x60>)
   12acc:	1a9b      	subs	r3, r3, r2
   12ace:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   12ad2:	da0f      	bge.n	12af4 <log_init+0x58>
		const struct log_backend *backend = log_backend_get(i);
   12ad4:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   12ad6:	4d09      	ldr	r5, [pc, #36]	; (12afc <log_init+0x60>)
   12ad8:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   12adc:	7b2b      	ldrb	r3, [r5, #12]
   12ade:	2b00      	cmp	r3, #0
   12ae0:	d0f1      	beq.n	12ac6 <log_init+0x2a>
			if (backend->api->init != NULL) {
   12ae2:	0123      	lsls	r3, r4, #4
   12ae4:	4a05      	ldr	r2, [pc, #20]	; (12afc <log_init+0x60>)
   12ae6:	58d3      	ldr	r3, [r2, r3]
   12ae8:	699b      	ldr	r3, [r3, #24]
   12aea:	2b00      	cmp	r3, #0
   12aec:	d0e2      	beq.n	12ab4 <log_init+0x18>
				backend->api->init(backend);
   12aee:	4628      	mov	r0, r5
   12af0:	4798      	blx	r3
   12af2:	e7df      	b.n	12ab4 <log_init+0x18>
}
   12af4:	bd70      	pop	{r4, r5, r6, pc}
   12af6:	4770      	bx	lr
   12af8:	2000e1f8 	.word	0x2000e1f8
   12afc:	00027198 	.word	0x00027198
   12b00:	000271a8 	.word	0x000271a8

00012b04 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   12b04:	b138      	cbz	r0, 12b16 <log_set_timestamp_func+0x12>
{
   12b06:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   12b08:	4a04      	ldr	r2, [pc, #16]	; (12b1c <log_set_timestamp_func+0x18>)
   12b0a:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
   12b0c:	4608      	mov	r0, r1
   12b0e:	f000 fdb5 	bl	1367c <log_output_timestamp_freq_set>
	return 0;
   12b12:	2000      	movs	r0, #0
}
   12b14:	bd08      	pop	{r3, pc}
		return -EINVAL;
   12b16:	f06f 0015 	mvn.w	r0, #21
}
   12b1a:	4770      	bx	lr
   12b1c:	2000c5e4 	.word	0x2000c5e4

00012b20 <log_core_init>:
{
   12b20:	b508      	push	{r3, lr}
	panic_mode = false;
   12b22:	2300      	movs	r3, #0
   12b24:	4a0a      	ldr	r2, [pc, #40]	; (12b50 <log_core_init+0x30>)
   12b26:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12b28:	4a0a      	ldr	r2, [pc, #40]	; (12b54 <log_core_init+0x34>)
   12b2a:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
   12b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12b30:	4809      	ldr	r0, [pc, #36]	; (12b58 <log_core_init+0x38>)
   12b32:	f7ff ffe7 	bl	12b04 <log_set_timestamp_func>
		log_msg_pool_init();
   12b36:	f000 fb47 	bl	131c8 <log_msg_pool_init>
		log_list_init(&list);
   12b3a:	4808      	ldr	r0, [pc, #32]	; (12b5c <log_core_init+0x3c>)
   12b3c:	f00f fc75 	bl	2242a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12b40:	2304      	movs	r3, #4
   12b42:	2234      	movs	r2, #52	; 0x34
   12b44:	4906      	ldr	r1, [pc, #24]	; (12b60 <log_core_init+0x40>)
   12b46:	4807      	ldr	r0, [pc, #28]	; (12b64 <log_core_init+0x44>)
   12b48:	f013 f8ca 	bl	25ce0 <k_mem_slab_init>
}
   12b4c:	bd08      	pop	{r3, pc}
   12b4e:	bf00      	nop
   12b50:	2000f8ff 	.word	0x2000f8ff
   12b54:	2000e1f4 	.word	0x2000e1f4
   12b58:	0002245f 	.word	0x0002245f
   12b5c:	2000e1fc 	.word	0x2000e1fc
   12b60:	20012808 	.word	0x20012808
   12b64:	2000e204 	.word	0x2000e204

00012b68 <get_msg>:
{
   12b68:	b510      	push	{r4, lr}
	__asm__ volatile(
   12b6a:	f04f 0320 	mov.w	r3, #32
   12b6e:	f3ef 8411 	mrs	r4, BASEPRI
   12b72:	f383 8812 	msr	BASEPRI_MAX, r3
   12b76:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   12b7a:	4804      	ldr	r0, [pc, #16]	; (12b8c <get_msg+0x24>)
   12b7c:	f00f fc65 	bl	2244a <log_list_head_get>
	__asm__ volatile(
   12b80:	f384 8811 	msr	BASEPRI, r4
   12b84:	f3bf 8f6f 	isb	sy
}
   12b88:	bd10      	pop	{r4, pc}
   12b8a:	bf00      	nop
   12b8c:	2000e1fc 	.word	0x2000e1fc

00012b90 <z_log_notify_backend_enabled>:
{
   12b90:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   12b92:	4b05      	ldr	r3, [pc, #20]	; (12ba8 <z_log_notify_backend_enabled+0x18>)
   12b94:	781b      	ldrb	r3, [r3, #0]
   12b96:	b11b      	cbz	r3, 12ba0 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   12b98:	4b03      	ldr	r3, [pc, #12]	; (12ba8 <z_log_notify_backend_enabled+0x18>)
   12b9a:	2201      	movs	r2, #1
   12b9c:	701a      	strb	r2, [r3, #0]
}
   12b9e:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   12ba0:	4802      	ldr	r0, [pc, #8]	; (12bac <z_log_notify_backend_enabled+0x1c>)
   12ba2:	f00c fb53 	bl	1f24c <z_impl_k_sem_give>
}
   12ba6:	e7f7      	b.n	12b98 <z_log_notify_backend_enabled+0x8>
   12ba8:	2000f8fe 	.word	0x2000f8fe
   12bac:	2000c8ac 	.word	0x2000c8ac

00012bb0 <z_log_dropped>:
   12bb0:	4b08      	ldr	r3, [pc, #32]	; (12bd4 <z_log_dropped+0x24>)
   12bb2:	e8d3 2fef 	ldaex	r2, [r3]
   12bb6:	3201      	adds	r2, #1
   12bb8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12bbc:	2900      	cmp	r1, #0
   12bbe:	d1f8      	bne.n	12bb2 <z_log_dropped+0x2>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12bc0:	4b05      	ldr	r3, [pc, #20]	; (12bd8 <z_log_dropped+0x28>)
   12bc2:	e8d3 2fef 	ldaex	r2, [r3]
   12bc6:	3a01      	subs	r2, #1
   12bc8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12bcc:	2900      	cmp	r1, #0
   12bce:	d1f8      	bne.n	12bc2 <z_log_dropped+0x12>
}
   12bd0:	4770      	bx	lr
   12bd2:	bf00      	nop
   12bd4:	2000e1f4 	.word	0x2000e1f4
   12bd8:	2000e1f0 	.word	0x2000e1f0

00012bdc <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12bdc:	4b04      	ldr	r3, [pc, #16]	; (12bf0 <z_log_dropped_read_and_clear+0x14>)
}
   12bde:	2000      	movs	r0, #0
   12be0:	4602      	mov	r2, r0
   12be2:	e8d3 0fef 	ldaex	r0, [r3]
   12be6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12bea:	2900      	cmp	r1, #0
   12bec:	d1f9      	bne.n	12be2 <z_log_dropped_read_and_clear+0x6>
   12bee:	4770      	bx	lr
   12bf0:	2000e1f4 	.word	0x2000e1f4

00012bf4 <dropped_notify>:
{
   12bf4:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   12bf6:	f7ff fff1 	bl	12bdc <z_log_dropped_read_and_clear>
   12bfa:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   12bfc:	2400      	movs	r4, #0
   12bfe:	e000      	b.n	12c02 <dropped_notify+0xe>
   12c00:	3401      	adds	r4, #1
   12c02:	4b0b      	ldr	r3, [pc, #44]	; (12c30 <dropped_notify+0x3c>)
   12c04:	4a0b      	ldr	r2, [pc, #44]	; (12c34 <dropped_notify+0x40>)
   12c06:	1a9b      	subs	r3, r3, r2
   12c08:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   12c0c:	da0f      	bge.n	12c2e <dropped_notify+0x3a>
   12c0e:	4809      	ldr	r0, [pc, #36]	; (12c34 <dropped_notify+0x40>)
   12c10:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12c14:	6843      	ldr	r3, [r0, #4]
   12c16:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   12c18:	2b00      	cmp	r3, #0
   12c1a:	d0f1      	beq.n	12c00 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   12c1c:	0123      	lsls	r3, r4, #4
   12c1e:	4a05      	ldr	r2, [pc, #20]	; (12c34 <dropped_notify+0x40>)
   12c20:	58d3      	ldr	r3, [r2, r3]
   12c22:	691b      	ldr	r3, [r3, #16]
   12c24:	2b00      	cmp	r3, #0
   12c26:	d0eb      	beq.n	12c00 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   12c28:	4629      	mov	r1, r5
   12c2a:	4798      	blx	r3
   12c2c:	e7e8      	b.n	12c00 <dropped_notify+0xc>
}
   12c2e:	bd38      	pop	{r3, r4, r5, pc}
   12c30:	000271a8 	.word	0x000271a8
   12c34:	00027198 	.word	0x00027198

00012c38 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   12c38:	4b03      	ldr	r3, [pc, #12]	; (12c48 <z_log_dropped_pending+0x10>)
   12c3a:	6818      	ldr	r0, [r3, #0]
}
   12c3c:	2800      	cmp	r0, #0
   12c3e:	bfd4      	ite	le
   12c40:	2000      	movle	r0, #0
   12c42:	2001      	movgt	r0, #1
   12c44:	4770      	bx	lr
   12c46:	bf00      	nop
   12c48:	2000e1f4 	.word	0x2000e1f4

00012c4c <z_log_strdup>:
{
   12c4c:	b570      	push	{r4, r5, r6, lr}
   12c4e:	b082      	sub	sp, #8
   12c50:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   12c52:	f7ff fe9b 	bl	1298c <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   12c56:	b9f0      	cbnz	r0, 12c96 <z_log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12c58:	2200      	movs	r2, #0
   12c5a:	2300      	movs	r3, #0
   12c5c:	a901      	add	r1, sp, #4
   12c5e:	480f      	ldr	r0, [pc, #60]	; (12c9c <z_log_strdup+0x50>)
   12c60:	f00b ffe4 	bl	1ec2c <k_mem_slab_alloc>
	if (err != 0) {
   12c64:	b108      	cbz	r0, 12c6a <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   12c66:	4c0e      	ldr	r4, [pc, #56]	; (12ca0 <z_log_strdup+0x54>)
   12c68:	e015      	b.n	12c96 <z_log_strdup+0x4a>
	(void)atomic_set(&dup->refcount, 1);
   12c6a:	9b01      	ldr	r3, [sp, #4]
   12c6c:	2201      	movs	r2, #1
   12c6e:	e8d3 1fef 	ldaex	r1, [r3]
   12c72:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12c76:	2800      	cmp	r0, #0
   12c78:	d1f9      	bne.n	12c6e <z_log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   12c7a:	9d01      	ldr	r5, [sp, #4]
   12c7c:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12c7e:	222d      	movs	r2, #45	; 0x2d
   12c80:	4621      	mov	r1, r4
   12c82:	4630      	mov	r0, r6
   12c84:	f013 fe48 	bl	26918 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12c88:	237e      	movs	r3, #126	; 0x7e
   12c8a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   12c8e:	2300      	movs	r3, #0
   12c90:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
	return dup->buf;
   12c94:	4634      	mov	r4, r6
}
   12c96:	4620      	mov	r0, r4
   12c98:	b002      	add	sp, #8
   12c9a:	bd70      	pop	{r4, r5, r6, pc}
   12c9c:	2000e204 	.word	0x2000e204
   12ca0:	00027e30 	.word	0x00027e30

00012ca4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   12ca4:	b138      	cbz	r0, 12cb6 <log_is_strdup+0x12>
   12ca6:	4a07      	ldr	r2, [pc, #28]	; (12cc4 <log_is_strdup+0x20>)
   12ca8:	4290      	cmp	r0, r2
   12caa:	d306      	bcc.n	12cba <log_is_strdup+0x16>
   12cac:	32d0      	adds	r2, #208	; 0xd0
   12cae:	4290      	cmp	r0, r2
   12cb0:	d305      	bcc.n	12cbe <log_is_strdup+0x1a>
   12cb2:	2000      	movs	r0, #0
   12cb4:	4770      	bx	lr
   12cb6:	2000      	movs	r0, #0
   12cb8:	4770      	bx	lr
   12cba:	2000      	movs	r0, #0
   12cbc:	4770      	bx	lr
   12cbe:	2001      	movs	r0, #1
}
   12cc0:	4770      	bx	lr
   12cc2:	bf00      	nop
   12cc4:	20012808 	.word	0x20012808

00012cc8 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12cc8:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   12cca:	f013 0f01 	tst.w	r3, #1
   12cce:	d000      	beq.n	12cd2 <detect_missed_strdup+0xa>
   12cd0:	4770      	bx	lr
{
   12cd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12cd6:	b083      	sub	sp, #12
   12cd8:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
   12cda:	f00f fc7d 	bl	225d8 <log_msg_str_get>
   12cde:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12ce0:	4630      	mov	r0, r6
   12ce2:	f00f fc64 	bl	225ae <log_msg_nargs_get>
   12ce6:	4601      	mov	r1, r0
   12ce8:	4638      	mov	r0, r7
   12cea:	f7ff feb3 	bl	12a54 <z_log_get_s_mask>
   12cee:	4605      	mov	r5, r0
	while (mask) {
   12cf0:	e004      	b.n	12cfc <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   12cf2:	2301      	movs	r3, #1
   12cf4:	fa03 f404 	lsl.w	r4, r3, r4
   12cf8:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   12cfc:	b36d      	cbz	r5, 12d5a <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
   12cfe:	fab5 f485 	clz	r4, r5
   12d02:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   12d06:	4621      	mov	r1, r4
   12d08:	4630      	mov	r0, r6
   12d0a:	f00f fc53 	bl	225b4 <log_msg_arg_get>
   12d0e:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12d10:	f7ff fe3c 	bl	1298c <is_rodata>
   12d14:	2800      	cmp	r0, #0
   12d16:	d1ec      	bne.n	12cf2 <detect_missed_strdup+0x2a>
   12d18:	4648      	mov	r0, r9
   12d1a:	f7ff ffc3 	bl	12ca4 <log_is_strdup>
   12d1e:	2800      	cmp	r0, #0
   12d20:	d1e7      	bne.n	12cf2 <detect_missed_strdup+0x2a>
   12d22:	4b0f      	ldr	r3, [pc, #60]	; (12d60 <detect_missed_strdup+0x98>)
   12d24:	4599      	cmp	r9, r3
   12d26:	d0e4      	beq.n	12cf2 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   12d28:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   12d2a:	f3c1 1189 	ubfx	r1, r1, #6, #10
   12d2e:	f000 fa19 	bl	13164 <log_source_name_get>
   12d32:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   12d34:	4b0b      	ldr	r3, [pc, #44]	; (12d64 <detect_missed_strdup+0x9c>)
   12d36:	490c      	ldr	r1, [pc, #48]	; (12d68 <detect_missed_strdup+0xa0>)
   12d38:	1a5b      	subs	r3, r3, r1
   12d3a:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12d3c:	2101      	movs	r1, #1
   12d3e:	f361 0802 	bfi	r8, r1, #0, #3
   12d42:	f36f 08c5 	bfc	r8, #3, #3
   12d46:	f363 188f 	bfi	r8, r3, #6, #10
   12d4a:	f8ad 8000 	strh.w	r8, [sp]
   12d4e:	463b      	mov	r3, r7
   12d50:	4621      	mov	r1, r4
   12d52:	4806      	ldr	r0, [pc, #24]	; (12d6c <detect_missed_strdup+0xa4>)
   12d54:	f000 f8a8 	bl	12ea8 <log_3>
   12d58:	e7cb      	b.n	12cf2 <detect_missed_strdup+0x2a>
}
   12d5a:	b003      	add	sp, #12
   12d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12d60:	00027e30 	.word	0x00027e30
   12d64:	00027130 	.word	0x00027130
   12d68:	00027108 	.word	0x00027108
   12d6c:	00027e4c 	.word	0x00027e4c

00012d70 <msg_process>:
{
   12d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d72:	4606      	mov	r6, r0
	if (!bypass) {
   12d74:	bb19      	cbnz	r1, 12dbe <msg_process+0x4e>
		    !panic_mode) {
   12d76:	4b14      	ldr	r3, [pc, #80]	; (12dc8 <msg_process+0x58>)
   12d78:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   12d7a:	b10b      	cbz	r3, 12d80 <msg_process+0x10>
{
   12d7c:	2400      	movs	r4, #0
   12d7e:	e003      	b.n	12d88 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
   12d80:	f7ff ffa2 	bl	12cc8 <detect_missed_strdup>
   12d84:	e7fa      	b.n	12d7c <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
   12d86:	3401      	adds	r4, #1
   12d88:	4b10      	ldr	r3, [pc, #64]	; (12dcc <msg_process+0x5c>)
   12d8a:	4a11      	ldr	r2, [pc, #68]	; (12dd0 <msg_process+0x60>)
   12d8c:	1a9b      	subs	r3, r3, r2
   12d8e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   12d92:	da14      	bge.n	12dbe <msg_process+0x4e>
	return &__log_backends_start[idx];
   12d94:	4d0e      	ldr	r5, [pc, #56]	; (12dd0 <msg_process+0x60>)
   12d96:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
   12d9a:	686b      	ldr	r3, [r5, #4]
   12d9c:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   12d9e:	2b00      	cmp	r3, #0
   12da0:	d0f1      	beq.n	12d86 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
   12da2:	4631      	mov	r1, r6
   12da4:	4628      	mov	r0, r5
   12da6:	f00f fb58 	bl	2245a <msg_filter_check>
			if (log_backend_is_active(backend) &&
   12daa:	2800      	cmp	r0, #0
   12dac:	d0eb      	beq.n	12d86 <msg_process+0x16>
	backend->api->put(backend, msg);
   12dae:	0127      	lsls	r7, r4, #4
   12db0:	4b07      	ldr	r3, [pc, #28]	; (12dd0 <msg_process+0x60>)
   12db2:	59db      	ldr	r3, [r3, r7]
   12db4:	685b      	ldr	r3, [r3, #4]
   12db6:	4631      	mov	r1, r6
   12db8:	4628      	mov	r0, r5
   12dba:	4798      	blx	r3
}
   12dbc:	e7e3      	b.n	12d86 <msg_process+0x16>
			log_msg_put(msg.msg);
   12dbe:	4630      	mov	r0, r6
   12dc0:	f00f fc0c 	bl	225dc <log_msg_put>
}
   12dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12dc6:	bf00      	nop
   12dc8:	2000f8ff 	.word	0x2000f8ff
   12dcc:	000271a8 	.word	0x000271a8
   12dd0:	00027198 	.word	0x00027198

00012dd4 <z_impl_log_process>:
{
   12dd4:	b510      	push	{r4, lr}
   12dd6:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   12dd8:	4b0f      	ldr	r3, [pc, #60]	; (12e18 <z_impl_log_process+0x44>)
   12dda:	781b      	ldrb	r3, [r3, #0]
   12ddc:	b903      	cbnz	r3, 12de0 <z_impl_log_process+0xc>
   12dde:	b1b0      	cbz	r0, 12e0e <z_impl_log_process+0x3a>
	msg = get_msg();
   12de0:	f7ff fec2 	bl	12b68 <get_msg>
	if (msg.msg) {
   12de4:	4603      	mov	r3, r0
   12de6:	b160      	cbz	r0, 12e02 <z_impl_log_process+0x2e>
		if (!bypass) {
   12de8:	b93c      	cbnz	r4, 12dfa <z_impl_log_process+0x26>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12dea:	4a0c      	ldr	r2, [pc, #48]	; (12e1c <z_impl_log_process+0x48>)
   12dec:	e8d2 1fef 	ldaex	r1, [r2]
   12df0:	3901      	subs	r1, #1
   12df2:	e8c2 1fe0 	stlex	r0, r1, [r2]
   12df6:	2800      	cmp	r0, #0
   12df8:	d1f8      	bne.n	12dec <z_impl_log_process+0x18>
		msg_process(msg, bypass);
   12dfa:	4621      	mov	r1, r4
   12dfc:	4618      	mov	r0, r3
   12dfe:	f7ff ffb7 	bl	12d70 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   12e02:	b914      	cbnz	r4, 12e0a <z_impl_log_process+0x36>
   12e04:	f7ff ff18 	bl	12c38 <z_log_dropped_pending>
   12e08:	b910      	cbnz	r0, 12e10 <z_impl_log_process+0x3c>
	return next_pending();
   12e0a:	f7ff fdeb 	bl	129e4 <next_pending>
}
   12e0e:	bd10      	pop	{r4, pc}
		dropped_notify();
   12e10:	f7ff fef0 	bl	12bf4 <dropped_notify>
   12e14:	e7f9      	b.n	12e0a <z_impl_log_process+0x36>
   12e16:	bf00      	nop
   12e18:	2000f8fe 	.word	0x2000f8fe
   12e1c:	2000e1f0 	.word	0x2000e1f0

00012e20 <z_log_msg_post_finalize>:
{
   12e20:	b510      	push	{r4, lr}
   12e22:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12e24:	4b1b      	ldr	r3, [pc, #108]	; (12e94 <z_log_msg_post_finalize+0x74>)
   12e26:	e8d3 2fef 	ldaex	r2, [r3]
   12e2a:	1c51      	adds	r1, r2, #1
   12e2c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12e30:	2800      	cmp	r0, #0
   12e32:	d1f8      	bne.n	12e26 <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
   12e34:	4b18      	ldr	r3, [pc, #96]	; (12e98 <z_log_msg_post_finalize+0x78>)
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	b93b      	cbnz	r3, 12e4a <z_log_msg_post_finalize+0x2a>
	} else if (proc_tid != NULL && cnt == 0) {
   12e3a:	4b18      	ldr	r3, [pc, #96]	; (12e9c <z_log_msg_post_finalize+0x7c>)
   12e3c:	681b      	ldr	r3, [r3, #0]
   12e3e:	b103      	cbz	r3, 12e42 <z_log_msg_post_finalize+0x22>
   12e40:	b19a      	cbz	r2, 12e6a <z_log_msg_post_finalize+0x4a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12e42:	2a0a      	cmp	r2, #10
   12e44:	d01c      	beq.n	12e80 <z_log_msg_post_finalize+0x60>
}
   12e46:	b002      	add	sp, #8
   12e48:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   12e4a:	f04f 0320 	mov.w	r3, #32
   12e4e:	f3ef 8411 	mrs	r4, BASEPRI
   12e52:	f383 8812 	msr	BASEPRI_MAX, r3
   12e56:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   12e5a:	2000      	movs	r0, #0
   12e5c:	f7ff ffba 	bl	12dd4 <z_impl_log_process>
	__asm__ volatile(
   12e60:	f384 8811 	msr	BASEPRI, r4
   12e64:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12e68:	e7ed      	b.n	12e46 <z_log_msg_post_finalize+0x26>
	z_impl_k_timer_start(timer, duration, period);
   12e6a:	2200      	movs	r2, #0
   12e6c:	2300      	movs	r3, #0
   12e6e:	e9cd 2300 	strd	r2, r3, [sp]
   12e72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12e76:	2300      	movs	r3, #0
   12e78:	4809      	ldr	r0, [pc, #36]	; (12ea0 <z_log_msg_post_finalize+0x80>)
   12e7a:	f00d f9af 	bl	201dc <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
   12e7e:	e7e2      	b.n	12e46 <z_log_msg_post_finalize+0x26>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12e80:	2b00      	cmp	r3, #0
   12e82:	d0e0      	beq.n	12e46 <z_log_msg_post_finalize+0x26>
	z_impl_k_timer_stop(timer);
   12e84:	4806      	ldr	r0, [pc, #24]	; (12ea0 <z_log_msg_post_finalize+0x80>)
   12e86:	f013 fbe5 	bl	26654 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   12e8a:	4806      	ldr	r0, [pc, #24]	; (12ea4 <z_log_msg_post_finalize+0x84>)
   12e8c:	f00c f9de 	bl	1f24c <z_impl_k_sem_give>
}
   12e90:	e7d9      	b.n	12e46 <z_log_msg_post_finalize+0x26>
   12e92:	bf00      	nop
   12e94:	2000e1f0 	.word	0x2000e1f0
   12e98:	2000f8ff 	.word	0x2000f8ff
   12e9c:	2000e220 	.word	0x2000e220
   12ea0:	2000c918 	.word	0x2000c918
   12ea4:	2000c8ac 	.word	0x2000c8ac

00012ea8 <log_3>:
{
   12ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12eac:	4680      	mov	r8, r0
   12eae:	460f      	mov	r7, r1
   12eb0:	4616      	mov	r6, r2
   12eb2:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12eb4:	f000 f9ac 	bl	13210 <log_msg_chunk_alloc>

	if (msg != NULL) {
   12eb8:	4604      	mov	r4, r0
   12eba:	b140      	cbz	r0, 12ece <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   12ebc:	2301      	movs	r3, #1
   12ebe:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   12ec0:	2200      	movs	r2, #0
   12ec2:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   12ec4:	f04f 0300 	mov.w	r3, #0
   12ec8:	f362 0300 	bfi	r3, r2, #0, #1
   12ecc:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   12ece:	b14c      	cbz	r4, 12ee4 <log_3+0x3c>
		msg->str = str;
   12ed0:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   12ed4:	7a63      	ldrb	r3, [r4, #9]
   12ed6:	2203      	movs	r2, #3
   12ed8:	f362 1307 	bfi	r3, r2, #4, #4
   12edc:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   12ede:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   12ee0:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   12ee2:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   12ee4:	b1c4      	cbz	r4, 12f18 <log_3+0x70>
	msg->hdr.ids = src_level;
   12ee6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   12eea:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   12eec:	4b0b      	ldr	r3, [pc, #44]	; (12f1c <log_3+0x74>)
   12eee:	681b      	ldr	r3, [r3, #0]
   12ef0:	4798      	blx	r3
   12ef2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12ef4:	f04f 0320 	mov.w	r3, #32
   12ef8:	f3ef 8511 	mrs	r5, BASEPRI
   12efc:	f383 8812 	msr	BASEPRI_MAX, r3
   12f00:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12f04:	4621      	mov	r1, r4
   12f06:	4806      	ldr	r0, [pc, #24]	; (12f20 <log_3+0x78>)
   12f08:	f00f fa93 	bl	22432 <log_list_add_tail>
	__asm__ volatile(
   12f0c:	f385 8811 	msr	BASEPRI, r5
   12f10:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   12f14:	f7ff ff84 	bl	12e20 <z_log_msg_post_finalize>
}
   12f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f1c:	2000c5e4 	.word	0x2000c5e4
   12f20:	2000e1fc 	.word	0x2000e1fc

00012f24 <log_1>:
{
   12f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f26:	4606      	mov	r6, r0
   12f28:	460d      	mov	r5, r1
   12f2a:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12f2c:	f000 f970 	bl	13210 <log_msg_chunk_alloc>
	if (msg != NULL) {
   12f30:	4604      	mov	r4, r0
   12f32:	b140      	cbz	r0, 12f46 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   12f34:	2301      	movs	r3, #1
   12f36:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   12f38:	2100      	movs	r1, #0
   12f3a:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   12f3c:	f04f 0300 	mov.w	r3, #0
   12f40:	f361 0300 	bfi	r3, r1, #0, #1
   12f44:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   12f46:	b134      	cbz	r4, 12f56 <log_1+0x32>
		msg->str = str;
   12f48:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   12f4a:	7a63      	ldrb	r3, [r4, #9]
   12f4c:	2201      	movs	r2, #1
   12f4e:	f362 1307 	bfi	r3, r2, #4, #4
   12f52:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   12f54:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   12f56:	b1b4      	cbz	r4, 12f86 <log_1+0x62>
	msg->hdr.ids = src_level;
   12f58:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   12f5a:	4b0b      	ldr	r3, [pc, #44]	; (12f88 <log_1+0x64>)
   12f5c:	681b      	ldr	r3, [r3, #0]
   12f5e:	4798      	blx	r3
   12f60:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12f62:	f04f 0320 	mov.w	r3, #32
   12f66:	f3ef 8511 	mrs	r5, BASEPRI
   12f6a:	f383 8812 	msr	BASEPRI_MAX, r3
   12f6e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12f72:	4621      	mov	r1, r4
   12f74:	4805      	ldr	r0, [pc, #20]	; (12f8c <log_1+0x68>)
   12f76:	f00f fa5c 	bl	22432 <log_list_add_tail>
	__asm__ volatile(
   12f7a:	f385 8811 	msr	BASEPRI, r5
   12f7e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   12f82:	f7ff ff4d 	bl	12e20 <z_log_msg_post_finalize>
}
   12f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f88:	2000c5e4 	.word	0x2000c5e4
   12f8c:	2000e1fc 	.word	0x2000e1fc

00012f90 <log_2>:
{
   12f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f94:	4607      	mov	r7, r0
   12f96:	460e      	mov	r6, r1
   12f98:	4615      	mov	r5, r2
   12f9a:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12f9c:	f000 f938 	bl	13210 <log_msg_chunk_alloc>
	if (msg != NULL) {
   12fa0:	4604      	mov	r4, r0
   12fa2:	b140      	cbz	r0, 12fb6 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   12fa4:	2301      	movs	r3, #1
   12fa6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   12fa8:	2200      	movs	r2, #0
   12faa:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   12fac:	f04f 0300 	mov.w	r3, #0
   12fb0:	f362 0300 	bfi	r3, r2, #0, #1
   12fb4:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   12fb6:	b13c      	cbz	r4, 12fc8 <log_2+0x38>
		msg->str = str;
   12fb8:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   12fba:	7a63      	ldrb	r3, [r4, #9]
   12fbc:	2202      	movs	r2, #2
   12fbe:	f362 1307 	bfi	r3, r2, #4, #4
   12fc2:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   12fc4:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   12fc6:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   12fc8:	b1bc      	cbz	r4, 12ffa <log_2+0x6a>
	msg->hdr.ids = src_level;
   12fca:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   12fce:	4b0c      	ldr	r3, [pc, #48]	; (13000 <log_2+0x70>)
   12fd0:	681b      	ldr	r3, [r3, #0]
   12fd2:	4798      	blx	r3
   12fd4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12fd6:	f04f 0320 	mov.w	r3, #32
   12fda:	f3ef 8511 	mrs	r5, BASEPRI
   12fde:	f383 8812 	msr	BASEPRI_MAX, r3
   12fe2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12fe6:	4621      	mov	r1, r4
   12fe8:	4806      	ldr	r0, [pc, #24]	; (13004 <log_2+0x74>)
   12fea:	f00f fa22 	bl	22432 <log_list_add_tail>
	__asm__ volatile(
   12fee:	f385 8811 	msr	BASEPRI, r5
   12ff2:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   12ff6:	f7ff ff13 	bl	12e20 <z_log_msg_post_finalize>
}
   12ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ffe:	bf00      	nop
   13000:	2000c5e4 	.word	0x2000c5e4
   13004:	2000e1fc 	.word	0x2000e1fc

00013008 <log_n>:
{
   13008:	b538      	push	{r3, r4, r5, lr}
   1300a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1300c:	f00f fb26 	bl	2265c <log_msg_create_n>
		if (msg == NULL) {
   13010:	b1b8      	cbz	r0, 13042 <log_n+0x3a>
   13012:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   13014:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   13016:	4b0b      	ldr	r3, [pc, #44]	; (13044 <log_n+0x3c>)
   13018:	681b      	ldr	r3, [r3, #0]
   1301a:	4798      	blx	r3
   1301c:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   1301e:	f04f 0320 	mov.w	r3, #32
   13022:	f3ef 8411 	mrs	r4, BASEPRI
   13026:	f383 8812 	msr	BASEPRI_MAX, r3
   1302a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1302e:	4629      	mov	r1, r5
   13030:	4805      	ldr	r0, [pc, #20]	; (13048 <log_n+0x40>)
   13032:	f00f f9fe 	bl	22432 <log_list_add_tail>
	__asm__ volatile(
   13036:	f384 8811 	msr	BASEPRI, r4
   1303a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1303e:	f7ff feef 	bl	12e20 <z_log_msg_post_finalize>
}
   13042:	bd38      	pop	{r3, r4, r5, pc}
   13044:	2000c5e4 	.word	0x2000c5e4
   13048:	2000e1fc 	.word	0x2000e1fc

0001304c <log_0>:
{
   1304c:	b570      	push	{r4, r5, r6, lr}
   1304e:	4605      	mov	r5, r0
   13050:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   13052:	f000 f8dd 	bl	13210 <log_msg_chunk_alloc>
	if (msg != NULL) {
   13056:	4604      	mov	r4, r0
   13058:	b140      	cbz	r0, 1306c <log_0+0x20>
		msg->hdr.ref_cnt = 1;
   1305a:	2301      	movs	r3, #1
   1305c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1305e:	2200      	movs	r2, #0
   13060:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   13062:	f04f 0300 	mov.w	r3, #0
   13066:	f362 0300 	bfi	r3, r2, #0, #1
   1306a:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   1306c:	b104      	cbz	r4, 13070 <log_0+0x24>
		msg->str = str;
   1306e:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   13070:	b1b4      	cbz	r4, 130a0 <log_0+0x54>
	msg->hdr.ids = src_level;
   13072:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   13074:	4b0b      	ldr	r3, [pc, #44]	; (130a4 <log_0+0x58>)
   13076:	681b      	ldr	r3, [r3, #0]
   13078:	4798      	blx	r3
   1307a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1307c:	f04f 0320 	mov.w	r3, #32
   13080:	f3ef 8511 	mrs	r5, BASEPRI
   13084:	f383 8812 	msr	BASEPRI_MAX, r3
   13088:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1308c:	4621      	mov	r1, r4
   1308e:	4806      	ldr	r0, [pc, #24]	; (130a8 <log_0+0x5c>)
   13090:	f00f f9cf 	bl	22432 <log_list_add_tail>
	__asm__ volatile(
   13094:	f385 8811 	msr	BASEPRI, r5
   13098:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1309c:	f7ff fec0 	bl	12e20 <z_log_msg_post_finalize>
}
   130a0:	bd70      	pop	{r4, r5, r6, pc}
   130a2:	bf00      	nop
   130a4:	2000c5e4 	.word	0x2000c5e4
   130a8:	2000e1fc 	.word	0x2000e1fc

000130ac <z_impl_log_panic>:
	if (panic_mode) {
   130ac:	4b12      	ldr	r3, [pc, #72]	; (130f8 <z_impl_log_panic+0x4c>)
   130ae:	781b      	ldrb	r3, [r3, #0]
   130b0:	b103      	cbz	r3, 130b4 <z_impl_log_panic+0x8>
   130b2:	4770      	bx	lr
{
   130b4:	b510      	push	{r4, lr}
	log_init();
   130b6:	f7ff fcf1 	bl	12a9c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   130ba:	2400      	movs	r4, #0
   130bc:	e000      	b.n	130c0 <z_impl_log_panic+0x14>
   130be:	3401      	adds	r4, #1
   130c0:	4b0e      	ldr	r3, [pc, #56]	; (130fc <z_impl_log_panic+0x50>)
   130c2:	4a0f      	ldr	r2, [pc, #60]	; (13100 <z_impl_log_panic+0x54>)
   130c4:	1a9b      	subs	r3, r3, r2
   130c6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   130ca:	da0c      	bge.n	130e6 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
   130cc:	480c      	ldr	r0, [pc, #48]	; (13100 <z_impl_log_panic+0x54>)
   130ce:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   130d2:	6843      	ldr	r3, [r0, #4]
   130d4:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   130d6:	2b00      	cmp	r3, #0
   130d8:	d0f1      	beq.n	130be <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   130da:	0123      	lsls	r3, r4, #4
   130dc:	4a08      	ldr	r2, [pc, #32]	; (13100 <z_impl_log_panic+0x54>)
   130de:	58d3      	ldr	r3, [r2, r3]
   130e0:	695b      	ldr	r3, [r3, #20]
   130e2:	4798      	blx	r3
}
   130e4:	e7eb      	b.n	130be <z_impl_log_panic+0x12>
   130e6:	2000      	movs	r0, #0
   130e8:	f7ff fe74 	bl	12dd4 <z_impl_log_process>
		while (log_process(false) == true) {
   130ec:	2800      	cmp	r0, #0
   130ee:	d1fa      	bne.n	130e6 <z_impl_log_panic+0x3a>
	panic_mode = true;
   130f0:	4b01      	ldr	r3, [pc, #4]	; (130f8 <z_impl_log_panic+0x4c>)
   130f2:	2201      	movs	r2, #1
   130f4:	701a      	strb	r2, [r3, #0]
}
   130f6:	bd10      	pop	{r4, pc}
   130f8:	2000f8ff 	.word	0x2000f8ff
   130fc:	000271a8 	.word	0x000271a8
   13100:	00027198 	.word	0x00027198

00013104 <log_process_thread_func>:
{
   13104:	b508      	push	{r3, lr}
	log_init();
   13106:	f7ff fcc9 	bl	12a9c <log_init>
	return z_impl_z_current_get();
   1310a:	f00c fe3f 	bl	1fd8c <z_impl_z_current_get>
	thread_set(k_current_get());
   1310e:	f7ff fc4d 	bl	129ac <thread_set>
   13112:	e006      	b.n	13122 <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
   13114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1311c:	4804      	ldr	r0, [pc, #16]	; (13130 <log_process_thread_func+0x2c>)
   1311e:	f00c f8bd 	bl	1f29c <z_impl_k_sem_take>
   13122:	2000      	movs	r0, #0
   13124:	f7ff fe56 	bl	12dd4 <z_impl_log_process>
		if (log_process(false) == false) {
   13128:	2800      	cmp	r0, #0
   1312a:	d1fa      	bne.n	13122 <log_process_thread_func+0x1e>
   1312c:	e7f2      	b.n	13114 <log_process_thread_func+0x10>
   1312e:	bf00      	nop
   13130:	2000c8ac 	.word	0x2000c8ac

00013134 <z_log_free>:
{
   13134:	b500      	push	{lr}
   13136:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   13138:	3804      	subs	r0, #4
   1313a:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1313c:	e8d0 3fef 	ldaex	r3, [r0]
   13140:	1e5a      	subs	r2, r3, #1
   13142:	e8c0 2fe1 	stlex	r1, r2, [r0]
   13146:	2900      	cmp	r1, #0
   13148:	d1f8      	bne.n	1313c <z_log_free+0x8>
	if (atomic_dec(&dup->refcount) == 1) {
   1314a:	2b01      	cmp	r3, #1
   1314c:	d002      	beq.n	13154 <z_log_free+0x20>
}
   1314e:	b003      	add	sp, #12
   13150:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   13154:	a901      	add	r1, sp, #4
   13156:	4802      	ldr	r0, [pc, #8]	; (13160 <z_log_free+0x2c>)
   13158:	f012 fdd0 	bl	25cfc <k_mem_slab_free>
}
   1315c:	e7f7      	b.n	1314e <z_log_free+0x1a>
   1315e:	bf00      	nop
   13160:	2000e204 	.word	0x2000e204

00013164 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13164:	4b05      	ldr	r3, [pc, #20]	; (1317c <log_source_name_get+0x18>)
   13166:	4a06      	ldr	r2, [pc, #24]	; (13180 <log_source_name_get+0x1c>)
   13168:	1a9b      	subs	r3, r3, r2
   1316a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   1316e:	d202      	bcs.n	13176 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   13170:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   13174:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13176:	2000      	movs	r0, #0
}
   13178:	4770      	bx	lr
   1317a:	bf00      	nop
   1317c:	00027198 	.word	0x00027198
   13180:	00027108 	.word	0x00027108

00013184 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   13184:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13186:	4b07      	ldr	r3, [pc, #28]	; (131a4 <log_backend_enable+0x20>)
   13188:	1ac3      	subs	r3, r0, r3
   1318a:	111b      	asrs	r3, r3, #4
   1318c:	3301      	adds	r3, #1
	backend->cb->id = id;
   1318e:	6842      	ldr	r2, [r0, #4]
   13190:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   13192:	6843      	ldr	r3, [r0, #4]
   13194:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13196:	6843      	ldr	r3, [r0, #4]
   13198:	2201      	movs	r2, #1
   1319a:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   1319c:	f7ff fcf8 	bl	12b90 <z_log_notify_backend_enabled>
}
   131a0:	bd08      	pop	{r3, pc}
   131a2:	bf00      	nop
   131a4:	00027198 	.word	0x00027198

000131a8 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   131a8:	b510      	push	{r4, lr}
   131aa:	b082      	sub	sp, #8
   131ac:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   131ae:	9b01      	ldr	r3, [sp, #4]
   131b0:	b133      	cbz	r3, 131c0 <cont_free+0x18>
		next = cont->next;
   131b2:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   131b4:	a901      	add	r1, sp, #4
   131b6:	4803      	ldr	r0, [pc, #12]	; (131c4 <cont_free+0x1c>)
   131b8:	f012 fda0 	bl	25cfc <k_mem_slab_free>
		cont = next;
   131bc:	9401      	str	r4, [sp, #4]
   131be:	e7f6      	b.n	131ae <cont_free+0x6>
	}
}
   131c0:	b002      	add	sp, #8
   131c2:	bd10      	pop	{r4, pc}
   131c4:	2000e224 	.word	0x2000e224

000131c8 <log_msg_pool_init>:
{
   131c8:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   131ca:	2320      	movs	r3, #32
   131cc:	461a      	mov	r2, r3
   131ce:	4902      	ldr	r1, [pc, #8]	; (131d8 <log_msg_pool_init+0x10>)
   131d0:	4802      	ldr	r0, [pc, #8]	; (131dc <log_msg_pool_init+0x14>)
   131d2:	f012 fd85 	bl	25ce0 <k_mem_slab_init>
}
   131d6:	bd08      	pop	{r3, pc}
   131d8:	200128d8 	.word	0x200128d8
   131dc:	2000e224 	.word	0x2000e224

000131e0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   131e0:	b510      	push	{r4, lr}
   131e2:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   131e4:	2300      	movs	r3, #0
   131e6:	9301      	str	r3, [sp, #4]
   131e8:	2001      	movs	r0, #1
   131ea:	f7ff fdf3 	bl	12dd4 <z_impl_log_process>
   131ee:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   131f0:	f7ff fcde 	bl	12bb0 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   131f4:	2200      	movs	r2, #0
   131f6:	2300      	movs	r3, #0
   131f8:	a901      	add	r1, sp, #4
   131fa:	4804      	ldr	r0, [pc, #16]	; (1320c <log_msg_no_space_handle+0x2c>)
   131fc:	f00b fd16 	bl	1ec2c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   13200:	b108      	cbz	r0, 13206 <log_msg_no_space_handle+0x26>
   13202:	2c00      	cmp	r4, #0
   13204:	d1f0      	bne.n	131e8 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   13206:	9801      	ldr	r0, [sp, #4]
   13208:	b002      	add	sp, #8
   1320a:	bd10      	pop	{r4, pc}
   1320c:	2000e224 	.word	0x2000e224

00013210 <log_msg_chunk_alloc>:
{
   13210:	b500      	push	{lr}
   13212:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   13214:	2300      	movs	r3, #0
   13216:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   13218:	f00f f927 	bl	2246a <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1321c:	b150      	cbz	r0, 13234 <log_msg_chunk_alloc+0x24>
   1321e:	2200      	movs	r2, #0
   13220:	2300      	movs	r3, #0
   13222:	a901      	add	r1, sp, #4
   13224:	4807      	ldr	r0, [pc, #28]	; (13244 <log_msg_chunk_alloc+0x34>)
   13226:	f00b fd01 	bl	1ec2c <k_mem_slab_alloc>
	if (err != 0) {
   1322a:	b930      	cbnz	r0, 1323a <log_msg_chunk_alloc+0x2a>
}
   1322c:	9801      	ldr	r0, [sp, #4]
   1322e:	b003      	add	sp, #12
   13230:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   13234:	2200      	movs	r2, #0
   13236:	2300      	movs	r3, #0
   13238:	e7f3      	b.n	13222 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   1323a:	f7ff ffd1 	bl	131e0 <log_msg_no_space_handle>
   1323e:	9001      	str	r0, [sp, #4]
   13240:	e7f4      	b.n	1322c <log_msg_chunk_alloc+0x1c>
   13242:	bf00      	nop
   13244:	2000e224 	.word	0x2000e224

00013248 <msg_free>:
{
   13248:	b5f0      	push	{r4, r5, r6, r7, lr}
   1324a:	b083      	sub	sp, #12
   1324c:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   1324e:	4604      	mov	r4, r0
   13250:	f00f f9ad 	bl	225ae <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13254:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   13256:	f013 0f01 	tst.w	r3, #1
   1325a:	d101      	bne.n	13260 <msg_free+0x18>
   1325c:	4606      	mov	r6, r0
   1325e:	bb50      	cbnz	r0, 132b6 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   13260:	9b01      	ldr	r3, [sp, #4]
   13262:	7a1a      	ldrb	r2, [r3, #8]
   13264:	f012 0f02 	tst.w	r2, #2
   13268:	d128      	bne.n	132bc <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   1326a:	a901      	add	r1, sp, #4
   1326c:	4815      	ldr	r0, [pc, #84]	; (132c4 <msg_free+0x7c>)
   1326e:	f012 fd45 	bl	25cfc <k_mem_slab_free>
}
   13272:	b003      	add	sp, #12
   13274:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   13276:	9801      	ldr	r0, [sp, #4]
   13278:	f00f f9ae 	bl	225d8 <log_msg_str_get>
   1327c:	4631      	mov	r1, r6
   1327e:	f7ff fbe9 	bl	12a54 <z_log_get_s_mask>
					if (smask == 0U) {
   13282:	4607      	mov	r7, r0
   13284:	b988      	cbnz	r0, 132aa <msg_free+0x62>
   13286:	e7eb      	b.n	13260 <msg_free+0x18>
					z_log_free(buf);
   13288:	4628      	mov	r0, r5
   1328a:	f7ff ff53 	bl	13134 <z_log_free>
		for (i = 0U; i < nargs; i++) {
   1328e:	3401      	adds	r4, #1
   13290:	42b4      	cmp	r4, r6
   13292:	d2e5      	bcs.n	13260 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   13294:	4621      	mov	r1, r4
   13296:	9801      	ldr	r0, [sp, #4]
   13298:	f00f f98c 	bl	225b4 <log_msg_arg_get>
   1329c:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   1329e:	f7ff fd01 	bl	12ca4 <log_is_strdup>
   132a2:	2800      	cmp	r0, #0
   132a4:	d0f3      	beq.n	1328e <msg_free+0x46>
				if (smask == 0U) {
   132a6:	2f00      	cmp	r7, #0
   132a8:	d0e5      	beq.n	13276 <msg_free+0x2e>
				if (smask & BIT(i)) {
   132aa:	fa27 f304 	lsr.w	r3, r7, r4
   132ae:	f013 0f01 	tst.w	r3, #1
   132b2:	d0ec      	beq.n	1328e <msg_free+0x46>
   132b4:	e7e8      	b.n	13288 <msg_free+0x40>
		uint32_t smask = 0U;
   132b6:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   132b8:	463c      	mov	r4, r7
   132ba:	e7e9      	b.n	13290 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   132bc:	6958      	ldr	r0, [r3, #20]
   132be:	f7ff ff73 	bl	131a8 <cont_free>
   132c2:	e7d2      	b.n	1326a <msg_free+0x22>
   132c4:	2000e224 	.word	0x2000e224

000132c8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   132c8:	b40e      	push	{r1, r2, r3}
   132ca:	b500      	push	{lr}
   132cc:	b082      	sub	sp, #8
   132ce:	4601      	mov	r1, r0
   132d0:	ab03      	add	r3, sp, #12
   132d2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   132d6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   132d8:	4803      	ldr	r0, [pc, #12]	; (132e8 <print_formatted+0x20>)
   132da:	f7fe fd8f 	bl	11dfc <cbvprintf>
	va_end(args);

	return length;
}
   132de:	b002      	add	sp, #8
   132e0:	f85d eb04 	ldr.w	lr, [sp], #4
   132e4:	b003      	add	sp, #12
   132e6:	4770      	bx	lr
   132e8:	000229af 	.word	0x000229af

000132ec <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   132ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   132ee:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   132f0:	f011 0f44 	tst.w	r1, #68	; 0x44
   132f4:	d005      	beq.n	13302 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   132f6:	4b1a      	ldr	r3, [pc, #104]	; (13360 <timestamp_print+0x74>)
   132f8:	681c      	ldr	r4, [r3, #0]
   132fa:	b934      	cbnz	r4, 1330a <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   132fc:	2000      	movs	r0, #0
	}

	return length;
}
   132fe:	b005      	add	sp, #20
   13300:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   13302:	4918      	ldr	r1, [pc, #96]	; (13364 <timestamp_print+0x78>)
   13304:	f7ff ffe0 	bl	132c8 <print_formatted>
   13308:	e7f9      	b.n	132fe <timestamp_print+0x12>
		timestamp /= timestamp_div;
   1330a:	4b17      	ldr	r3, [pc, #92]	; (13368 <timestamp_print+0x7c>)
   1330c:	6819      	ldr	r1, [r3, #0]
   1330e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   13312:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   13316:	4a15      	ldr	r2, [pc, #84]	; (1336c <timestamp_print+0x80>)
   13318:	fba2 3205 	umull	r3, r2, r2, r5
   1331c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   1331e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   13322:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   13326:	4b12      	ldr	r3, [pc, #72]	; (13370 <timestamp_print+0x84>)
   13328:	fba3 7306 	umull	r7, r3, r3, r6
   1332c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   1332e:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   13332:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   13336:	fb05 f101 	mul.w	r1, r5, r1
   1333a:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1333e:	fb07 1114 	mls	r1, r7, r4, r1
   13342:	fb05 f101 	mul.w	r1, r5, r1
   13346:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   1334a:	9402      	str	r4, [sp, #8]
   1334c:	9701      	str	r7, [sp, #4]
   1334e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   13352:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   13356:	9100      	str	r1, [sp, #0]
   13358:	4906      	ldr	r1, [pc, #24]	; (13374 <timestamp_print+0x88>)
   1335a:	f7ff ffb5 	bl	132c8 <print_formatted>
   1335e:	e7ce      	b.n	132fe <timestamp_print+0x12>
   13360:	2000e240 	.word	0x2000e240
   13364:	00027e90 	.word	0x00027e90
   13368:	2000e244 	.word	0x2000e244
   1336c:	91a2b3c5 	.word	0x91a2b3c5
   13370:	88888889 	.word	0x88888889
   13374:	00027e9c 	.word	0x00027e9c

00013378 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   13378:	b161      	cbz	r1, 13394 <color_print+0x1c>
{
   1337a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   1337c:	b12a      	cbz	r2, 1338a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   1337e:	4a06      	ldr	r2, [pc, #24]	; (13398 <color_print+0x20>)
   13380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   13384:	b912      	cbnz	r2, 1338c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   13386:	4a05      	ldr	r2, [pc, #20]	; (1339c <color_print+0x24>)
   13388:	e000      	b.n	1338c <color_print+0x14>
   1338a:	4a04      	ldr	r2, [pc, #16]	; (1339c <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   1338c:	4904      	ldr	r1, [pc, #16]	; (133a0 <color_print+0x28>)
   1338e:	f7ff ff9b 	bl	132c8 <print_formatted>
	}
}
   13392:	bd08      	pop	{r3, pc}
   13394:	4770      	bx	lr
   13396:	bf00      	nop
   13398:	00027f0c 	.word	0x00027f0c
   1339c:	00027eb8 	.word	0x00027eb8
   133a0:	00029960 	.word	0x00029960

000133a4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   133a4:	f011 0f10 	tst.w	r1, #16
   133a8:	d10b      	bne.n	133c2 <newline_print+0x1e>
{
   133aa:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   133ac:	f011 0f20 	tst.w	r1, #32
   133b0:	d003      	beq.n	133ba <newline_print+0x16>
		print_formatted(ctx, "\n");
   133b2:	4904      	ldr	r1, [pc, #16]	; (133c4 <newline_print+0x20>)
   133b4:	f7ff ff88 	bl	132c8 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   133b8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   133ba:	4903      	ldr	r1, [pc, #12]	; (133c8 <newline_print+0x24>)
   133bc:	f7ff ff84 	bl	132c8 <print_formatted>
   133c0:	e7fa      	b.n	133b8 <newline_print+0x14>
   133c2:	4770      	bx	lr
   133c4:	000295ec 	.word	0x000295ec
   133c8:	00029b4c 	.word	0x00029b4c

000133cc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   133cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133d0:	4605      	mov	r5, r0
   133d2:	460f      	mov	r7, r1
   133d4:	4616      	mov	r6, r2
   133d6:	4698      	mov	r8, r3
	newline_print(output, flags);
   133d8:	9906      	ldr	r1, [sp, #24]
   133da:	f7ff ffe3 	bl	133a4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   133de:	2400      	movs	r4, #0
   133e0:	4544      	cmp	r4, r8
   133e2:	da05      	bge.n	133f0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   133e4:	4924      	ldr	r1, [pc, #144]	; (13478 <hexdump_line_print+0xac>)
   133e6:	4628      	mov	r0, r5
   133e8:	f7ff ff6e 	bl	132c8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   133ec:	3401      	adds	r4, #1
   133ee:	e7f7      	b.n	133e0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   133f0:	2400      	movs	r4, #0
   133f2:	e009      	b.n	13408 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   133f4:	4920      	ldr	r1, [pc, #128]	; (13478 <hexdump_line_print+0xac>)
   133f6:	4628      	mov	r0, r5
   133f8:	f7ff ff66 	bl	132c8 <print_formatted>
   133fc:	e00b      	b.n	13416 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   133fe:	491f      	ldr	r1, [pc, #124]	; (1347c <hexdump_line_print+0xb0>)
   13400:	4628      	mov	r0, r5
   13402:	f7ff ff61 	bl	132c8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13406:	3401      	adds	r4, #1
   13408:	2c0f      	cmp	r4, #15
   1340a:	dc0c      	bgt.n	13426 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   1340c:	2c00      	cmp	r4, #0
   1340e:	dd02      	ble.n	13416 <hexdump_line_print+0x4a>
   13410:	f014 0f07 	tst.w	r4, #7
   13414:	d0ee      	beq.n	133f4 <hexdump_line_print+0x28>
		if (i < length) {
   13416:	42b4      	cmp	r4, r6
   13418:	d2f1      	bcs.n	133fe <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   1341a:	5d3a      	ldrb	r2, [r7, r4]
   1341c:	4918      	ldr	r1, [pc, #96]	; (13480 <hexdump_line_print+0xb4>)
   1341e:	4628      	mov	r0, r5
   13420:	f7ff ff52 	bl	132c8 <print_formatted>
   13424:	e7ef      	b.n	13406 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   13426:	4917      	ldr	r1, [pc, #92]	; (13484 <hexdump_line_print+0xb8>)
   13428:	4628      	mov	r0, r5
   1342a:	f7ff ff4d 	bl	132c8 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1342e:	2400      	movs	r4, #0
   13430:	e009      	b.n	13446 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   13432:	4911      	ldr	r1, [pc, #68]	; (13478 <hexdump_line_print+0xac>)
   13434:	4628      	mov	r0, r5
   13436:	f7ff ff47 	bl	132c8 <print_formatted>
   1343a:	e00b      	b.n	13454 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   1343c:	4912      	ldr	r1, [pc, #72]	; (13488 <hexdump_line_print+0xbc>)
   1343e:	4628      	mov	r0, r5
   13440:	f7ff ff42 	bl	132c8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13444:	3401      	adds	r4, #1
   13446:	2c0f      	cmp	r4, #15
   13448:	dc13      	bgt.n	13472 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
   1344a:	2c00      	cmp	r4, #0
   1344c:	dd02      	ble.n	13454 <hexdump_line_print+0x88>
   1344e:	f014 0f07 	tst.w	r4, #7
   13452:	d0ee      	beq.n	13432 <hexdump_line_print+0x66>
		if (i < length) {
   13454:	42b4      	cmp	r4, r6
   13456:	d207      	bcs.n	13468 <hexdump_line_print+0x9c>
			char c = (char)data[i];
   13458:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
   1345a:	4b0c      	ldr	r3, [pc, #48]	; (1348c <hexdump_line_print+0xc0>)
   1345c:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
   1345e:	f013 0f97 	tst.w	r3, #151	; 0x97
   13462:	d1eb      	bne.n	1343c <hexdump_line_print+0x70>
   13464:	222e      	movs	r2, #46	; 0x2e
   13466:	e7e9      	b.n	1343c <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
   13468:	4903      	ldr	r1, [pc, #12]	; (13478 <hexdump_line_print+0xac>)
   1346a:	4628      	mov	r0, r5
   1346c:	f7ff ff2c 	bl	132c8 <print_formatted>
   13470:	e7e8      	b.n	13444 <hexdump_line_print+0x78>
		}
	}
}
   13472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13476:	bf00      	nop
   13478:	00027ee4 	.word	0x00027ee4
   1347c:	00027ec8 	.word	0x00027ec8
   13480:	00027ec0 	.word	0x00027ec0
   13484:	00027ecc 	.word	0x00027ecc
   13488:	00027ed0 	.word	0x00027ed0
   1348c:	0002a397 	.word	0x0002a397

00013490 <ids_print>:
{
   13490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13494:	4680      	mov	r8, r0
   13496:	4616      	mov	r6, r2
   13498:	461d      	mov	r5, r3
   1349a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   1349e:	b959      	cbnz	r1, 134b8 <ids_print+0x28>
	int total = 0;
   134a0:	2400      	movs	r4, #0
	if (source_id >= 0) {
   134a2:	2f00      	cmp	r7, #0
   134a4:	db1c      	blt.n	134e0 <ids_print+0x50>
		total += print_formatted(output,
   134a6:	b186      	cbz	r6, 134ca <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   134a8:	2301      	movs	r3, #1
   134aa:	9a07      	ldr	r2, [sp, #28]
   134ac:	4093      	lsls	r3, r2
				(func_on &&
   134ae:	f013 0f10 	tst.w	r3, #16
   134b2:	d118      	bne.n	134e6 <ids_print+0x56>
		total += print_formatted(output,
   134b4:	4e0d      	ldr	r6, [pc, #52]	; (134ec <ids_print+0x5c>)
   134b6:	e009      	b.n	134cc <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   134b8:	4b0d      	ldr	r3, [pc, #52]	; (134f0 <ids_print+0x60>)
   134ba:	9a07      	ldr	r2, [sp, #28]
   134bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   134c0:	490c      	ldr	r1, [pc, #48]	; (134f4 <ids_print+0x64>)
   134c2:	f7ff ff01 	bl	132c8 <print_formatted>
   134c6:	4604      	mov	r4, r0
   134c8:	e7eb      	b.n	134a2 <ids_print+0x12>
		total += print_formatted(output,
   134ca:	4e08      	ldr	r6, [pc, #32]	; (134ec <ids_print+0x5c>)
   134cc:	4639      	mov	r1, r7
   134ce:	4628      	mov	r0, r5
   134d0:	f7ff fe48 	bl	13164 <log_source_name_get>
   134d4:	4602      	mov	r2, r0
   134d6:	4631      	mov	r1, r6
   134d8:	4640      	mov	r0, r8
   134da:	f7ff fef5 	bl	132c8 <print_formatted>
   134de:	4404      	add	r4, r0
}
   134e0:	4620      	mov	r0, r4
   134e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   134e6:	4e04      	ldr	r6, [pc, #16]	; (134f8 <ids_print+0x68>)
   134e8:	e7f0      	b.n	134cc <ids_print+0x3c>
   134ea:	bf00      	nop
   134ec:	00027ed4 	.word	0x00027ed4
   134f0:	00027f48 	.word	0x00027f48
   134f4:	00027ee0 	.word	0x00027ee0
   134f8:	00027edc 	.word	0x00027edc

000134fc <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   134fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13500:	b085      	sub	sp, #20
   13502:	4605      	mov	r5, r0
   13504:	460c      	mov	r4, r1
   13506:	4616      	mov	r6, r2
   13508:	9303      	str	r3, [sp, #12]
   1350a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1350e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   13512:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13516:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
   1351a:	f00e ffa4 	bl	22466 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   1351e:	b1e8      	cbz	r0, 1355c <prefix_print+0x60>
   13520:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   13522:	4913      	ldr	r1, [pc, #76]	; (13570 <prefix_print+0x74>)
   13524:	4628      	mov	r0, r5
   13526:	f7ff fecf 	bl	132c8 <print_formatted>
   1352a:	4607      	mov	r7, r0
	}

	if (stamp) {
   1352c:	f1bb 0f00 	cmp.w	fp, #0
   13530:	d116      	bne.n	13560 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   13532:	4642      	mov	r2, r8
   13534:	4651      	mov	r1, sl
   13536:	4628      	mov	r0, r5
   13538:	f00f f8b9 	bl	226ae <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
   1353c:	f8cd 8004 	str.w	r8, [sp, #4]
   13540:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   13544:	9300      	str	r3, [sp, #0]
   13546:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   1354a:	4632      	mov	r2, r6
   1354c:	4649      	mov	r1, r9
   1354e:	4628      	mov	r0, r5
   13550:	f7ff ff9e 	bl	13490 <ids_print>
			domain_id, source_id, level);


	return length;
}
   13554:	4438      	add	r0, r7
   13556:	b005      	add	sp, #20
   13558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   1355c:	2700      	movs	r7, #0
   1355e:	e7e5      	b.n	1352c <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   13560:	9a03      	ldr	r2, [sp, #12]
   13562:	4621      	mov	r1, r4
   13564:	4628      	mov	r0, r5
   13566:	f7ff fec1 	bl	132ec <timestamp_print>
   1356a:	4407      	add	r7, r0
   1356c:	e7e1      	b.n	13532 <prefix_print+0x36>
   1356e:	bf00      	nop
   13570:	00027ee8 	.word	0x00027ee8

00013574 <hexdump_print>:
{
   13574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13578:	b089      	sub	sp, #36	; 0x24
   1357a:	4607      	mov	r7, r0
   1357c:	460e      	mov	r6, r1
   1357e:	4691      	mov	r9, r2
   13580:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
   13582:	f00f f829 	bl	225d8 <log_msg_str_get>
   13586:	4602      	mov	r2, r0
   13588:	490e      	ldr	r1, [pc, #56]	; (135c4 <hexdump_print+0x50>)
   1358a:	4630      	mov	r0, r6
   1358c:	f7ff fe9c 	bl	132c8 <print_formatted>
	uint32_t offset = 0U;
   13590:	2400      	movs	r4, #0
		length = sizeof(buf);
   13592:	2510      	movs	r5, #16
   13594:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13596:	4623      	mov	r3, r4
   13598:	aa03      	add	r2, sp, #12
   1359a:	eb0d 0105 	add.w	r1, sp, r5
   1359e:	4638      	mov	r0, r7
   135a0:	f00f f870 	bl	22684 <log_msg_hexdump_data_get>
		if (length) {
   135a4:	9a03      	ldr	r2, [sp, #12]
   135a6:	b152      	cbz	r2, 135be <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   135a8:	f8cd 8000 	str.w	r8, [sp]
   135ac:	464b      	mov	r3, r9
   135ae:	eb0d 0105 	add.w	r1, sp, r5
   135b2:	4630      	mov	r0, r6
   135b4:	f7ff ff0a 	bl	133cc <hexdump_line_print>
			offset += length;
   135b8:	9d03      	ldr	r5, [sp, #12]
   135ba:	442c      	add	r4, r5
		length = sizeof(buf);
   135bc:	e7e9      	b.n	13592 <hexdump_print+0x1e>
}
   135be:	b009      	add	sp, #36	; 0x24
   135c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   135c4:	00029960 	.word	0x00029960

000135c8 <raw_string_print>:
{
   135c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   135ca:	b083      	sub	sp, #12
   135cc:	4606      	mov	r6, r0
   135ce:	460c      	mov	r4, r1
	bool eol = false;
   135d0:	2700      	movs	r7, #0
	size_t offset = 0;
   135d2:	463d      	mov	r5, r7
   135d4:	e00d      	b.n	135f2 <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
   135d6:	68a2      	ldr	r2, [r4, #8]
   135d8:	4413      	add	r3, r2
   135da:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   135de:	2f0a      	cmp	r7, #10
   135e0:	bf14      	ite	ne
   135e2:	2700      	movne	r7, #0
   135e4:	2701      	moveq	r7, #1
		log_output_flush(output);
   135e6:	4620      	mov	r0, r4
   135e8:	f00f f9d4 	bl	22994 <log_output_flush>
		offset += length;
   135ec:	9b01      	ldr	r3, [sp, #4]
   135ee:	441d      	add	r5, r3
	} while (length > 0);
   135f0:	b173      	cbz	r3, 13610 <raw_string_print+0x48>
		length = output->size;
   135f2:	68e3      	ldr	r3, [r4, #12]
   135f4:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   135f6:	462b      	mov	r3, r5
   135f8:	aa01      	add	r2, sp, #4
   135fa:	68a1      	ldr	r1, [r4, #8]
   135fc:	4630      	mov	r0, r6
   135fe:	f00f f841 	bl	22684 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   13602:	6863      	ldr	r3, [r4, #4]
   13604:	9a01      	ldr	r2, [sp, #4]
   13606:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   13608:	9b01      	ldr	r3, [sp, #4]
   1360a:	2b00      	cmp	r3, #0
   1360c:	d0eb      	beq.n	135e6 <raw_string_print+0x1e>
   1360e:	e7e2      	b.n	135d6 <raw_string_print+0xe>
	if (eol) {
   13610:	b90f      	cbnz	r7, 13616 <raw_string_print+0x4e>
}
   13612:	b003      	add	sp, #12
   13614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   13616:	4902      	ldr	r1, [pc, #8]	; (13620 <raw_string_print+0x58>)
   13618:	4620      	mov	r0, r4
   1361a:	f7ff fe55 	bl	132c8 <print_formatted>
}
   1361e:	e7f8      	b.n	13612 <raw_string_print+0x4a>
   13620:	00027444 	.word	0x00027444

00013624 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   13624:	b570      	push	{r4, r5, r6, lr}
   13626:	b082      	sub	sp, #8
   13628:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   1362a:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1362c:	f242 730f 	movw	r3, #9999	; 0x270f
   13630:	428b      	cmp	r3, r1
   13632:	bf28      	it	cs
   13634:	460b      	movcs	r3, r1
   13636:	4a0e      	ldr	r2, [pc, #56]	; (13670 <log_output_dropped_process+0x4c>)
   13638:	2105      	movs	r1, #5
   1363a:	4668      	mov	r0, sp
   1363c:	f00e fac4 	bl	21bc8 <snprintk>
   13640:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   13642:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13644:	685b      	ldr	r3, [r3, #4]
   13646:	220b      	movs	r2, #11
   13648:	490a      	ldr	r1, [pc, #40]	; (13674 <log_output_dropped_process+0x50>)
   1364a:	4628      	mov	r0, r5
   1364c:	f00f f822 	bl	22694 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   13650:	6863      	ldr	r3, [r4, #4]
   13652:	685b      	ldr	r3, [r3, #4]
   13654:	4632      	mov	r2, r6
   13656:	4669      	mov	r1, sp
   13658:	4628      	mov	r0, r5
   1365a:	f00f f81b 	bl	22694 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   1365e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13660:	685b      	ldr	r3, [r3, #4]
   13662:	221b      	movs	r2, #27
   13664:	4904      	ldr	r1, [pc, #16]	; (13678 <log_output_dropped_process+0x54>)
   13666:	4628      	mov	r0, r5
   13668:	f00f f814 	bl	22694 <buffer_write>
}
   1366c:	b002      	add	sp, #8
   1366e:	bd70      	pop	{r4, r5, r6, pc}
   13670:	00028e84 	.word	0x00028e84
   13674:	00027f3c 	.word	0x00027f3c
   13678:	00027f20 	.word	0x00027f20

0001367c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1367c:	4b07      	ldr	r3, [pc, #28]	; (1369c <log_output_timestamp_freq_set+0x20>)
   1367e:	2201      	movs	r2, #1
   13680:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   13682:	4b07      	ldr	r3, [pc, #28]	; (136a0 <log_output_timestamp_freq_set+0x24>)
   13684:	4298      	cmp	r0, r3
   13686:	d905      	bls.n	13694 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   13688:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1368a:	4a04      	ldr	r2, [pc, #16]	; (1369c <log_output_timestamp_freq_set+0x20>)
   1368c:	6813      	ldr	r3, [r2, #0]
   1368e:	005b      	lsls	r3, r3, #1
   13690:	6013      	str	r3, [r2, #0]
   13692:	e7f6      	b.n	13682 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   13694:	4b03      	ldr	r3, [pc, #12]	; (136a4 <log_output_timestamp_freq_set+0x28>)
   13696:	6018      	str	r0, [r3, #0]
}
   13698:	4770      	bx	lr
   1369a:	bf00      	nop
   1369c:	2000e244 	.word	0x2000e244
   136a0:	000f4240 	.word	0x000f4240
   136a4:	2000e240 	.word	0x2000e240

000136a8 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   136a8:	b570      	push	{r4, r5, r6, lr}
   136aa:	4606      	mov	r6, r0
   136ac:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   136ae:	2400      	movs	r4, #0
   136b0:	42ac      	cmp	r4, r5
   136b2:	d207      	bcs.n	136c4 <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
   136b4:	4b04      	ldr	r3, [pc, #16]	; (136c8 <char_out+0x20>)
   136b6:	6818      	ldr	r0, [r3, #0]
   136b8:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   136ba:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   136bc:	685b      	ldr	r3, [r3, #4]
   136be:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   136c0:	3401      	adds	r4, #1
   136c2:	e7f5      	b.n	136b0 <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   136c4:	4628      	mov	r0, r5
   136c6:	bd70      	pop	{r4, r5, r6, pc}
   136c8:	2000e25c 	.word	0x2000e25c

000136cc <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   136cc:	4b01      	ldr	r3, [pc, #4]	; (136d4 <log_backend_uart_init+0x8>)
   136ce:	4a02      	ldr	r2, [pc, #8]	; (136d8 <log_backend_uart_init+0xc>)
   136d0:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   136d2:	4770      	bx	lr
   136d4:	2000e25c 	.word	0x2000e25c
   136d8:	00026e94 	.word	0x00026e94

000136dc <panic>:

static void panic(struct log_backend const *const backend)
{
   136dc:	b508      	push	{r3, lr}
	in_panic = true;
   136de:	4b03      	ldr	r3, [pc, #12]	; (136ec <panic+0x10>)
   136e0:	2201      	movs	r2, #1
   136e2:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   136e4:	4802      	ldr	r0, [pc, #8]	; (136f0 <panic+0x14>)
   136e6:	f00f f955 	bl	22994 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   136ea:	bd08      	pop	{r3, pc}
   136ec:	2000f900 	.word	0x2000f900
   136f0:	00027f98 	.word	0x00027f98

000136f4 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   136f4:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   136f6:	4802      	ldr	r0, [pc, #8]	; (13700 <dropped+0xc>)
   136f8:	f7ff ff94 	bl	13624 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   136fc:	bd08      	pop	{r3, pc}
   136fe:	bf00      	nop
   13700:	00027f98 	.word	0x00027f98

00013704 <put>:
{
   13704:	b510      	push	{r4, lr}
   13706:	460c      	mov	r4, r1
	log_msg_get(msg);
   13708:	4608      	mov	r0, r1
   1370a:	f00e ff47 	bl	2259c <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1370e:	220f      	movs	r2, #15
   13710:	4621      	mov	r1, r4
   13712:	4803      	ldr	r0, [pc, #12]	; (13720 <put+0x1c>)
   13714:	f00f f963 	bl	229de <log_output_msg_process>
	log_msg_put(msg);
   13718:	4620      	mov	r0, r4
   1371a:	f00e ff5f 	bl	225dc <log_msg_put>
}
   1371e:	bd10      	pop	{r4, pc}
   13720:	00027f98 	.word	0x00027f98

00013724 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   13724:	b570      	push	{r4, r5, r6, lr}
   13726:	b08e      	sub	sp, #56	; 0x38
   13728:	4604      	mov	r4, r0
   1372a:	460e      	mov	r6, r1
   1372c:	4615      	mov	r5, r2
	struct sntp_pkt tx_pkt = { 0 };
   1372e:	2230      	movs	r2, #48	; 0x30
   13730:	2100      	movs	r1, #0
   13732:	a802      	add	r0, sp, #8
   13734:	f013 f8a5 	bl	26882 <memset>
	int ret = 0;

	if (!ctx || !time) {
   13738:	b32c      	cbz	r4, 13786 <sntp_query+0x62>
   1373a:	b33d      	cbz	r5, 1378c <sntp_query+0x68>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   1373c:	231b      	movs	r3, #27
   1373e:	f88d 3008 	strb.w	r3, [sp, #8]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   13742:	f00f f98b 	bl	22a5c <get_uptime_in_sec>
   13746:	4a13      	ldr	r2, [pc, #76]	; (13794 <sntp_query+0x70>)
   13748:	4402      	add	r2, r0
   1374a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1374c:	0a13      	lsrs	r3, r2, #8
   1374e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   13752:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   13756:	0211      	lsls	r1, r2, #8
   13758:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1375c:	430b      	orrs	r3, r1
   1375e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   13762:	930c      	str	r3, [sp, #48]	; 0x30

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   13764:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   13766:	2300      	movs	r3, #0
   13768:	9301      	str	r3, [sp, #4]
   1376a:	9300      	str	r3, [sp, #0]
   1376c:	2230      	movs	r2, #48	; 0x30
   1376e:	a902      	add	r1, sp, #8
   13770:	f00f fa6f 	bl	22c52 <z_impl_zsock_sendto>
	if (ret < 0) {
   13774:	2800      	cmp	r0, #0
   13776:	db04      	blt.n	13782 <sntp_query+0x5e>
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
   13778:	462a      	mov	r2, r5
   1377a:	4631      	mov	r1, r6
   1377c:	4620      	mov	r0, r4
   1377e:	f00f f98d 	bl	22a9c <sntp_recv_response>
}
   13782:	b00e      	add	sp, #56	; 0x38
   13784:	bd70      	pop	{r4, r5, r6, pc}
		return -EFAULT;
   13786:	f06f 000d 	mvn.w	r0, #13
   1378a:	e7fa      	b.n	13782 <sntp_query+0x5e>
   1378c:	f06f 000d 	mvn.w	r0, #13
   13790:	e7f7      	b.n	13782 <sntp_query+0x5e>
   13792:	bf00      	nop
   13794:	83aa7e80 	.word	0x83aa7e80

00013798 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   13798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1379a:	4605      	mov	r5, r0
   1379c:	460e      	mov	r6, r1
   1379e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   137a0:	4c0e      	ldr	r4, [pc, #56]	; (137dc <z_impl_zsock_socket+0x44>)
   137a2:	4b0f      	ldr	r3, [pc, #60]	; (137e0 <z_impl_zsock_socket+0x48>)
   137a4:	429c      	cmp	r4, r3
   137a6:	d211      	bcs.n	137cc <z_impl_zsock_socket+0x34>
		if (sock_family->family != family &&
   137a8:	6823      	ldr	r3, [r4, #0]
   137aa:	42ab      	cmp	r3, r5
   137ac:	d000      	beq.n	137b0 <z_impl_zsock_socket+0x18>
   137ae:	b95b      	cbnz	r3, 137c8 <z_impl_zsock_socket+0x30>
			continue;
		}

		NET_ASSERT(sock_family->is_supported);

		if (!sock_family->is_supported(family, type, proto)) {
   137b0:	6863      	ldr	r3, [r4, #4]
   137b2:	463a      	mov	r2, r7
   137b4:	4631      	mov	r1, r6
   137b6:	4628      	mov	r0, r5
   137b8:	4798      	blx	r3
   137ba:	b128      	cbz	r0, 137c8 <z_impl_zsock_socket+0x30>
			continue;
		}

		return sock_family->handler(family, type, proto);
   137bc:	68a3      	ldr	r3, [r4, #8]
   137be:	463a      	mov	r2, r7
   137c0:	4631      	mov	r1, r6
   137c2:	4628      	mov	r0, r5
   137c4:	4798      	blx	r3
	}

	errno = EAFNOSUPPORT;
	return -1;
}
   137c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   137c8:	340c      	adds	r4, #12
   137ca:	e7ea      	b.n	137a2 <z_impl_zsock_socket+0xa>
	errno = EAFNOSUPPORT;
   137cc:	f00f fbe3 	bl	22f96 <__errno>
   137d0:	236a      	movs	r3, #106	; 0x6a
   137d2:	6003      	str	r3, [r0, #0]
	return -1;
   137d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   137d8:	e7f5      	b.n	137c6 <z_impl_zsock_socket+0x2e>
   137da:	bf00      	nop
   137dc:	000270fc 	.word	0x000270fc
   137e0:	00027108 	.word	0x00027108

000137e4 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   137e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137e8:	b09f      	sub	sp, #124	; 0x7c
   137ea:	4604      	mov	r4, r0
   137ec:	9003      	str	r0, [sp, #12]
   137ee:	460d      	mov	r5, r1
   137f0:	9104      	str	r1, [sp, #16]
   137f2:	4692      	mov	sl, r2
   137f4:	469b      	mov	fp, r3
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	end = sys_clock_timeout_end_calc(timeout);
   137f6:	4610      	mov	r0, r2
   137f8:	4619      	mov	r1, r3
   137fa:	f012 feef 	bl	265dc <sys_clock_timeout_end_calc>
   137fe:	9006      	str	r0, [sp, #24]
   13800:	9107      	str	r1, [sp, #28]

	pev = poll_events;
   13802:	ab0f      	add	r3, sp, #60	; 0x3c
   13804:	930e      	str	r3, [sp, #56]	; 0x38
	void *offl_ctx = NULL;
   13806:	2300      	movs	r3, #0
   13808:	9305      	str	r3, [sp, #20]
	const struct fd_op_vtable *offl_vtable = NULL;
   1380a:	4699      	mov	r9, r3
	bool offload = false;
   1380c:	4698      	mov	r8, r3
	for (pfd = fds, i = nfds; i--; pfd++) {
   1380e:	e00b      	b.n	13828 <zsock_poll_internal+0x44>
			/* If POLL_PREPARE returned with EALREADY, it means
			 * it already detected that some socket is ready. In
			 * this case, we still perform a k_poll to pick up
			 * as many events as possible, but without any wait.
			 */
			timeout = K_NO_WAIT;
   13810:	f04f 0a00 	mov.w	sl, #0
   13814:	f04f 0b00 	mov.w	fp, #0
			result = 0;
   13818:	2500      	movs	r5, #0
			}

			result = 0;
		}

		k_mutex_unlock(lock);
   1381a:	980c      	ldr	r0, [sp, #48]	; 0x30
	return z_impl_k_mutex_unlock(mutex);
   1381c:	f00b fc96 	bl	1f14c <z_impl_k_mutex_unlock>

		if (result < 0) {
   13820:	2d00      	cmp	r5, #0
   13822:	db35      	blt.n	13890 <zsock_poll_internal+0xac>
	for (pfd = fds, i = nfds; i--; pfd++) {
   13824:	3408      	adds	r4, #8
   13826:	4635      	mov	r5, r6
   13828:	1e6e      	subs	r6, r5, #1
   1382a:	2d00      	cmp	r5, #0
   1382c:	d037      	beq.n	1389e <zsock_poll_internal+0xba>
		if (pfd->fd < 0) {
   1382e:	6820      	ldr	r0, [r4, #0]
   13830:	2800      	cmp	r0, #0
   13832:	dbf7      	blt.n	13824 <zsock_poll_internal+0x40>
	ctx = z_get_fd_obj_and_vtable(sock,
   13834:	aa0c      	add	r2, sp, #48	; 0x30
   13836:	a90d      	add	r1, sp, #52	; 0x34
   13838:	f7fd fe8a 	bl	11550 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   1383c:	4607      	mov	r7, r0
   1383e:	2800      	cmp	r0, #0
   13840:	d0f0      	beq.n	13824 <zsock_poll_internal+0x40>
		(void)k_mutex_lock(lock, K_FOREVER);
   13842:	980c      	ldr	r0, [sp, #48]	; 0x30
	return z_impl_k_mutex_lock(mutex, timeout);
   13844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1384c:	f00b fbf4 	bl	1f038 <z_impl_k_mutex_lock>
		result = z_fdtable_call_ioctl(vtable, ctx,
   13850:	ab1e      	add	r3, sp, #120	; 0x78
   13852:	9301      	str	r3, [sp, #4]
   13854:	ab0e      	add	r3, sp, #56	; 0x38
   13856:	9300      	str	r3, [sp, #0]
   13858:	4623      	mov	r3, r4
   1385a:	f44f 7281 	mov.w	r2, #258	; 0x102
   1385e:	4639      	mov	r1, r7
   13860:	980d      	ldr	r0, [sp, #52]	; 0x34
   13862:	f00f f999 	bl	22b98 <z_fdtable_call_ioctl>
   13866:	4605      	mov	r5, r0
		if (result == -EALREADY) {
   13868:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1386c:	d0d0      	beq.n	13810 <zsock_poll_internal+0x2c>
		} else if (result == -EXDEV) {
   1386e:	f110 0f12 	cmn.w	r0, #18
   13872:	d1d2      	bne.n	1381a <zsock_poll_internal+0x36>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   13874:	f1b9 0f00 	cmp.w	r9, #0
   13878:	d003      	beq.n	13882 <zsock_poll_internal+0x9e>
			result = 0;
   1387a:	2500      	movs	r5, #0
			offload = true;
   1387c:	f04f 0801 	mov.w	r8, #1
   13880:	e7cb      	b.n	1381a <zsock_poll_internal+0x36>
				offl_vtable = vtable;
   13882:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
				offl_ctx = ctx;
   13886:	9705      	str	r7, [sp, #20]
			result = 0;
   13888:	2500      	movs	r5, #0
			offload = true;
   1388a:	f04f 0801 	mov.w	r8, #1
   1388e:	e7c4      	b.n	1381a <zsock_poll_internal+0x36>
			errno = -result;
   13890:	f00f fb81 	bl	22f96 <__errno>
   13894:	426d      	negs	r5, r5
   13896:	6005      	str	r5, [r0, #0]
			return -1;
   13898:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1389c:	e0c3      	b.n	13a26 <zsock_poll_internal+0x242>
		}
	}

	if (offload) {
   1389e:	f1b8 0f00 	cmp.w	r8, #0
   138a2:	d10a      	bne.n	138ba <zsock_poll_internal+0xd6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
					    ZFD_IOCTL_POLL_OFFLOAD,
					    fds, nfds, poll_timeout);
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   138a4:	ea5a 030b 	orrs.w	r3, sl, fp
   138a8:	d04e      	beq.n	13948 <zsock_poll_internal+0x164>
   138aa:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   138ae:	bf08      	it	eq
   138b0:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   138b4:	d12f      	bne.n	13916 <zsock_poll_internal+0x132>
   138b6:	9505      	str	r5, [sp, #20]
   138b8:	e09b      	b.n	139f2 <zsock_poll_internal+0x20e>
		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   138ba:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   138be:	bf08      	it	eq
   138c0:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   138c4:	d024      	beq.n	13910 <zsock_poll_internal+0x12c>
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   138c6:	2100      	movs	r1, #0
   138c8:	4608      	mov	r0, r1
   138ca:	4651      	mov	r1, sl
			return (uint32_t)((t * to_hz + off) / from_hz);
   138cc:	014b      	lsls	r3, r1, #5
   138ce:	0eca      	lsrs	r2, r1, #27
   138d0:	ebb3 030a 	subs.w	r3, r3, sl
   138d4:	eb62 0200 	sbc.w	r2, r2, r0
   138d8:	0094      	lsls	r4, r2, #2
   138da:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   138de:	009d      	lsls	r5, r3, #2
   138e0:	4622      	mov	r2, r4
   138e2:	eb15 030a 	adds.w	r3, r5, sl
   138e6:	eb40 0202 	adc.w	r2, r0, r2
   138ea:	00d1      	lsls	r1, r2, #3
   138ec:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   138f0:	00d8      	lsls	r0, r3, #3
   138f2:	0bc3      	lsrs	r3, r0, #15
   138f4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   138f8:	9301      	str	r3, [sp, #4]
   138fa:	9b04      	ldr	r3, [sp, #16]
   138fc:	9300      	str	r3, [sp, #0]
   138fe:	9b03      	ldr	r3, [sp, #12]
   13900:	f44f 7282 	mov.w	r2, #260	; 0x104
   13904:	9905      	ldr	r1, [sp, #20]
   13906:	4648      	mov	r0, r9
   13908:	f00f f946 	bl	22b98 <z_fdtable_call_ioctl>
   1390c:	4681      	mov	r9, r0
   1390e:	e08a      	b.n	13a26 <zsock_poll_internal+0x242>
			poll_timeout = SYS_FOREVER_MS;
   13910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13914:	e7f0      	b.n	138f8 <zsock_poll_internal+0x114>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		int64_t remaining = end - sys_clock_tick_get();
   13916:	f00c fbf7 	bl	20108 <sys_clock_tick_get>
   1391a:	9b06      	ldr	r3, [sp, #24]
   1391c:	1a1b      	subs	r3, r3, r0
   1391e:	9308      	str	r3, [sp, #32]
   13920:	9b07      	ldr	r3, [sp, #28]
   13922:	eb63 0301 	sbc.w	r3, r3, r1
   13926:	9309      	str	r3, [sp, #36]	; 0x24

		if (remaining <= 0) {
   13928:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1392c:	2b01      	cmp	r3, #1
   1392e:	f174 0300 	sbcs.w	r3, r4, #0
   13932:	db03      	blt.n	1393c <zsock_poll_internal+0x158>
			timeout = K_NO_WAIT;
		} else {
			timeout = Z_TIMEOUT_TICKS(remaining);
   13934:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
   13938:	9505      	str	r5, [sp, #20]
   1393a:	e05a      	b.n	139f2 <zsock_poll_internal+0x20e>
			timeout = K_NO_WAIT;
   1393c:	f04f 0a00 	mov.w	sl, #0
   13940:	f04f 0b00 	mov.w	fp, #0
   13944:	9505      	str	r5, [sp, #20]
   13946:	e054      	b.n	139f2 <zsock_poll_internal+0x20e>
   13948:	9505      	str	r5, [sp, #20]
   1394a:	e052      	b.n	139f2 <zsock_poll_internal+0x20e>
		}

		retry = false;
		ret = 0;

		pev = poll_events;
   1394c:	ab0f      	add	r3, sp, #60	; 0x3c
   1394e:	930e      	str	r3, [sp, #56]	; 0x38
		for (pfd = fds, i = nfds; i--; pfd++) {
   13950:	9c03      	ldr	r4, [sp, #12]
   13952:	9b04      	ldr	r3, [sp, #16]
		ret = 0;
   13954:	f8dd 9014 	ldr.w	r9, [sp, #20]
		retry = false;
   13958:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   1395a:	e005      	b.n	13968 <zsock_poll_internal+0x184>
			ctx = get_sock_vtable(
				pfd->fd,
				(const struct socket_op_vtable **)&vtable,
				&lock);
			if (ctx == NULL) {
				pfd->revents = ZSOCK_POLLNVAL;
   1395c:	2320      	movs	r3, #32
   1395e:	80e3      	strh	r3, [r4, #6]
				ret++;
   13960:	f109 0901 	add.w	r9, r9, #1
		for (pfd = fds, i = nfds; i--; pfd++) {
   13964:	3408      	adds	r4, #8
   13966:	4633      	mov	r3, r6
   13968:	1e5e      	subs	r6, r3, #1
   1396a:	2b00      	cmp	r3, #0
   1396c:	d033      	beq.n	139d6 <zsock_poll_internal+0x1f2>
			pfd->revents = 0;
   1396e:	2300      	movs	r3, #0
   13970:	80e3      	strh	r3, [r4, #6]
			if (pfd->fd < 0) {
   13972:	6820      	ldr	r0, [r4, #0]
   13974:	4298      	cmp	r0, r3
   13976:	dbf5      	blt.n	13964 <zsock_poll_internal+0x180>
	ctx = z_get_fd_obj_and_vtable(sock,
   13978:	aa0c      	add	r2, sp, #48	; 0x30
   1397a:	a90d      	add	r1, sp, #52	; 0x34
   1397c:	f7fd fde8 	bl	11550 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   13980:	4605      	mov	r5, r0
   13982:	2800      	cmp	r0, #0
   13984:	d0ea      	beq.n	1395c <zsock_poll_internal+0x178>
				continue;
			}

			(void)k_mutex_lock(lock, K_FOREVER);
   13986:	980c      	ldr	r0, [sp, #48]	; 0x30
   13988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1398c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13990:	f00b fb52 	bl	1f038 <z_impl_k_mutex_lock>

			result = z_fdtable_call_ioctl(vtable, ctx,
   13994:	ab0e      	add	r3, sp, #56	; 0x38
   13996:	9300      	str	r3, [sp, #0]
   13998:	4623      	mov	r3, r4
   1399a:	f240 1203 	movw	r2, #259	; 0x103
   1399e:	4629      	mov	r1, r5
   139a0:	980d      	ldr	r0, [sp, #52]	; 0x34
   139a2:	f00f f8f9 	bl	22b98 <z_fdtable_call_ioctl>
   139a6:	4605      	mov	r5, r0
						      ZFD_IOCTL_POLL_UPDATE,
						      pfd, &pev);
			k_mutex_unlock(lock);
   139a8:	980c      	ldr	r0, [sp, #48]	; 0x30
	return z_impl_k_mutex_unlock(mutex);
   139aa:	f00b fbcf 	bl	1f14c <z_impl_k_mutex_unlock>

			if (result == -EAGAIN) {
   139ae:	f115 0f0b 	cmn.w	r5, #11
   139b2:	d00e      	beq.n	139d2 <zsock_poll_internal+0x1ee>
				retry = true;
				continue;
			} else if (result != 0) {
   139b4:	b935      	cbnz	r5, 139c4 <zsock_poll_internal+0x1e0>
				errno = -result;
				return -1;
			}

			if (pfd->revents != 0) {
   139b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   139ba:	2b00      	cmp	r3, #0
   139bc:	d0d2      	beq.n	13964 <zsock_poll_internal+0x180>
				ret++;
   139be:	f109 0901 	add.w	r9, r9, #1
   139c2:	e7cf      	b.n	13964 <zsock_poll_internal+0x180>
				errno = -result;
   139c4:	f00f fae7 	bl	22f96 <__errno>
   139c8:	426f      	negs	r7, r5
   139ca:	6007      	str	r7, [r0, #0]
				return -1;
   139cc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   139d0:	e029      	b.n	13a26 <zsock_poll_internal+0x242>
				retry = true;
   139d2:	2701      	movs	r7, #1
   139d4:	e7c6      	b.n	13964 <zsock_poll_internal+0x180>
			}
		}

		if (retry) {
   139d6:	b15f      	cbz	r7, 139f0 <zsock_poll_internal+0x20c>
			if (ret > 0) {
   139d8:	f1b9 0f00 	cmp.w	r9, #0
   139dc:	dc23      	bgt.n	13a26 <zsock_poll_internal+0x242>
				break;
			}

			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   139de:	ea5a 030b 	orrs.w	r3, sl, fp
   139e2:	d020      	beq.n	13a26 <zsock_poll_internal+0x242>
				break;
			}

			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   139e4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   139e8:	bf08      	it	eq
   139ea:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   139ee:	d11e      	bne.n	13a2e <zsock_poll_internal+0x24a>
				} else {
					timeout = Z_TIMEOUT_TICKS(remaining);
				}
			}
		}
	} while (retry);
   139f0:	b1cf      	cbz	r7, 13a26 <zsock_poll_internal+0x242>
		ret = k_poll(poll_events, pev - poll_events, timeout);
   139f2:	a80f      	add	r0, sp, #60	; 0x3c
   139f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   139f6:	1a1b      	subs	r3, r3, r0
   139f8:	109b      	asrs	r3, r3, #2
   139fa:	4915      	ldr	r1, [pc, #84]	; (13a50 <zsock_poll_internal+0x26c>)
   139fc:	fb01 f103 	mul.w	r1, r1, r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   13a00:	4652      	mov	r2, sl
   13a02:	465b      	mov	r3, fp
   13a04:	f00c fc5a 	bl	202bc <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   13a08:	4604      	mov	r4, r0
   13a0a:	2800      	cmp	r0, #0
   13a0c:	d09e      	beq.n	1394c <zsock_poll_internal+0x168>
   13a0e:	f110 0f0b 	cmn.w	r0, #11
   13a12:	d09b      	beq.n	1394c <zsock_poll_internal+0x168>
   13a14:	f110 0f04 	cmn.w	r0, #4
   13a18:	d098      	beq.n	1394c <zsock_poll_internal+0x168>
			errno = -ret;
   13a1a:	f00f fabc 	bl	22f96 <__errno>
   13a1e:	4264      	negs	r4, r4
   13a20:	6004      	str	r4, [r0, #0]
			return -1;
   13a22:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff

	return ret;
}
   13a26:	4648      	mov	r0, r9
   13a28:	b01f      	add	sp, #124	; 0x7c
   13a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int64_t remaining = end - sys_clock_tick_get();
   13a2e:	f00c fb6b 	bl	20108 <sys_clock_tick_get>
   13a32:	9b06      	ldr	r3, [sp, #24]
   13a34:	1a1b      	subs	r3, r3, r0
   13a36:	930a      	str	r3, [sp, #40]	; 0x28
   13a38:	9b07      	ldr	r3, [sp, #28]
   13a3a:	eb63 0301 	sbc.w	r3, r3, r1
   13a3e:	930b      	str	r3, [sp, #44]	; 0x2c
				if (remaining <= 0) {
   13a40:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   13a44:	f1ba 0f01 	cmp.w	sl, #1
   13a48:	f17b 0300 	sbcs.w	r3, fp, #0
   13a4c:	dad0      	bge.n	139f0 <zsock_poll_internal+0x20c>
   13a4e:	e7ea      	b.n	13a26 <zsock_poll_internal+0x242>
   13a50:	cccccccd 	.word	0xcccccccd

00013a54 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   13a54:	4b01      	ldr	r3, [pc, #4]	; (13a5c <socket_offload_dns_register+0x8>)
   13a56:	6018      	str	r0, [r3, #0]
}
   13a58:	4770      	bx	lr
   13a5a:	bf00      	nop
   13a5c:	2000e264 	.word	0x2000e264

00013a60 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   13a60:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   13a62:	4c02      	ldr	r4, [pc, #8]	; (13a6c <socket_offload_getaddrinfo+0xc>)
   13a64:	6824      	ldr	r4, [r4, #0]
   13a66:	6824      	ldr	r4, [r4, #0]
   13a68:	47a0      	blx	r4
}
   13a6a:	bd10      	pop	{r4, pc}
   13a6c:	2000e264 	.word	0x2000e264

00013a70 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   13a70:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   13a72:	4b02      	ldr	r3, [pc, #8]	; (13a7c <socket_offload_freeaddrinfo+0xc>)
   13a74:	681b      	ldr	r3, [r3, #0]
   13a76:	685b      	ldr	r3, [r3, #4]
   13a78:	4798      	blx	r3
}
   13a7a:	bd08      	pop	{r3, pc}
   13a7c:	2000e264 	.word	0x2000e264

00013a80 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   13a80:	b570      	push	{r4, r5, r6, lr}
   13a82:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   13a84:	4b2a      	ldr	r3, [pc, #168]	; (13b30 <pm_system_resume+0xb0>)
   13a86:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13a88:	f004 031f 	and.w	r3, r4, #31
   13a8c:	2201      	movs	r2, #1
   13a8e:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13a90:	0961      	lsrs	r1, r4, #5
   13a92:	4b28      	ldr	r3, [pc, #160]	; (13b34 <pm_system_resume+0xb4>)
   13a94:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13a98:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a9a:	e8d3 1fef 	ldaex	r1, [r3]
   13a9e:	ea01 0500 	and.w	r5, r1, r0
   13aa2:	e8c3 5fe6 	stlex	r6, r5, [r3]
   13aa6:	2e00      	cmp	r6, #0
   13aa8:	d1f7      	bne.n	13a9a <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13aaa:	420a      	tst	r2, r1
   13aac:	d03d      	beq.n	13b2a <pm_system_resume+0xaa>
		exit_pos_ops(z_power_states[id]);
   13aae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   13ab2:	009a      	lsls	r2, r3, #2
   13ab4:	4b20      	ldr	r3, [pc, #128]	; (13b38 <pm_system_resume+0xb8>)
   13ab6:	4413      	add	r3, r2
   13ab8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13abc:	ab04      	add	r3, sp, #16
   13abe:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   13ac2:	4b1e      	ldr	r3, [pc, #120]	; (13b3c <pm_system_resume+0xbc>)
   13ac4:	b163      	cbz	r3, 13ae0 <pm_system_resume+0x60>
		pm_power_state_exit_post_ops(info);
   13ac6:	f00e fca5 	bl	22414 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   13aca:	f04f 0320 	mov.w	r3, #32
   13ace:	f3ef 8611 	mrs	r6, BASEPRI
   13ad2:	f383 8812 	msr	BASEPRI_MAX, r3
   13ad6:	f3bf 8f6f 	isb	sy
   13ada:	4b19      	ldr	r3, [pc, #100]	; (13b40 <pm_system_resume+0xc0>)
   13adc:	681d      	ldr	r5, [r3, #0]
   13ade:	e00a      	b.n	13af6 <pm_system_resume+0x76>
	__asm__ volatile(
   13ae0:	2300      	movs	r3, #0
   13ae2:	f383 8811 	msr	BASEPRI, r3
   13ae6:	f3bf 8f6f 	isb	sy
}
   13aea:	e7ee      	b.n	13aca <pm_system_resume+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13aec:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   13aee:	b10d      	cbz	r5, 13af4 <pm_system_resume+0x74>
	return node->next;
   13af0:	682b      	ldr	r3, [r5, #0]
   13af2:	b16b      	cbz	r3, 13b10 <pm_system_resume+0x90>
{
   13af4:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13af6:	b15d      	cbz	r5, 13b10 <pm_system_resume+0x90>
			callback = notifier->state_exit;
   13af8:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   13afa:	2a00      	cmp	r2, #0
   13afc:	d0f6      	beq.n	13aec <pm_system_resume+0x6c>
			callback(z_power_states[_current_cpu->id].state);
   13afe:	4b0c      	ldr	r3, [pc, #48]	; (13b30 <pm_system_resume+0xb0>)
   13b00:	7d1b      	ldrb	r3, [r3, #20]
   13b02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13b06:	0099      	lsls	r1, r3, #2
   13b08:	4b0b      	ldr	r3, [pc, #44]	; (13b38 <pm_system_resume+0xb8>)
   13b0a:	5c58      	ldrb	r0, [r3, r1]
   13b0c:	4790      	blx	r2
   13b0e:	e7ed      	b.n	13aec <pm_system_resume+0x6c>
	__asm__ volatile(
   13b10:	f386 8811 	msr	BASEPRI, r6
   13b14:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13b18:	4807      	ldr	r0, [pc, #28]	; (13b38 <pm_system_resume+0xb8>)
   13b1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   13b1e:	00a2      	lsls	r2, r4, #2
   13b20:	1881      	adds	r1, r0, r2
   13b22:	2300      	movs	r3, #0
   13b24:	5083      	str	r3, [r0, r2]
   13b26:	604b      	str	r3, [r1, #4]
   13b28:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
   13b2a:	b004      	add	sp, #16
   13b2c:	bd70      	pop	{r4, r5, r6, pc}
   13b2e:	bf00      	nop
   13b30:	2000f8a0 	.word	0x2000f8a0
   13b34:	2000e270 	.word	0x2000e270
   13b38:	2000e274 	.word	0x2000e274
   13b3c:	00022415 	.word	0x00022415
   13b40:	2000e268 	.word	0x2000e268

00013b44 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   13b44:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b46:	b089      	sub	sp, #36	; 0x24
   13b48:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   13b4a:	4b4e      	ldr	r3, [pc, #312]	; (13c84 <pm_system_suspend+0x140>)
   13b4c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13b4e:	f004 031f 	and.w	r3, r4, #31
   13b52:	2201      	movs	r2, #1
   13b54:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13b56:	0961      	lsrs	r1, r4, #5
   13b58:	4b4b      	ldr	r3, [pc, #300]	; (13c88 <pm_system_suspend+0x144>)
   13b5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13b5e:	e8d3 1fef 	ldaex	r1, [r3]
   13b62:	ea41 0002 	orr.w	r0, r1, r2
   13b66:	e8c3 0fe6 	stlex	r6, r0, [r3]
   13b6a:	2e00      	cmp	r6, #0
   13b6c:	d1f7      	bne.n	13b5e <pm_system_suspend+0x1a>

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   13b6e:	420a      	tst	r2, r1
   13b70:	d016      	beq.n	13ba0 <pm_system_suspend+0x5c>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   13b72:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   13b76:	4a45      	ldr	r2, [pc, #276]	; (13c8c <pm_system_suspend+0x148>)
   13b78:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   13b7c:	2b00      	cmp	r3, #0
   13b7e:	d07f      	beq.n	13c80 <pm_system_suspend+0x13c>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   13b80:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   13b84:	d11c      	bne.n	13bc0 <pm_system_suspend+0x7c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13b86:	f00b fdc3 	bl	1f710 <k_sched_lock>
	__asm__ volatile(
   13b8a:	f04f 0320 	mov.w	r3, #32
   13b8e:	f3ef 8611 	mrs	r6, BASEPRI
   13b92:	f383 8812 	msr	BASEPRI_MAX, r3
   13b96:	f3bf 8f6f 	isb	sy
	return list->head;
   13b9a:	4b3d      	ldr	r3, [pc, #244]	; (13c90 <pm_system_suspend+0x14c>)
   13b9c:	681d      	ldr	r5, [r3, #0]
   13b9e:	e02a      	b.n	13bf6 <pm_system_suspend+0xb2>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   13ba0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   13ba4:	4b39      	ldr	r3, [pc, #228]	; (13c8c <pm_system_suspend+0x148>)
   13ba6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   13baa:	466f      	mov	r7, sp
   13bac:	462a      	mov	r2, r5
   13bae:	4621      	mov	r1, r4
   13bb0:	4638      	mov	r0, r7
   13bb2:	f00f f902 	bl	22dba <pm_policy_next_state>
   13bb6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   13bba:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   13bbe:	e7d8      	b.n	13b72 <pm_system_suspend+0x2e>
		     k_us_to_ticks_ceil32(
   13bc0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   13bc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13bc8:	689b      	ldr	r3, [r3, #8]
   13bca:	0c59      	lsrs	r1, r3, #17
   13bcc:	03d8      	lsls	r0, r3, #15
   13bce:	4e31      	ldr	r6, [pc, #196]	; (13c94 <pm_system_suspend+0x150>)
   13bd0:	4a31      	ldr	r2, [pc, #196]	; (13c98 <pm_system_suspend+0x154>)
   13bd2:	2300      	movs	r3, #0
   13bd4:	1980      	adds	r0, r0, r6
   13bd6:	f04f 0600 	mov.w	r6, #0
   13bda:	eb46 0101 	adc.w	r1, r6, r1
   13bde:	f7fc ff9d 	bl	10b1c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   13be2:	2101      	movs	r1, #1
   13be4:	1a28      	subs	r0, r5, r0
   13be6:	f012 fcc0 	bl	2656a <z_set_timeout_expiry>
   13bea:	e7cc      	b.n	13b86 <pm_system_suspend+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13bec:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   13bee:	b10d      	cbz	r5, 13bf4 <pm_system_suspend+0xb0>
	return node->next;
   13bf0:	682b      	ldr	r3, [r5, #0]
   13bf2:	b16b      	cbz	r3, 13c10 <pm_system_suspend+0xcc>
{
   13bf4:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13bf6:	b15d      	cbz	r5, 13c10 <pm_system_suspend+0xcc>
			callback = notifier->state_entry;
   13bf8:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   13bfa:	2a00      	cmp	r2, #0
   13bfc:	d0f6      	beq.n	13bec <pm_system_suspend+0xa8>
			callback(z_power_states[_current_cpu->id].state);
   13bfe:	4b21      	ldr	r3, [pc, #132]	; (13c84 <pm_system_suspend+0x140>)
   13c00:	7d1b      	ldrb	r3, [r3, #20]
   13c02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13c06:	4921      	ldr	r1, [pc, #132]	; (13c8c <pm_system_suspend+0x148>)
   13c08:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   13c0c:	4790      	blx	r2
   13c0e:	e7ed      	b.n	13bec <pm_system_suspend+0xa8>
	__asm__ volatile(
   13c10:	f386 8811 	msr	BASEPRI, r6
   13c14:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13c18:	f004 031f 	and.w	r3, r4, #31
   13c1c:	2101      	movs	r1, #1
   13c1e:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13c20:	0963      	lsrs	r3, r4, #5
   13c22:	4a1e      	ldr	r2, [pc, #120]	; (13c9c <pm_system_suspend+0x158>)
   13c24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13c28:	e8d3 2fef 	ldaex	r2, [r3]
   13c2c:	430a      	orrs	r2, r1
   13c2e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13c32:	2800      	cmp	r0, #0
   13c34:	d1f8      	bne.n	13c28 <pm_system_suspend+0xe4>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   13c36:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   13c3a:	4a14      	ldr	r2, [pc, #80]	; (13c8c <pm_system_suspend+0x148>)
   13c3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13c40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13c44:	ab08      	add	r3, sp, #32
   13c46:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   13c4a:	4b15      	ldr	r3, [pc, #84]	; (13ca0 <pm_system_suspend+0x15c>)
   13c4c:	b10b      	cbz	r3, 13c52 <pm_system_suspend+0x10e>
		pm_power_state_set(info);
   13c4e:	f00e fbce 	bl	223ee <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   13c52:	f7ff ff15 	bl	13a80 <pm_system_resume>
	k_sched_unlock();
   13c56:	f00b ff59 	bl	1fb0c <k_sched_unlock>
	bool ret = true;
   13c5a:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   13c5c:	f004 021f 	and.w	r2, r4, #31
   13c60:	2301      	movs	r3, #1
   13c62:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c64:	0964      	lsrs	r4, r4, #5
   13c66:	4a08      	ldr	r2, [pc, #32]	; (13c88 <pm_system_suspend+0x144>)
   13c68:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   13c6c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c6e:	e8d4 2fef 	ldaex	r2, [r4]
   13c72:	401a      	ands	r2, r3
   13c74:	e8c4 2fe1 	stlex	r1, r2, [r4]
   13c78:	2900      	cmp	r1, #0
   13c7a:	d1f8      	bne.n	13c6e <pm_system_suspend+0x12a>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   13c7c:	b009      	add	sp, #36	; 0x24
   13c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
   13c80:	2000      	movs	r0, #0
   13c82:	e7eb      	b.n	13c5c <pm_system_suspend+0x118>
   13c84:	2000f8a0 	.word	0x2000f8a0
   13c88:	2000e280 	.word	0x2000e280
   13c8c:	2000e274 	.word	0x2000e274
   13c90:	2000e268 	.word	0x2000e268
   13c94:	000f423f 	.word	0x000f423f
   13c98:	000f4240 	.word	0x000f4240
   13c9c:	2000e270 	.word	0x2000e270
   13ca0:	000223ef 	.word	0x000223ef

00013ca4 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   13ca4:	b508      	push	{r3, lr}
	k_sched_lock();
   13ca6:	f00b fd33 	bl	1f710 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
   13caa:	4802      	ldr	r0, [pc, #8]	; (13cb4 <before_nse+0x10>)
   13cac:	f00f f8ee 	bl	22e8c <z_arm_save_fp_context>
}
   13cb0:	bd08      	pop	{r3, pc}
   13cb2:	bf00      	nop
   13cb4:	2000e284 	.word	0x2000e284

00013cb8 <after_nse>:

void after_nse(void)
{
   13cb8:	b508      	push	{r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   13cba:	4803      	ldr	r0, [pc, #12]	; (13cc8 <after_nse+0x10>)
   13cbc:	f00f f8ff 	bl	22ebe <z_arm_restore_fp_context>
	k_sched_unlock();
   13cc0:	f00b ff24 	bl	1fb0c <k_sched_unlock>
}
   13cc4:	bd08      	pop	{r3, pc}
   13cc6:	bf00      	nop
   13cc8:	2000e284 	.word	0x2000e284

00013ccc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13ccc:	4901      	ldr	r1, [pc, #4]	; (13cd4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13cce:	2210      	movs	r2, #16
	str	r2, [r1]
   13cd0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13cd2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13cd4:	e000ed10 	.word	0xe000ed10

00013cd8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13cd8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13cda:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13cdc:	f380 8811 	msr	BASEPRI, r0
	isb
   13ce0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13ce4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13ce8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13cea:	b662      	cpsie	i
	isb
   13cec:	f3bf 8f6f 	isb	sy

	bx	lr
   13cf0:	4770      	bx	lr
   13cf2:	bf00      	nop

00013cf4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13cf4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13cf6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13cf8:	f381 8811 	msr	BASEPRI, r1

	wfe
   13cfc:	bf20      	wfe

	msr	BASEPRI, r0
   13cfe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13d02:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13d04:	4770      	bx	lr
   13d06:	bf00      	nop

00013d08 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   13d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d0a:	b08b      	sub	sp, #44	; 0x2c
   13d0c:	4605      	mov	r5, r0
   13d0e:	4c4b      	ldr	r4, [pc, #300]	; (13e3c <esf_dump+0x134>)
   13d10:	4b4b      	ldr	r3, [pc, #300]	; (13e40 <esf_dump+0x138>)
   13d12:	1ae4      	subs	r4, r4, r3
   13d14:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13d16:	2701      	movs	r7, #1
   13d18:	f04f 0300 	mov.w	r3, #0
   13d1c:	f367 0302 	bfi	r3, r7, #0, #3
   13d20:	f36f 03c5 	bfc	r3, #3, #3
   13d24:	f364 138f 	bfi	r3, r4, #6, #10
   13d28:	f8ad 3000 	strh.w	r3, [sp]
   13d2c:	6883      	ldr	r3, [r0, #8]
   13d2e:	6842      	ldr	r2, [r0, #4]
   13d30:	6801      	ldr	r1, [r0, #0]
   13d32:	4844      	ldr	r0, [pc, #272]	; (13e44 <esf_dump+0x13c>)
   13d34:	f7ff f8b8 	bl	12ea8 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13d38:	f04f 0300 	mov.w	r3, #0
   13d3c:	f367 0302 	bfi	r3, r7, #0, #3
   13d40:	f36f 03c5 	bfc	r3, #3, #3
   13d44:	f364 138f 	bfi	r3, r4, #6, #10
   13d48:	f8ad 3000 	strh.w	r3, [sp]
   13d4c:	696b      	ldr	r3, [r5, #20]
   13d4e:	692a      	ldr	r2, [r5, #16]
   13d50:	68e9      	ldr	r1, [r5, #12]
   13d52:	483d      	ldr	r0, [pc, #244]	; (13e48 <esf_dump+0x140>)
   13d54:	f7ff f8a8 	bl	12ea8 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13d58:	f04f 0200 	mov.w	r2, #0
   13d5c:	f367 0202 	bfi	r2, r7, #0, #3
   13d60:	f36f 02c5 	bfc	r2, #3, #3
   13d64:	f364 128f 	bfi	r2, r4, #6, #10
   13d68:	69e9      	ldr	r1, [r5, #28]
   13d6a:	4838      	ldr	r0, [pc, #224]	; (13e4c <esf_dump+0x144>)
   13d6c:	f7ff f8da 	bl	12f24 <log_1>
#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   13d70:	2400      	movs	r4, #0
   13d72:	e041      	b.n	13df8 <esf_dump+0xf0>
   13d74:	4b31      	ldr	r3, [pc, #196]	; (13e3c <esf_dump+0x134>)
   13d76:	4a32      	ldr	r2, [pc, #200]	; (13e40 <esf_dump+0x138>)
   13d78:	1a9b      	subs	r3, r3, r2
   13d7a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   13d7c:	2201      	movs	r2, #1
   13d7e:	f362 0602 	bfi	r6, r2, #0, #3
   13d82:	f36f 06c5 	bfc	r6, #3, #3
   13d86:	f363 168f 	bfi	r6, r3, #6, #10
   13d8a:	9402      	str	r4, [sp, #8]
   13d8c:	f104 0308 	add.w	r3, r4, #8
   13d90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   13d94:	edd3 7a00 	vldr	s15, [r3]
   13d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13d9c:	edcd 7a03 	vstr	s15, [sp, #12]
   13da0:	18a3      	adds	r3, r4, r2
   13da2:	9304      	str	r3, [sp, #16]
   13da4:	f104 0309 	add.w	r3, r4, #9
   13da8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   13dac:	edd3 7a00 	vldr	s15, [r3]
   13db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13db4:	edcd 7a05 	vstr	s15, [sp, #20]
   13db8:	1ca3      	adds	r3, r4, #2
   13dba:	9306      	str	r3, [sp, #24]
   13dbc:	f104 030a 	add.w	r3, r4, #10
   13dc0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   13dc4:	edd3 7a00 	vldr	s15, [r3]
   13dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13dcc:	edcd 7a07 	vstr	s15, [sp, #28]
   13dd0:	1ce3      	adds	r3, r4, #3
   13dd2:	9308      	str	r3, [sp, #32]
   13dd4:	f104 030b 	add.w	r3, r4, #11
   13dd8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   13ddc:	edd3 7a00 	vldr	s15, [r3]
   13de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13de4:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   13de8:	4633      	mov	r3, r6
   13dea:	2208      	movs	r2, #8
   13dec:	eb0d 0102 	add.w	r1, sp, r2
   13df0:	4817      	ldr	r0, [pc, #92]	; (13e50 <esf_dump+0x148>)
   13df2:	f7ff f909 	bl	13008 <log_n>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   13df6:	3404      	adds	r4, #4
   13df8:	2c0f      	cmp	r4, #15
   13dfa:	ddbb      	ble.n	13d74 <esf_dump+0x6c>
   13dfc:	4c0f      	ldr	r4, [pc, #60]	; (13e3c <esf_dump+0x134>)
   13dfe:	4b10      	ldr	r3, [pc, #64]	; (13e40 <esf_dump+0x138>)
   13e00:	1ae4      	subs	r4, r4, r3
   13e02:	08e4      	lsrs	r4, r4, #3
			i, (uint32_t)esf->s[i],
			i + 1, (uint32_t)esf->s[i + 1],
			i + 2, (uint32_t)esf->s[i + 2],
			i + 3, (uint32_t)esf->s[i + 3]);
	}
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   13e04:	2601      	movs	r6, #1
   13e06:	f04f 0200 	mov.w	r2, #0
   13e0a:	f366 0202 	bfi	r2, r6, #0, #3
   13e0e:	f36f 02c5 	bfc	r2, #3, #3
   13e12:	f364 128f 	bfi	r2, r4, #6, #10
   13e16:	6e29      	ldr	r1, [r5, #96]	; 0x60
   13e18:	480e      	ldr	r0, [pc, #56]	; (13e54 <esf_dump+0x14c>)
   13e1a:	f7ff f883 	bl	12f24 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13e1e:	f04f 0200 	mov.w	r2, #0
   13e22:	f366 0202 	bfi	r2, r6, #0, #3
   13e26:	f36f 02c5 	bfc	r2, #3, #3
   13e2a:	f364 128f 	bfi	r2, r4, #6, #10
   13e2e:	69a9      	ldr	r1, [r5, #24]
   13e30:	4809      	ldr	r0, [pc, #36]	; (13e58 <esf_dump+0x150>)
   13e32:	f7ff f877 	bl	12f24 <log_1>
		esf->basic.pc);
}
   13e36:	b00b      	add	sp, #44	; 0x2c
   13e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e3a:	bf00      	nop
   13e3c:	00027178 	.word	0x00027178
   13e40:	00027108 	.word	0x00027108
   13e44:	00027fac 	.word	0x00027fac
   13e48:	00027fdc 	.word	0x00027fdc
   13e4c:	0002800c 	.word	0x0002800c
   13e50:	0002801c 	.word	0x0002801c
   13e54:	00028060 	.word	0x00028060
   13e58:	00028070 	.word	0x00028070

00013e5c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13e5c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13e5e:	2b00      	cmp	r3, #0
   13e60:	db08      	blt.n	13e74 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13e62:	f000 001f 	and.w	r0, r0, #31
   13e66:	095b      	lsrs	r3, r3, #5
   13e68:	2201      	movs	r2, #1
   13e6a:	fa02 f000 	lsl.w	r0, r2, r0
   13e6e:	4a02      	ldr	r2, [pc, #8]	; (13e78 <arch_irq_enable+0x1c>)
   13e70:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13e74:	4770      	bx	lr
   13e76:	bf00      	nop
   13e78:	e000e100 	.word	0xe000e100

00013e7c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13e7c:	0942      	lsrs	r2, r0, #5
   13e7e:	4b05      	ldr	r3, [pc, #20]	; (13e94 <arch_irq_is_enabled+0x18>)
   13e80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13e84:	f000 001f 	and.w	r0, r0, #31
   13e88:	2301      	movs	r3, #1
   13e8a:	fa03 f000 	lsl.w	r0, r3, r0
}
   13e8e:	4010      	ands	r0, r2
   13e90:	4770      	bx	lr
   13e92:	bf00      	nop
   13e94:	e000e100 	.word	0xe000e100

00013e98 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   13e98:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13e9a:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13e9c:	2b00      	cmp	r3, #0
   13e9e:	db08      	blt.n	13eb2 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13ea0:	0149      	lsls	r1, r1, #5
   13ea2:	b2c9      	uxtb	r1, r1
   13ea4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13ea8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13eac:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13eb0:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13eb2:	f000 000f 	and.w	r0, r0, #15
   13eb6:	0149      	lsls	r1, r1, #5
   13eb8:	b2c9      	uxtb	r1, r1
   13eba:	4b01      	ldr	r3, [pc, #4]	; (13ec0 <z_arm_irq_priority_set+0x28>)
   13ebc:	5419      	strb	r1, [r3, r0]
}
   13ebe:	4770      	bx	lr
   13ec0:	e000ed14 	.word	0xe000ed14

00013ec4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13ec4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13ec6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13ec8:	4b05      	ldr	r3, [pc, #20]	; (13ee0 <_arch_isr_direct_pm+0x1c>)
   13eca:	699b      	ldr	r3, [r3, #24]
   13ecc:	b90b      	cbnz	r3, 13ed2 <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13ece:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13ed0:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   13ed2:	4b03      	ldr	r3, [pc, #12]	; (13ee0 <_arch_isr_direct_pm+0x1c>)
   13ed4:	2200      	movs	r2, #0
   13ed6:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   13ed8:	f011 ff82 	bl	25de0 <z_pm_save_idle_exit>
   13edc:	e7f7      	b.n	13ece <_arch_isr_direct_pm+0xa>
   13ede:	bf00      	nop
   13ee0:	2000f8a0 	.word	0x2000f8a0

00013ee4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13ee4:	bf30      	wfi
    b z_SysNmiOnReset
   13ee6:	f7ff bffd 	b.w	13ee4 <z_SysNmiOnReset>
   13eea:	bf00      	nop

00013eec <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13eec:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13eee:	4b14      	ldr	r3, [pc, #80]	; (13f40 <z_arm_prep_c+0x54>)
   13ef0:	4a14      	ldr	r2, [pc, #80]	; (13f44 <z_arm_prep_c+0x58>)
   13ef2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13ef6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13efc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13f00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13f04:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   13f0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13f10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   13f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   13f18:	f503 730c 	add.w	r3, r3, #560	; 0x230
   13f1c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   13f20:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   13f22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13f26:	f3bf 8f6f 	isb	sy
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   13f2a:	2300      	movs	r3, #0
   13f2c:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13f30:	f00a fe08 	bl	1eb44 <z_bss_zero>
	z_data_copy();
   13f34:	f00b ff7a 	bl	1fe2c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13f38:	f000 fcc8 	bl	148cc <z_arm_interrupt_init>
	z_cstart();
   13f3c:	f00a fe0e 	bl	1eb5c <z_cstart>
   13f40:	e000ed00 	.word	0xe000ed00
   13f44:	00010000 	.word	0x00010000

00013f48 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13f48:	4a0a      	ldr	r2, [pc, #40]	; (13f74 <arch_swap+0x2c>)
   13f4a:	6893      	ldr	r3, [r2, #8]
   13f4c:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   13f50:	4909      	ldr	r1, [pc, #36]	; (13f78 <arch_swap+0x30>)
   13f52:	6809      	ldr	r1, [r1, #0]
   13f54:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13f58:	4908      	ldr	r1, [pc, #32]	; (13f7c <arch_swap+0x34>)
   13f5a:	684b      	ldr	r3, [r1, #4]
   13f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13f60:	604b      	str	r3, [r1, #4]
   13f62:	2300      	movs	r3, #0
   13f64:	f383 8811 	msr	BASEPRI, r3
   13f68:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13f6c:	6893      	ldr	r3, [r2, #8]
}
   13f6e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   13f72:	4770      	bx	lr
   13f74:	2000f8a0 	.word	0x2000f8a0
   13f78:	0002a144 	.word	0x0002a144
   13f7c:	e000ed00 	.word	0xe000ed00

00013f80 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13f80:	4923      	ldr	r1, [pc, #140]	; (14010 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13f82:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   13f84:	f882 e0f5 	strb.w	lr, [r2, #245]	; 0xf5
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13f88:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13f8c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13f8e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13f92:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   13f96:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   13f9a:	d103      	bne.n	13fa4 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   13f9c:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vstmia r0, {s16-s31}
   13fa0:	ec80 8a10 	vstmia	r0, {s16-s31}

00013fa4 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13fa4:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   13fa6:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13faa:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13fae:	4f19      	ldr	r7, [pc, #100]	; (14014 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13fb0:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13fb4:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13fb6:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13fb8:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   13fba:	f992 e0f5 	ldrsb.w	lr, [r2, #245]	; 0xf5

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13fbe:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   13fc2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13fc4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13fc8:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   13fcc:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   13fd0:	d003      	beq.n	13fda <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   13fd2:	2300      	movs	r3, #0
    vmsr fpscr, r3
   13fd4:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   13fd8:	e003      	b.n	13fe2 <in_fp_endif>

00013fda <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   13fda:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vldmia r0, {s16-s31}
   13fde:	ec90 8a10 	vldmia	r0, {s16-s31}

00013fe2 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   13fe2:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   13fe6:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   13fea:	f383 8814 	msr	CONTROL, r3
    isb
   13fee:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13ff2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13ff6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13ffa:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   13ffe:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   14002:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   14004:	f00e ff16 	bl	22e34 <configure_builtin_stack_guard>
    pop {r2, lr}
   14008:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1400c:	4770      	bx	lr
   1400e:	0000      	.short	0x0000
    ldr r1, =_kernel
   14010:	2000f8a0 	.word	0x2000f8a0
    ldr v4, =_SCS_ICSR
   14014:	e000ed04 	.word	0xe000ed04

00014018 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14018:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1401c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1401e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14022:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14026:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14028:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1402c:	2902      	cmp	r1, #2
    beq _oops
   1402e:	d0ff      	beq.n	14030 <_oops>

00014030 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14030:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   14032:	f00e fedf 	bl	22df4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   14036:	bd01      	pop	{r0, pc}

00014038 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   14038:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1403a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   1403e:	4910      	ldr	r1, [pc, #64]	; (14080 <arch_new_thread+0x48>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   14040:	f021 0101 	bic.w	r1, r1, #1
   14044:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   14048:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1404c:	9b01      	ldr	r3, [sp, #4]
   1404e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   14052:	9b02      	ldr	r3, [sp, #8]
   14054:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14058:	9b03      	ldr	r3, [sp, #12]
   1405a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1405e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14062:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   14066:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14068:	2300      	movs	r3, #0
   1406a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1406e:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
   14072:	23bc      	movs	r3, #188	; 0xbc
   14074:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14078:	f85d 4b04 	ldr.w	r4, [sp], #4
   1407c:	4770      	bx	lr
   1407e:	bf00      	nop
   14080:	00021e8b 	.word	0x00021e8b

00014084 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14084:	b508      	push	{r3, lr}
   14086:	4604      	mov	r4, r0
   14088:	460e      	mov	r6, r1
   1408a:	4615      	mov	r5, r2
	z_arm_prepare_switch_to_main();
   1408c:	f00e fec4 	bl	22e18 <z_arm_prepare_switch_to_main>

	_current = main_thread;
   14090:	4b09      	ldr	r3, [pc, #36]	; (140b8 <arch_switch_to_main_thread+0x34>)
   14092:	609c      	str	r4, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   14094:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   14098:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1409c:	4628      	mov	r0, r5
   1409e:	f386 8809 	msr	PSP, r6
   140a2:	2100      	movs	r1, #0
   140a4:	b663      	cpsie	if
   140a6:	f381 8811 	msr	BASEPRI, r1
   140aa:	f3bf 8f6f 	isb	sy
   140ae:	2200      	movs	r2, #0
   140b0:	2300      	movs	r3, #0
   140b2:	f00d feea 	bl	21e8a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   140b6:	bf00      	nop
   140b8:	2000f8a0 	.word	0x2000f8a0

000140bc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   140bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   140be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   140c0:	4a0b      	ldr	r2, [pc, #44]	; (140f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   140c2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   140c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   140c6:	bf1e      	ittt	ne
	movne	r1, #0
   140c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   140ca:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   140cc:	f011 fe88 	blne	25de0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   140d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   140d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   140d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   140da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   140de:	4905      	ldr	r1, [pc, #20]	; (140f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   140e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   140e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   140e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   140e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   140ea:	4903      	ldr	r1, [pc, #12]	; (140f8 <_isr_wrapper+0x3c>)
	bx r1
   140ec:	4708      	bx	r1
   140ee:	0000      	.short	0x0000
	ldr r2, =_kernel
   140f0:	2000f8a0 	.word	0x2000f8a0
	ldr r1, =_sw_isr_table
   140f4:	00026ef4 	.word	0x00026ef4
	ldr r1, =z_arm_int_exit
   140f8:	000140fd 	.word	0x000140fd

000140fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   140fc:	4b04      	ldr	r3, [pc, #16]	; (14110 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   140fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14100:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   14102:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14104:	d003      	beq.n	1410e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14106:	4903      	ldr	r1, [pc, #12]	; (14114 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1410c:	600a      	str	r2, [r1, #0]

0001410e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1410e:	4770      	bx	lr
	ldr r3, =_kernel
   14110:	2000f8a0 	.word	0x2000f8a0
	ldr r1, =_SCS_ICSR
   14114:	e000ed04 	.word	0xe000ed04

00014118 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   14118:	b510      	push	{r4, lr}
   1411a:	4b5a      	ldr	r3, [pc, #360]	; (14284 <usage_fault+0x16c>)
   1411c:	4a5a      	ldr	r2, [pc, #360]	; (14288 <usage_fault+0x170>)
   1411e:	1a9b      	subs	r3, r3, r2
   14120:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   14122:	f04f 0100 	mov.w	r1, #0
   14126:	2201      	movs	r2, #1
   14128:	f362 0102 	bfi	r1, r2, #0, #3
   1412c:	f36f 01c5 	bfc	r1, #3, #3
   14130:	f363 118f 	bfi	r1, r3, #6, #10
   14134:	4855      	ldr	r0, [pc, #340]	; (1428c <usage_fault+0x174>)
   14136:	f7fe ff89 	bl	1304c <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1413a:	4b55      	ldr	r3, [pc, #340]	; (14290 <usage_fault+0x178>)
   1413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1413e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   14142:	d126      	bne.n	14192 <usage_fault+0x7a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14144:	4b52      	ldr	r3, [pc, #328]	; (14290 <usage_fault+0x178>)
   14146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14148:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   1414c:	d132      	bne.n	141b4 <usage_fault+0x9c>
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1414e:	4b50      	ldr	r3, [pc, #320]	; (14290 <usage_fault+0x178>)
   14150:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   14152:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   14156:	d13e      	bne.n	141d6 <usage_fault+0xbe>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14158:	4b4d      	ldr	r3, [pc, #308]	; (14290 <usage_fault+0x178>)
   1415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1415c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   14160:	d14b      	bne.n	141fa <usage_fault+0xe2>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14162:	4b4b      	ldr	r3, [pc, #300]	; (14290 <usage_fault+0x178>)
   14164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14166:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1416a:	d157      	bne.n	1421c <usage_fault+0x104>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1416c:	4b48      	ldr	r3, [pc, #288]	; (14290 <usage_fault+0x178>)
   1416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14170:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   14174:	d163      	bne.n	1423e <usage_fault+0x126>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14176:	4b46      	ldr	r3, [pc, #280]	; (14290 <usage_fault+0x178>)
   14178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1417a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1417e:	d16f      	bne.n	14260 <usage_fault+0x148>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14180:	4a43      	ldr	r2, [pc, #268]	; (14290 <usage_fault+0x178>)
   14182:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14184:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14188:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1418c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   1418e:	4620      	mov	r0, r4
   14190:	bd10      	pop	{r4, pc}
   14192:	4b3c      	ldr	r3, [pc, #240]	; (14284 <usage_fault+0x16c>)
   14194:	4a3c      	ldr	r2, [pc, #240]	; (14288 <usage_fault+0x170>)
   14196:	1a9b      	subs	r3, r3, r2
   14198:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   1419a:	f04f 0100 	mov.w	r1, #0
   1419e:	2201      	movs	r2, #1
   141a0:	f362 0102 	bfi	r1, r2, #0, #3
   141a4:	f36f 01c5 	bfc	r1, #3, #3
   141a8:	f363 118f 	bfi	r1, r3, #6, #10
   141ac:	4839      	ldr	r0, [pc, #228]	; (14294 <usage_fault+0x17c>)
   141ae:	f7fe ff4d 	bl	1304c <log_0>
   141b2:	e7c7      	b.n	14144 <usage_fault+0x2c>
   141b4:	4b33      	ldr	r3, [pc, #204]	; (14284 <usage_fault+0x16c>)
   141b6:	4a34      	ldr	r2, [pc, #208]	; (14288 <usage_fault+0x170>)
   141b8:	1a9b      	subs	r3, r3, r2
   141ba:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   141bc:	f04f 0100 	mov.w	r1, #0
   141c0:	2201      	movs	r2, #1
   141c2:	f362 0102 	bfi	r1, r2, #0, #3
   141c6:	f36f 01c5 	bfc	r1, #3, #3
   141ca:	f363 118f 	bfi	r1, r3, #6, #10
   141ce:	4832      	ldr	r0, [pc, #200]	; (14298 <usage_fault+0x180>)
   141d0:	f7fe ff3c 	bl	1304c <log_0>
   141d4:	e7bb      	b.n	1414e <usage_fault+0x36>
   141d6:	4b2b      	ldr	r3, [pc, #172]	; (14284 <usage_fault+0x16c>)
   141d8:	4a2b      	ldr	r2, [pc, #172]	; (14288 <usage_fault+0x170>)
   141da:	1a9b      	subs	r3, r3, r2
   141dc:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   141de:	f04f 0100 	mov.w	r1, #0
   141e2:	2201      	movs	r2, #1
   141e4:	f362 0102 	bfi	r1, r2, #0, #3
   141e8:	f36f 01c5 	bfc	r1, #3, #3
   141ec:	f363 118f 	bfi	r1, r3, #6, #10
   141f0:	482a      	ldr	r0, [pc, #168]	; (1429c <usage_fault+0x184>)
   141f2:	f7fe ff2b 	bl	1304c <log_0>
		reason = K_ERR_STACK_CHK_FAIL;
   141f6:	2402      	movs	r4, #2
   141f8:	e7ae      	b.n	14158 <usage_fault+0x40>
   141fa:	4b22      	ldr	r3, [pc, #136]	; (14284 <usage_fault+0x16c>)
   141fc:	4a22      	ldr	r2, [pc, #136]	; (14288 <usage_fault+0x170>)
   141fe:	1a9b      	subs	r3, r3, r2
   14200:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   14202:	f04f 0100 	mov.w	r1, #0
   14206:	2201      	movs	r2, #1
   14208:	f362 0102 	bfi	r1, r2, #0, #3
   1420c:	f36f 01c5 	bfc	r1, #3, #3
   14210:	f363 118f 	bfi	r1, r3, #6, #10
   14214:	4822      	ldr	r0, [pc, #136]	; (142a0 <usage_fault+0x188>)
   14216:	f7fe ff19 	bl	1304c <log_0>
   1421a:	e7a2      	b.n	14162 <usage_fault+0x4a>
   1421c:	4b19      	ldr	r3, [pc, #100]	; (14284 <usage_fault+0x16c>)
   1421e:	4a1a      	ldr	r2, [pc, #104]	; (14288 <usage_fault+0x170>)
   14220:	1a9b      	subs	r3, r3, r2
   14222:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14224:	f04f 0100 	mov.w	r1, #0
   14228:	2201      	movs	r2, #1
   1422a:	f362 0102 	bfi	r1, r2, #0, #3
   1422e:	f36f 01c5 	bfc	r1, #3, #3
   14232:	f363 118f 	bfi	r1, r3, #6, #10
   14236:	481b      	ldr	r0, [pc, #108]	; (142a4 <usage_fault+0x18c>)
   14238:	f7fe ff08 	bl	1304c <log_0>
   1423c:	e796      	b.n	1416c <usage_fault+0x54>
   1423e:	4b11      	ldr	r3, [pc, #68]	; (14284 <usage_fault+0x16c>)
   14240:	4a11      	ldr	r2, [pc, #68]	; (14288 <usage_fault+0x170>)
   14242:	1a9b      	subs	r3, r3, r2
   14244:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14246:	f04f 0100 	mov.w	r1, #0
   1424a:	2201      	movs	r2, #1
   1424c:	f362 0102 	bfi	r1, r2, #0, #3
   14250:	f36f 01c5 	bfc	r1, #3, #3
   14254:	f363 118f 	bfi	r1, r3, #6, #10
   14258:	4813      	ldr	r0, [pc, #76]	; (142a8 <usage_fault+0x190>)
   1425a:	f7fe fef7 	bl	1304c <log_0>
   1425e:	e78a      	b.n	14176 <usage_fault+0x5e>
   14260:	4b08      	ldr	r3, [pc, #32]	; (14284 <usage_fault+0x16c>)
   14262:	4a09      	ldr	r2, [pc, #36]	; (14288 <usage_fault+0x170>)
   14264:	1a9b      	subs	r3, r3, r2
   14266:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14268:	f04f 0100 	mov.w	r1, #0
   1426c:	2201      	movs	r2, #1
   1426e:	f362 0102 	bfi	r1, r2, #0, #3
   14272:	f36f 01c5 	bfc	r1, #3, #3
   14276:	f363 118f 	bfi	r1, r3, #6, #10
   1427a:	480c      	ldr	r0, [pc, #48]	; (142ac <usage_fault+0x194>)
   1427c:	f7fe fee6 	bl	1304c <log_0>
   14280:	e77e      	b.n	14180 <usage_fault+0x68>
   14282:	bf00      	nop
   14284:	00027178 	.word	0x00027178
   14288:	00027108 	.word	0x00027108
   1428c:	000280a0 	.word	0x000280a0
   14290:	e000ed00 	.word	0xe000ed00
   14294:	000280b8 	.word	0x000280b8
   14298:	000280cc 	.word	0x000280cc
   1429c:	000280e8 	.word	0x000280e8
   142a0:	00028114 	.word	0x00028114
   142a4:	00028134 	.word	0x00028134
   142a8:	0002815c 	.word	0x0002815c
   142ac:	00028178 	.word	0x00028178

000142b0 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   142b0:	b508      	push	{r3, lr}
	*recoverable = false;
   142b2:	2200      	movs	r2, #0
   142b4:	700a      	strb	r2, [r1, #0]
   142b6:	4b08      	ldr	r3, [pc, #32]	; (142d8 <debug_monitor+0x28>)
   142b8:	4908      	ldr	r1, [pc, #32]	; (142dc <debug_monitor+0x2c>)
   142ba:	1a5b      	subs	r3, r3, r1
   142bc:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   142be:	f04f 0100 	mov.w	r1, #0
   142c2:	2001      	movs	r0, #1
   142c4:	f360 0102 	bfi	r1, r0, #0, #3
   142c8:	f362 01c5 	bfi	r1, r2, #3, #3
   142cc:	f363 118f 	bfi	r1, r3, #6, #10
   142d0:	4803      	ldr	r0, [pc, #12]	; (142e0 <debug_monitor+0x30>)
   142d2:	f7fe febb 	bl	1304c <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   142d6:	bd08      	pop	{r3, pc}
   142d8:	00027178 	.word	0x00027178
   142dc:	00027108 	.word	0x00027108
   142e0:	000281a4 	.word	0x000281a4

000142e4 <mem_manage_fault>:
{
   142e4:	b570      	push	{r4, r5, r6, lr}
   142e6:	4605      	mov	r5, r0
   142e8:	460e      	mov	r6, r1
   142ea:	4614      	mov	r4, r2
   142ec:	4b56      	ldr	r3, [pc, #344]	; (14448 <mem_manage_fault+0x164>)
   142ee:	4a57      	ldr	r2, [pc, #348]	; (1444c <mem_manage_fault+0x168>)
   142f0:	1a9b      	subs	r3, r3, r2
   142f2:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   142f4:	f04f 0100 	mov.w	r1, #0
   142f8:	2201      	movs	r2, #1
   142fa:	f362 0102 	bfi	r1, r2, #0, #3
   142fe:	f36f 01c5 	bfc	r1, #3, #3
   14302:	f363 118f 	bfi	r1, r3, #6, #10
   14306:	4852      	ldr	r0, [pc, #328]	; (14450 <mem_manage_fault+0x16c>)
   14308:	f7fe fea0 	bl	1304c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1430c:	4b51      	ldr	r3, [pc, #324]	; (14454 <mem_manage_fault+0x170>)
   1430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14310:	f013 0f10 	tst.w	r3, #16
   14314:	d126      	bne.n	14364 <mem_manage_fault+0x80>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14316:	4b4f      	ldr	r3, [pc, #316]	; (14454 <mem_manage_fault+0x170>)
   14318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1431a:	f013 0f08 	tst.w	r3, #8
   1431e:	d132      	bne.n	14386 <mem_manage_fault+0xa2>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14320:	4b4c      	ldr	r3, [pc, #304]	; (14454 <mem_manage_fault+0x170>)
   14322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14324:	f013 0f02 	tst.w	r3, #2
   14328:	d13e      	bne.n	143a8 <mem_manage_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1432a:	4b4a      	ldr	r3, [pc, #296]	; (14454 <mem_manage_fault+0x170>)
   1432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1432e:	f013 0f01 	tst.w	r3, #1
   14332:	d167      	bne.n	14404 <mem_manage_fault+0x120>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14334:	4b47      	ldr	r3, [pc, #284]	; (14454 <mem_manage_fault+0x170>)
   14336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14338:	f013 0f20 	tst.w	r3, #32
   1433c:	d173      	bne.n	14426 <mem_manage_fault+0x142>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1433e:	4b45      	ldr	r3, [pc, #276]	; (14454 <mem_manage_fault+0x170>)
   14340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14342:	f013 0f10 	tst.w	r3, #16
   14346:	d101      	bne.n	1434c <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14348:	4b42      	ldr	r3, [pc, #264]	; (14454 <mem_manage_fault+0x170>)
   1434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1434c:	4a41      	ldr	r2, [pc, #260]	; (14454 <mem_manage_fault+0x170>)
   1434e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14350:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14354:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14356:	2101      	movs	r1, #1
   14358:	4628      	mov	r0, r5
   1435a:	f00e fd70 	bl	22e3e <memory_fault_recoverable>
   1435e:	7020      	strb	r0, [r4, #0]
}
   14360:	2000      	movs	r0, #0
   14362:	bd70      	pop	{r4, r5, r6, pc}
   14364:	4b38      	ldr	r3, [pc, #224]	; (14448 <mem_manage_fault+0x164>)
   14366:	4a39      	ldr	r2, [pc, #228]	; (1444c <mem_manage_fault+0x168>)
   14368:	1a9b      	subs	r3, r3, r2
   1436a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   1436c:	f04f 0100 	mov.w	r1, #0
   14370:	2201      	movs	r2, #1
   14372:	f362 0102 	bfi	r1, r2, #0, #3
   14376:	f36f 01c5 	bfc	r1, #3, #3
   1437a:	f363 118f 	bfi	r1, r3, #6, #10
   1437e:	4836      	ldr	r0, [pc, #216]	; (14458 <mem_manage_fault+0x174>)
   14380:	f7fe fe64 	bl	1304c <log_0>
   14384:	e7c7      	b.n	14316 <mem_manage_fault+0x32>
   14386:	4b30      	ldr	r3, [pc, #192]	; (14448 <mem_manage_fault+0x164>)
   14388:	4a30      	ldr	r2, [pc, #192]	; (1444c <mem_manage_fault+0x168>)
   1438a:	1a9b      	subs	r3, r3, r2
   1438c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   1438e:	f04f 0100 	mov.w	r1, #0
   14392:	2201      	movs	r2, #1
   14394:	f362 0102 	bfi	r1, r2, #0, #3
   14398:	f36f 01c5 	bfc	r1, #3, #3
   1439c:	f363 118f 	bfi	r1, r3, #6, #10
   143a0:	482e      	ldr	r0, [pc, #184]	; (1445c <mem_manage_fault+0x178>)
   143a2:	f7fe fe53 	bl	1304c <log_0>
   143a6:	e7bb      	b.n	14320 <mem_manage_fault+0x3c>
   143a8:	4b27      	ldr	r3, [pc, #156]	; (14448 <mem_manage_fault+0x164>)
   143aa:	4a28      	ldr	r2, [pc, #160]	; (1444c <mem_manage_fault+0x168>)
   143ac:	1a9b      	subs	r3, r3, r2
   143ae:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   143b0:	f04f 0100 	mov.w	r1, #0
   143b4:	2201      	movs	r2, #1
   143b6:	f362 0102 	bfi	r1, r2, #0, #3
   143ba:	f36f 01c5 	bfc	r1, #3, #3
   143be:	f363 118f 	bfi	r1, r3, #6, #10
   143c2:	4827      	ldr	r0, [pc, #156]	; (14460 <mem_manage_fault+0x17c>)
   143c4:	f7fe fe42 	bl	1304c <log_0>
		uint32_t temp = SCB->MMFAR;
   143c8:	4b22      	ldr	r3, [pc, #136]	; (14454 <mem_manage_fault+0x170>)
   143ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   143cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   143ce:	f013 0f80 	tst.w	r3, #128	; 0x80
   143d2:	d0aa      	beq.n	1432a <mem_manage_fault+0x46>
   143d4:	4b1c      	ldr	r3, [pc, #112]	; (14448 <mem_manage_fault+0x164>)
   143d6:	4a1d      	ldr	r2, [pc, #116]	; (1444c <mem_manage_fault+0x168>)
   143d8:	1a9b      	subs	r3, r3, r2
   143da:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   143dc:	f04f 0200 	mov.w	r2, #0
   143e0:	2001      	movs	r0, #1
   143e2:	f360 0202 	bfi	r2, r0, #0, #3
   143e6:	f36f 02c5 	bfc	r2, #3, #3
   143ea:	f363 128f 	bfi	r2, r3, #6, #10
   143ee:	481d      	ldr	r0, [pc, #116]	; (14464 <mem_manage_fault+0x180>)
   143f0:	f7fe fd98 	bl	12f24 <log_1>
			if (from_hard_fault != 0) {
   143f4:	2e00      	cmp	r6, #0
   143f6:	d098      	beq.n	1432a <mem_manage_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   143f8:	4a16      	ldr	r2, [pc, #88]	; (14454 <mem_manage_fault+0x170>)
   143fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   143fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14400:	6293      	str	r3, [r2, #40]	; 0x28
   14402:	e792      	b.n	1432a <mem_manage_fault+0x46>
   14404:	4b10      	ldr	r3, [pc, #64]	; (14448 <mem_manage_fault+0x164>)
   14406:	4a11      	ldr	r2, [pc, #68]	; (1444c <mem_manage_fault+0x168>)
   14408:	1a9b      	subs	r3, r3, r2
   1440a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   1440c:	f04f 0100 	mov.w	r1, #0
   14410:	2201      	movs	r2, #1
   14412:	f362 0102 	bfi	r1, r2, #0, #3
   14416:	f36f 01c5 	bfc	r1, #3, #3
   1441a:	f363 118f 	bfi	r1, r3, #6, #10
   1441e:	4812      	ldr	r0, [pc, #72]	; (14468 <mem_manage_fault+0x184>)
   14420:	f7fe fe14 	bl	1304c <log_0>
   14424:	e786      	b.n	14334 <mem_manage_fault+0x50>
   14426:	4b08      	ldr	r3, [pc, #32]	; (14448 <mem_manage_fault+0x164>)
   14428:	4a08      	ldr	r2, [pc, #32]	; (1444c <mem_manage_fault+0x168>)
   1442a:	1a9b      	subs	r3, r3, r2
   1442c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   1442e:	f04f 0100 	mov.w	r1, #0
   14432:	2201      	movs	r2, #1
   14434:	f362 0102 	bfi	r1, r2, #0, #3
   14438:	f36f 01c5 	bfc	r1, #3, #3
   1443c:	f363 118f 	bfi	r1, r3, #6, #10
   14440:	480a      	ldr	r0, [pc, #40]	; (1446c <mem_manage_fault+0x188>)
   14442:	f7fe fe03 	bl	1304c <log_0>
   14446:	e77a      	b.n	1433e <mem_manage_fault+0x5a>
   14448:	00027178 	.word	0x00027178
   1444c:	00027108 	.word	0x00027108
   14450:	000281c8 	.word	0x000281c8
   14454:	e000ed00 	.word	0xe000ed00
   14458:	000281e0 	.word	0x000281e0
   1445c:	00028214 	.word	0x00028214
   14460:	00028228 	.word	0x00028228
   14464:	00028240 	.word	0x00028240
   14468:	00028258 	.word	0x00028258
   1446c:	00028278 	.word	0x00028278

00014470 <bus_fault>:
{
   14470:	b570      	push	{r4, r5, r6, lr}
   14472:	4605      	mov	r5, r0
   14474:	460e      	mov	r6, r1
   14476:	4614      	mov	r4, r2
   14478:	4b5e      	ldr	r3, [pc, #376]	; (145f4 <bus_fault+0x184>)
   1447a:	4a5f      	ldr	r2, [pc, #380]	; (145f8 <bus_fault+0x188>)
   1447c:	1a9b      	subs	r3, r3, r2
   1447e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   14480:	f04f 0100 	mov.w	r1, #0
   14484:	2201      	movs	r2, #1
   14486:	f362 0102 	bfi	r1, r2, #0, #3
   1448a:	f36f 01c5 	bfc	r1, #3, #3
   1448e:	f363 118f 	bfi	r1, r3, #6, #10
   14492:	485a      	ldr	r0, [pc, #360]	; (145fc <bus_fault+0x18c>)
   14494:	f7fe fdda 	bl	1304c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14498:	4b59      	ldr	r3, [pc, #356]	; (14600 <bus_fault+0x190>)
   1449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1449c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   144a0:	d124      	bne.n	144ec <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   144a2:	4b57      	ldr	r3, [pc, #348]	; (14600 <bus_fault+0x190>)
   144a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   144a6:	f413 6f00 	tst.w	r3, #2048	; 0x800
   144aa:	d130      	bne.n	1450e <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   144ac:	4b54      	ldr	r3, [pc, #336]	; (14600 <bus_fault+0x190>)
   144ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   144b0:	f413 7f00 	tst.w	r3, #512	; 0x200
   144b4:	d13c      	bne.n	14530 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   144b6:	4b52      	ldr	r3, [pc, #328]	; (14600 <bus_fault+0x190>)
   144b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   144ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
   144be:	d165      	bne.n	1458c <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   144c0:	4b4f      	ldr	r3, [pc, #316]	; (14600 <bus_fault+0x190>)
   144c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   144c4:	f413 7f80 	tst.w	r3, #256	; 0x100
   144c8:	d171      	bne.n	145ae <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   144ca:	4b4d      	ldr	r3, [pc, #308]	; (14600 <bus_fault+0x190>)
   144cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   144ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   144d2:	d17d      	bne.n	145d0 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   144d4:	4a4a      	ldr	r2, [pc, #296]	; (14600 <bus_fault+0x190>)
   144d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   144d8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   144dc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   144de:	2101      	movs	r1, #1
   144e0:	4628      	mov	r0, r5
   144e2:	f00e fcac 	bl	22e3e <memory_fault_recoverable>
   144e6:	7020      	strb	r0, [r4, #0]
}
   144e8:	2000      	movs	r0, #0
   144ea:	bd70      	pop	{r4, r5, r6, pc}
   144ec:	4b41      	ldr	r3, [pc, #260]	; (145f4 <bus_fault+0x184>)
   144ee:	4a42      	ldr	r2, [pc, #264]	; (145f8 <bus_fault+0x188>)
   144f0:	1a9b      	subs	r3, r3, r2
   144f2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   144f4:	f04f 0100 	mov.w	r1, #0
   144f8:	2201      	movs	r2, #1
   144fa:	f362 0102 	bfi	r1, r2, #0, #3
   144fe:	f36f 01c5 	bfc	r1, #3, #3
   14502:	f363 118f 	bfi	r1, r3, #6, #10
   14506:	483f      	ldr	r0, [pc, #252]	; (14604 <bus_fault+0x194>)
   14508:	f7fe fda0 	bl	1304c <log_0>
   1450c:	e7c9      	b.n	144a2 <bus_fault+0x32>
   1450e:	4b39      	ldr	r3, [pc, #228]	; (145f4 <bus_fault+0x184>)
   14510:	4a39      	ldr	r2, [pc, #228]	; (145f8 <bus_fault+0x188>)
   14512:	1a9b      	subs	r3, r3, r2
   14514:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   14516:	f04f 0100 	mov.w	r1, #0
   1451a:	2201      	movs	r2, #1
   1451c:	f362 0102 	bfi	r1, r2, #0, #3
   14520:	f36f 01c5 	bfc	r1, #3, #3
   14524:	f363 118f 	bfi	r1, r3, #6, #10
   14528:	4837      	ldr	r0, [pc, #220]	; (14608 <bus_fault+0x198>)
   1452a:	f7fe fd8f 	bl	1304c <log_0>
   1452e:	e7bd      	b.n	144ac <bus_fault+0x3c>
   14530:	4b30      	ldr	r3, [pc, #192]	; (145f4 <bus_fault+0x184>)
   14532:	4a31      	ldr	r2, [pc, #196]	; (145f8 <bus_fault+0x188>)
   14534:	1a9b      	subs	r3, r3, r2
   14536:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   14538:	f04f 0100 	mov.w	r1, #0
   1453c:	2201      	movs	r2, #1
   1453e:	f362 0102 	bfi	r1, r2, #0, #3
   14542:	f36f 01c5 	bfc	r1, #3, #3
   14546:	f363 118f 	bfi	r1, r3, #6, #10
   1454a:	4830      	ldr	r0, [pc, #192]	; (1460c <bus_fault+0x19c>)
   1454c:	f7fe fd7e 	bl	1304c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   14550:	4b2b      	ldr	r3, [pc, #172]	; (14600 <bus_fault+0x190>)
   14552:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14556:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1455a:	d0ac      	beq.n	144b6 <bus_fault+0x46>
   1455c:	4b25      	ldr	r3, [pc, #148]	; (145f4 <bus_fault+0x184>)
   1455e:	4a26      	ldr	r2, [pc, #152]	; (145f8 <bus_fault+0x188>)
   14560:	1a9b      	subs	r3, r3, r2
   14562:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14564:	f04f 0200 	mov.w	r2, #0
   14568:	2001      	movs	r0, #1
   1456a:	f360 0202 	bfi	r2, r0, #0, #3
   1456e:	f36f 02c5 	bfc	r2, #3, #3
   14572:	f363 128f 	bfi	r2, r3, #6, #10
   14576:	4826      	ldr	r0, [pc, #152]	; (14610 <bus_fault+0x1a0>)
   14578:	f7fe fcd4 	bl	12f24 <log_1>
			if (from_hard_fault != 0) {
   1457c:	2e00      	cmp	r6, #0
   1457e:	d09a      	beq.n	144b6 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14580:	4a1f      	ldr	r2, [pc, #124]	; (14600 <bus_fault+0x190>)
   14582:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14584:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14588:	6293      	str	r3, [r2, #40]	; 0x28
   1458a:	e794      	b.n	144b6 <bus_fault+0x46>
   1458c:	4b19      	ldr	r3, [pc, #100]	; (145f4 <bus_fault+0x184>)
   1458e:	4a1a      	ldr	r2, [pc, #104]	; (145f8 <bus_fault+0x188>)
   14590:	1a9b      	subs	r3, r3, r2
   14592:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   14594:	f04f 0100 	mov.w	r1, #0
   14598:	2201      	movs	r2, #1
   1459a:	f362 0102 	bfi	r1, r2, #0, #3
   1459e:	f36f 01c5 	bfc	r1, #3, #3
   145a2:	f363 118f 	bfi	r1, r3, #6, #10
   145a6:	481b      	ldr	r0, [pc, #108]	; (14614 <bus_fault+0x1a4>)
   145a8:	f7fe fd50 	bl	1304c <log_0>
   145ac:	e788      	b.n	144c0 <bus_fault+0x50>
   145ae:	4b11      	ldr	r3, [pc, #68]	; (145f4 <bus_fault+0x184>)
   145b0:	4a11      	ldr	r2, [pc, #68]	; (145f8 <bus_fault+0x188>)
   145b2:	1a9b      	subs	r3, r3, r2
   145b4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   145b6:	f04f 0100 	mov.w	r1, #0
   145ba:	2201      	movs	r2, #1
   145bc:	f362 0102 	bfi	r1, r2, #0, #3
   145c0:	f36f 01c5 	bfc	r1, #3, #3
   145c4:	f363 118f 	bfi	r1, r3, #6, #10
   145c8:	4813      	ldr	r0, [pc, #76]	; (14618 <bus_fault+0x1a8>)
   145ca:	f7fe fd3f 	bl	1304c <log_0>
   145ce:	e781      	b.n	144d4 <bus_fault+0x64>
   145d0:	4b08      	ldr	r3, [pc, #32]	; (145f4 <bus_fault+0x184>)
   145d2:	4a09      	ldr	r2, [pc, #36]	; (145f8 <bus_fault+0x188>)
   145d4:	1a9b      	subs	r3, r3, r2
   145d6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   145d8:	f04f 0100 	mov.w	r1, #0
   145dc:	2201      	movs	r2, #1
   145de:	f362 0102 	bfi	r1, r2, #0, #3
   145e2:	f36f 01c5 	bfc	r1, #3, #3
   145e6:	f363 118f 	bfi	r1, r3, #6, #10
   145ea:	480c      	ldr	r0, [pc, #48]	; (1461c <bus_fault+0x1ac>)
   145ec:	f7fe fd2e 	bl	1304c <log_0>
   145f0:	e770      	b.n	144d4 <bus_fault+0x64>
   145f2:	bf00      	nop
   145f4:	00027178 	.word	0x00027178
   145f8:	00027108 	.word	0x00027108
   145fc:	000282a8 	.word	0x000282a8
   14600:	e000ed00 	.word	0xe000ed00
   14604:	000282c0 	.word	0x000282c0
   14608:	00028214 	.word	0x00028214
   1460c:	000282d4 	.word	0x000282d4
   14610:	000282f0 	.word	0x000282f0
   14614:	00028308 	.word	0x00028308
   14618:	00028324 	.word	0x00028324
   1461c:	00028278 	.word	0x00028278

00014620 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   14620:	b570      	push	{r4, r5, r6, lr}
   14622:	4605      	mov	r5, r0
   14624:	460c      	mov	r4, r1
   14626:	4b47      	ldr	r3, [pc, #284]	; (14744 <hard_fault+0x124>)
   14628:	4a47      	ldr	r2, [pc, #284]	; (14748 <hard_fault+0x128>)
   1462a:	1a9b      	subs	r3, r3, r2
   1462c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   1462e:	f04f 0100 	mov.w	r1, #0
   14632:	2201      	movs	r2, #1
   14634:	f362 0102 	bfi	r1, r2, #0, #3
   14638:	f36f 01c5 	bfc	r1, #3, #3
   1463c:	f363 118f 	bfi	r1, r3, #6, #10
   14640:	4842      	ldr	r0, [pc, #264]	; (1474c <hard_fault+0x12c>)
   14642:	f7fe fd03 	bl	1304c <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   14646:	2300      	movs	r3, #0
   14648:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1464a:	4b41      	ldr	r3, [pc, #260]	; (14750 <hard_fault+0x130>)
   1464c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1464e:	f016 0602 	ands.w	r6, r6, #2
   14652:	d109      	bne.n	14668 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14654:	4b3e      	ldr	r3, [pc, #248]	; (14750 <hard_fault+0x130>)
   14656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14658:	2b00      	cmp	r3, #0
   1465a:	db17      	blt.n	1468c <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1465c:	4b3c      	ldr	r3, [pc, #240]	; (14750 <hard_fault+0x130>)
   1465e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   14660:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   14664:	d124      	bne.n	146b0 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   14666:	bd70      	pop	{r4, r5, r6, pc}
   14668:	4b36      	ldr	r3, [pc, #216]	; (14744 <hard_fault+0x124>)
   1466a:	4a37      	ldr	r2, [pc, #220]	; (14748 <hard_fault+0x128>)
   1466c:	1a9b      	subs	r3, r3, r2
   1466e:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   14670:	f04f 0100 	mov.w	r1, #0
   14674:	2201      	movs	r2, #1
   14676:	f362 0102 	bfi	r1, r2, #0, #3
   1467a:	f36f 01c5 	bfc	r1, #3, #3
   1467e:	f363 118f 	bfi	r1, r3, #6, #10
   14682:	4834      	ldr	r0, [pc, #208]	; (14754 <hard_fault+0x134>)
   14684:	f7fe fce2 	bl	1304c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14688:	2000      	movs	r0, #0
   1468a:	e7ec      	b.n	14666 <hard_fault+0x46>
   1468c:	4b2d      	ldr	r3, [pc, #180]	; (14744 <hard_fault+0x124>)
   1468e:	4a2e      	ldr	r2, [pc, #184]	; (14748 <hard_fault+0x128>)
   14690:	1a9b      	subs	r3, r3, r2
   14692:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   14694:	f04f 0100 	mov.w	r1, #0
   14698:	2201      	movs	r2, #1
   1469a:	f362 0102 	bfi	r1, r2, #0, #3
   1469e:	f36f 01c5 	bfc	r1, #3, #3
   146a2:	f363 118f 	bfi	r1, r3, #6, #10
   146a6:	482c      	ldr	r0, [pc, #176]	; (14758 <hard_fault+0x138>)
   146a8:	f7fe fcd0 	bl	1304c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   146ac:	4630      	mov	r0, r6
   146ae:	e7da      	b.n	14666 <hard_fault+0x46>
   146b0:	4b24      	ldr	r3, [pc, #144]	; (14744 <hard_fault+0x124>)
   146b2:	4a25      	ldr	r2, [pc, #148]	; (14748 <hard_fault+0x128>)
   146b4:	1a9b      	subs	r3, r3, r2
   146b6:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   146b8:	f04f 0100 	mov.w	r1, #0
   146bc:	2201      	movs	r2, #1
   146be:	f362 0102 	bfi	r1, r2, #0, #3
   146c2:	f36f 01c5 	bfc	r1, #3, #3
   146c6:	f363 118f 	bfi	r1, r3, #6, #10
   146ca:	4824      	ldr	r0, [pc, #144]	; (1475c <hard_fault+0x13c>)
   146cc:	f7fe fcbe 	bl	1304c <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   146d0:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   146d2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   146d6:	f64d 7302 	movw	r3, #57090	; 0xdf02
   146da:	429a      	cmp	r2, r3
   146dc:	d00e      	beq.n	146fc <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
   146de:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   146e2:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   146e6:	781b      	ldrb	r3, [r3, #0]
   146e8:	b9db      	cbnz	r3, 14722 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
   146ea:	4b1d      	ldr	r3, [pc, #116]	; (14760 <hard_fault+0x140>)
   146ec:	781b      	ldrb	r3, [r3, #0]
   146ee:	b9f3      	cbnz	r3, 1472e <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
   146f0:	4b1c      	ldr	r3, [pc, #112]	; (14764 <hard_fault+0x144>)
   146f2:	881b      	ldrh	r3, [r3, #0]
   146f4:	b29b      	uxth	r3, r3
   146f6:	bb03      	cbnz	r3, 1473a <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   146f8:	4630      	mov	r0, r6
	return reason;
   146fa:	e7b4      	b.n	14666 <hard_fault+0x46>
   146fc:	4b11      	ldr	r3, [pc, #68]	; (14744 <hard_fault+0x124>)
   146fe:	4a12      	ldr	r2, [pc, #72]	; (14748 <hard_fault+0x128>)
   14700:	1a9b      	subs	r3, r3, r2
   14702:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   14704:	f04f 0200 	mov.w	r2, #0
   14708:	2101      	movs	r1, #1
   1470a:	f361 0202 	bfi	r2, r1, #0, #3
   1470e:	f36f 02c5 	bfc	r2, #3, #3
   14712:	f363 128f 	bfi	r2, r3, #6, #10
   14716:	6829      	ldr	r1, [r5, #0]
   14718:	4813      	ldr	r0, [pc, #76]	; (14768 <hard_fault+0x148>)
   1471a:	f7fe fc03 	bl	12f24 <log_1>
			reason = esf->basic.r0;
   1471e:	6828      	ldr	r0, [r5, #0]
   14720:	e7a1      	b.n	14666 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
   14722:	4622      	mov	r2, r4
   14724:	2101      	movs	r1, #1
   14726:	4628      	mov	r0, r5
   14728:	f7ff fddc 	bl	142e4 <mem_manage_fault>
   1472c:	e79b      	b.n	14666 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
   1472e:	4622      	mov	r2, r4
   14730:	2101      	movs	r1, #1
   14732:	4628      	mov	r0, r5
   14734:	f7ff fe9c 	bl	14470 <bus_fault>
   14738:	e795      	b.n	14666 <hard_fault+0x46>
			reason = usage_fault(esf);
   1473a:	4628      	mov	r0, r5
   1473c:	f7ff fcec 	bl	14118 <usage_fault>
   14740:	e791      	b.n	14666 <hard_fault+0x46>
   14742:	bf00      	nop
   14744:	00027178 	.word	0x00027178
   14748:	00027108 	.word	0x00027108
   1474c:	0002833c 	.word	0x0002833c
   14750:	e000ed00 	.word	0xe000ed00
   14754:	00028354 	.word	0x00028354
   14758:	00028378 	.word	0x00028378
   1475c:	00028388 	.word	0x00028388
   14760:	e000ed29 	.word	0xe000ed29
   14764:	e000ed2a 	.word	0xe000ed2a
   14768:	000283a8 	.word	0x000283a8

0001476c <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   1476c:	b508      	push	{r3, lr}
   1476e:	460a      	mov	r2, r1
   14770:	480b      	ldr	r0, [pc, #44]	; (147a0 <reserved_exception+0x34>)
   14772:	4b0c      	ldr	r3, [pc, #48]	; (147a4 <reserved_exception+0x38>)
   14774:	1ac0      	subs	r0, r0, r3
   14776:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   14778:	f04f 0300 	mov.w	r3, #0
   1477c:	2101      	movs	r1, #1
   1477e:	f361 0302 	bfi	r3, r1, #0, #3
   14782:	f36f 03c5 	bfc	r3, #3, #3
   14786:	f360 138f 	bfi	r3, r0, #6, #10
   1478a:	2a0f      	cmp	r2, #15
   1478c:	dc05      	bgt.n	1479a <reserved_exception+0x2e>
   1478e:	4906      	ldr	r1, [pc, #24]	; (147a8 <reserved_exception+0x3c>)
   14790:	3a10      	subs	r2, #16
   14792:	4806      	ldr	r0, [pc, #24]	; (147ac <reserved_exception+0x40>)
   14794:	f7fe fbfc 	bl	12f90 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   14798:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   1479a:	4905      	ldr	r1, [pc, #20]	; (147b0 <reserved_exception+0x44>)
   1479c:	e7f8      	b.n	14790 <reserved_exception+0x24>
   1479e:	bf00      	nop
   147a0:	00027178 	.word	0x00027178
   147a4:	00027108 	.word	0x00027108
   147a8:	000283c4 	.word	0x000283c4
   147ac:	000283f8 	.word	0x000283f8
   147b0:	000283dc 	.word	0x000283dc

000147b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   147b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   147b8:	b09d      	sub	sp, #116	; 0x74
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   147ba:	4b35      	ldr	r3, [pc, #212]	; (14890 <z_arm_fault+0xdc>)
   147bc:	685d      	ldr	r5, [r3, #4]
   147be:	f3c5 0508 	ubfx	r5, r5, #0, #9
   147c2:	2300      	movs	r3, #0
   147c4:	f383 8811 	msr	BASEPRI, r3
   147c8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   147cc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   147d0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   147d4:	d12c      	bne.n	14830 <z_arm_fault+0x7c>
   147d6:	4680      	mov	r8, r0
   147d8:	4689      	mov	r9, r1
   147da:	4614      	mov	r4, r2
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   147dc:	f012 0f01 	tst.w	r2, #1
   147e0:	d129      	bne.n	14836 <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   147e2:	f012 0f40 	tst.w	r2, #64	; 0x40
   147e6:	d107      	bne.n	147f8 <z_arm_fault+0x44>
	z_arch_esf_t *ptr_esf = NULL;
   147e8:	2700      	movs	r7, #0
	bool alternative_state_exc = false;
   147ea:	463e      	mov	r6, r7
	if (!alternative_state_exc) {
   147ec:	bb36      	cbnz	r6, 1483c <z_arm_fault+0x88>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   147ee:	f014 0f08 	tst.w	r4, #8
   147f2:	d01a      	beq.n	1482a <z_arm_fault+0x76>
			ptr_esf =  (z_arch_esf_t *)psp;
   147f4:	464f      	mov	r7, r9
   147f6:	e022      	b.n	1483e <z_arm_fault+0x8a>
   147f8:	4b26      	ldr	r3, [pc, #152]	; (14894 <z_arm_fault+0xe0>)
   147fa:	4a27      	ldr	r2, [pc, #156]	; (14898 <z_arm_fault+0xe4>)
   147fc:	1a9b      	subs	r3, r3, r2
   147fe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("Exception occurred in Secure State");
   14800:	f04f 0100 	mov.w	r1, #0
   14804:	2201      	movs	r2, #1
   14806:	f362 0102 	bfi	r1, r2, #0, #3
   1480a:	f36f 01c5 	bfc	r1, #3, #3
   1480e:	f363 118f 	bfi	r1, r3, #6, #10
   14812:	4822      	ldr	r0, [pc, #136]	; (1489c <z_arm_fault+0xe8>)
   14814:	f7fe fc1a 	bl	1304c <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   14818:	f014 0f04 	tst.w	r4, #4
   1481c:	d002      	beq.n	14824 <z_arm_fault+0x70>
			ptr_esf = (z_arch_esf_t *)psp;
   1481e:	464f      	mov	r7, r9
		alternative_state_exc = true;
   14820:	2601      	movs	r6, #1
   14822:	e7e3      	b.n	147ec <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   14824:	4647      	mov	r7, r8
		alternative_state_exc = true;
   14826:	2601      	movs	r6, #1
   14828:	e7e0      	b.n	147ec <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   1482a:	4647      	mov	r7, r8
			*nested_exc = true;
   1482c:	2601      	movs	r6, #1
   1482e:	e006      	b.n	1483e <z_arm_fault+0x8a>
	*nested_exc = false;
   14830:	2600      	movs	r6, #0
		return NULL;
   14832:	4637      	mov	r7, r6
   14834:	e003      	b.n	1483e <z_arm_fault+0x8a>
	*nested_exc = false;
   14836:	2600      	movs	r6, #0
		return NULL;
   14838:	4637      	mov	r7, r6
   1483a:	e000      	b.n	1483e <z_arm_fault+0x8a>
	*nested_exc = false;
   1483c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   1483e:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   14842:	4629      	mov	r1, r5
   14844:	4638      	mov	r0, r7
   14846:	f00e fafc 	bl	22e42 <fault_handle>
   1484a:	4604      	mov	r4, r0
	if (recoverable) {
   1484c:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
   14850:	b113      	cbz	r3, 14858 <z_arm_fault+0xa4>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   14852:	b01d      	add	sp, #116	; 0x74
   14854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14858:	2268      	movs	r2, #104	; 0x68
   1485a:	4639      	mov	r1, r7
   1485c:	a801      	add	r0, sp, #4
   1485e:	f011 fff0 	bl	26842 <memcpy>
	if (nested_exc) {
   14862:	b14e      	cbz	r6, 14878 <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14864:	9b08      	ldr	r3, [sp, #32]
   14866:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1486a:	b95a      	cbnz	r2, 14884 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1486c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14870:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   14874:	9308      	str	r3, [sp, #32]
   14876:	e005      	b.n	14884 <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14878:	9b08      	ldr	r3, [sp, #32]
   1487a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1487e:	f023 0301 	bic.w	r3, r3, #1
   14882:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   14884:	a901      	add	r1, sp, #4
   14886:	4620      	mov	r0, r4
   14888:	f00e faa8 	bl	22ddc <z_arm_fatal_error>
   1488c:	e7e1      	b.n	14852 <z_arm_fault+0x9e>
   1488e:	bf00      	nop
   14890:	e000ed00 	.word	0xe000ed00
   14894:	00027178 	.word	0x00027178
   14898:	00027108 	.word	0x00027108
   1489c:	0002840c 	.word	0x0002840c

000148a0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   148a0:	4b04      	ldr	r3, [pc, #16]	; (148b4 <z_arm_fault_init+0x14>)
   148a2:	695a      	ldr	r2, [r3, #20]
   148a4:	f042 0210 	orr.w	r2, r2, #16
   148a8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   148aa:	695a      	ldr	r2, [r3, #20]
   148ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   148b0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   148b2:	4770      	bx	lr
   148b4:	e000ed00 	.word	0xe000ed00

000148b8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   148b8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   148bc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   148c0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   148c2:	4672      	mov	r2, lr
	bl z_arm_fault
   148c4:	f7ff ff76 	bl	147b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   148c8:	bd01      	pop	{r0, pc}
   148ca:	bf00      	nop

000148cc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   148cc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   148ce:	e006      	b.n	148de <z_arm_interrupt_init+0x12>
   148d0:	f002 010f 	and.w	r1, r2, #15
   148d4:	4b09      	ldr	r3, [pc, #36]	; (148fc <z_arm_interrupt_init+0x30>)
   148d6:	440b      	add	r3, r1
   148d8:	2120      	movs	r1, #32
   148da:	7619      	strb	r1, [r3, #24]
   148dc:	3201      	adds	r2, #1
   148de:	2a40      	cmp	r2, #64	; 0x40
   148e0:	dc0a      	bgt.n	148f8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   148e2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   148e4:	2b00      	cmp	r3, #0
   148e6:	dbf3      	blt.n	148d0 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   148e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   148ec:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   148f0:	2120      	movs	r1, #32
   148f2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   148f6:	e7f1      	b.n	148dc <z_arm_interrupt_init+0x10>
	}
}
   148f8:	4770      	bx	lr
   148fa:	bf00      	nop
   148fc:	e000ecfc 	.word	0xe000ecfc

00014900 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   14900:	f012 fa4e 	bl	26da0 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14904:	2020      	movs	r0, #32
    msr BASEPRI, r0
   14906:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1490a:	4808      	ldr	r0, [pc, #32]	; (1492c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1490c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   14910:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14912:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14916:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1491a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1491c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1491e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14922:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14926:	f7ff fae1 	bl	13eec <z_arm_prep_c>
   1492a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   1492c:	20011808 	.word	0x20011808

00014930 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   14930:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14934:	4905      	ldr	r1, [pc, #20]	; (1494c <sys_arch_reboot+0x1c>)
   14936:	68ca      	ldr	r2, [r1, #12]
   14938:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1493c:	4b04      	ldr	r3, [pc, #16]	; (14950 <sys_arch_reboot+0x20>)
   1493e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14940:	60cb      	str	r3, [r1, #12]
   14942:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14946:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14948:	e7fd      	b.n	14946 <sys_arch_reboot+0x16>
   1494a:	bf00      	nop
   1494c:	e000ed00 	.word	0xe000ed00
   14950:	05fa0004 	.word	0x05fa0004

00014954 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   14954:	b508      	push	{r3, lr}
	if (_current == thread) {
   14956:	4b08      	ldr	r3, [pc, #32]	; (14978 <z_impl_k_thread_abort+0x24>)
   14958:	689b      	ldr	r3, [r3, #8]
   1495a:	4283      	cmp	r3, r0
   1495c:	d002      	beq.n	14964 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   1495e:	f00b fa2b 	bl	1fdb8 <z_thread_abort>
}
   14962:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14964:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14968:	2b00      	cmp	r3, #0
   1496a:	d0f8      	beq.n	1495e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1496c:	4a03      	ldr	r2, [pc, #12]	; (1497c <z_impl_k_thread_abort+0x28>)
   1496e:	6853      	ldr	r3, [r2, #4]
   14970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14974:	6053      	str	r3, [r2, #4]
   14976:	e7f2      	b.n	1495e <z_impl_k_thread_abort+0xa>
   14978:	2000f8a0 	.word	0x2000f8a0
   1497c:	e000ed00 	.word	0xe000ed00

00014980 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   14980:	b510      	push	{r4, lr}
   14982:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14984:	4c09      	ldr	r4, [pc, #36]	; (149ac <z_arm_configure_static_mpu_regions+0x2c>)
   14986:	4623      	mov	r3, r4
   14988:	4a09      	ldr	r2, [pc, #36]	; (149b0 <z_arm_configure_static_mpu_regions+0x30>)
   1498a:	2101      	movs	r1, #1
   1498c:	4809      	ldr	r0, [pc, #36]	; (149b4 <z_arm_configure_static_mpu_regions+0x34>)
   1498e:	f00e fae3 	bl	22f58 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   14992:	2300      	movs	r3, #0
   14994:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   14996:	4b08      	ldr	r3, [pc, #32]	; (149b8 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   14998:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1499a:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1499c:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1499e:	2101      	movs	r1, #1
   149a0:	a801      	add	r0, sp, #4
   149a2:	f00e fadd 	bl	22f60 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   149a6:	b004      	add	sp, #16
   149a8:	bd10      	pop	{r4, pc}
   149aa:	bf00      	nop
   149ac:	20040000 	.word	0x20040000
   149b0:	2000c500 	.word	0x2000c500
   149b4:	00028434 	.word	0x00028434
   149b8:	2000c918 	.word	0x2000c918

000149bc <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
   149bc:	4b01      	ldr	r3, [pc, #4]	; (149c4 <mpu_init+0x8>)
   149be:	4a02      	ldr	r2, [pc, #8]	; (149c8 <mpu_init+0xc>)
   149c0:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
   149c2:	4770      	bx	lr
   149c4:	e000ed90 	.word	0xe000ed90
   149c8:	0044ffaa 	.word	0x0044ffaa

000149cc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   149cc:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   149ce:	680b      	ldr	r3, [r1, #0]
   149d0:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   149d4:	7a0c      	ldrb	r4, [r1, #8]
   149d6:	f004 031f 	and.w	r3, r4, #31
   149da:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   149dc:	68cb      	ldr	r3, [r1, #12]
   149de:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   149e2:	0964      	lsrs	r4, r4, #5
   149e4:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   149e8:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   149ec:	4903      	ldr	r1, [pc, #12]	; (149fc <region_init+0x30>)
   149ee:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   149f0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   149f2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   149f4:	f85d 4b04 	ldr.w	r4, [sp], #4
   149f8:	4770      	bx	lr
   149fa:	bf00      	nop
   149fc:	e000ed90 	.word	0xe000ed90

00014a00 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   14a00:	b510      	push	{r4, lr}
   14a02:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   14a04:	280f      	cmp	r0, #15
   14a06:	d803      	bhi.n	14a10 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   14a08:	f7ff ffe0 	bl	149cc <region_init>

	return index;
   14a0c:	4620      	mov	r0, r4
}
   14a0e:	bd10      	pop	{r4, pc}
   14a10:	4b09      	ldr	r3, [pc, #36]	; (14a38 <region_allocate_and_init+0x38>)
   14a12:	4a0a      	ldr	r2, [pc, #40]	; (14a3c <region_allocate_and_init+0x3c>)
   14a14:	1a9b      	subs	r3, r3, r2
   14a16:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14a18:	f04f 0200 	mov.w	r2, #0
   14a1c:	2101      	movs	r1, #1
   14a1e:	f361 0202 	bfi	r2, r1, #0, #3
   14a22:	f36f 02c5 	bfc	r2, #3, #3
   14a26:	f363 128f 	bfi	r2, r3, #6, #10
   14a2a:	4601      	mov	r1, r0
   14a2c:	4804      	ldr	r0, [pc, #16]	; (14a40 <region_allocate_and_init+0x40>)
   14a2e:	f7fe fa79 	bl	12f24 <log_1>
		return -EINVAL;
   14a32:	f06f 0015 	mvn.w	r0, #21
   14a36:	e7ea      	b.n	14a0e <region_allocate_and_init+0xe>
   14a38:	00027158 	.word	0x00027158
   14a3c:	00027108 	.word	0x00027108
   14a40:	00028440 	.word	0x00028440

00014a44 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a48:	b087      	sub	sp, #28
   14a4a:	4681      	mov	r9, r0
   14a4c:	9100      	str	r1, [sp, #0]
   14a4e:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
   14a50:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
   14a52:	2600      	movs	r6, #0
   14a54:	e05d      	b.n	14b12 <mpu_configure_regions_and_partition+0xce>
   14a56:	4b6c      	ldr	r3, [pc, #432]	; (14c08 <mpu_configure_regions_and_partition+0x1c4>)
   14a58:	4a6c      	ldr	r2, [pc, #432]	; (14c0c <mpu_configure_regions_and_partition+0x1c8>)
   14a5a:	1a9b      	subs	r3, r3, r2
   14a5c:	08db      	lsrs	r3, r3, #3
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14a5e:	f04f 0200 	mov.w	r2, #0
   14a62:	2101      	movs	r1, #1
   14a64:	f361 0202 	bfi	r2, r1, #0, #3
   14a68:	f36f 02c5 	bfc	r2, #3, #3
   14a6c:	f363 128f 	bfi	r2, r3, #6, #10
   14a70:	4631      	mov	r1, r6
   14a72:	4867      	ldr	r0, [pc, #412]	; (14c10 <mpu_configure_regions_and_partition+0x1cc>)
   14a74:	f7fe fa56 	bl	12f24 <log_1>
			return -EINVAL;
   14a78:	f06f 0415 	mvn.w	r4, #21
   14a7c:	e015      	b.n	14aaa <mpu_configure_regions_and_partition+0x66>
	return -EINVAL;
   14a7e:	f06f 0715 	mvn.w	r7, #21
   14a82:	e068      	b.n	14b56 <mpu_configure_regions_and_partition+0x112>
   14a84:	4b60      	ldr	r3, [pc, #384]	; (14c08 <mpu_configure_regions_and_partition+0x1c4>)
   14a86:	4a61      	ldr	r2, [pc, #388]	; (14c0c <mpu_configure_regions_and_partition+0x1c8>)
   14a88:	1a9b      	subs	r3, r3, r2
   14a8a:	08db      	lsrs	r3, r3, #3
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   14a8c:	f04f 0200 	mov.w	r2, #0
   14a90:	2101      	movs	r1, #1
   14a92:	f361 0202 	bfi	r2, r1, #0, #3
   14a96:	f36f 02c5 	bfc	r2, #3, #3
   14a9a:	f363 128f 	bfi	r2, r3, #6, #10
   14a9e:	4639      	mov	r1, r7
   14aa0:	485c      	ldr	r0, [pc, #368]	; (14c14 <mpu_configure_regions_and_partition+0x1d0>)
   14aa2:	f7fe fa3f 	bl	12f24 <log_1>
				u_reg_index);
			return -EINVAL;
   14aa6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   14aaa:	4620      	mov	r0, r4
   14aac:	b007      	add	sp, #28
   14aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i].start == u_reg_base) &&
   14ab2:	45d8      	cmp	r8, fp
   14ab4:	d167      	bne.n	14b86 <mpu_configure_regions_and_partition+0x142>
			mpu_configure_region(u_reg_index, &regions[i]);
   14ab6:	4629      	mov	r1, r5
   14ab8:	b2f8      	uxtb	r0, r7
   14aba:	f00e fa32 	bl	22f22 <mpu_configure_region>
   14abe:	e027      	b.n	14b10 <mpu_configure_regions_and_partition+0xcc>
	MPU->RNR = index;
   14ac0:	4b55      	ldr	r3, [pc, #340]	; (14c18 <mpu_configure_regions_and_partition+0x1d4>)
   14ac2:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14ac4:	68d9      	ldr	r1, [r3, #12]
   14ac6:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
   14aca:	f022 021f 	bic.w	r2, r2, #31
   14ace:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14ad0:	60da      	str	r2, [r3, #12]
				mpu_configure_region(reg_index, &regions[i]);
   14ad2:	4629      	mov	r1, r5
   14ad4:	b2e0      	uxtb	r0, r4
   14ad6:	f00e fa24 	bl	22f22 <mpu_configure_region>
   14ada:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   14adc:	f110 0f16 	cmn.w	r0, #22
   14ae0:	d0e3      	beq.n	14aaa <mpu_configure_regions_and_partition+0x66>
			reg_index++;
   14ae2:	3401      	adds	r4, #1
   14ae4:	e014      	b.n	14b10 <mpu_configure_regions_and_partition+0xcc>
				regions[i].start - 1);
   14ae6:	3b01      	subs	r3, #1
	MPU->RNR = index;
   14ae8:	4a4b      	ldr	r2, [pc, #300]	; (14c18 <mpu_configure_regions_and_partition+0x1d4>)
   14aea:	6090      	str	r0, [r2, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   14aec:	6911      	ldr	r1, [r2, #16]
   14aee:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   14af2:	f023 031f 	bic.w	r3, r3, #31
   14af6:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   14af8:	6113      	str	r3, [r2, #16]
				mpu_configure_region(reg_index, &regions[i]);
   14afa:	4629      	mov	r1, r5
   14afc:	b2e0      	uxtb	r0, r4
   14afe:	f00e fa10 	bl	22f22 <mpu_configure_region>
   14b02:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   14b04:	f110 0f16 	cmn.w	r0, #22
   14b08:	d0cf      	beq.n	14aaa <mpu_configure_regions_and_partition+0x66>
			reg_index++;
   14b0a:	3401      	adds	r4, #1
   14b0c:	e000      	b.n	14b10 <mpu_configure_regions_and_partition+0xcc>
			reg_index++;
   14b0e:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   14b10:	3601      	adds	r6, #1
   14b12:	9b00      	ldr	r3, [sp, #0]
   14b14:	429e      	cmp	r6, r3
   14b16:	dac8      	bge.n	14aaa <mpu_configure_regions_and_partition+0x66>
		if (regions[i].size == 0U) {
   14b18:	eb06 0546 	add.w	r5, r6, r6, lsl #1
   14b1c:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   14b20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   14b24:	f8d5 8004 	ldr.w	r8, [r5, #4]
   14b28:	f1b8 0f00 	cmp.w	r8, #0
   14b2c:	d0f0      	beq.n	14b10 <mpu_configure_regions_and_partition+0xcc>
		if (do_sanity_check &&
   14b2e:	9b01      	ldr	r3, [sp, #4]
   14b30:	b123      	cbz	r3, 14b3c <mpu_configure_regions_and_partition+0xf8>
			(!mpu_partition_is_valid(&regions[i]))) {
   14b32:	4628      	mov	r0, r5
   14b34:	f00e f9e3 	bl	22efe <mpu_partition_is_valid>
		if (do_sanity_check &&
   14b38:	2800      	cmp	r0, #0
   14b3a:	d08c      	beq.n	14a56 <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i].start, regions[i].size);
   14b3c:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14b40:	4658      	mov	r0, fp
   14b42:	f00e f9d2 	bl	22eea <arm_cmse_mpu_region_get>
   14b46:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14b48:	eb08 000b 	add.w	r0, r8, fp
   14b4c:	3801      	subs	r0, #1
   14b4e:	f00e f9cc 	bl	22eea <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   14b52:	4287      	cmp	r7, r0
   14b54:	d193      	bne.n	14a7e <mpu_configure_regions_and_partition+0x3a>
		if ((u_reg_index == -EINVAL) ||
   14b56:	f117 0f16 	cmn.w	r7, #22
   14b5a:	d093      	beq.n	14a84 <mpu_configure_regions_and_partition+0x40>
			(u_reg_index > (reg_index - 1))) {
   14b5c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   14b5e:	42bb      	cmp	r3, r7
   14b60:	db90      	blt.n	14a84 <mpu_configure_regions_and_partition+0x40>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
   14b62:	4638      	mov	r0, r7
	MPU->RNR = index;
   14b64:	4b2c      	ldr	r3, [pc, #176]	; (14c18 <mpu_configure_regions_and_partition+0x1d4>)
   14b66:	609f      	str	r7, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14b68:	68d9      	ldr	r1, [r3, #12]
   14b6a:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
   14b6e:	609f      	str	r7, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   14b70:	691b      	ldr	r3, [r3, #16]
   14b72:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   14b76:	f859 300a 	ldr.w	r3, [r9, sl]
   14b7a:	686a      	ldr	r2, [r5, #4]
   14b7c:	441a      	add	r2, r3
   14b7e:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
   14b82:	4299      	cmp	r1, r3
   14b84:	d095      	beq.n	14ab2 <mpu_configure_regions_and_partition+0x6e>
		} else if (regions[i].start == u_reg_base) {
   14b86:	4299      	cmp	r1, r3
   14b88:	d09a      	beq.n	14ac0 <mpu_configure_regions_and_partition+0x7c>
		} else if (reg_last == u_reg_last) {
   14b8a:	45d8      	cmp	r8, fp
   14b8c:	d0ab      	beq.n	14ae6 <mpu_configure_regions_and_partition+0xa2>
				regions[i].start - 1);
   14b8e:	3b01      	subs	r3, #1
	MPU->RNR = index;
   14b90:	4a21      	ldr	r2, [pc, #132]	; (14c18 <mpu_configure_regions_and_partition+0x1d4>)
   14b92:	4607      	mov	r7, r0
   14b94:	6090      	str	r0, [r2, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   14b96:	6911      	ldr	r1, [r2, #16]
   14b98:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   14b9c:	f023 031f 	bic.w	r3, r3, #31
   14ba0:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   14ba2:	6113      	str	r3, [r2, #16]
				mpu_configure_region(reg_index, &regions[i]);
   14ba4:	4629      	mov	r1, r5
   14ba6:	b2e0      	uxtb	r0, r4
   14ba8:	f00e f9bb 	bl	22f22 <mpu_configure_region>
   14bac:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   14bae:	f110 0f16 	cmn.w	r0, #22
   14bb2:	f43f af7a 	beq.w	14aaa <mpu_configure_regions_and_partition+0x66>
			reg_index++;
   14bb6:	3001      	adds	r0, #1
	MPU->RNR = index;
   14bb8:	4b17      	ldr	r3, [pc, #92]	; (14c18 <mpu_configure_regions_and_partition+0x1d4>)
   14bba:	609f      	str	r7, [r3, #8]
	attr->rbar = MPU->RBAR &
   14bbc:	68d9      	ldr	r1, [r3, #12]
   14bbe:	f89d 2010 	ldrb.w	r2, [sp, #16]
   14bc2:	f361 0204 	bfi	r2, r1, #0, #5
   14bc6:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14bca:	691b      	ldr	r3, [r3, #16]
   14bcc:	f3c3 0342 	ubfx	r3, r3, #1, #3
   14bd0:	b2d2      	uxtb	r2, r2
   14bd2:	f363 1247 	bfi	r2, r3, #5, #3
   14bd6:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
   14bda:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
   14bde:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   14be0:	4413      	add	r3, r2
   14be2:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   14be4:	f023 031f 	bic.w	r3, r3, #31
   14be8:	eba8 080b 	sub.w	r8, r8, fp
   14bec:	4443      	add	r3, r8
   14bee:	3b01      	subs	r3, #1
   14bf0:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   14bf4:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
   14bf6:	a902      	add	r1, sp, #8
   14bf8:	b2c0      	uxtb	r0, r0
   14bfa:	f7ff ff01 	bl	14a00 <region_allocate_and_init>
   14bfe:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   14c00:	f110 0f16 	cmn.w	r0, #22
   14c04:	d183      	bne.n	14b0e <mpu_configure_regions_and_partition+0xca>
   14c06:	e750      	b.n	14aaa <mpu_configure_regions_and_partition+0x66>
   14c08:	00027158 	.word	0x00027158
   14c0c:	00027108 	.word	0x00027108
   14c10:	00028468 	.word	0x00028468
   14c14:	0002848c 	.word	0x0002848c
   14c18:	e000ed90 	.word	0xe000ed90

00014c1c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   14c1c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   14c1e:	4c03      	ldr	r4, [pc, #12]	; (14c2c <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   14c20:	2301      	movs	r3, #1
   14c22:	7822      	ldrb	r2, [r4, #0]
   14c24:	f7ff ff0e 	bl	14a44 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14c28:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   14c2a:	bd10      	pop	{r4, pc}
   14c2c:	2000f901 	.word	0x2000f901

00014c30 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   14c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14c34:	4607      	mov	r7, r0
   14c36:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14c38:	2400      	movs	r4, #0
   14c3a:	e003      	b.n	14c44 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
   14c3c:	f06f 0515 	mvn.w	r5, #21
   14c40:	e017      	b.n	14c72 <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14c42:	3401      	adds	r4, #1
   14c44:	45a0      	cmp	r8, r4
   14c46:	dd3c      	ble.n	14cc2 <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
   14c48:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14c4c:	009a      	lsls	r2, r3, #2
   14c4e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   14c52:	685e      	ldr	r6, [r3, #4]
   14c54:	2e00      	cmp	r6, #0
   14c56:	d0f4      	beq.n	14c42 <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   14c58:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14c5c:	4648      	mov	r0, r9
   14c5e:	f00e f944 	bl	22eea <arm_cmse_mpu_region_get>
   14c62:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14c64:	eb06 0009 	add.w	r0, r6, r9
   14c68:	3801      	subs	r0, #1
   14c6a:	f00e f93e 	bl	22eea <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   14c6e:	4285      	cmp	r5, r0
   14c70:	d1e4      	bne.n	14c3c <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
   14c72:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14c76:	4a16      	ldr	r2, [pc, #88]	; (14cd0 <mpu_mark_areas_for_dynamic_regions+0xa0>)
   14c78:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   14c7c:	f115 0f16 	cmn.w	r5, #22
   14c80:	d020      	beq.n	14cc4 <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   14c82:	4b14      	ldr	r3, [pc, #80]	; (14cd4 <mpu_mark_areas_for_dynamic_regions+0xa4>)
   14c84:	781b      	ldrb	r3, [r3, #0]
   14c86:	42ab      	cmp	r3, r5
   14c88:	dd1f      	ble.n	14cca <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   14c8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14c8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
   14c92:	4a11      	ldr	r2, [pc, #68]	; (14cd8 <mpu_mark_areas_for_dynamic_regions+0xa8>)
   14c94:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
   14c96:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
   14c98:	68d5      	ldr	r5, [r2, #12]
   14c9a:	7b18      	ldrb	r0, [r3, #12]
   14c9c:	f365 0004 	bfi	r0, r5, #0, #5
   14ca0:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14ca2:	6910      	ldr	r0, [r2, #16]
   14ca4:	f3c0 0042 	ubfx	r0, r0, #1, #3
   14ca8:	7b1d      	ldrb	r5, [r3, #12]
   14caa:	f360 1547 	bfi	r5, r0, #5, #3
   14cae:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   14cb0:	68d1      	ldr	r1, [r2, #12]
   14cb2:	f021 011f 	bic.w	r1, r1, #31
   14cb6:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   14cb8:	6912      	ldr	r2, [r2, #16]
   14cba:	f022 021f 	bic.w	r2, r2, #31
   14cbe:	611a      	str	r2, [r3, #16]
}
   14cc0:	e7bf      	b.n	14c42 <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   14cc2:	2500      	movs	r5, #0
}
   14cc4:	4628      	mov	r0, r5
   14cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   14cca:	f06f 0515 	mvn.w	r5, #21
   14cce:	e7f9      	b.n	14cc4 <mpu_mark_areas_for_dynamic_regions+0x94>
   14cd0:	2000e30c 	.word	0x2000e30c
   14cd4:	2000f901 	.word	0x2000f901
   14cd8:	e000ed90 	.word	0xe000ed90

00014cdc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14cdc:	4b03      	ldr	r3, [pc, #12]	; (14cec <arm_core_mpu_enable+0x10>)
   14cde:	2205      	movs	r2, #5
   14ce0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   14ce2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14ce6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14cea:	4770      	bx	lr
   14cec:	e000ed90 	.word	0xe000ed90

00014cf0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14cf0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14cf4:	4b01      	ldr	r3, [pc, #4]	; (14cfc <arm_core_mpu_disable+0xc>)
   14cf6:	2200      	movs	r2, #0
   14cf8:	605a      	str	r2, [r3, #4]
}
   14cfa:	4770      	bx	lr
   14cfc:	e000ed90 	.word	0xe000ed90

00014d00 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   14d00:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14d02:	4b0e      	ldr	r3, [pc, #56]	; (14d3c <z_arm_mpu_init+0x3c>)
   14d04:	681d      	ldr	r5, [r3, #0]
   14d06:	2d10      	cmp	r5, #16
   14d08:	d815      	bhi.n	14d36 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   14d0a:	f7ff fff1 	bl	14cf0 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   14d0e:	f7ff fe55 	bl	149bc <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14d12:	2400      	movs	r4, #0
   14d14:	42a5      	cmp	r5, r4
   14d16:	d908      	bls.n	14d2a <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   14d18:	4b08      	ldr	r3, [pc, #32]	; (14d3c <z_arm_mpu_init+0x3c>)
   14d1a:	6859      	ldr	r1, [r3, #4]
   14d1c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   14d20:	4620      	mov	r0, r4
   14d22:	f7ff fe53 	bl	149cc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14d26:	3401      	adds	r4, #1
   14d28:	e7f4      	b.n	14d14 <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14d2a:	4b05      	ldr	r3, [pc, #20]	; (14d40 <z_arm_mpu_init+0x40>)
   14d2c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   14d2e:	f7ff ffd5 	bl	14cdc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   14d32:	2000      	movs	r0, #0
}
   14d34:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   14d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d3a:	e7fb      	b.n	14d34 <z_arm_mpu_init+0x34>
   14d3c:	000284e0 	.word	0x000284e0
   14d40:	2000f901 	.word	0x2000f901

00014d44 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14d44:	4b01      	ldr	r3, [pc, #4]	; (14d4c <__stdout_hook_install+0x8>)
   14d46:	6018      	str	r0, [r3, #0]
}
   14d48:	4770      	bx	lr
   14d4a:	bf00      	nop
   14d4c:	2000c5e8 	.word	0x2000c5e8

00014d50 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   14d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d52:	4605      	mov	r5, r0
   14d54:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   14d56:	2400      	movs	r4, #0
   14d58:	e004      	b.n	14d64 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   14d5a:	4b09      	ldr	r3, [pc, #36]	; (14d80 <z_impl_zephyr_write_stdout+0x30>)
   14d5c:	681b      	ldr	r3, [r3, #0]
   14d5e:	7830      	ldrb	r0, [r6, #0]
   14d60:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   14d62:	3401      	adds	r4, #1
   14d64:	42bc      	cmp	r4, r7
   14d66:	da08      	bge.n	14d7a <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   14d68:	192e      	adds	r6, r5, r4
   14d6a:	5d2b      	ldrb	r3, [r5, r4]
   14d6c:	2b0a      	cmp	r3, #10
   14d6e:	d1f4      	bne.n	14d5a <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   14d70:	4b03      	ldr	r3, [pc, #12]	; (14d80 <z_impl_zephyr_write_stdout+0x30>)
   14d72:	681b      	ldr	r3, [r3, #0]
   14d74:	200d      	movs	r0, #13
   14d76:	4798      	blx	r3
   14d78:	e7ef      	b.n	14d5a <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   14d7a:	4638      	mov	r0, r7
   14d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d7e:	bf00      	nop
   14d80:	2000c5e8 	.word	0x2000c5e8

00014d84 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   14d84:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   14d86:	4b08      	ldr	r3, [pc, #32]	; (14da8 <_sbrk+0x24>)
   14d88:	6819      	ldr	r1, [r3, #0]
   14d8a:	4b08      	ldr	r3, [pc, #32]	; (14dac <_sbrk+0x28>)
   14d8c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   14d8e:	440a      	add	r2, r1
   14d90:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   14d94:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   14d98:	429a      	cmp	r2, r3
   14d9a:	d202      	bcs.n	14da2 <_sbrk+0x1e>
		heap_sz += count;
   14d9c:	4b02      	ldr	r3, [pc, #8]	; (14da8 <_sbrk+0x24>)
   14d9e:	601a      	str	r2, [r3, #0]
		ret = ptr;
   14da0:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   14da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
   14da6:	4770      	bx	lr
   14da8:	2000e320 	.word	0x2000e320
   14dac:	20012d28 	.word	0x20012d28

00014db0 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   14db0:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
   14db2:	221d      	movs	r2, #29
   14db4:	4904      	ldr	r1, [pc, #16]	; (14dc8 <__chk_fail+0x18>)
   14db6:	2002      	movs	r0, #2
   14db8:	f00e f8db 	bl	22f72 <_write>
	k_oops();
   14dbc:	4040      	eors	r0, r0
   14dbe:	f380 8811 	msr	BASEPRI, r0
   14dc2:	f04f 0003 	mov.w	r0, #3
   14dc6:	df02      	svc	2
	CODE_UNREACHABLE;
   14dc8:	000284b0 	.word	0x000284b0

00014dcc <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   14dcc:	b538      	push	{r3, r4, r5, lr}
   14dce:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   14dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14dd8:	4820      	ldr	r0, [pc, #128]	; (14e5c <net_if_up+0x90>)
   14dda:	f00a f92d 	bl	1f038 <z_impl_k_mutex_lock>
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
	if (iface == NULL) {
   14dde:	b134      	cbz	r4, 14dee <net_if_up+0x22>
		return false;
	}

	return atomic_test_bit(iface->if_dev->flags, value);
   14de0:	6823      	ldr	r3, [r4, #0]
   14de2:	330c      	adds	r3, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14de4:	e8d3 3faf 	lda	r3, [r3]

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   14de8:	f013 0f01 	tst.w	r3, #1
   14dec:	d132      	bne.n	14e54 <net_if_up+0x88>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   14dee:	6823      	ldr	r3, [r4, #0]
   14df0:	7e9a      	ldrb	r2, [r3, #26]
		status = -EALREADY;
		goto out;
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   14df2:	b9e2      	cbnz	r2, 14e2e <net_if_up+0x62>
	if (!iface || !iface->if_dev) {
   14df4:	b334      	cbz	r4, 14e44 <net_if_up+0x78>
   14df6:	b33b      	cbz	r3, 14e48 <net_if_up+0x7c>
	return iface->if_dev->l2;
   14df8:	685b      	ldr	r3, [r3, #4]
		net_if_flag_set(iface, NET_IF_UP);
		goto notify;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   14dfa:	b33b      	cbz	r3, 14e4c <net_if_up+0x80>
   14dfc:	689b      	ldr	r3, [r3, #8]
   14dfe:	b33b      	cbz	r3, 14e50 <net_if_up+0x84>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = net_if_l2(iface)->enable(iface, true);
   14e00:	2101      	movs	r1, #1
   14e02:	4620      	mov	r0, r4
   14e04:	4798      	blx	r3
	if (status < 0) {
   14e06:	1e05      	subs	r5, r0, #0
   14e08:	db0c      	blt.n	14e24 <net_if_up+0x58>
	atomic_set_bit(iface->if_dev->flags, value);
   14e0a:	6823      	ldr	r3, [r4, #0]
   14e0c:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14e0e:	e8d3 2fef 	ldaex	r2, [r3]
   14e12:	f042 0201 	orr.w	r2, r2, #1
   14e16:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14e1a:	2900      	cmp	r1, #0
   14e1c:	d1f7      	bne.n	14e0e <net_if_up+0x42>
	net_if_flag_set(iface, NET_IF_UP);

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   14e1e:	4620      	mov	r0, r4
   14e20:	f00e f8c8 	bl	22fb4 <l2_flags_get>
	return z_impl_k_mutex_unlock(mutex);
   14e24:	480d      	ldr	r0, [pc, #52]	; (14e5c <net_if_up+0x90>)
   14e26:	f00a f991 	bl	1f14c <z_impl_k_mutex_unlock>

out:
	k_mutex_unlock(&lock);

	return status;
}
   14e2a:	4628      	mov	r0, r5
   14e2c:	bd38      	pop	{r3, r4, r5, pc}
   14e2e:	330c      	adds	r3, #12
   14e30:	e8d3 2fef 	ldaex	r2, [r3]
   14e34:	f042 0201 	orr.w	r2, r2, #1
   14e38:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14e3c:	2900      	cmp	r1, #0
   14e3e:	d1f7      	bne.n	14e30 <net_if_up+0x64>
	int status = 0;
   14e40:	2500      	movs	r5, #0
		goto notify;
   14e42:	e7ef      	b.n	14e24 <net_if_up+0x58>
	int status = 0;
   14e44:	2500      	movs	r5, #0
   14e46:	e7e0      	b.n	14e0a <net_if_up+0x3e>
   14e48:	2500      	movs	r5, #0
   14e4a:	e7de      	b.n	14e0a <net_if_up+0x3e>
   14e4c:	2500      	movs	r5, #0
   14e4e:	e7dc      	b.n	14e0a <net_if_up+0x3e>
   14e50:	2500      	movs	r5, #0
   14e52:	e7da      	b.n	14e0a <net_if_up+0x3e>
		status = -EALREADY;
   14e54:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14e58:	e7e4      	b.n	14e24 <net_if_up+0x58>
   14e5a:	bf00      	nop
   14e5c:	2000c854 	.word	0x2000c854

00014e60 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   14e60:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   14e62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e6a:	480c      	ldr	r0, [pc, #48]	; (14e9c <net_if_init+0x3c>)
   14e6c:	f00a f8e4 	bl	1f038 <z_impl_k_mutex_lock>

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   14e70:	4c0b      	ldr	r4, [pc, #44]	; (14ea0 <net_if_init+0x40>)
   14e72:	e000      	b.n	14e76 <net_if_init+0x16>
   14e74:	3404      	adds	r4, #4
   14e76:	4b0b      	ldr	r3, [pc, #44]	; (14ea4 <net_if_init+0x44>)
   14e78:	429c      	cmp	r4, r3
   14e7a:	d20a      	bcs.n	14e92 <net_if_init+0x32>
	return iface->if_dev->dev;
   14e7c:	6823      	ldr	r3, [r4, #0]
   14e7e:	681b      	ldr	r3, [r3, #0]
	const struct net_if_api *api = net_if_get_device(iface)->api;
   14e80:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   14e82:	2b00      	cmp	r3, #0
   14e84:	d0f6      	beq.n	14e74 <net_if_init+0x14>
   14e86:	681b      	ldr	r3, [r3, #0]
   14e88:	2b00      	cmp	r3, #0
   14e8a:	d0f3      	beq.n	14e74 <net_if_init+0x14>
	api->init(iface);
   14e8c:	4620      	mov	r0, r4
   14e8e:	4798      	blx	r3
   14e90:	e7f0      	b.n	14e74 <net_if_init+0x14>
	return z_impl_k_mutex_unlock(mutex);
   14e92:	4802      	ldr	r0, [pc, #8]	; (14e9c <net_if_init+0x3c>)
   14e94:	f00a f95a 	bl	1f14c <z_impl_k_mutex_unlock>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   14e98:	bd10      	pop	{r4, pc}
   14e9a:	bf00      	nop
   14e9c:	2000c854 	.word	0x2000c854
   14ea0:	2000c8f4 	.word	0x2000c8f4
   14ea4:	2000c8f8 	.word	0x2000c8f8

00014ea8 <net_if_post_init>:

void net_if_post_init(void)
{
   14ea8:	b510      	push	{r4, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   14eaa:	4c0a      	ldr	r4, [pc, #40]	; (14ed4 <net_if_post_init+0x2c>)
   14eac:	e003      	b.n	14eb6 <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
   14eae:	4620      	mov	r0, r4
   14eb0:	f7ff ff8c 	bl	14dcc <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   14eb4:	3404      	adds	r4, #4
   14eb6:	4b08      	ldr	r3, [pc, #32]	; (14ed8 <net_if_post_init+0x30>)
   14eb8:	429c      	cmp	r4, r3
   14eba:	d20a      	bcs.n	14ed2 <net_if_post_init+0x2a>
	if (iface == NULL) {
   14ebc:	2c00      	cmp	r4, #0
   14ebe:	d0f6      	beq.n	14eae <net_if_post_init+0x6>
	return atomic_test_bit(iface->if_dev->flags, value);
   14ec0:	6823      	ldr	r3, [r4, #0]
   14ec2:	330c      	adds	r3, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14ec4:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14ec8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   14ecc:	2b00      	cmp	r3, #0
   14ece:	d1f1      	bne.n	14eb4 <net_if_post_init+0xc>
   14ed0:	e7ed      	b.n	14eae <net_if_post_init+0x6>
		}
	}
}
   14ed2:	bd10      	pop	{r4, pc}
   14ed4:	2000c8f4 	.word	0x2000c8f4
   14ed8:	2000c8f8 	.word	0x2000c8f8

00014edc <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   14edc:	4b07      	ldr	r3, [pc, #28]	; (14efc <adc_context_start_sampling+0x20>)
   14ede:	2201      	movs	r2, #1
   14ee0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   14ee4:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
   14ee8:	b113      	cbz	r3, 14ef0 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14eea:	4b05      	ldr	r3, [pc, #20]	; (14f00 <adc_context_start_sampling+0x24>)
   14eec:	601a      	str	r2, [r3, #0]
}
   14eee:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ef0:	2301      	movs	r3, #1
   14ef2:	4a02      	ldr	r2, [pc, #8]	; (14efc <adc_context_start_sampling+0x20>)
   14ef4:	6013      	str	r3, [r2, #0]
   14ef6:	3204      	adds	r2, #4
   14ef8:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   14efa:	4770      	bx	lr
   14efc:	4000e000 	.word	0x4000e000
   14f00:	4000e00c 	.word	0x4000e00c

00014f04 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
   14f04:	b949      	cbnz	r1, 14f1a <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   14f06:	4b05      	ldr	r3, [pc, #20]	; (14f1c <adc_context_update_buffer_pointer+0x18>)
   14f08:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
   14f0c:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   14f10:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   14f12:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   14f16:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
   14f1a:	4770      	bx	lr
   14f1c:	4000e000 	.word	0x4000e000

00014f20 <adc_nrfx_channel_setup>:
{
   14f20:	b530      	push	{r4, r5, lr}
   14f22:	b083      	sub	sp, #12
	nrf_saadc_channel_config_t config = {
   14f24:	2300      	movs	r3, #0
   14f26:	9300      	str	r3, [sp, #0]
   14f28:	f8cd 3003 	str.w	r3, [sp, #3]
	uint8_t channel_id = channel_cfg->channel_id;
   14f2c:	790a      	ldrb	r2, [r1, #4]
   14f2e:	f002 021f 	and.w	r2, r2, #31
	if (channel_id >= SAADC_CH_NUM) {
   14f32:	2a07      	cmp	r2, #7
   14f34:	f200 80ea 	bhi.w	1510c <adc_nrfx_channel_setup+0x1ec>
	switch (channel_cfg->gain) {
   14f38:	780b      	ldrb	r3, [r1, #0]
   14f3a:	2b09      	cmp	r3, #9
   14f3c:	d856      	bhi.n	14fec <adc_nrfx_channel_setup+0xcc>
   14f3e:	e8df f003 	tbb	[pc, r3]
   14f42:	3905      	.short	0x3905
   14f44:	5545413d 	.word	0x5545413d
   14f48:	51554d49 	.word	0x51554d49
		config.gain = NRF_SAADC_GAIN1_6;
   14f4c:	2300      	movs	r3, #0
   14f4e:	f88d 3002 	strb.w	r3, [sp, #2]
	switch (channel_cfg->reference) {
   14f52:	784b      	ldrb	r3, [r1, #1]
   14f54:	2b03      	cmp	r3, #3
   14f56:	d05c      	beq.n	15012 <adc_nrfx_channel_setup+0xf2>
   14f58:	2b04      	cmp	r3, #4
   14f5a:	d15e      	bne.n	1501a <adc_nrfx_channel_setup+0xfa>
		config.reference = NRF_SAADC_REFERENCE_INTERNAL;
   14f5c:	2300      	movs	r3, #0
   14f5e:	f88d 3003 	strb.w	r3, [sp, #3]
	switch (channel_cfg->acquisition_time) {
   14f62:	884b      	ldrh	r3, [r1, #2]
   14f64:	2b00      	cmp	r3, #0
   14f66:	f000 80ae 	beq.w	150c6 <adc_nrfx_channel_setup+0x1a6>
   14f6a:	f244 0028 	movw	r0, #16424	; 0x4028
   14f6e:	4283      	cmp	r3, r0
   14f70:	f200 80b9 	bhi.w	150e6 <adc_nrfx_channel_setup+0x1c6>
   14f74:	f244 0003 	movw	r0, #16387	; 0x4003
   14f78:	4283      	cmp	r3, r0
   14f7a:	f0c0 80b4 	bcc.w	150e6 <adc_nrfx_channel_setup+0x1c6>
   14f7e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
   14f82:	3b03      	subs	r3, #3
   14f84:	2b25      	cmp	r3, #37	; 0x25
   14f86:	f200 80ae 	bhi.w	150e6 <adc_nrfx_channel_setup+0x1c6>
   14f8a:	e8df f003 	tbb	[pc, r3]
   14f8e:	ac59      	.short	0xac59
   14f90:	acacac98 	.word	0xacacac98
   14f94:	acac9cac 	.word	0xacac9cac
   14f98:	aca0acac 	.word	0xaca0acac
   14f9c:	a4acacac 	.word	0xa4acacac
   14fa0:	acacacac 	.word	0xacacacac
   14fa4:	acacacac 	.word	0xacacacac
   14fa8:	acacacac 	.word	0xacacacac
   14fac:	acacacac 	.word	0xacacacac
   14fb0:	a8acacac 	.word	0xa8acacac
		config.gain = NRF_SAADC_GAIN1_5;
   14fb4:	2301      	movs	r3, #1
   14fb6:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   14fba:	e7ca      	b.n	14f52 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_4;
   14fbc:	2302      	movs	r3, #2
   14fbe:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   14fc2:	e7c6      	b.n	14f52 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_3;
   14fc4:	2303      	movs	r3, #3
   14fc6:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   14fca:	e7c2      	b.n	14f52 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_2;
   14fcc:	2304      	movs	r3, #4
   14fce:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   14fd2:	e7be      	b.n	14f52 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1;
   14fd4:	2305      	movs	r3, #5
   14fd6:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   14fda:	e7ba      	b.n	14f52 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN2;
   14fdc:	2306      	movs	r3, #6
   14fde:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   14fe2:	e7b6      	b.n	14f52 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN4;
   14fe4:	2307      	movs	r3, #7
   14fe6:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   14fea:	e7b2      	b.n	14f52 <adc_nrfx_channel_setup+0x32>
   14fec:	4b49      	ldr	r3, [pc, #292]	; (15114 <adc_nrfx_channel_setup+0x1f4>)
   14fee:	4a4a      	ldr	r2, [pc, #296]	; (15118 <adc_nrfx_channel_setup+0x1f8>)
   14ff0:	1a9b      	subs	r3, r3, r2
   14ff2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Selected ADC gain is not valid");
   14ff4:	f04f 0100 	mov.w	r1, #0
   14ff8:	2201      	movs	r2, #1
   14ffa:	f362 0102 	bfi	r1, r2, #0, #3
   14ffe:	f36f 01c5 	bfc	r1, #3, #3
   15002:	f363 118f 	bfi	r1, r3, #6, #10
   15006:	4845      	ldr	r0, [pc, #276]	; (1511c <adc_nrfx_channel_setup+0x1fc>)
   15008:	f7fe f820 	bl	1304c <log_0>
		return -EINVAL;
   1500c:	f06f 0015 	mvn.w	r0, #21
   15010:	e053      	b.n	150ba <adc_nrfx_channel_setup+0x19a>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   15012:	2301      	movs	r3, #1
   15014:	f88d 3003 	strb.w	r3, [sp, #3]
		break;
   15018:	e7a3      	b.n	14f62 <adc_nrfx_channel_setup+0x42>
   1501a:	4b3e      	ldr	r3, [pc, #248]	; (15114 <adc_nrfx_channel_setup+0x1f4>)
   1501c:	4a3e      	ldr	r2, [pc, #248]	; (15118 <adc_nrfx_channel_setup+0x1f8>)
   1501e:	1a9b      	subs	r3, r3, r2
   15020:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Selected ADC reference is not valid");
   15022:	f04f 0100 	mov.w	r1, #0
   15026:	2201      	movs	r2, #1
   15028:	f362 0102 	bfi	r1, r2, #0, #3
   1502c:	f36f 01c5 	bfc	r1, #3, #3
   15030:	f363 118f 	bfi	r1, r3, #6, #10
   15034:	483a      	ldr	r0, [pc, #232]	; (15120 <adc_nrfx_channel_setup+0x200>)
   15036:	f7fe f809 	bl	1304c <log_0>
		return -EINVAL;
   1503a:	f06f 0015 	mvn.w	r0, #21
   1503e:	e03c      	b.n	150ba <adc_nrfx_channel_setup+0x19a>
		config.acq_time = NRF_SAADC_ACQTIME_3US;
   15040:	2300      	movs	r3, #0
   15042:	f88d 3004 	strb.w	r3, [sp, #4]
	config.mode = (channel_cfg->differential ?
   15046:	790c      	ldrb	r4, [r1, #4]
NRF_STATIC_INLINE void nrf_saadc_channel_init(NRF_SAADC_Type *                   p_reg,
                                              uint8_t                            channel,
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
   15048:	f89d 3000 	ldrb.w	r3, [sp]
   1504c:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
   15050:	f89d 0001 	ldrb.w	r0, [sp, #1]
   15054:	0100      	lsls	r0, r0, #4
   15056:	f000 0030 	and.w	r0, r0, #48	; 0x30
   1505a:	4303      	orrs	r3, r0
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1505c:	f89d 0002 	ldrb.w	r0, [sp, #2]
   15060:	0200      	lsls	r0, r0, #8
   15062:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
   15066:	4303      	orrs	r3, r0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
   15068:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1506c:	0300      	lsls	r0, r0, #12
   1506e:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
   15072:	4303      	orrs	r3, r0
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
   15074:	f89d 0004 	ldrb.w	r0, [sp, #4]
   15078:	0400      	lsls	r0, r0, #16
   1507a:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
   1507e:	4303      	orrs	r3, r0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   15080:	f3c4 1440 	ubfx	r4, r4, #5, #1
   15084:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
   15088:	f89d 0006 	ldrb.w	r0, [sp, #6]
   1508c:	0600      	lsls	r0, r0, #24
   1508e:	f000 7080 	and.w	r0, r0, #16777216	; 0x1000000
   15092:	4303      	orrs	r3, r0
    p_reg->CH[channel].CONFIG =
   15094:	4c23      	ldr	r4, [pc, #140]	; (15124 <adc_nrfx_channel_setup+0x204>)
   15096:	eb04 1002 	add.w	r0, r4, r2, lsl #4
   1509a:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
				    channel_cfg->input_negative);
   1509e:	7988      	ldrb	r0, [r1, #6]
    p_reg->CH[channel].PSELN = pseln;
   150a0:	f102 0351 	add.w	r3, r2, #81	; 0x51
   150a4:	011d      	lsls	r5, r3, #4
   150a6:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   150aa:	6058      	str	r0, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
   150ac:	2000      	movs	r0, #0
   150ae:	5160      	str	r0, [r4, r5]
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   150b0:	7949      	ldrb	r1, [r1, #5]
   150b2:	4b1d      	ldr	r3, [pc, #116]	; (15128 <adc_nrfx_channel_setup+0x208>)
   150b4:	441a      	add	r2, r3
   150b6:	f882 10a8 	strb.w	r1, [r2, #168]	; 0xa8
}
   150ba:	b003      	add	sp, #12
   150bc:	bd30      	pop	{r4, r5, pc}
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   150be:	2301      	movs	r3, #1
   150c0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   150c4:	e7bf      	b.n	15046 <adc_nrfx_channel_setup+0x126>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   150c6:	2302      	movs	r3, #2
   150c8:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   150cc:	e7bb      	b.n	15046 <adc_nrfx_channel_setup+0x126>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   150ce:	2303      	movs	r3, #3
   150d0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   150d4:	e7b7      	b.n	15046 <adc_nrfx_channel_setup+0x126>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   150d6:	2304      	movs	r3, #4
   150d8:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   150dc:	e7b3      	b.n	15046 <adc_nrfx_channel_setup+0x126>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   150de:	2305      	movs	r3, #5
   150e0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   150e4:	e7af      	b.n	15046 <adc_nrfx_channel_setup+0x126>
   150e6:	4b0b      	ldr	r3, [pc, #44]	; (15114 <adc_nrfx_channel_setup+0x1f4>)
   150e8:	4a0b      	ldr	r2, [pc, #44]	; (15118 <adc_nrfx_channel_setup+0x1f8>)
   150ea:	1a9b      	subs	r3, r3, r2
   150ec:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Selected ADC acquisition time is not valid");
   150ee:	f04f 0100 	mov.w	r1, #0
   150f2:	2201      	movs	r2, #1
   150f4:	f362 0102 	bfi	r1, r2, #0, #3
   150f8:	f36f 01c5 	bfc	r1, #3, #3
   150fc:	f363 118f 	bfi	r1, r3, #6, #10
   15100:	480a      	ldr	r0, [pc, #40]	; (1512c <adc_nrfx_channel_setup+0x20c>)
   15102:	f7fd ffa3 	bl	1304c <log_0>
		return -EINVAL;
   15106:	f06f 0015 	mvn.w	r0, #21
   1510a:	e7d6      	b.n	150ba <adc_nrfx_channel_setup+0x19a>
		return -EINVAL;
   1510c:	f06f 0015 	mvn.w	r0, #21
   15110:	e7d3      	b.n	150ba <adc_nrfx_channel_setup+0x19a>
   15112:	bf00      	nop
   15114:	00027108 	.word	0x00027108
   15118:	00027108 	.word	0x00027108
   1511c:	00028510 	.word	0x00028510
   15120:	00028530 	.word	0x00028530
   15124:	4000e000 	.word	0x4000e000
   15128:	2000c500 	.word	0x2000c500
   1512c:	00028554 	.word	0x00028554

00015130 <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
   15130:	b508      	push	{r3, lr}
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
   15132:	7c01      	ldrb	r1, [r0, #16]
   15134:	f1a1 0308 	sub.w	r3, r1, #8
   15138:	2b06      	cmp	r3, #6
   1513a:	d80d      	bhi.n	15158 <set_resolution+0x28>
   1513c:	e8df f003 	tbb	[pc, r3]
   15140:	0c210c1f 	.word	0x0c210c1f
   15144:	0c04      	.short	0x0c04
   15146:	0a          	.byte	0x0a
   15147:	00          	.byte	0x00
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   15148:	2202      	movs	r2, #2
    p_reg->RESOLUTION = resolution;
   1514a:	4b0f      	ldr	r3, [pc, #60]	; (15188 <set_resolution+0x58>)
   1514c:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
   15150:	2000      	movs	r0, #0
}
   15152:	bd08      	pop	{r3, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   15154:	2203      	movs	r2, #3
		break;
   15156:	e7f8      	b.n	1514a <set_resolution+0x1a>
   15158:	4b0c      	ldr	r3, [pc, #48]	; (1518c <set_resolution+0x5c>)
   1515a:	4a0d      	ldr	r2, [pc, #52]	; (15190 <set_resolution+0x60>)
   1515c:	1a9b      	subs	r3, r3, r2
   1515e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("ADC resolution value %d is not valid",
   15160:	f04f 0200 	mov.w	r2, #0
   15164:	2001      	movs	r0, #1
   15166:	f360 0202 	bfi	r2, r0, #0, #3
   1516a:	f36f 02c5 	bfc	r2, #3, #3
   1516e:	f363 128f 	bfi	r2, r3, #6, #10
   15172:	4808      	ldr	r0, [pc, #32]	; (15194 <set_resolution+0x64>)
   15174:	f7fd fed6 	bl	12f24 <log_1>
		return -EINVAL;
   15178:	f06f 0015 	mvn.w	r0, #21
   1517c:	e7e9      	b.n	15152 <set_resolution+0x22>
	switch (sequence->resolution) {
   1517e:	2200      	movs	r2, #0
   15180:	e7e3      	b.n	1514a <set_resolution+0x1a>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
   15182:	2201      	movs	r2, #1
   15184:	e7e1      	b.n	1514a <set_resolution+0x1a>
   15186:	bf00      	nop
   15188:	4000e000 	.word	0x4000e000
   1518c:	00027108 	.word	0x00027108
   15190:	00027108 	.word	0x00027108
   15194:	00028580 	.word	0x00028580

00015198 <set_oversampling>:

static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
   15198:	b508      	push	{r3, lr}
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1519a:	2901      	cmp	r1, #1
   1519c:	d901      	bls.n	151a2 <set_oversampling+0xa>
   1519e:	7c43      	ldrb	r3, [r0, #17]
   151a0:	b94b      	cbnz	r3, 151b6 <set_oversampling+0x1e>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
   151a2:	7c41      	ldrb	r1, [r0, #17]
   151a4:	2908      	cmp	r1, #8
   151a6:	d819      	bhi.n	151dc <set_oversampling+0x44>
   151a8:	e8df f001 	tbb	[pc, r1]
   151ac:	2b2b2b2b 	.word	0x2b2b2b2b
   151b0:	2b2b2b2b 	.word	0x2b2b2b2b
   151b4:	2b          	.byte	0x2b
   151b5:	00          	.byte	0x00
   151b6:	4b15      	ldr	r3, [pc, #84]	; (1520c <set_oversampling+0x74>)
   151b8:	4a15      	ldr	r2, [pc, #84]	; (15210 <set_oversampling+0x78>)
   151ba:	1a9b      	subs	r3, r3, r2
   151bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR(
   151be:	f04f 0100 	mov.w	r1, #0
   151c2:	2201      	movs	r2, #1
   151c4:	f362 0102 	bfi	r1, r2, #0, #3
   151c8:	f36f 01c5 	bfc	r1, #3, #3
   151cc:	f363 118f 	bfi	r1, r3, #6, #10
   151d0:	4810      	ldr	r0, [pc, #64]	; (15214 <set_oversampling+0x7c>)
   151d2:	f7fd ff3b 	bl	1304c <log_0>
		return -EINVAL;
   151d6:	f06f 0015 	mvn.w	r0, #21
   151da:	e016      	b.n	1520a <set_oversampling+0x72>
   151dc:	4b0b      	ldr	r3, [pc, #44]	; (1520c <set_oversampling+0x74>)
   151de:	4a0c      	ldr	r2, [pc, #48]	; (15210 <set_oversampling+0x78>)
   151e0:	1a9b      	subs	r3, r3, r2
   151e2:	08db      	lsrs	r3, r3, #3
		break;
	case 8:
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
		break;
	default:
		LOG_ERR("Oversampling value %d is not valid",
   151e4:	f04f 0200 	mov.w	r2, #0
   151e8:	2001      	movs	r0, #1
   151ea:	f360 0202 	bfi	r2, r0, #0, #3
   151ee:	f36f 02c5 	bfc	r2, #3, #3
   151f2:	f363 128f 	bfi	r2, r3, #6, #10
   151f6:	4808      	ldr	r0, [pc, #32]	; (15218 <set_oversampling+0x80>)
   151f8:	f7fd fe94 	bl	12f24 <log_1>
			    sequence->oversampling);
		return -EINVAL;
   151fc:	f06f 0015 	mvn.w	r0, #21
   15200:	e003      	b.n	1520a <set_oversampling+0x72>
    p_reg->OVERSAMPLE = oversample;
   15202:	4b06      	ldr	r3, [pc, #24]	; (1521c <set_oversampling+0x84>)
   15204:	f8c3 15f4 	str.w	r1, [r3, #1524]	; 0x5f4
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
   15208:	2000      	movs	r0, #0
}
   1520a:	bd08      	pop	{r3, pc}
   1520c:	00027108 	.word	0x00027108
   15210:	00027108 	.word	0x00027108
   15214:	000285a8 	.word	0x000285a8
   15218:	000285dc 	.word	0x000285dc
   1521c:	4000e000 	.word	0x4000e000

00015220 <check_buffer_size>:
static int check_buffer_size(const struct adc_sequence *sequence,
			     uint8_t active_channels)
{
	size_t needed_buffer_size;

	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   15220:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
   15222:	6803      	ldr	r3, [r0, #0]
   15224:	b113      	cbz	r3, 1522c <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   15226:	899b      	ldrh	r3, [r3, #12]
   15228:	fb03 1101 	mla	r1, r3, r1, r1
	}

	if (sequence->buffer_size < needed_buffer_size) {
   1522c:	68c0      	ldr	r0, [r0, #12]
   1522e:	4288      	cmp	r0, r1
   15230:	d301      	bcc.n	15236 <check_buffer_size+0x16>
		LOG_ERR("Provided buffer is too small (%u/%u)",
			    sequence->buffer_size, needed_buffer_size);
		return -ENOMEM;
	}

	return 0;
   15232:	2000      	movs	r0, #0
}
   15234:	4770      	bx	lr
{
   15236:	b510      	push	{r4, lr}
   15238:	4a0a      	ldr	r2, [pc, #40]	; (15264 <check_buffer_size+0x44>)
   1523a:	4b0b      	ldr	r3, [pc, #44]	; (15268 <check_buffer_size+0x48>)
   1523c:	1ad2      	subs	r2, r2, r3
   1523e:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Provided buffer is too small (%u/%u)",
   15240:	f04f 0300 	mov.w	r3, #0
   15244:	2401      	movs	r4, #1
   15246:	f364 0302 	bfi	r3, r4, #0, #3
   1524a:	f36f 03c5 	bfc	r3, #3, #3
   1524e:	f362 138f 	bfi	r3, r2, #6, #10
   15252:	460a      	mov	r2, r1
   15254:	4601      	mov	r1, r0
   15256:	4805      	ldr	r0, [pc, #20]	; (1526c <check_buffer_size+0x4c>)
   15258:	f7fd fe9a 	bl	12f90 <log_2>
		return -ENOMEM;
   1525c:	f06f 000b 	mvn.w	r0, #11
}
   15260:	bd10      	pop	{r4, pc}
   15262:	bf00      	nop
   15264:	00027108 	.word	0x00027108
   15268:	00027108 	.word	0x00027108
   1526c:	00028600 	.word	0x00028600

00015270 <start_read>:

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
   15270:	b5f0      	push	{r4, r5, r6, r7, lr}
   15272:	b083      	sub	sp, #12
	int error;
	uint32_t selected_channels = sequence->channels;
   15274:	6848      	ldr	r0, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   15276:	b130      	cbz	r0, 15286 <start_read+0x16>
   15278:	460d      	mov	r5, r1
   1527a:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
   1527e:	d102      	bne.n	15286 <start_read+0x16>
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
   15280:	2100      	movs	r1, #0
	active_channels = 0U;
   15282:	460c      	mov	r4, r1
   15284:	e02f      	b.n	152e6 <start_read+0x76>
   15286:	4b5e      	ldr	r3, [pc, #376]	; (15400 <start_read+0x190>)
   15288:	4a5e      	ldr	r2, [pc, #376]	; (15404 <start_read+0x194>)
   1528a:	1a9b      	subs	r3, r3, r2
   1528c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid selection of channels");
   1528e:	f04f 0100 	mov.w	r1, #0
   15292:	2201      	movs	r2, #1
   15294:	f362 0102 	bfi	r1, r2, #0, #3
   15298:	f36f 01c5 	bfc	r1, #3, #3
   1529c:	f363 118f 	bfi	r1, r3, #6, #10
   152a0:	4859      	ldr	r0, [pc, #356]	; (15408 <start_read+0x198>)
   152a2:	f7fd fed3 	bl	1304c <log_0>
		return -EINVAL;
   152a6:	f06f 0615 	mvn.w	r6, #21
   152aa:	e046      	b.n	1533a <start_read+0xca>
   152ac:	4b54      	ldr	r3, [pc, #336]	; (15400 <start_read+0x190>)
   152ae:	4a55      	ldr	r2, [pc, #340]	; (15404 <start_read+0x194>)
   152b0:	1a9b      	subs	r3, r3, r2
   152b2:	08db      	lsrs	r3, r3, #3
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
				LOG_ERR("Channel %u not configured",
   152b4:	f04f 0200 	mov.w	r2, #0
   152b8:	2001      	movs	r0, #1
   152ba:	f360 0202 	bfi	r2, r0, #0, #3
   152be:	f36f 02c5 	bfc	r2, #3, #3
   152c2:	f363 128f 	bfi	r2, r3, #6, #10
   152c6:	4851      	ldr	r0, [pc, #324]	; (1540c <start_read+0x19c>)
   152c8:	f7fd fe2c 	bl	12f24 <log_1>
					    channel_id);
				return -EINVAL;
   152cc:	f06f 0615 	mvn.w	r6, #21
   152d0:	e033      	b.n	1533a <start_read+0xca>
    p_reg->CH[channel].PSELP = pselp;
   152d2:	f101 0351 	add.w	r3, r1, #81	; 0x51
   152d6:	011b      	lsls	r3, r3, #4
   152d8:	4a4d      	ldr	r2, [pc, #308]	; (15410 <start_read+0x1a0>)
   152da:	2600      	movs	r6, #0
   152dc:	50d6      	str	r6, [r2, r3]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
   152de:	3101      	adds	r1, #1
   152e0:	b2c9      	uxtb	r1, r1
   152e2:	2907      	cmp	r1, #7
   152e4:	d824      	bhi.n	15330 <start_read+0xc0>
		if (selected_channels & BIT(channel_id)) {
   152e6:	460b      	mov	r3, r1
   152e8:	fa20 f201 	lsr.w	r2, r0, r1
   152ec:	f012 0f01 	tst.w	r2, #1
   152f0:	d0ef      	beq.n	152d2 <start_read+0x62>
			if (m_data.positive_inputs[channel_id] == 0U) {
   152f2:	4a48      	ldr	r2, [pc, #288]	; (15414 <start_read+0x1a4>)
   152f4:	440a      	add	r2, r1
   152f6:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
   152fa:	2a00      	cmp	r2, #0
   152fc:	d0d6      	beq.n	152ac <start_read+0x3c>
				(sequence->oversampling != 0U ?
   152fe:	7c6a      	ldrb	r2, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   15300:	1e16      	subs	r6, r2, #0
   15302:	bf18      	it	ne
   15304:	2601      	movne	r6, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   15306:	4f42      	ldr	r7, [pc, #264]	; (15410 <start_read+0x1a0>)
   15308:	eb07 1c01 	add.w	ip, r7, r1, lsl #4
   1530c:	f8dc 2518 	ldr.w	r2, [ip, #1304]	; 0x518
   15310:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   15314:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
   15318:	f8cc 2518 	str.w	r2, [ip, #1304]	; 0x518
				m_data.positive_inputs[channel_id]);
   1531c:	4a3d      	ldr	r2, [pc, #244]	; (15414 <start_read+0x1a4>)
   1531e:	440a      	add	r2, r1
   15320:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
    p_reg->CH[channel].PSELP = pselp;
   15324:	3351      	adds	r3, #81	; 0x51
   15326:	011b      	lsls	r3, r3, #4
   15328:	50fa      	str	r2, [r7, r3]
			++active_channels;
   1532a:	3401      	adds	r4, #1
   1532c:	b2e4      	uxtb	r4, r4
   1532e:	e7d6      	b.n	152de <start_read+0x6e>

	error = set_resolution(sequence);
   15330:	4628      	mov	r0, r5
   15332:	f7ff fefd 	bl	15130 <set_resolution>
	if (error) {
   15336:	4606      	mov	r6, r0
   15338:	b110      	cbz	r0, 15340 <start_read+0xd0>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   1533a:	4630      	mov	r0, r6
   1533c:	b003      	add	sp, #12
   1533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
   15340:	4621      	mov	r1, r4
   15342:	4628      	mov	r0, r5
   15344:	f7ff ff28 	bl	15198 <set_oversampling>
	if (error) {
   15348:	4606      	mov	r6, r0
   1534a:	2800      	cmp	r0, #0
   1534c:	d1f5      	bne.n	1533a <start_read+0xca>
	error = check_buffer_size(sequence, active_channels);
   1534e:	4621      	mov	r1, r4
   15350:	4628      	mov	r0, r5
   15352:	f7ff ff65 	bl	15220 <check_buffer_size>
	if (error) {
   15356:	4606      	mov	r6, r0
   15358:	2800      	cmp	r0, #0
   1535a:	d1ee      	bne.n	1533a <start_read+0xca>
			      (nrf_saadc_value_t *)sequence->buffer,
   1535c:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1535e:	4b2c      	ldr	r3, [pc, #176]	; (15410 <start_read+0x1a0>)
   15360:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
   15364:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   15368:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 15414 <start_read+0x1a4>
   1536c:	f10c 047c 	add.w	r4, ip, #124	; 0x7c
   15370:	462f      	mov	r7, r5
   15372:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   15374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15376:	683b      	ldr	r3, [r7, #0]
   15378:	6023      	str	r3, [r4, #0]
	ctx->status = 0;
   1537a:	2300      	movs	r3, #0
   1537c:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

	if (sequence->options) {
   15380:	682b      	ldr	r3, [r5, #0]
   15382:	b153      	cbz	r3, 1539a <start_read+0x12a>
		ctx->options = *sequence->options;
   15384:	f10c 0490 	add.w	r4, ip, #144	; 0x90
   15388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1538a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1538e:	f8cc 407c 	str.w	r4, [ip, #124]	; 0x7c
		ctx->sampling_index = 0U;
   15392:	2300      	movs	r3, #0
   15394:	f8ac 30a0 	strh.w	r3, [ip, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
   15398:	b990      	cbnz	r0, 153c0 <start_read+0x150>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1539a:	481e      	ldr	r0, [pc, #120]	; (15414 <start_read+0x1a4>)
   1539c:	f7ff fd9e 	bl	14edc <adc_context_start_sampling>
	if (ctx->asynchronous) {
   153a0:	4b1c      	ldr	r3, [pc, #112]	; (15414 <start_read+0x1a4>)
   153a2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   153a6:	2b00      	cmp	r3, #0
   153a8:	d1c7      	bne.n	1533a <start_read+0xca>
	return z_impl_k_sem_take(sem, timeout);
   153aa:	4c1a      	ldr	r4, [pc, #104]	; (15414 <start_read+0x1a4>)
   153ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   153b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   153b8:	f009 ff70 	bl	1f29c <z_impl_k_sem_take>
	return ctx->status;
   153bc:	6f26      	ldr	r6, [r4, #112]	; 0x70
	return error;
   153be:	e7bc      	b.n	1533a <start_read+0xca>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   153c0:	4664      	mov	r4, ip
   153c2:	2200      	movs	r2, #0
   153c4:	e8d4 3fef 	ldaex	r3, [r4]
   153c8:	e8c4 2fe1 	stlex	r1, r2, [r4]
   153cc:	2900      	cmp	r1, #0
   153ce:	d1f9      	bne.n	153c4 <start_read+0x154>
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
   153d0:	4617      	mov	r7, r2
   153d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
			return (t * to_hz + off) / from_hz;
   153d6:	0c59      	lsrs	r1, r3, #17
   153d8:	03d8      	lsls	r0, r3, #15
   153da:	f8df c040 	ldr.w	ip, [pc, #64]	; 1541c <start_read+0x1ac>
   153de:	4a0e      	ldr	r2, [pc, #56]	; (15418 <start_read+0x1a8>)
   153e0:	2300      	movs	r3, #0
   153e2:	eb10 000c 	adds.w	r0, r0, ip
   153e6:	4179      	adcs	r1, r7
   153e8:	f7fb fb98 	bl	10b1c <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   153ec:	9000      	str	r0, [sp, #0]
   153ee:	9101      	str	r1, [sp, #4]
   153f0:	463a      	mov	r2, r7
   153f2:	463b      	mov	r3, r7
   153f4:	f104 0008 	add.w	r0, r4, #8
   153f8:	f00a fef0 	bl	201dc <z_impl_k_timer_start>
}
   153fc:	e7d0      	b.n	153a0 <start_read+0x130>
   153fe:	bf00      	nop
   15400:	00027108 	.word	0x00027108
   15404:	00027108 	.word	0x00027108
   15408:	00028628 	.word	0x00028628
   1540c:	00028648 	.word	0x00028648
   15410:	4000e000 	.word	0x4000e000
   15414:	2000c500 	.word	0x2000c500
   15418:	000f4240 	.word	0x000f4240
   1541c:	000f423f 	.word	0x000f423f

00015420 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
   15420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15422:	4605      	mov	r5, r0
   15424:	460e      	mov	r6, r1
   15426:	4617      	mov	r7, r2
	return z_impl_k_sem_take(sem, timeout);
   15428:	4c0d      	ldr	r4, [pc, #52]	; (15460 <adc_nrfx_read_async+0x40>)
   1542a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1542e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15432:	f104 0040 	add.w	r0, r4, #64	; 0x40
   15436:	f009 ff31 	bl	1f29c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   1543a:	2301      	movs	r3, #1
   1543c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->signal = signal;
   15440:	6767      	str	r7, [r4, #116]	; 0x74
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
   15442:	4631      	mov	r1, r6
   15444:	4628      	mov	r0, r5
   15446:	f7ff ff13 	bl	15270 <start_read>
   1544a:	4605      	mov	r5, r0
	if (ctx->asynchronous && (status == 0)) {
   1544c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15450:	b103      	cbz	r3, 15454 <adc_nrfx_read_async+0x34>
   15452:	b110      	cbz	r0, 1545a <adc_nrfx_read_async+0x3a>
	z_impl_k_sem_give(sem);
   15454:	4803      	ldr	r0, [pc, #12]	; (15464 <adc_nrfx_read_async+0x44>)
   15456:	f009 fef9 	bl	1f24c <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1545a:	4628      	mov	r0, r5
   1545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1545e:	bf00      	nop
   15460:	2000c500 	.word	0x2000c500
   15464:	2000c540 	.word	0x2000c540

00015468 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   15468:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1546a:	4b0e      	ldr	r3, [pc, #56]	; (154a4 <init_saadc+0x3c>)
   1546c:	2400      	movs	r4, #0
   1546e:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   15470:	681b      	ldr	r3, [r3, #0]
   15472:	4b0d      	ldr	r3, [pc, #52]	; (154a8 <init_saadc+0x40>)
   15474:	601c      	str	r4, [r3, #0]
   15476:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   15478:	4b0c      	ldr	r3, [pc, #48]	; (154ac <init_saadc+0x44>)
   1547a:	2212      	movs	r2, #18
   1547c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   15480:	200e      	movs	r0, #14
   15482:	f7fe fceb 	bl	13e5c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15486:	4622      	mov	r2, r4
   15488:	2101      	movs	r1, #1
   1548a:	200e      	movs	r0, #14
   1548c:	f7fe fd04 	bl	13e98 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   15490:	4b07      	ldr	r3, [pc, #28]	; (154b0 <init_saadc+0x48>)
   15492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
   15494:	b10b      	cbz	r3, 1549a <init_saadc+0x32>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   15496:	2000      	movs	r0, #0
   15498:	bd10      	pop	{r4, pc}
   1549a:	4806      	ldr	r0, [pc, #24]	; (154b4 <init_saadc+0x4c>)
   1549c:	f009 fed6 	bl	1f24c <z_impl_k_sem_give>
}
   154a0:	e7f9      	b.n	15496 <init_saadc+0x2e>
   154a2:	bf00      	nop
   154a4:	4000e104 	.word	0x4000e104
   154a8:	4000e110 	.word	0x4000e110
   154ac:	4000e000 	.word	0x4000e000
   154b0:	2000c500 	.word	0x2000c500
   154b4:	2000c540 	.word	0x2000c540

000154b8 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   154b8:	4b3c      	ldr	r3, [pc, #240]	; (155ac <saadc_irq_handler+0xf4>)
   154ba:	681b      	ldr	r3, [r3, #0]
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   154bc:	b97b      	cbnz	r3, 154de <saadc_irq_handler+0x26>
   154be:	4b3c      	ldr	r3, [pc, #240]	; (155b0 <saadc_irq_handler+0xf8>)
   154c0:	681b      	ldr	r3, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
   154c2:	2b00      	cmp	r3, #0
   154c4:	d070      	beq.n	155a8 <saadc_irq_handler+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   154c6:	4b3a      	ldr	r3, [pc, #232]	; (155b0 <saadc_irq_handler+0xf8>)
   154c8:	2200      	movs	r2, #0
   154ca:	601a      	str	r2, [r3, #0]
   154cc:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   154ce:	2301      	movs	r3, #1
   154d0:	4a38      	ldr	r2, [pc, #224]	; (155b4 <saadc_irq_handler+0xfc>)
   154d2:	6013      	str	r3, [r2, #0]
   154d4:	3a08      	subs	r2, #8
   154d6:	6013      	str	r3, [r2, #0]
   154d8:	3204      	adds	r2, #4
   154da:	6013      	str	r3, [r2, #0]
}
   154dc:	4770      	bx	lr
{
   154de:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   154e0:	4a32      	ldr	r2, [pc, #200]	; (155ac <saadc_irq_handler+0xf4>)
   154e2:	2300      	movs	r3, #0
   154e4:	6013      	str	r3, [r2, #0]
   154e6:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   154e8:	4a32      	ldr	r2, [pc, #200]	; (155b4 <saadc_irq_handler+0xfc>)
   154ea:	2101      	movs	r1, #1
   154ec:	6011      	str	r1, [r2, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   154ee:	3a08      	subs	r2, #8
   154f0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   154f4:	4b30      	ldr	r3, [pc, #192]	; (155b8 <saadc_irq_handler+0x100>)
   154f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   154f8:	b323      	cbz	r3, 15544 <saadc_irq_handler+0x8c>
		adc_sequence_callback callback = ctx->options.callback;
   154fa:	4b2f      	ldr	r3, [pc, #188]	; (155b8 <saadc_irq_handler+0x100>)
   154fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   15500:	b143      	cbz	r3, 15514 <saadc_irq_handler+0x5c>
			action = callback(dev,
   15502:	492d      	ldr	r1, [pc, #180]	; (155b8 <saadc_irq_handler+0x100>)
   15504:	f8b1 20a0 	ldrh.w	r2, [r1, #160]	; 0xa0
   15508:	317c      	adds	r1, #124	; 0x7c
   1550a:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1550c:	2801      	cmp	r0, #1
   1550e:	d00f      	beq.n	15530 <saadc_irq_handler+0x78>
   15510:	2802      	cmp	r0, #2
   15512:	d010      	beq.n	15536 <saadc_irq_handler+0x7e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   15514:	4a28      	ldr	r2, [pc, #160]	; (155b8 <saadc_irq_handler+0x100>)
   15516:	f8b2 30a0 	ldrh.w	r3, [r2, #160]	; 0xa0
			    ctx->options.extra_samplings) {
   1551a:	f8b2 209c 	ldrh.w	r2, [r2, #156]	; 0x9c
			if (ctx->sampling_index <
   1551e:	4293      	cmp	r3, r2
   15520:	d218      	bcs.n	15554 <saadc_irq_handler+0x9c>
				++ctx->sampling_index;
   15522:	3301      	adds	r3, #1
   15524:	4a24      	ldr	r2, [pc, #144]	; (155b8 <saadc_irq_handler+0x100>)
   15526:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0
		bool repeat = false;
   1552a:	2100      	movs	r1, #0
		bool finish = false;
   1552c:	460b      	mov	r3, r1
   1552e:	e004      	b.n	1553a <saadc_irq_handler+0x82>
		switch (action) {
   15530:	2101      	movs	r1, #1
   15532:	2300      	movs	r3, #0
   15534:	e001      	b.n	1553a <saadc_irq_handler+0x82>
		bool repeat = false;
   15536:	2100      	movs	r1, #0
			finish = true;
   15538:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
   1553a:	b173      	cbz	r3, 1555a <saadc_irq_handler+0xa2>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1553c:	4b1e      	ldr	r3, [pc, #120]	; (155b8 <saadc_irq_handler+0x100>)
   1553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   15542:	bb1b      	cbnz	r3, 1558c <saadc_irq_handler+0xd4>
	if (ctx->asynchronous) {
   15544:	4b1c      	ldr	r3, [pc, #112]	; (155b8 <saadc_irq_handler+0x100>)
   15546:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1554a:	bb1b      	cbnz	r3, 15594 <saadc_irq_handler+0xdc>
	z_impl_k_sem_give(sem);
   1554c:	481b      	ldr	r0, [pc, #108]	; (155bc <saadc_irq_handler+0x104>)
   1554e:	f009 fe7d 	bl	1f24c <z_impl_k_sem_give>
}
   15552:	bd10      	pop	{r4, pc}
		bool repeat = false;
   15554:	2100      	movs	r1, #0
				finish = true;
   15556:	2301      	movs	r3, #1
   15558:	e7ef      	b.n	1553a <saadc_irq_handler+0x82>
			adc_context_update_buffer_pointer(ctx, repeat);
   1555a:	4c17      	ldr	r4, [pc, #92]	; (155b8 <saadc_irq_handler+0x100>)
   1555c:	4620      	mov	r0, r4
   1555e:	f7ff fcd1 	bl	14f04 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
   15562:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   15566:	b91b      	cbnz	r3, 15570 <saadc_irq_handler+0xb8>
				adc_context_start_sampling(ctx);
   15568:	4620      	mov	r0, r4
   1556a:	f7ff fcb7 	bl	14edc <adc_context_start_sampling>
   1556e:	e7f0      	b.n	15552 <saadc_irq_handler+0x9a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   15570:	4b11      	ldr	r3, [pc, #68]	; (155b8 <saadc_irq_handler+0x100>)
   15572:	e8d3 2fef 	ldaex	r2, [r3]
   15576:	1e51      	subs	r1, r2, #1
   15578:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1557c:	2800      	cmp	r0, #0
   1557e:	d1f8      	bne.n	15572 <saadc_irq_handler+0xba>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   15580:	2a01      	cmp	r2, #1
   15582:	dde6      	ble.n	15552 <saadc_irq_handler+0x9a>
				adc_context_start_sampling(ctx);
   15584:	4618      	mov	r0, r3
   15586:	f7ff fca9 	bl	14edc <adc_context_start_sampling>
			return;
   1558a:	e7e2      	b.n	15552 <saadc_irq_handler+0x9a>
	z_impl_k_timer_stop(timer);
   1558c:	480c      	ldr	r0, [pc, #48]	; (155c0 <saadc_irq_handler+0x108>)
   1558e:	f011 f861 	bl	26654 <z_impl_k_timer_stop>
}
   15592:	e7d7      	b.n	15544 <saadc_irq_handler+0x8c>
		if (ctx->signal) {
   15594:	4b08      	ldr	r3, [pc, #32]	; (155b8 <saadc_irq_handler+0x100>)
   15596:	6f58      	ldr	r0, [r3, #116]	; 0x74
   15598:	b110      	cbz	r0, 155a0 <saadc_irq_handler+0xe8>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1559a:	2100      	movs	r1, #0
   1559c:	f00b f930 	bl	20800 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
   155a0:	4808      	ldr	r0, [pc, #32]	; (155c4 <saadc_irq_handler+0x10c>)
   155a2:	f009 fe53 	bl	1f24c <z_impl_k_sem_give>
		return;
   155a6:	e7d4      	b.n	15552 <saadc_irq_handler+0x9a>
   155a8:	4770      	bx	lr
   155aa:	bf00      	nop
   155ac:	4000e104 	.word	0x4000e104
   155b0:	4000e110 	.word	0x4000e110
   155b4:	4000e008 	.word	0x4000e008
   155b8:	2000c500 	.word	0x2000c500
   155bc:	2000c558 	.word	0x2000c558
   155c0:	2000c508 	.word	0x2000c508
   155c4:	2000c540 	.word	0x2000c540

000155c8 <adc_nrfx_read>:
{
   155c8:	b570      	push	{r4, r5, r6, lr}
   155ca:	4605      	mov	r5, r0
   155cc:	460e      	mov	r6, r1
	return z_impl_k_sem_take(sem, timeout);
   155ce:	4c0d      	ldr	r4, [pc, #52]	; (15604 <adc_nrfx_read+0x3c>)
   155d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155d8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   155dc:	f009 fe5e 	bl	1f29c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   155e0:	2300      	movs	r3, #0
   155e2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->signal = signal;
   155e6:	6763      	str	r3, [r4, #116]	; 0x74
	error = start_read(dev, sequence);
   155e8:	4631      	mov	r1, r6
   155ea:	4628      	mov	r0, r5
   155ec:	f7ff fe40 	bl	15270 <start_read>
   155f0:	4605      	mov	r5, r0
	if (ctx->asynchronous && (status == 0)) {
   155f2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   155f6:	b103      	cbz	r3, 155fa <adc_nrfx_read+0x32>
   155f8:	b110      	cbz	r0, 15600 <adc_nrfx_read+0x38>
	z_impl_k_sem_give(sem);
   155fa:	4803      	ldr	r0, [pc, #12]	; (15608 <adc_nrfx_read+0x40>)
   155fc:	f009 fe26 	bl	1f24c <z_impl_k_sem_give>
}
   15600:	4628      	mov	r0, r5
   15602:	bd70      	pop	{r4, r5, r6, pc}
   15604:	2000c500 	.word	0x2000c500
   15608:	2000c540 	.word	0x2000c540

0001560c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1560c:	4800      	ldr	r0, [pc, #0]	; (15610 <get_hf_flags+0x4>)
   1560e:	4770      	bx	lr
   15610:	2000e374 	.word	0x2000e374

00015614 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   15614:	4b03      	ldr	r3, [pc, #12]	; (15624 <get_subsys+0x10>)
   15616:	1ac0      	subs	r0, r0, r3
   15618:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1561a:	4b03      	ldr	r3, [pc, #12]	; (15628 <get_subsys+0x14>)
   1561c:	fb03 f000 	mul.w	r0, r3, r0
   15620:	4770      	bx	lr
   15622:	bf00      	nop
   15624:	2000e334 	.word	0x2000e334
   15628:	b6db6db7 	.word	0xb6db6db7

0001562c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1562c:	b538      	push	{r3, r4, r5, lr}
   1562e:	4605      	mov	r5, r0
   15630:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15632:	f7ff ffef 	bl	15614 <get_subsys>
   15636:	4601      	mov	r1, r0
   15638:	2240      	movs	r2, #64	; 0x40
   1563a:	4803      	ldr	r0, [pc, #12]	; (15648 <onoff_stop+0x1c>)
   1563c:	f00d fd57 	bl	230ee <stop>
   15640:	4601      	mov	r1, r0
	notify(mgr, res);
   15642:	4628      	mov	r0, r5
   15644:	47a0      	blx	r4
}
   15646:	bd38      	pop	{r3, r4, r5, pc}
   15648:	00026e4c 	.word	0x00026e4c

0001564c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1564c:	b530      	push	{r4, r5, lr}
   1564e:	b083      	sub	sp, #12
   15650:	4605      	mov	r5, r0
   15652:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15654:	f7ff ffde 	bl	15614 <get_subsys>
   15658:	4601      	mov	r1, r0
   1565a:	2340      	movs	r3, #64	; 0x40
   1565c:	9300      	str	r3, [sp, #0]
   1565e:	4623      	mov	r3, r4
   15660:	4a05      	ldr	r2, [pc, #20]	; (15678 <onoff_start+0x2c>)
   15662:	4806      	ldr	r0, [pc, #24]	; (1567c <onoff_start+0x30>)
   15664:	f00d fd5d 	bl	23122 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   15668:	1e01      	subs	r1, r0, #0
   1566a:	db01      	blt.n	15670 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1566c:	b003      	add	sp, #12
   1566e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   15670:	4628      	mov	r0, r5
   15672:	47a0      	blx	r4
}
   15674:	e7fa      	b.n	1566c <onoff_start+0x20>
   15676:	bf00      	nop
   15678:	0002316b 	.word	0x0002316b
   1567c:	00026e4c 	.word	0x00026e4c

00015680 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   15680:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   15682:	b110      	cbz	r0, 1568a <clock_event_handler+0xa>
   15684:	2801      	cmp	r0, #1
   15686:	d00d      	beq.n	156a4 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   15688:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1568a:	2100      	movs	r1, #0
   1568c:	4808      	ldr	r0, [pc, #32]	; (156b0 <clock_event_handler+0x30>)
   1568e:	f00d fcb4 	bl	22ffa <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   15692:	6883      	ldr	r3, [r0, #8]
   15694:	f013 0f07 	tst.w	r3, #7
   15698:	d1f6      	bne.n	15688 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1569a:	2100      	movs	r1, #0
   1569c:	4804      	ldr	r0, [pc, #16]	; (156b0 <clock_event_handler+0x30>)
   1569e:	f00d fd14 	bl	230ca <clkstarted_handle>
   156a2:	e7f1      	b.n	15688 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   156a4:	2101      	movs	r1, #1
   156a6:	4802      	ldr	r0, [pc, #8]	; (156b0 <clock_event_handler+0x30>)
   156a8:	f00d fd0f 	bl	230ca <clkstarted_handle>
}
   156ac:	e7ec      	b.n	15688 <clock_event_handler+0x8>
   156ae:	bf00      	nop
   156b0:	00026e4c 	.word	0x00026e4c

000156b4 <generic_hfclk_start>:
{
   156b4:	b510      	push	{r4, lr}
	__asm__ volatile(
   156b6:	f04f 0320 	mov.w	r3, #32
   156ba:	f3ef 8411 	mrs	r4, BASEPRI
   156be:	f383 8812 	msr	BASEPRI_MAX, r3
   156c2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   156c6:	4a13      	ldr	r2, [pc, #76]	; (15714 <generic_hfclk_start+0x60>)
   156c8:	6813      	ldr	r3, [r2, #0]
   156ca:	f043 0302 	orr.w	r3, r3, #2
   156ce:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   156d0:	f013 0f01 	tst.w	r3, #1
   156d4:	d108      	bne.n	156e8 <generic_hfclk_start+0x34>
	bool already_started = false;
   156d6:	2300      	movs	r3, #0
	__asm__ volatile(
   156d8:	f384 8811 	msr	BASEPRI, r4
   156dc:	f3bf 8f6f 	isb	sy
	if (already_started) {
   156e0:	b993      	cbnz	r3, 15708 <generic_hfclk_start+0x54>
	hfclk_start();
   156e2:	f00d fd4a 	bl	2317a <hfclk_start>
}
   156e6:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   156e8:	4b0b      	ldr	r3, [pc, #44]	; (15718 <generic_hfclk_start+0x64>)
   156ea:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   156ee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   156f2:	f012 0f01 	tst.w	r2, #1
   156f6:	d101      	bne.n	156fc <generic_hfclk_start+0x48>
	bool already_started = false;
   156f8:	2300      	movs	r3, #0
   156fa:	e7ed      	b.n	156d8 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   156fc:	f7ff ff86 	bl	1560c <get_hf_flags>
   15700:	f00d fcd0 	bl	230a4 <set_on_state>
			already_started = true;
   15704:	2301      	movs	r3, #1
   15706:	e7e7      	b.n	156d8 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   15708:	2100      	movs	r1, #0
   1570a:	4804      	ldr	r0, [pc, #16]	; (1571c <generic_hfclk_start+0x68>)
   1570c:	f00d fcdd 	bl	230ca <clkstarted_handle>
		return;
   15710:	e7e9      	b.n	156e6 <generic_hfclk_start+0x32>
   15712:	bf00      	nop
   15714:	2000e384 	.word	0x2000e384
   15718:	40005000 	.word	0x40005000
   1571c:	00026e4c 	.word	0x00026e4c

00015720 <generic_hfclk_stop>:
{
   15720:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15722:	4b08      	ldr	r3, [pc, #32]	; (15744 <generic_hfclk_stop+0x24>)
   15724:	e8d3 2fef 	ldaex	r2, [r3]
   15728:	f022 0102 	bic.w	r1, r2, #2
   1572c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   15730:	2800      	cmp	r0, #0
   15732:	d1f7      	bne.n	15724 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   15734:	f012 0f01 	tst.w	r2, #1
   15738:	d000      	beq.n	1573c <generic_hfclk_stop+0x1c>
}
   1573a:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1573c:	f00d fd27 	bl	2318e <hfclk_stop>
   15740:	e7fb      	b.n	1573a <generic_hfclk_stop+0x1a>
   15742:	bf00      	nop
   15744:	2000e384 	.word	0x2000e384

00015748 <api_blocking_start>:
{
   15748:	b500      	push	{lr}
   1574a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1574c:	f8cd d000 	str.w	sp, [sp]
   15750:	f8cd d004 	str.w	sp, [sp, #4]
   15754:	2300      	movs	r3, #0
   15756:	9302      	str	r3, [sp, #8]
   15758:	2301      	movs	r3, #1
   1575a:	9303      	str	r3, [sp, #12]
   1575c:	ab04      	add	r3, sp, #16
   1575e:	9304      	str	r3, [sp, #16]
   15760:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15762:	466b      	mov	r3, sp
   15764:	4a06      	ldr	r2, [pc, #24]	; (15780 <api_blocking_start+0x38>)
   15766:	f00d fcf8 	bl	2315a <api_start>
	if (err < 0) {
   1576a:	2800      	cmp	r0, #0
   1576c:	db05      	blt.n	1577a <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1576e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   15772:	2300      	movs	r3, #0
   15774:	4668      	mov	r0, sp
   15776:	f009 fd91 	bl	1f29c <z_impl_k_sem_take>
}
   1577a:	b007      	add	sp, #28
   1577c:	f85d fb04 	ldr.w	pc, [sp], #4
   15780:	000231a3 	.word	0x000231a3

00015784 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   15784:	b570      	push	{r4, r5, r6, lr}
   15786:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15788:	2200      	movs	r2, #0
   1578a:	2101      	movs	r1, #1
   1578c:	2005      	movs	r0, #5
   1578e:	f7fe fb83 	bl	13e98 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   15792:	2005      	movs	r0, #5
   15794:	f7fe fb62 	bl	13e5c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   15798:	4811      	ldr	r0, [pc, #68]	; (157e0 <clk_init+0x5c>)
   1579a:	f005 f889 	bl	1a8b0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1579e:	4b11      	ldr	r3, [pc, #68]	; (157e4 <clk_init+0x60>)
   157a0:	4298      	cmp	r0, r3
   157a2:	d11a      	bne.n	157da <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   157a4:	f00f f956 	bl	24a54 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   157a8:	2400      	movs	r4, #0
   157aa:	e003      	b.n	157b4 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   157ac:	2301      	movs	r3, #1
   157ae:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   157b0:	441c      	add	r4, r3
   157b2:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   157b4:	2c01      	cmp	r4, #1
   157b6:	d80e      	bhi.n	157d6 <clk_init+0x52>
						get_sub_data(dev, i);
   157b8:	4621      	mov	r1, r4
   157ba:	4630      	mov	r0, r6
   157bc:	f00d fc1d 	bl	22ffa <get_sub_data>
   157c0:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   157c2:	4621      	mov	r1, r4
   157c4:	4630      	mov	r0, r6
   157c6:	f00d fc25 	bl	23014 <get_onoff_manager>
   157ca:	4907      	ldr	r1, [pc, #28]	; (157e8 <clk_init+0x64>)
   157cc:	f00c fae5 	bl	21d9a <onoff_manager_init>
		if (err < 0) {
   157d0:	2800      	cmp	r0, #0
   157d2:	daeb      	bge.n	157ac <clk_init+0x28>
   157d4:	e000      	b.n	157d8 <clk_init+0x54>
	}

	return 0;
   157d6:	2000      	movs	r0, #0
}
   157d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   157da:	f06f 0004 	mvn.w	r0, #4
   157de:	e7fb      	b.n	157d8 <clk_init+0x54>
   157e0:	00015681 	.word	0x00015681
   157e4:	0bad0000 	.word	0x0bad0000
   157e8:	000286dc 	.word	0x000286dc

000157ec <lfclk_spinwait>:
{
   157ec:	b570      	push	{r4, r5, r6, lr}
   157ee:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   157f0:	2801      	cmp	r0, #1
   157f2:	d106      	bne.n	15802 <lfclk_spinwait+0x16>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   157f4:	4b32      	ldr	r3, [pc, #200]	; (158c0 <lfclk_spinwait+0xd4>)
   157f6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   157fa:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   157fe:	2b02      	cmp	r3, #2
   15800:	d03c      	beq.n	1587c <lfclk_spinwait+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15802:	f010 fab3 	bl	25d6c <k_is_in_isr>
   15806:	b920      	cbnz	r0, 15812 <lfclk_spinwait+0x26>
	return !z_sys_post_kernel;
   15808:	4b2e      	ldr	r3, [pc, #184]	; (158c4 <lfclk_spinwait+0xd8>)
   1580a:	781b      	ldrb	r3, [r3, #0]
   1580c:	b193      	cbz	r3, 15834 <lfclk_spinwait+0x48>
   1580e:	2300      	movs	r3, #0
   15810:	e000      	b.n	15814 <lfclk_spinwait+0x28>
   15812:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   15814:	461c      	mov	r4, r3
   15816:	b17b      	cbz	r3, 15838 <lfclk_spinwait+0x4c>
	__asm__ volatile(
   15818:	f04f 0320 	mov.w	r3, #32
   1581c:	f3ef 8611 	mrs	r6, BASEPRI
   15820:	f383 8812 	msr	BASEPRI_MAX, r3
   15824:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   15828:	b994      	cbnz	r4, 15850 <lfclk_spinwait+0x64>
    p_reg->INTENCLR = mask;
   1582a:	4b25      	ldr	r3, [pc, #148]	; (158c0 <lfclk_spinwait+0xd4>)
   1582c:	2202      	movs	r2, #2
   1582e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15832:	e00d      	b.n	15850 <lfclk_spinwait+0x64>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15834:	2301      	movs	r3, #1
   15836:	e7ed      	b.n	15814 <lfclk_spinwait+0x28>
	int key = isr_mode ? irq_lock() : 0;
   15838:	2600      	movs	r6, #0
   1583a:	e7f5      	b.n	15828 <lfclk_spinwait+0x3c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1583c:	b1fc      	cbz	r4, 1587e <lfclk_spinwait+0x92>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1583e:	4630      	mov	r0, r6
   15840:	f7fe fa58 	bl	13cf4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   15844:	4b1e      	ldr	r3, [pc, #120]	; (158c0 <lfclk_spinwait+0xd4>)
   15846:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1584a:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1584c:	2b01      	cmp	r3, #1
   1584e:	d01b      	beq.n	15888 <lfclk_spinwait+0x9c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15850:	4a1b      	ldr	r2, [pc, #108]	; (158c0 <lfclk_spinwait+0xd4>)
   15852:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   15856:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1585a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1585e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   15862:	d125      	bne.n	158b0 <lfclk_spinwait+0xc4>
    return false;
   15864:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   15866:	2a00      	cmp	r2, #0
   15868:	d0e8      	beq.n	1583c <lfclk_spinwait+0x50>
   1586a:	2b02      	cmp	r3, #2
   1586c:	d001      	beq.n	15872 <lfclk_spinwait+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1586e:	2d01      	cmp	r5, #1
   15870:	d1e4      	bne.n	1583c <lfclk_spinwait+0x50>
	if (isr_mode) {
   15872:	b1fc      	cbz	r4, 158b4 <lfclk_spinwait+0xc8>
	__asm__ volatile(
   15874:	f386 8811 	msr	BASEPRI, r6
   15878:	f3bf 8f6f 	isb	sy
}
   1587c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   1587e:	2021      	movs	r0, #33	; 0x21
   15880:	2100      	movs	r1, #0
   15882:	f00a fa57 	bl	1fd34 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15886:	e7dd      	b.n	15844 <lfclk_spinwait+0x58>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15888:	4b0f      	ldr	r3, [pc, #60]	; (158c8 <lfclk_spinwait+0xdc>)
   1588a:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1588c:	2b00      	cmp	r3, #0
   1588e:	d0df      	beq.n	15850 <lfclk_spinwait+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15890:	4b0d      	ldr	r3, [pc, #52]	; (158c8 <lfclk_spinwait+0xdc>)
   15892:	2200      	movs	r2, #0
   15894:	601a      	str	r2, [r3, #0]
   15896:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   15898:	4b09      	ldr	r3, [pc, #36]	; (158c0 <lfclk_spinwait+0xd4>)
   1589a:	2202      	movs	r2, #2
   1589c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   158a0:	4b0a      	ldr	r3, [pc, #40]	; (158cc <lfclk_spinwait+0xe0>)
   158a2:	2220      	movs	r2, #32
   158a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   158a8:	4b09      	ldr	r3, [pc, #36]	; (158d0 <lfclk_spinwait+0xe4>)
   158aa:	2201      	movs	r2, #1
   158ac:	601a      	str	r2, [r3, #0]
}
   158ae:	e7cf      	b.n	15850 <lfclk_spinwait+0x64>
                return true;
   158b0:	2201      	movs	r2, #1
   158b2:	e7d8      	b.n	15866 <lfclk_spinwait+0x7a>
    p_reg->INTENSET = mask;
   158b4:	4b02      	ldr	r3, [pc, #8]	; (158c0 <lfclk_spinwait+0xd4>)
   158b6:	2202      	movs	r2, #2
   158b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   158bc:	e7de      	b.n	1587c <lfclk_spinwait+0x90>
   158be:	bf00      	nop
   158c0:	40005000 	.word	0x40005000
   158c4:	2000fa40 	.word	0x2000fa40
   158c8:	40005104 	.word	0x40005104
   158cc:	e000e100 	.word	0xe000e100
   158d0:	40005008 	.word	0x40005008

000158d4 <z_nrf_clock_control_lf_on>:
{
   158d4:	b510      	push	{r4, lr}
   158d6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   158d8:	4b0e      	ldr	r3, [pc, #56]	; (15914 <z_nrf_clock_control_lf_on+0x40>)
   158da:	2101      	movs	r1, #1
   158dc:	e8d3 2fef 	ldaex	r2, [r3]
   158e0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   158e4:	2800      	cmp	r0, #0
   158e6:	d1f9      	bne.n	158dc <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   158e8:	b11a      	cbz	r2, 158f2 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
   158ea:	1e63      	subs	r3, r4, #1
   158ec:	2b01      	cmp	r3, #1
   158ee:	d90c      	bls.n	1590a <z_nrf_clock_control_lf_on+0x36>
}
   158f0:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   158f2:	4809      	ldr	r0, [pc, #36]	; (15918 <z_nrf_clock_control_lf_on+0x44>)
   158f4:	f00d fb8e 	bl	23014 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   158f8:	4908      	ldr	r1, [pc, #32]	; (1591c <z_nrf_clock_control_lf_on+0x48>)
   158fa:	2300      	movs	r3, #0
   158fc:	604b      	str	r3, [r1, #4]
   158fe:	60cb      	str	r3, [r1, #12]
   15900:	2301      	movs	r3, #1
   15902:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   15904:	f00c fa65 	bl	21dd2 <onoff_request>
   15908:	e7ef      	b.n	158ea <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
   1590a:	4620      	mov	r0, r4
   1590c:	f7ff ff6e 	bl	157ec <lfclk_spinwait>
		break;
   15910:	e7ee      	b.n	158f0 <z_nrf_clock_control_lf_on+0x1c>
   15912:	bf00      	nop
   15914:	2000e388 	.word	0x2000e388
   15918:	00026e4c 	.word	0x00026e4c
   1591c:	2000e324 	.word	0x2000e324

00015920 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   15920:	b510      	push	{r4, lr}
   15922:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   15924:	280a      	cmp	r0, #10
   15926:	d007      	beq.n	15938 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   15928:	4b07      	ldr	r3, [pc, #28]	; (15948 <console_out+0x28>)
   1592a:	6818      	ldr	r0, [r3, #0]
   1592c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1592e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   15930:	685b      	ldr	r3, [r3, #4]
   15932:	4798      	blx	r3

	return c;
}
   15934:	4620      	mov	r0, r4
   15936:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   15938:	4b03      	ldr	r3, [pc, #12]	; (15948 <console_out+0x28>)
   1593a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   1593c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1593e:	685b      	ldr	r3, [r3, #4]
   15940:	210d      	movs	r1, #13
   15942:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   15944:	e7f0      	b.n	15928 <console_out+0x8>
   15946:	bf00      	nop
   15948:	2000e38c 	.word	0x2000e38c

0001594c <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   1594c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1594e:	4c04      	ldr	r4, [pc, #16]	; (15960 <uart_console_hook_install+0x14>)
   15950:	4620      	mov	r0, r4
   15952:	f7ff f9f7 	bl	14d44 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   15956:	4620      	mov	r0, r4
   15958:	f7fb fe60 	bl	1161c <__printk_hook_install>
#endif
}
   1595c:	bd10      	pop	{r4, pc}
   1595e:	bf00      	nop
   15960:	00015921 	.word	0x00015921

00015964 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   15964:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   15966:	4806      	ldr	r0, [pc, #24]	; (15980 <uart_console_init+0x1c>)
   15968:	4b06      	ldr	r3, [pc, #24]	; (15984 <uart_console_init+0x20>)
   1596a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1596c:	f010 f919 	bl	25ba2 <z_device_ready>
   15970:	b118      	cbz	r0, 1597a <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   15972:	f7ff ffeb 	bl	1594c <uart_console_hook_install>

	return 0;
   15976:	2000      	movs	r0, #0
}
   15978:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1597a:	f06f 0012 	mvn.w	r0, #18
   1597e:	e7fb      	b.n	15978 <uart_console_init+0x14>
   15980:	00026e94 	.word	0x00026e94
   15984:	2000e38c 	.word	0x2000e38c

00015988 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15988:	4b1f      	ldr	r3, [pc, #124]	; (15a08 <get_drive+0x80>)
   1598a:	4003      	ands	r3, r0
   1598c:	4a1f      	ldr	r2, [pc, #124]	; (15a0c <get_drive+0x84>)
   1598e:	4293      	cmp	r3, r2
   15990:	d032      	beq.n	159f8 <get_drive+0x70>
   15992:	d816      	bhi.n	159c2 <get_drive+0x3a>
   15994:	2b06      	cmp	r3, #6
   15996:	d02b      	beq.n	159f0 <get_drive+0x68>
   15998:	d906      	bls.n	159a8 <get_drive+0x20>
   1599a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1599e:	d10d      	bne.n	159bc <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   159a0:	2301      	movs	r3, #1
   159a2:	700b      	strb	r3, [r1, #0]
	int err = 0;
   159a4:	2000      	movs	r0, #0
		break;
   159a6:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   159a8:	b1fb      	cbz	r3, 159ea <get_drive+0x62>
   159aa:	2b02      	cmp	r3, #2
   159ac:	d103      	bne.n	159b6 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   159ae:	2304      	movs	r3, #4
   159b0:	700b      	strb	r3, [r1, #0]
	int err = 0;
   159b2:	2000      	movs	r0, #0
		break;
   159b4:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   159b6:	f06f 0015 	mvn.w	r0, #21
   159ba:	4770      	bx	lr
   159bc:	f06f 0015 	mvn.w	r0, #21
   159c0:	4770      	bx	lr
   159c2:	4a13      	ldr	r2, [pc, #76]	; (15a10 <get_drive+0x88>)
   159c4:	4293      	cmp	r3, r2
   159c6:	d01b      	beq.n	15a00 <get_drive+0x78>
   159c8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   159cc:	d103      	bne.n	159d6 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   159ce:	2303      	movs	r3, #3
   159d0:	700b      	strb	r3, [r1, #0]
	int err = 0;
   159d2:	2000      	movs	r0, #0
		break;
   159d4:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   159d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   159da:	d103      	bne.n	159e4 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   159dc:	2302      	movs	r3, #2
   159de:	700b      	strb	r3, [r1, #0]
	int err = 0;
   159e0:	2000      	movs	r0, #0
		break;
   159e2:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   159e4:	f06f 0015 	mvn.w	r0, #21
   159e8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   159ea:	2000      	movs	r0, #0
   159ec:	7008      	strb	r0, [r1, #0]
		break;
   159ee:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   159f0:	2306      	movs	r3, #6
   159f2:	700b      	strb	r3, [r1, #0]
	int err = 0;
   159f4:	2000      	movs	r0, #0
		break;
   159f6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   159f8:	2307      	movs	r3, #7
   159fa:	700b      	strb	r3, [r1, #0]
	int err = 0;
   159fc:	2000      	movs	r0, #0
		break;
   159fe:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   15a00:	2305      	movs	r3, #5
   15a02:	700b      	strb	r3, [r1, #0]
	int err = 0;
   15a04:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   15a06:	4770      	bx	lr
   15a08:	00f00006 	.word	0x00f00006
   15a0c:	00100006 	.word	0x00100006
   15a10:	00400002 	.word	0x00400002

00015a14 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15a14:	b908      	cbnz	r0, 15a1a <get_dev+0x6>
   15a16:	4802      	ldr	r0, [pc, #8]	; (15a20 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   15a18:	4770      	bx	lr
	const struct device *dev = NULL;
   15a1a:	2000      	movs	r0, #0
   15a1c:	4770      	bx	lr
   15a1e:	bf00      	nop
   15a20:	00026e64 	.word	0x00026e64

00015a24 <gpio_nrfx_pin_interrupt_configure>:
{
   15a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a26:	b085      	sub	sp, #20
   15a28:	460e      	mov	r6, r1
   15a2a:	4619      	mov	r1, r3
	return port->config;
   15a2c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15a2e:	7b1b      	ldrb	r3, [r3, #12]
   15a30:	f006 051f 	and.w	r5, r6, #31
   15a34:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   15a38:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15a3c:	d022      	beq.n	15a84 <gpio_nrfx_pin_interrupt_configure+0x60>
   15a3e:	4607      	mov	r7, r0
   15a40:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   15a42:	2300      	movs	r3, #0
   15a44:	9302      	str	r3, [sp, #8]
   15a46:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   15a48:	4610      	mov	r0, r2
   15a4a:	f00d fbdb 	bl	23204 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   15a4e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   15a52:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   15a54:	6899      	ldr	r1, [r3, #8]
   15a56:	40f1      	lsrs	r1, r6
   15a58:	f011 0f01 	tst.w	r1, #1
   15a5c:	d102      	bne.n	15a64 <gpio_nrfx_pin_interrupt_configure+0x40>
   15a5e:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   15a62:	d014      	beq.n	15a8e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15a64:	2300      	movs	r3, #0
   15a66:	aa02      	add	r2, sp, #8
   15a68:	4619      	mov	r1, r3
   15a6a:	4628      	mov	r0, r5
   15a6c:	f005 f9f4 	bl	1ae58 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15a70:	4b18      	ldr	r3, [pc, #96]	; (15ad4 <gpio_nrfx_pin_interrupt_configure+0xb0>)
   15a72:	4298      	cmp	r0, r3
   15a74:	d12a      	bne.n	15acc <gpio_nrfx_pin_interrupt_configure+0xa8>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   15a76:	2101      	movs	r1, #1
   15a78:	4628      	mov	r0, r5
   15a7a:	f005 fbb9 	bl	1b1f0 <nrfx_gpiote_trigger_enable>
	return 0;
   15a7e:	2000      	movs	r0, #0
}
   15a80:	b005      	add	sp, #20
   15a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   15a84:	4628      	mov	r0, r5
   15a86:	f005 fc0b 	bl	1b2a0 <nrfx_gpiote_trigger_disable>
		return 0;
   15a8a:	2000      	movs	r0, #0
   15a8c:	e7f8      	b.n	15a80 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   15a8e:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15a92:	3380      	adds	r3, #128	; 0x80
   15a94:	4a10      	ldr	r2, [pc, #64]	; (15ad8 <gpio_nrfx_pin_interrupt_configure+0xb4>)
   15a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   15a9a:	f013 0f01 	tst.w	r3, #1
   15a9e:	d1e1      	bne.n	15a64 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15aa0:	f10d 0107 	add.w	r1, sp, #7
   15aa4:	4628      	mov	r0, r5
   15aa6:	f005 fb47 	bl	1b138 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   15aaa:	4b0c      	ldr	r3, [pc, #48]	; (15adc <gpio_nrfx_pin_interrupt_configure+0xb8>)
   15aac:	4298      	cmp	r0, r3
   15aae:	d003      	beq.n	15ab8 <gpio_nrfx_pin_interrupt_configure+0x94>
		trigger_config.p_in_channel = &ch;
   15ab0:	f10d 0307 	add.w	r3, sp, #7
   15ab4:	9303      	str	r3, [sp, #12]
   15ab6:	e7d5      	b.n	15a64 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   15ab8:	f10d 0007 	add.w	r0, sp, #7
   15abc:	f005 fb90 	bl	1b1e0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   15ac0:	4b04      	ldr	r3, [pc, #16]	; (15ad4 <gpio_nrfx_pin_interrupt_configure+0xb0>)
   15ac2:	4298      	cmp	r0, r3
   15ac4:	d0f4      	beq.n	15ab0 <gpio_nrfx_pin_interrupt_configure+0x8c>
				return -ENOMEM;
   15ac6:	f06f 000b 	mvn.w	r0, #11
   15aca:	e7d9      	b.n	15a80 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   15acc:	f06f 0004 	mvn.w	r0, #4
   15ad0:	e7d6      	b.n	15a80 <gpio_nrfx_pin_interrupt_configure+0x5c>
   15ad2:	bf00      	nop
   15ad4:	0bad0000 	.word	0x0bad0000
   15ad8:	40842500 	.word	0x40842500
   15adc:	0bad0004 	.word	0x0bad0004

00015ae0 <pin_uninit>:
{
   15ae0:	b530      	push	{r4, r5, lr}
   15ae2:	b083      	sub	sp, #12
   15ae4:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   15ae6:	f10d 0107 	add.w	r1, sp, #7
   15aea:	f005 fb25 	bl	1b138 <nrfx_gpiote_channel_get>
   15aee:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   15af0:	4620      	mov	r0, r4
   15af2:	f005 fbff 	bl	1b2f4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   15af6:	4b0b      	ldr	r3, [pc, #44]	; (15b24 <pin_uninit+0x44>)
   15af8:	4298      	cmp	r0, r3
   15afa:	d10f      	bne.n	15b1c <pin_uninit+0x3c>
	if (free_ch) {
   15afc:	429d      	cmp	r5, r3
   15afe:	d005      	beq.n	15b0c <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   15b00:	4b08      	ldr	r3, [pc, #32]	; (15b24 <pin_uninit+0x44>)
   15b02:	4298      	cmp	r0, r3
   15b04:	d107      	bne.n	15b16 <pin_uninit+0x36>
   15b06:	2000      	movs	r0, #0
}
   15b08:	b003      	add	sp, #12
   15b0a:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   15b0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15b10:	f005 fb5e 	bl	1b1d0 <nrfx_gpiote_channel_free>
   15b14:	e7f4      	b.n	15b00 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   15b16:	f06f 0004 	mvn.w	r0, #4
   15b1a:	e7f5      	b.n	15b08 <pin_uninit+0x28>
		return -EIO;
   15b1c:	f06f 0004 	mvn.w	r0, #4
   15b20:	e7f2      	b.n	15b08 <pin_uninit+0x28>
   15b22:	bf00      	nop
   15b24:	0bad0000 	.word	0x0bad0000

00015b28 <gpio_nrfx_pin_configure>:
{
   15b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15b2c:	b087      	sub	sp, #28
	return port->config;
   15b2e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15b32:	f898 300c 	ldrb.w	r3, [r8, #12]
   15b36:	f001 051f 	and.w	r5, r1, #31
   15b3a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   15b3e:	2a00      	cmp	r2, #0
   15b40:	d043      	beq.n	15bca <gpio_nrfx_pin_configure+0xa2>
   15b42:	460c      	mov	r4, r1
   15b44:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   15b46:	2600      	movs	r6, #0
   15b48:	9603      	str	r6, [sp, #12]
   15b4a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   15b4c:	f10d 0117 	add.w	r1, sp, #23
   15b50:	4620      	mov	r0, r4
   15b52:	f005 faf1 	bl	1b138 <nrfx_gpiote_channel_get>
   15b56:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15b58:	4633      	mov	r3, r6
   15b5a:	aa03      	add	r2, sp, #12
   15b5c:	4631      	mov	r1, r6
   15b5e:	4628      	mov	r0, r5
   15b60:	f005 f97a 	bl	1ae58 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15b64:	4b2f      	ldr	r3, [pc, #188]	; (15c24 <gpio_nrfx_pin_configure+0xfc>)
   15b66:	4298      	cmp	r0, r3
   15b68:	d159      	bne.n	15c1e <gpio_nrfx_pin_configure+0xf6>
	if (free_ch) {
   15b6a:	4599      	cmp	r9, r3
   15b6c:	d035      	beq.n	15bda <gpio_nrfx_pin_configure+0xb2>
	if (flags & GPIO_OUTPUT) {
   15b6e:	f417 7f00 	tst.w	r7, #512	; 0x200
   15b72:	d041      	beq.n	15bf8 <gpio_nrfx_pin_configure+0xd0>
		int rv = get_drive(flags, &drive);
   15b74:	f10d 0103 	add.w	r1, sp, #3
   15b78:	4638      	mov	r0, r7
   15b7a:	f7ff ff05 	bl	15988 <get_drive>
		if (rv != 0) {
   15b7e:	4606      	mov	r6, r0
   15b80:	bb38      	cbnz	r0, 15bd2 <gpio_nrfx_pin_configure+0xaa>
		nrfx_gpiote_output_config_t output_config = {
   15b82:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15b86:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   15b8a:	f417 7f80 	tst.w	r7, #256	; 0x100
   15b8e:	bf0c      	ite	eq
   15b90:	2301      	moveq	r3, #1
   15b92:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   15b94:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   15b98:	4638      	mov	r0, r7
   15b9a:	f00d fb07 	bl	231ac <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   15b9e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   15ba2:	f417 6f00 	tst.w	r7, #2048	; 0x800
   15ba6:	d01d      	beq.n	15be4 <gpio_nrfx_pin_configure+0xbc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   15ba8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   15bac:	2101      	movs	r1, #1
   15bae:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   15bb2:	609c      	str	r4, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   15bb4:	2200      	movs	r2, #0
   15bb6:	a901      	add	r1, sp, #4
   15bb8:	4628      	mov	r0, r5
   15bba:	f005 f9ff 	bl	1afbc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   15bbe:	4b19      	ldr	r3, [pc, #100]	; (15c24 <gpio_nrfx_pin_configure+0xfc>)
   15bc0:	4298      	cmp	r0, r3
   15bc2:	d006      	beq.n	15bd2 <gpio_nrfx_pin_configure+0xaa>
   15bc4:	f06f 0615 	mvn.w	r6, #21
   15bc8:	e003      	b.n	15bd2 <gpio_nrfx_pin_configure+0xaa>
		return pin_uninit(abs_pin);
   15bca:	4628      	mov	r0, r5
   15bcc:	f7ff ff88 	bl	15ae0 <pin_uninit>
   15bd0:	4606      	mov	r6, r0
}
   15bd2:	4630      	mov	r0, r6
   15bd4:	b007      	add	sp, #28
   15bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   15bda:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15bde:	f005 faf7 	bl	1b1d0 <nrfx_gpiote_channel_free>
   15be2:	e7c4      	b.n	15b6e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   15be4:	f417 6f80 	tst.w	r7, #1024	; 0x400
   15be8:	d0e4      	beq.n	15bb4 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   15bea:	f8d8 2004 	ldr.w	r2, [r8, #4]
   15bee:	2301      	movs	r3, #1
   15bf0:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   15bf4:	60d4      	str	r4, [r2, #12]
}
   15bf6:	e7dd      	b.n	15bb4 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   15bf8:	4638      	mov	r0, r7
   15bfa:	f00d fad7 	bl	231ac <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   15bfe:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   15c02:	2300      	movs	r3, #0
   15c04:	461a      	mov	r2, r3
   15c06:	a902      	add	r1, sp, #8
   15c08:	4628      	mov	r0, r5
   15c0a:	f005 f925 	bl	1ae58 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   15c0e:	4b05      	ldr	r3, [pc, #20]	; (15c24 <gpio_nrfx_pin_configure+0xfc>)
   15c10:	4298      	cmp	r0, r3
   15c12:	d101      	bne.n	15c18 <gpio_nrfx_pin_configure+0xf0>
   15c14:	2600      	movs	r6, #0
   15c16:	e7dc      	b.n	15bd2 <gpio_nrfx_pin_configure+0xaa>
   15c18:	f06f 0615 	mvn.w	r6, #21
   15c1c:	e7d9      	b.n	15bd2 <gpio_nrfx_pin_configure+0xaa>
		return -EINVAL;
   15c1e:	f06f 0615 	mvn.w	r6, #21
   15c22:	e7d6      	b.n	15bd2 <gpio_nrfx_pin_configure+0xaa>
   15c24:	0bad0000 	.word	0x0bad0000

00015c28 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15c28:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   15c2a:	f005 fac7 	bl	1b1bc <nrfx_gpiote_is_init>
   15c2e:	b108      	cbz	r0, 15c34 <gpio_nrfx_init+0xc>
		return 0;
   15c30:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   15c32:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   15c34:	f005 fa98 	bl	1b168 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   15c38:	4b08      	ldr	r3, [pc, #32]	; (15c5c <gpio_nrfx_init+0x34>)
   15c3a:	4298      	cmp	r0, r3
   15c3c:	d10a      	bne.n	15c54 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   15c3e:	2100      	movs	r1, #0
   15c40:	4807      	ldr	r0, [pc, #28]	; (15c60 <gpio_nrfx_init+0x38>)
   15c42:	f005 fa73 	bl	1b12c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15c46:	2200      	movs	r2, #0
   15c48:	2105      	movs	r1, #5
   15c4a:	2031      	movs	r0, #49	; 0x31
   15c4c:	f7fe f924 	bl	13e98 <z_arm_irq_priority_set>
	return 0;
   15c50:	2000      	movs	r0, #0
   15c52:	e7ee      	b.n	15c32 <gpio_nrfx_init+0xa>
		return -EIO;
   15c54:	f06f 0004 	mvn.w	r0, #4
   15c58:	e7eb      	b.n	15c32 <gpio_nrfx_init+0xa>
   15c5a:	bf00      	nop
   15c5c:	0bad0000 	.word	0x0bad0000
   15c60:	00023295 	.word	0x00023295

00015c64 <uarte_nrfx_pins_configure>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   15c64:	6843      	ldr	r3, [r0, #4]
#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
   15c66:	2900      	cmp	r1, #0
   15c68:	d153      	bne.n	15d12 <uarte_nrfx_pins_configure+0xae>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15c6a:	68da      	ldr	r2, [r3, #12]
   15c6c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15c70:	d00d      	beq.n	15c8e <uarte_nrfx_pins_configure+0x2a>
    *p_pin = pin_number & 0x1F;
   15c72:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15c76:	2101      	movs	r1, #1
   15c78:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   15c7c:	493b      	ldr	r1, [pc, #236]	; (15d6c <uarte_nrfx_pins_configure+0x108>)
   15c7e:	608a      	str	r2, [r1, #8]
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
   15c80:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   15c82:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15c86:	3280      	adds	r2, #128	; 0x80
   15c88:	2003      	movs	r0, #3
   15c8a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15c8e:	691a      	ldr	r2, [r3, #16]
   15c90:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15c94:	d00a      	beq.n	15cac <uarte_nrfx_pins_configure+0x48>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
   15c96:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   15c98:	2900      	cmp	r1, #0
   15c9a:	d036      	beq.n	15d0a <uarte_nrfx_pins_configure+0xa6>
   15c9c:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   15c9e:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15ca2:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   15ca4:	3280      	adds	r2, #128	; 0x80
   15ca6:	4831      	ldr	r0, [pc, #196]	; (15d6c <uarte_nrfx_pins_configure+0x108>)
   15ca8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15cac:	695a      	ldr	r2, [r3, #20]
   15cae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15cb2:	d00d      	beq.n	15cd0 <uarte_nrfx_pins_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   15cb4:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15cb8:	2101      	movs	r1, #1
   15cba:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   15cbe:	492b      	ldr	r1, [pc, #172]	; (15d6c <uarte_nrfx_pins_configure+0x108>)
   15cc0:	608a      	str	r2, [r1, #8]
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
   15cc2:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   15cc4:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15cc8:	3280      	adds	r2, #128	; 0x80
   15cca:	2003      	movs	r0, #3
   15ccc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15cd0:	699a      	ldr	r2, [r3, #24]
   15cd2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15cd6:	d009      	beq.n	15cec <uarte_nrfx_pins_configure+0x88>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
   15cd8:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   15cda:	b1c1      	cbz	r1, 15d0e <uarte_nrfx_pins_configure+0xaa>
   15cdc:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   15cde:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15ce2:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   15ce4:	3280      	adds	r2, #128	; 0x80
   15ce6:	4821      	ldr	r0, [pc, #132]	; (15d6c <uarte_nrfx_pins_configure+0x108>)
   15ce8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   15cec:	681a      	ldr	r2, [r3, #0]
   15cee:	68d8      	ldr	r0, [r3, #12]
   15cf0:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
   15cf2:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   15cf6:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   15cfa:	681a      	ldr	r2, [r3, #0]
   15cfc:	6959      	ldr	r1, [r3, #20]
   15cfe:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
   15d00:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   15d04:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   15d08:	4770      	bx	lr
			nrf_gpio_cfg_input(cfg->rx_pin,
   15d0a:	2100      	movs	r1, #0
   15d0c:	e7c7      	b.n	15c9e <uarte_nrfx_pins_configure+0x3a>
			nrf_gpio_cfg_input(cfg->cts_pin,
   15d0e:	2100      	movs	r1, #0
   15d10:	e7e5      	b.n	15cde <uarte_nrfx_pins_configure+0x7a>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15d12:	68da      	ldr	r2, [r3, #12]
   15d14:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15d18:	d006      	beq.n	15d28 <uarte_nrfx_pins_configure+0xc4>
    *p_pin = pin_number & 0x1F;
   15d1a:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15d1e:	3280      	adds	r2, #128	; 0x80
   15d20:	4912      	ldr	r1, [pc, #72]	; (15d6c <uarte_nrfx_pins_configure+0x108>)
   15d22:	2002      	movs	r0, #2
   15d24:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15d28:	691a      	ldr	r2, [r3, #16]
   15d2a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15d2e:	d006      	beq.n	15d3e <uarte_nrfx_pins_configure+0xda>
    *p_pin = pin_number & 0x1F;
   15d30:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15d34:	3280      	adds	r2, #128	; 0x80
   15d36:	490d      	ldr	r1, [pc, #52]	; (15d6c <uarte_nrfx_pins_configure+0x108>)
   15d38:	2002      	movs	r0, #2
   15d3a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15d3e:	695a      	ldr	r2, [r3, #20]
   15d40:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15d44:	d006      	beq.n	15d54 <uarte_nrfx_pins_configure+0xf0>
    *p_pin = pin_number & 0x1F;
   15d46:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15d4a:	3280      	adds	r2, #128	; 0x80
   15d4c:	4907      	ldr	r1, [pc, #28]	; (15d6c <uarte_nrfx_pins_configure+0x108>)
   15d4e:	2002      	movs	r0, #2
   15d50:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15d54:	699a      	ldr	r2, [r3, #24]
   15d56:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15d5a:	d0c7      	beq.n	15cec <uarte_nrfx_pins_configure+0x88>
    *p_pin = pin_number & 0x1F;
   15d5c:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15d60:	3280      	adds	r2, #128	; 0x80
   15d62:	4902      	ldr	r1, [pc, #8]	; (15d6c <uarte_nrfx_pins_configure+0x108>)
   15d64:	2002      	movs	r0, #2
   15d66:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
}
   15d6a:	e7bf      	b.n	15cec <uarte_nrfx_pins_configure+0x88>
   15d6c:	40842500 	.word	0x40842500

00015d70 <baudrate_set>:
	return dev->config;
   15d70:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   15d72:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   15d74:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   15d78:	d06f      	beq.n	15e5a <baudrate_set+0xea>
   15d7a:	d83a      	bhi.n	15df2 <baudrate_set+0x82>
   15d7c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   15d80:	d06e      	beq.n	15e60 <baudrate_set+0xf0>
   15d82:	d90a      	bls.n	15d9a <baudrate_set+0x2a>
   15d84:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   15d88:	d075      	beq.n	15e76 <baudrate_set+0x106>
   15d8a:	d924      	bls.n	15dd6 <baudrate_set+0x66>
   15d8c:	f647 2312 	movw	r3, #31250	; 0x7a12
   15d90:	4299      	cmp	r1, r3
   15d92:	d12b      	bne.n	15dec <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15d94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15d98:	e013      	b.n	15dc2 <baudrate_set+0x52>
	switch (baudrate) {
   15d9a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   15d9e:	d061      	beq.n	15e64 <baudrate_set+0xf4>
   15da0:	d907      	bls.n	15db2 <baudrate_set+0x42>
   15da2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   15da6:	d063      	beq.n	15e70 <baudrate_set+0x100>
   15da8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   15dac:	d110      	bne.n	15dd0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15dae:	4b3c      	ldr	r3, [pc, #240]	; (15ea0 <baudrate_set+0x130>)
   15db0:	e007      	b.n	15dc2 <baudrate_set+0x52>
	switch (baudrate) {
   15db2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   15db6:	d058      	beq.n	15e6a <baudrate_set+0xfa>
   15db8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   15dbc:	d105      	bne.n	15dca <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   15dbe:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15dc2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   15dc6:	2000      	movs	r0, #0
   15dc8:	4770      	bx	lr
	switch (baudrate) {
   15dca:	f06f 0015 	mvn.w	r0, #21
   15dce:	4770      	bx	lr
   15dd0:	f06f 0015 	mvn.w	r0, #21
   15dd4:	4770      	bx	lr
   15dd6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   15dda:	d04e      	beq.n	15e7a <baudrate_set+0x10a>
   15ddc:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   15de0:	d101      	bne.n	15de6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15de2:	4b30      	ldr	r3, [pc, #192]	; (15ea4 <baudrate_set+0x134>)
   15de4:	e7ed      	b.n	15dc2 <baudrate_set+0x52>
	switch (baudrate) {
   15de6:	f06f 0015 	mvn.w	r0, #21
   15dea:	4770      	bx	lr
   15dec:	f06f 0015 	mvn.w	r0, #21
   15df0:	4770      	bx	lr
   15df2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   15df6:	d042      	beq.n	15e7e <baudrate_set+0x10e>
   15df8:	d909      	bls.n	15e0e <baudrate_set+0x9e>
   15dfa:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   15dfe:	d046      	beq.n	15e8e <baudrate_set+0x11e>
   15e00:	d91f      	bls.n	15e42 <baudrate_set+0xd2>
   15e02:	4b29      	ldr	r3, [pc, #164]	; (15ea8 <baudrate_set+0x138>)
   15e04:	4299      	cmp	r1, r3
   15e06:	d148      	bne.n	15e9a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15e08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15e0c:	e7d9      	b.n	15dc2 <baudrate_set+0x52>
	switch (baudrate) {
   15e0e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   15e12:	d037      	beq.n	15e84 <baudrate_set+0x114>
   15e14:	d905      	bls.n	15e22 <baudrate_set+0xb2>
   15e16:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   15e1a:	d10f      	bne.n	15e3c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15e1c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15e20:	e7cf      	b.n	15dc2 <baudrate_set+0x52>
	switch (baudrate) {
   15e22:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   15e26:	4299      	cmp	r1, r3
   15e28:	d02e      	beq.n	15e88 <baudrate_set+0x118>
   15e2a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   15e2e:	d102      	bne.n	15e36 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15e30:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15e34:	e7c5      	b.n	15dc2 <baudrate_set+0x52>
	switch (baudrate) {
   15e36:	f06f 0015 	mvn.w	r0, #21
   15e3a:	4770      	bx	lr
   15e3c:	f06f 0015 	mvn.w	r0, #21
   15e40:	4770      	bx	lr
   15e42:	4b1a      	ldr	r3, [pc, #104]	; (15eac <baudrate_set+0x13c>)
   15e44:	4299      	cmp	r1, r3
   15e46:	d025      	beq.n	15e94 <baudrate_set+0x124>
   15e48:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   15e4c:	d102      	bne.n	15e54 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15e4e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15e52:	e7b6      	b.n	15dc2 <baudrate_set+0x52>
	switch (baudrate) {
   15e54:	f06f 0015 	mvn.w	r0, #21
   15e58:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15e5a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15e5e:	e7b0      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15e60:	4b13      	ldr	r3, [pc, #76]	; (15eb0 <baudrate_set+0x140>)
   15e62:	e7ae      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15e64:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15e68:	e7ab      	b.n	15dc2 <baudrate_set+0x52>
	switch (baudrate) {
   15e6a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15e6e:	e7a8      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   15e70:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15e74:	e7a5      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15e76:	4b0f      	ldr	r3, [pc, #60]	; (15eb4 <baudrate_set+0x144>)
   15e78:	e7a3      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15e7a:	4b0f      	ldr	r3, [pc, #60]	; (15eb8 <baudrate_set+0x148>)
   15e7c:	e7a1      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   15e7e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15e82:	e79e      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   15e84:	4b0d      	ldr	r3, [pc, #52]	; (15ebc <baudrate_set+0x14c>)
   15e86:	e79c      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   15e88:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15e8c:	e799      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   15e8e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15e92:	e796      	b.n	15dc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   15e94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   15e98:	e793      	b.n	15dc2 <baudrate_set+0x52>
	switch (baudrate) {
   15e9a:	f06f 0015 	mvn.w	r0, #21
}
   15e9e:	4770      	bx	lr
   15ea0:	0013b000 	.word	0x0013b000
   15ea4:	004ea000 	.word	0x004ea000
   15ea8:	000f4240 	.word	0x000f4240
   15eac:	0003d090 	.word	0x0003d090
   15eb0:	00275000 	.word	0x00275000
   15eb4:	0075c000 	.word	0x0075c000
   15eb8:	003af000 	.word	0x003af000
   15ebc:	013a9000 	.word	0x013a9000

00015ec0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   15ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ec4:	4605      	mov	r5, r0
   15ec6:	460f      	mov	r7, r1
	return dev->data;
   15ec8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15ecc:	f00f ff4e 	bl	25d6c <k_is_in_isr>
   15ed0:	b920      	cbnz	r0, 15edc <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   15ed2:	4b16      	ldr	r3, [pc, #88]	; (15f2c <uarte_nrfx_poll_out+0x6c>)
   15ed4:	781b      	ldrb	r3, [r3, #0]
   15ed6:	b1ab      	cbz	r3, 15f04 <uarte_nrfx_poll_out+0x44>
   15ed8:	2300      	movs	r3, #0
   15eda:	e000      	b.n	15ede <uarte_nrfx_poll_out+0x1e>
   15edc:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   15ede:	b19b      	cbz	r3, 15f08 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   15ee0:	f04f 0320 	mov.w	r3, #32
   15ee4:	f3ef 8411 	mrs	r4, BASEPRI
   15ee8:	f383 8812 	msr	BASEPRI_MAX, r3
   15eec:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   15ef0:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   15ef2:	4628      	mov	r0, r5
   15ef4:	f00d fabe 	bl	23474 <is_tx_ready>
   15ef8:	b950      	cbnz	r0, 15f10 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   15efa:	f384 8811 	msr	BASEPRI, r4
   15efe:	f3bf 8f6f 	isb	sy
}
   15f02:	e7ed      	b.n	15ee0 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15f04:	2301      	movs	r3, #1
   15f06:	e7ea      	b.n	15ede <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   15f08:	4628      	mov	r0, r5
   15f0a:	f00d fbd1 	bl	236b0 <wait_tx_ready>
   15f0e:	4606      	mov	r6, r0
	}

	data->char_out = c;
   15f10:	4641      	mov	r1, r8
   15f12:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   15f16:	2201      	movs	r2, #1
   15f18:	4628      	mov	r0, r5
   15f1a:	f00d fac5 	bl	234a8 <tx_start>
	__asm__ volatile(
   15f1e:	f386 8811 	msr	BASEPRI, r6
   15f22:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   15f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15f2a:	bf00      	nop
   15f2c:	2000fa40 	.word	0x2000fa40

00015f30 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   15f30:	b538      	push	{r3, r4, r5, lr}
   15f32:	4605      	mov	r5, r0
   15f34:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   15f36:	f101 0016 	add.w	r0, r1, #22
   15f3a:	f004 fdb1 	bl	1aaa0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   15f3e:	4b12      	ldr	r3, [pc, #72]	; (15f88 <endtx_stoptx_ppi_init+0x58>)
   15f40:	4298      	cmp	r0, r3
   15f42:	d10e      	bne.n	15f62 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   15f44:	7da3      	ldrb	r3, [r4, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15f4a:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15f4e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   15f52:	7da2      	ldrb	r2, [r4, #22]
   15f54:	2301      	movs	r3, #1
   15f56:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   15f58:	4a0c      	ldr	r2, [pc, #48]	; (15f8c <endtx_stoptx_ppi_init+0x5c>)
   15f5a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   15f5e:	2000      	movs	r0, #0
}
   15f60:	bd38      	pop	{r3, r4, r5, pc}
   15f62:	4b0b      	ldr	r3, [pc, #44]	; (15f90 <endtx_stoptx_ppi_init+0x60>)
   15f64:	4a0b      	ldr	r2, [pc, #44]	; (15f94 <endtx_stoptx_ppi_init+0x64>)
   15f66:	1a9b      	subs	r3, r3, r2
   15f68:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   15f6a:	f04f 0100 	mov.w	r1, #0
   15f6e:	2201      	movs	r2, #1
   15f70:	f362 0102 	bfi	r1, r2, #0, #3
   15f74:	f36f 01c5 	bfc	r1, #3, #3
   15f78:	f363 118f 	bfi	r1, r3, #6, #10
   15f7c:	4806      	ldr	r0, [pc, #24]	; (15f98 <endtx_stoptx_ppi_init+0x68>)
   15f7e:	f7fd f865 	bl	1304c <log_0>
		return -EIO;
   15f82:	f06f 0004 	mvn.w	r0, #4
   15f86:	e7eb      	b.n	15f60 <endtx_stoptx_ppi_init+0x30>
   15f88:	0bad0000 	.word	0x0bad0000
   15f8c:	40017000 	.word	0x40017000
   15f90:	00027190 	.word	0x00027190
   15f94:	00027108 	.word	0x00027108
   15f98:	00028724 	.word	0x00028724

00015f9c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   15f9c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   15fa0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   15fa4:	4b01      	ldr	r3, [pc, #4]	; (15fac <set_comparator+0x10>)
   15fa6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   15faa:	4770      	bx	lr
   15fac:	40015000 	.word	0x40015000

00015fb0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   15fb0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   15fb4:	4b01      	ldr	r3, [pc, #4]	; (15fbc <get_comparator+0xc>)
   15fb6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   15fba:	4770      	bx	lr
   15fbc:	40015000 	.word	0x40015000

00015fc0 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   15fc4:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   15fc6:	4a02      	ldr	r2, [pc, #8]	; (15fd0 <event_enable+0x10>)
   15fc8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   15fcc:	4770      	bx	lr
   15fce:	bf00      	nop
   15fd0:	40015000 	.word	0x40015000

00015fd4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   15fd8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   15fda:	4a02      	ldr	r2, [pc, #8]	; (15fe4 <event_disable+0x10>)
   15fdc:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   15fe0:	4770      	bx	lr
   15fe2:	bf00      	nop
   15fe4:	40015000 	.word	0x40015000

00015fe8 <counter>:
     return p_reg->COUNTER;
   15fe8:	4b01      	ldr	r3, [pc, #4]	; (15ff0 <counter+0x8>)
   15fea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   15fee:	4770      	bx	lr
   15ff0:	40015000 	.word	0x40015000

00015ff4 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   15ff4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   15ff6:	2301      	movs	r3, #1
   15ff8:	4083      	lsls	r3, r0
   15ffa:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15ffc:	4a0c      	ldr	r2, [pc, #48]	; (16030 <compare_int_lock+0x3c>)
   15ffe:	e8d2 1fef 	ldaex	r1, [r2]
   16002:	ea01 0c04 	and.w	ip, r1, r4
   16006:	e8c2 cfee 	stlex	lr, ip, [r2]
   1600a:	f1be 0f00 	cmp.w	lr, #0
   1600e:	d1f6      	bne.n	15ffe <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16010:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16014:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   16018:	4a06      	ldr	r2, [pc, #24]	; (16034 <compare_int_lock+0x40>)
   1601a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   1601e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16022:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   16026:	420b      	tst	r3, r1
}
   16028:	bf14      	ite	ne
   1602a:	2001      	movne	r0, #1
   1602c:	2000      	moveq	r0, #0
   1602e:	bd10      	pop	{r4, pc}
   16030:	2000e3c0 	.word	0x2000e3c0
   16034:	40015000 	.word	0x40015000

00016038 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   16038:	b570      	push	{r4, r5, r6, lr}
   1603a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   1603c:	f00d fbee 	bl	2381c <full_int_lock>
   16040:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   16042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16046:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   16048:	4a15      	ldr	r2, [pc, #84]	; (160a0 <channel_processing_check_and_clear+0x68>)
   1604a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1604e:	4213      	tst	r3, r2
   16050:	d105      	bne.n	1605e <channel_processing_check_and_clear+0x26>
	bool result = false;
   16052:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   16054:	4628      	mov	r0, r5
   16056:	f00d fbea 	bl	2382e <full_int_unlock>

	return result;
}
   1605a:	4630      	mov	r0, r6
   1605c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1605e:	2301      	movs	r3, #1
   16060:	40a3      	lsls	r3, r4
   16062:	43db      	mvns	r3, r3
   16064:	4a0f      	ldr	r2, [pc, #60]	; (160a4 <channel_processing_check_and_clear+0x6c>)
   16066:	e8d2 1fef 	ldaex	r1, [r2]
   1606a:	ea01 0003 	and.w	r0, r1, r3
   1606e:	e8c2 0fe6 	stlex	r6, r0, [r2]
   16072:	2e00      	cmp	r6, #0
   16074:	d1f7      	bne.n	16066 <channel_processing_check_and_clear+0x2e>
   16076:	b959      	cbnz	r1, 16090 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   16078:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1607c:	009b      	lsls	r3, r3, #2
   1607e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16084:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   16088:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1608a:	b113      	cbz	r3, 16092 <channel_processing_check_and_clear+0x5a>
   1608c:	2301      	movs	r3, #1
   1608e:	e000      	b.n	16092 <channel_processing_check_and_clear+0x5a>
   16090:	2301      	movs	r3, #1
		if (result) {
   16092:	461e      	mov	r6, r3
   16094:	2b00      	cmp	r3, #0
   16096:	d0dd      	beq.n	16054 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   16098:	4620      	mov	r0, r4
   1609a:	f00d fbb0 	bl	237fe <event_clear>
   1609e:	e7d9      	b.n	16054 <channel_processing_check_and_clear+0x1c>
   160a0:	40015000 	.word	0x40015000
   160a4:	2000e3bc 	.word	0x2000e3bc

000160a8 <compare_int_unlock>:
	if (key) {
   160a8:	b901      	cbnz	r1, 160ac <compare_int_unlock+0x4>
}
   160aa:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   160ac:	2301      	movs	r3, #1
   160ae:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   160b0:	4a0e      	ldr	r2, [pc, #56]	; (160ec <compare_int_unlock+0x44>)
   160b2:	e8d2 1fef 	ldaex	r1, [r2]
   160b6:	4319      	orrs	r1, r3
   160b8:	e8c2 1fec 	stlex	ip, r1, [r2]
   160bc:	f1bc 0f00 	cmp.w	ip, #0
   160c0:	d1f7      	bne.n	160b2 <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   160c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   160c6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   160c8:	4a09      	ldr	r2, [pc, #36]	; (160f0 <compare_int_unlock+0x48>)
   160ca:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   160ce:	4b09      	ldr	r3, [pc, #36]	; (160f4 <compare_int_unlock+0x4c>)
   160d0:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   160d4:	fa23 f000 	lsr.w	r0, r3, r0
   160d8:	f010 0f01 	tst.w	r0, #1
   160dc:	d0e5      	beq.n	160aa <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   160de:	4b06      	ldr	r3, [pc, #24]	; (160f8 <compare_int_unlock+0x50>)
   160e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   160e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   160e8:	e7df      	b.n	160aa <compare_int_unlock+0x2>
   160ea:	bf00      	nop
   160ec:	2000e3c0 	.word	0x2000e3c0
   160f0:	40015000 	.word	0x40015000
   160f4:	2000e3bc 	.word	0x2000e3bc
   160f8:	e000e100 	.word	0xe000e100

000160fc <sys_clock_timeout_handler>:
{
   160fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160fe:	4607      	mov	r7, r0
   16100:	4614      	mov	r4, r2
   16102:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   16104:	4610      	mov	r0, r2
   16106:	4619      	mov	r1, r3
   16108:	f00d fb85 	bl	23816 <absolute_time_to_cc>
   1610c:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1610e:	4b15      	ldr	r3, [pc, #84]	; (16164 <sys_clock_timeout_handler+0x68>)
   16110:	681a      	ldr	r2, [r3, #0]
   16112:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   16114:	601c      	str	r4, [r3, #0]
   16116:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   16118:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1611c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   16120:	d308      	bcc.n	16134 <sys_clock_timeout_handler+0x38>
	return false;
   16122:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   16124:	f009 ff8e 	bl	20044 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   16128:	4638      	mov	r0, r7
   1612a:	f7ff ff41 	bl	15fb0 <get_comparator>
   1612e:	42a8      	cmp	r0, r5
   16130:	d00c      	beq.n	1614c <sys_clock_timeout_handler+0x50>
}
   16132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   16134:	4b0c      	ldr	r3, [pc, #48]	; (16168 <sys_clock_timeout_handler+0x6c>)
   16136:	6819      	ldr	r1, [r3, #0]
   16138:	0a0b      	lsrs	r3, r1, #8
   1613a:	060a      	lsls	r2, r1, #24
   1613c:	1952      	adds	r2, r2, r5
   1613e:	f143 0300 	adc.w	r3, r3, #0
   16142:	490a      	ldr	r1, [pc, #40]	; (1616c <sys_clock_timeout_handler+0x70>)
   16144:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   16148:	2401      	movs	r4, #1
   1614a:	e7eb      	b.n	16124 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   1614c:	b11c      	cbz	r4, 16156 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1614e:	4638      	mov	r0, r7
   16150:	f7ff ff36 	bl	15fc0 <event_enable>
}
   16154:	e7ed      	b.n	16132 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   16156:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1615a:	4638      	mov	r0, r7
   1615c:	f7ff ff1e 	bl	15f9c <set_comparator>
   16160:	e7f5      	b.n	1614e <sys_clock_timeout_handler+0x52>
   16162:	bf00      	nop
   16164:	2000ca70 	.word	0x2000ca70
   16168:	2000e3c4 	.word	0x2000e3c4
   1616c:	2000ca58 	.word	0x2000ca58

00016170 <z_nrf_rtc_timer_read>:
{
   16170:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   16172:	4b0d      	ldr	r3, [pc, #52]	; (161a8 <z_nrf_rtc_timer_read+0x38>)
   16174:	681b      	ldr	r3, [r3, #0]
   16176:	0a1d      	lsrs	r5, r3, #8
   16178:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1617a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1617e:	f7ff ff33 	bl	15fe8 <counter>
   16182:	4603      	mov	r3, r0
	val += cntr;
   16184:	1820      	adds	r0, r4, r0
   16186:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1618a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1618e:	d20a      	bcs.n	161a6 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   16190:	4b06      	ldr	r3, [pc, #24]	; (161ac <z_nrf_rtc_timer_read+0x3c>)
   16192:	e9d3 2300 	ldrd	r2, r3, [r3]
   16196:	4299      	cmp	r1, r3
   16198:	bf08      	it	eq
   1619a:	4290      	cmpeq	r0, r2
   1619c:	d203      	bcs.n	161a6 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1619e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   161a2:	f141 0100 	adc.w	r1, r1, #0
}
   161a6:	bd38      	pop	{r3, r4, r5, pc}
   161a8:	2000e3c4 	.word	0x2000e3c4
   161ac:	2000ca58 	.word	0x2000ca58

000161b0 <compare_set_nolocks>:
{
   161b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   161b4:	4606      	mov	r6, r0
   161b6:	4614      	mov	r4, r2
   161b8:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   161ba:	4610      	mov	r0, r2
   161bc:	4619      	mov	r1, r3
   161be:	f00d fb2a 	bl	23816 <absolute_time_to_cc>
   161c2:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   161c4:	f7ff ffd4 	bl	16170 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   161c8:	42a9      	cmp	r1, r5
   161ca:	bf08      	it	eq
   161cc:	42a0      	cmpeq	r0, r4
   161ce:	d21e      	bcs.n	1620e <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   161d0:	ebb4 0800 	subs.w	r8, r4, r0
   161d4:	eb65 0901 	sbc.w	r9, r5, r1
   161d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   161dc:	2300      	movs	r3, #0
   161de:	454b      	cmp	r3, r9
   161e0:	bf08      	it	eq
   161e2:	4542      	cmpeq	r2, r8
   161e4:	d32a      	bcc.n	1623c <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
   161e6:	4b17      	ldr	r3, [pc, #92]	; (16244 <compare_set_nolocks+0x94>)
   161e8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   161ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   161f0:	42ab      	cmp	r3, r5
   161f2:	bf08      	it	eq
   161f4:	42a2      	cmpeq	r2, r4
   161f6:	d014      	beq.n	16222 <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   161f8:	4639      	mov	r1, r7
   161fa:	4630      	mov	r0, r6
   161fc:	f00d fb1c 	bl	23838 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   16200:	4639      	mov	r1, r7
   16202:	f00d faf8 	bl	237f6 <counter_sub>
   16206:	1824      	adds	r4, r4, r0
   16208:	f145 0500 	adc.w	r5, r5, #0
   1620c:	e009      	b.n	16222 <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
   1620e:	2301      	movs	r3, #1
   16210:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16212:	4a0d      	ldr	r2, [pc, #52]	; (16248 <compare_set_nolocks+0x98>)
   16214:	e8d2 1fef 	ldaex	r1, [r2]
   16218:	4319      	orrs	r1, r3
   1621a:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1621e:	2800      	cmp	r0, #0
   16220:	d1f8      	bne.n	16214 <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
   16222:	4b08      	ldr	r3, [pc, #32]	; (16244 <compare_set_nolocks+0x94>)
   16224:	0132      	lsls	r2, r6, #4
   16226:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1622a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1622e:	9908      	ldr	r1, [sp, #32]
   16230:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   16232:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16234:	6073      	str	r3, [r6, #4]
	return ret;
   16236:	2000      	movs	r0, #0
}
   16238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1623c:	f06f 0015 	mvn.w	r0, #21
   16240:	e7fa      	b.n	16238 <compare_set_nolocks+0x88>
   16242:	bf00      	nop
   16244:	2000ca60 	.word	0x2000ca60
   16248:	2000e3bc 	.word	0x2000e3bc

0001624c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1624c:	b530      	push	{r4, r5, lr}
   1624e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   16250:	2300      	movs	r3, #0
   16252:	4a1e      	ldr	r2, [pc, #120]	; (162cc <sys_clock_driver_init+0x80>)
   16254:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16258:	2b00      	cmp	r3, #0
   1625a:	dd25      	ble.n	162a8 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   1625c:	4c1b      	ldr	r4, [pc, #108]	; (162cc <sys_clock_driver_init+0x80>)
   1625e:	2502      	movs	r5, #2
   16260:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16264:	4b1a      	ldr	r3, [pc, #104]	; (162d0 <sys_clock_driver_init+0x84>)
   16266:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1626a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1626e:	2200      	movs	r2, #0
   16270:	2101      	movs	r1, #1
   16272:	2015      	movs	r0, #21
   16274:	f7fd fe10 	bl	13e98 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   16278:	2015      	movs	r0, #21
   1627a:	f7fd fdef 	bl	13e5c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1627e:	2301      	movs	r3, #1
   16280:	4a14      	ldr	r2, [pc, #80]	; (162d4 <sys_clock_driver_init+0x88>)
   16282:	6013      	str	r3, [r2, #0]
   16284:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   16286:	4a14      	ldr	r2, [pc, #80]	; (162d8 <sys_clock_driver_init+0x8c>)
   16288:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1628a:	2400      	movs	r4, #0
   1628c:	9401      	str	r4, [sp, #4]
   1628e:	4b13      	ldr	r3, [pc, #76]	; (162dc <sys_clock_driver_init+0x90>)
   16290:	9300      	str	r3, [sp, #0]
   16292:	4a13      	ldr	r2, [pc, #76]	; (162e0 <sys_clock_driver_init+0x94>)
   16294:	2300      	movs	r3, #0
   16296:	4620      	mov	r0, r4
   16298:	f00d fb09 	bl	238ae <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1629c:	4628      	mov	r0, r5
   1629e:	f7ff fb19 	bl	158d4 <z_nrf_clock_control_lf_on>

	return 0;
}
   162a2:	4620      	mov	r0, r4
   162a4:	b003      	add	sp, #12
   162a6:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   162a8:	4a0e      	ldr	r2, [pc, #56]	; (162e4 <sys_clock_driver_init+0x98>)
   162aa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   162ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   162b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   162b6:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   162ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   162be:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   162c0:	4902      	ldr	r1, [pc, #8]	; (162cc <sys_clock_driver_init+0x80>)
   162c2:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   162c6:	3301      	adds	r3, #1
   162c8:	e7c6      	b.n	16258 <sys_clock_driver_init+0xc>
   162ca:	bf00      	nop
   162cc:	40015000 	.word	0x40015000
   162d0:	e000e100 	.word	0xe000e100
   162d4:	40015008 	.word	0x40015008
   162d8:	2000e3c0 	.word	0x2000e3c0
   162dc:	000160fd 	.word	0x000160fd
   162e0:	007fffff 	.word	0x007fffff
   162e4:	2000ca60 	.word	0x2000ca60

000162e8 <process_channel>:
{
   162e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   162ec:	b082      	sub	sp, #8
   162ee:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   162f0:	f7ff fea2 	bl	16038 <channel_processing_check_and_clear>
   162f4:	b910      	cbnz	r0, 162fc <process_channel+0x14>
}
   162f6:	b002      	add	sp, #8
   162f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   162fc:	f7ff ff38 	bl	16170 <z_nrf_rtc_timer_read>
   16300:	4606      	mov	r6, r0
   16302:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   16304:	f00d fa8a 	bl	2381c <full_int_lock>
   16308:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   1630a:	4b13      	ldr	r3, [pc, #76]	; (16358 <process_channel+0x70>)
   1630c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   16310:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   16314:	454f      	cmp	r7, r9
   16316:	bf08      	it	eq
   16318:	4546      	cmpeq	r6, r8
   1631a:	d20b      	bcs.n	16334 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1631c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   1631e:	4650      	mov	r0, sl
   16320:	f00d fa85 	bl	2382e <full_int_unlock>
		if (handler) {
   16324:	2e00      	cmp	r6, #0
   16326:	d0e6      	beq.n	162f6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   16328:	9500      	str	r5, [sp, #0]
   1632a:	4642      	mov	r2, r8
   1632c:	464b      	mov	r3, r9
   1632e:	4620      	mov	r0, r4
   16330:	47b0      	blx	r6
}
   16332:	e7e0      	b.n	162f6 <process_channel+0xe>
			handler = cc_data[chan].callback;
   16334:	4a08      	ldr	r2, [pc, #32]	; (16358 <process_channel+0x70>)
   16336:	0123      	lsls	r3, r4, #4
   16338:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1633c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   1633e:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   16340:	2000      	movs	r0, #0
   16342:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   16344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1634c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   16350:	4620      	mov	r0, r4
   16352:	f7ff fe3f 	bl	15fd4 <event_disable>
   16356:	e7e2      	b.n	1631e <process_channel+0x36>
   16358:	2000ca60 	.word	0x2000ca60

0001635c <rtc_nrf_isr>:
{
   1635c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1635e:	4b0d      	ldr	r3, [pc, #52]	; (16394 <rtc_nrf_isr+0x38>)
   16360:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   16364:	f013 0f02 	tst.w	r3, #2
   16368:	d00a      	beq.n	16380 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1636a:	4b0b      	ldr	r3, [pc, #44]	; (16398 <rtc_nrf_isr+0x3c>)
   1636c:	681b      	ldr	r3, [r3, #0]
   1636e:	b13b      	cbz	r3, 16380 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16370:	4b09      	ldr	r3, [pc, #36]	; (16398 <rtc_nrf_isr+0x3c>)
   16372:	2200      	movs	r2, #0
   16374:	601a      	str	r2, [r3, #0]
   16376:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   16378:	4a08      	ldr	r2, [pc, #32]	; (1639c <rtc_nrf_isr+0x40>)
   1637a:	6813      	ldr	r3, [r2, #0]
   1637c:	3301      	adds	r3, #1
   1637e:	6013      	str	r3, [r2, #0]
{
   16380:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16382:	2c00      	cmp	r4, #0
   16384:	dd00      	ble.n	16388 <rtc_nrf_isr+0x2c>
}
   16386:	bd10      	pop	{r4, pc}
		process_channel(chan);
   16388:	4620      	mov	r0, r4
   1638a:	f7ff ffad 	bl	162e8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1638e:	3401      	adds	r4, #1
   16390:	e7f7      	b.n	16382 <rtc_nrf_isr+0x26>
   16392:	bf00      	nop
   16394:	40015000 	.word	0x40015000
   16398:	40015104 	.word	0x40015104
   1639c:	2000e3c4 	.word	0x2000e3c4

000163a0 <sys_clock_set_timeout>:
{
   163a0:	b510      	push	{r4, lr}
   163a2:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   163a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   163a8:	d007      	beq.n	163ba <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   163aa:	1e44      	subs	r4, r0, #1
   163ac:	2c00      	cmp	r4, #0
   163ae:	dd07      	ble.n	163c0 <sys_clock_set_timeout+0x20>
   163b0:	4b11      	ldr	r3, [pc, #68]	; (163f8 <sys_clock_set_timeout+0x58>)
   163b2:	429c      	cmp	r4, r3
   163b4:	dd05      	ble.n	163c2 <sys_clock_set_timeout+0x22>
   163b6:	4c11      	ldr	r4, [pc, #68]	; (163fc <sys_clock_set_timeout+0x5c>)
   163b8:	e003      	b.n	163c2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   163ba:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   163be:	e7f4      	b.n	163aa <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   163c0:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   163c2:	f7ff fed5 	bl	16170 <z_nrf_rtc_timer_read>
   163c6:	4b0e      	ldr	r3, [pc, #56]	; (16400 <sys_clock_set_timeout+0x60>)
   163c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   163cc:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   163ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   163d2:	d300      	bcc.n	163d6 <sys_clock_set_timeout+0x36>
		ticks = 0;
   163d4:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   163d6:	4404      	add	r4, r0
   163d8:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   163da:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   163de:	d300      	bcc.n	163e2 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   163e0:	4c06      	ldr	r4, [pc, #24]	; (163fc <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   163e2:	2000      	movs	r0, #0
   163e4:	9001      	str	r0, [sp, #4]
   163e6:	4907      	ldr	r1, [pc, #28]	; (16404 <sys_clock_set_timeout+0x64>)
   163e8:	9100      	str	r1, [sp, #0]
   163ea:	1912      	adds	r2, r2, r4
   163ec:	f143 0300 	adc.w	r3, r3, #0
   163f0:	f00d fa5d 	bl	238ae <compare_set>
}
   163f4:	b002      	add	sp, #8
   163f6:	bd10      	pop	{r4, pc}
   163f8:	007ffffe 	.word	0x007ffffe
   163fc:	007fffff 	.word	0x007fffff
   16400:	2000ca70 	.word	0x2000ca70
   16404:	000160fd 	.word	0x000160fd

00016408 <sys_clock_elapsed>:
{
   16408:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1640a:	f7ff feb1 	bl	16170 <z_nrf_rtc_timer_read>
   1640e:	4b02      	ldr	r3, [pc, #8]	; (16418 <sys_clock_elapsed+0x10>)
   16410:	681b      	ldr	r3, [r3, #0]
}
   16412:	1ac0      	subs	r0, r0, r3
   16414:	bd08      	pop	{r3, pc}
   16416:	bf00      	nop
   16418:	2000ca70 	.word	0x2000ca70

0001641c <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   1641c:	b510      	push	{r4, lr}
	if (!first_time_init) {
   1641e:	4b1d      	ldr	r3, [pc, #116]	; (16494 <_nrf_modem_lib_init+0x78>)
   16420:	781b      	ldrb	r3, [r3, #0]
   16422:	b1c3      	cbz	r3, 16456 <_nrf_modem_lib_init+0x3a>
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   16424:	2200      	movs	r2, #0
   16426:	4611      	mov	r1, r2
   16428:	202a      	movs	r0, #42	; 0x2a
   1642a:	f7fd fd35 	bl	13e98 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   1642e:	2100      	movs	r1, #0
   16430:	4819      	ldr	r0, [pc, #100]	; (16498 <_nrf_modem_lib_init+0x7c>)
   16432:	f008 f975 	bl	1e720 <nrf_modem_init>
   16436:	4b19      	ldr	r3, [pc, #100]	; (1649c <_nrf_modem_lib_init+0x80>)
   16438:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1643a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1643e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16442:	4817      	ldr	r0, [pc, #92]	; (164a0 <_nrf_modem_lib_init+0x84>)
   16444:	f008 fdf8 	bl	1f038 <z_impl_k_mutex_lock>
	return list->head;
   16448:	4b16      	ldr	r3, [pc, #88]	; (164a4 <_nrf_modem_lib_init+0x88>)
   1644a:	6818      	ldr	r0, [r3, #0]

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1644c:	b1e0      	cbz	r0, 16488 <_nrf_modem_lib_init+0x6c>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1644e:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   16450:	b178      	cbz	r0, 16472 <_nrf_modem_lib_init+0x56>
	return node->next;
   16452:	6804      	ldr	r4, [r0, #0]
   16454:	e00d      	b.n	16472 <_nrf_modem_lib_init+0x56>
	list->head = NULL;
   16456:	4b13      	ldr	r3, [pc, #76]	; (164a4 <_nrf_modem_lib_init+0x88>)
   16458:	2200      	movs	r2, #0
   1645a:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1645c:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_init(mutex);
   1645e:	4810      	ldr	r0, [pc, #64]	; (164a0 <_nrf_modem_lib_init+0x84>)
   16460:	f00f fcda 	bl	25e18 <z_impl_k_mutex_init>
		first_time_init = true;
   16464:	4b0b      	ldr	r3, [pc, #44]	; (16494 <_nrf_modem_lib_init+0x78>)
   16466:	2201      	movs	r2, #1
   16468:	701a      	strb	r2, [r3, #0]
   1646a:	e7db      	b.n	16424 <_nrf_modem_lib_init+0x8>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1646c:	4623      	mov	r3, r4
   1646e:	4620      	mov	r0, r4
   16470:	461c      	mov	r4, r3
   16472:	b148      	cbz	r0, 16488 <_nrf_modem_lib_init+0x6c>
					     next_thread, node) {
			k_sem_give(&thread->sem);
   16474:	3004      	adds	r0, #4
	z_impl_k_sem_give(sem);
   16476:	f008 fee9 	bl	1f24c <z_impl_k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1647a:	2c00      	cmp	r4, #0
   1647c:	d0f6      	beq.n	1646c <_nrf_modem_lib_init+0x50>
   1647e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   16480:	2c00      	cmp	r4, #0
   16482:	d0f4      	beq.n	1646e <_nrf_modem_lib_init+0x52>
	return node->next;
   16484:	6823      	ldr	r3, [r4, #0]
   16486:	e7f2      	b.n	1646e <_nrf_modem_lib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   16488:	4805      	ldr	r0, [pc, #20]	; (164a0 <_nrf_modem_lib_init+0x84>)
   1648a:	f008 fe5f 	bl	1f14c <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   1648e:	2000      	movs	r0, #0
   16490:	bd10      	pop	{r4, pc}
   16492:	bf00      	nop
   16494:	2000f902 	.word	0x2000f902
   16498:	000287e0 	.word	0x000287e0
   1649c:	2000e3c8 	.word	0x2000e3c8
   164a0:	2000e3d4 	.word	0x2000e3d4
   164a4:	2000e3cc 	.word	0x2000e3cc

000164a8 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   164a8:	b430      	push	{r4, r5}
   164aa:	4604      	mov	r4, r0
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
	int entry_age, oldest_entry_age = 0;
   164ac:	2500      	movs	r5, #0
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   164ae:	4811      	ldr	r0, [pc, #68]	; (164f4 <thread_monitor_entry_get+0x4c>)
	struct thread_monitor_entry *entry = thread_event_monitor;
   164b0:	4603      	mov	r3, r0

	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   164b2:	e000      	b.n	164b6 <thread_monitor_entry_get+0xe>
   164b4:	3308      	adds	r3, #8
   164b6:	b19b      	cbz	r3, 164e0 <thread_monitor_entry_get+0x38>
   164b8:	4a0e      	ldr	r2, [pc, #56]	; (164f4 <thread_monitor_entry_get+0x4c>)
   164ba:	4293      	cmp	r3, r2
   164bc:	d310      	bcc.n	164e0 <thread_monitor_entry_get+0x38>
   164be:	3250      	adds	r2, #80	; 0x50
   164c0:	4293      	cmp	r3, r2
   164c2:	d20d      	bcs.n	164e0 <thread_monitor_entry_get+0x38>
		if (entry->id == id) {
   164c4:	681a      	ldr	r2, [r3, #0]
   164c6:	42a2      	cmp	r2, r4
   164c8:	d011      	beq.n	164ee <thread_monitor_entry_get+0x46>
			return entry;
		} else if (entry->id == 0) {
   164ca:	b142      	cbz	r2, 164de <thread_monitor_entry_get+0x36>
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   164cc:	4a0a      	ldr	r2, [pc, #40]	; (164f8 <thread_monitor_entry_get+0x50>)
   164ce:	6812      	ldr	r2, [r2, #0]
   164d0:	6859      	ldr	r1, [r3, #4]
   164d2:	1a52      	subs	r2, r2, r1
		if (entry_age > oldest_entry_age) {
   164d4:	4295      	cmp	r5, r2
   164d6:	daed      	bge.n	164b4 <thread_monitor_entry_get+0xc>
			oldest_entry_age = entry_age;
   164d8:	4615      	mov	r5, r2
			new_entry = entry;
   164da:	4618      	mov	r0, r3
   164dc:	e7ea      	b.n	164b4 <thread_monitor_entry_get+0xc>
			new_entry = entry;
   164de:	4618      	mov	r0, r3
		}
	}

	new_entry->id = id;
   164e0:	6004      	str	r4, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   164e2:	4b05      	ldr	r3, [pc, #20]	; (164f8 <thread_monitor_entry_get+0x50>)
   164e4:	681b      	ldr	r3, [r3, #0]
   164e6:	3b01      	subs	r3, #1
   164e8:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   164ea:	bc30      	pop	{r4, r5}
   164ec:	4770      	bx	lr
			return entry;
   164ee:	4618      	mov	r0, r3
   164f0:	e7fb      	b.n	164ea <thread_monitor_entry_get+0x42>
   164f2:	bf00      	nop
   164f4:	2000e458 	.word	0x2000e458
   164f8:	2000e434 	.word	0x2000e434

000164fc <thread_monitor_entry_update>:

/* Update thread monitor entry RPC counter. */
static void thread_monitor_entry_update(struct thread_monitor_entry *entry)
{
	entry->cnt = rpc_event_cnt;
   164fc:	4b01      	ldr	r3, [pc, #4]	; (16504 <thread_monitor_entry_update+0x8>)
   164fe:	681b      	ldr	r3, [r3, #0]
   16500:	6043      	str	r3, [r0, #4]
}
   16502:	4770      	bx	lr
   16504:	2000e434 	.word	0x2000e434

00016508 <can_thread_sleep>:
/* Verify that thread can be put into sleep (no RPC event occured in a
 * meantime), or whether we should return to nrf_modem_lib to re-verify if a sleep is
 * needed.
 */
static bool can_thread_sleep(struct thread_monitor_entry *entry)
{
   16508:	b508      	push	{r3, lr}
	bool allow_to_sleep = true;

	if (rpc_event_cnt != entry->cnt) {
   1650a:	6842      	ldr	r2, [r0, #4]
   1650c:	4b04      	ldr	r3, [pc, #16]	; (16520 <can_thread_sleep+0x18>)
   1650e:	681b      	ldr	r3, [r3, #0]
   16510:	429a      	cmp	r2, r3
   16512:	d101      	bne.n	16518 <can_thread_sleep+0x10>
	bool allow_to_sleep = true;
   16514:	2001      	movs	r0, #1
		thread_monitor_entry_update(entry);
		allow_to_sleep = false;
	}

	return allow_to_sleep;
}
   16516:	bd08      	pop	{r3, pc}
		thread_monitor_entry_update(entry);
   16518:	f7ff fff0 	bl	164fc <thread_monitor_entry_update>
		allow_to_sleep = false;
   1651c:	2000      	movs	r0, #0
   1651e:	e7fa      	b.n	16516 <can_thread_sleep+0xe>
   16520:	2000e434 	.word	0x2000e434

00016524 <sleeping_thread_add>:

/* Add thread to the sleeping threads list. Will return information whether
 * the thread was allowed to sleep or not.
 */
static bool sleeping_thread_add(struct sleeping_thread *thread)
{
   16524:	b538      	push	{r3, r4, r5, lr}
   16526:	4604      	mov	r4, r0
	__asm__ volatile(
   16528:	f04f 0320 	mov.w	r3, #32
   1652c:	f3ef 8511 	mrs	r5, BASEPRI
   16530:	f383 8812 	msr	BASEPRI_MAX, r3
   16534:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   16538:	f009 fc28 	bl	1fd8c <z_impl_z_current_get>
	bool allow_to_sleep = false;
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	entry = thread_monitor_entry_get(k_current_get());
   1653c:	f7ff ffb4 	bl	164a8 <thread_monitor_entry_get>

	if (can_thread_sleep(entry)) {
   16540:	f7ff ffe2 	bl	16508 <can_thread_sleep>
   16544:	b138      	cbz	r0, 16556 <sleeping_thread_add+0x32>
	parent->next = child;
   16546:	2300      	movs	r3, #0
   16548:	6023      	str	r3, [r4, #0]
	return list->tail;
   1654a:	4b07      	ldr	r3, [pc, #28]	; (16568 <sleeping_thread_add+0x44>)
   1654c:	685b      	ldr	r3, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1654e:	b13b      	cbz	r3, 16560 <sleeping_thread_add+0x3c>
	parent->next = child;
   16550:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16552:	4b05      	ldr	r3, [pc, #20]	; (16568 <sleeping_thread_add+0x44>)
   16554:	605c      	str	r4, [r3, #4]
	__asm__ volatile(
   16556:	f385 8811 	msr	BASEPRI, r5
   1655a:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return allow_to_sleep;
}
   1655e:	bd38      	pop	{r3, r4, r5, pc}
   16560:	4b01      	ldr	r3, [pc, #4]	; (16568 <sleeping_thread_add+0x44>)
   16562:	605c      	str	r4, [r3, #4]
	list->head = node;
   16564:	601c      	str	r4, [r3, #0]
}
   16566:	e7f6      	b.n	16556 <sleeping_thread_add+0x32>
   16568:	2000e450 	.word	0x2000e450

0001656c <sleeping_thread_remove>:

/* Remove a thread form the sleeping threads list. */
static void sleeping_thread_remove(struct sleeping_thread *thread)
{
   1656c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1656e:	f04f 0320 	mov.w	r3, #32
   16572:	f3ef 8411 	mrs	r4, BASEPRI
   16576:	f383 8812 	msr	BASEPRI_MAX, r3
   1657a:	f3bf 8f6f 	isb	sy
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	sys_slist_find_and_remove(&sleeping_threads, &thread->node);
   1657e:	4601      	mov	r1, r0
	return list->head;
   16580:	4b14      	ldr	r3, [pc, #80]	; (165d4 <sleeping_thread_remove+0x68>)
   16582:	681b      	ldr	r3, [r3, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16584:	2200      	movs	r2, #0
   16586:	b16b      	cbz	r3, 165a4 <sleeping_thread_remove+0x38>
   16588:	4299      	cmp	r1, r3
   1658a:	d002      	beq.n	16592 <sleeping_thread_remove+0x26>
   1658c:	461a      	mov	r2, r3
   1658e:	681b      	ldr	r3, [r3, #0]
   16590:	e7f9      	b.n	16586 <sleeping_thread_remove+0x1a>
Z_GENLIST_REMOVE(slist, snode)
   16592:	b192      	cbz	r2, 165ba <sleeping_thread_remove+0x4e>
	return node->next;
   16594:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   16596:	6013      	str	r3, [r2, #0]
	return list->tail;
   16598:	4b0e      	ldr	r3, [pc, #56]	; (165d4 <sleeping_thread_remove+0x68>)
   1659a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1659c:	4298      	cmp	r0, r3
   1659e:	d015      	beq.n	165cc <sleeping_thread_remove+0x60>
	parent->next = child;
   165a0:	2300      	movs	r3, #0
   165a2:	6003      	str	r3, [r0, #0]
   165a4:	f009 fbf2 	bl	1fd8c <z_impl_z_current_get>

	entry = thread_monitor_entry_get(k_current_get());
   165a8:	f7ff ff7e 	bl	164a8 <thread_monitor_entry_get>
	thread_monitor_entry_update(entry);
   165ac:	f7ff ffa6 	bl	164fc <thread_monitor_entry_update>
	__asm__ volatile(
   165b0:	f384 8811 	msr	BASEPRI, r4
   165b4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   165b8:	bd10      	pop	{r4, pc}
	return node->next;
   165ba:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   165bc:	4b05      	ldr	r3, [pc, #20]	; (165d4 <sleeping_thread_remove+0x68>)
   165be:	601a      	str	r2, [r3, #0]
	return list->tail;
   165c0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   165c2:	4298      	cmp	r0, r3
   165c4:	d1ec      	bne.n	165a0 <sleeping_thread_remove+0x34>
	list->tail = node;
   165c6:	4b03      	ldr	r3, [pc, #12]	; (165d4 <sleeping_thread_remove+0x68>)
   165c8:	605a      	str	r2, [r3, #4]
}
   165ca:	e7e9      	b.n	165a0 <sleeping_thread_remove+0x34>
	list->tail = node;
   165cc:	4b01      	ldr	r3, [pc, #4]	; (165d4 <sleeping_thread_remove+0x68>)
   165ce:	605a      	str	r2, [r3, #4]
}
   165d0:	e7e6      	b.n	165a0 <sleeping_thread_remove+0x34>
   165d2:	bf00      	nop
   165d4:	2000e450 	.word	0x2000e450

000165d8 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   165d8:	4668      	mov	r0, sp
   165da:	f020 0107 	bic.w	r1, r0, #7
   165de:	468d      	mov	sp, r1
   165e0:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   165e2:	4b10      	ldr	r3, [pc, #64]	; (16624 <rpc_proxy_irq_handler+0x4c>)
   165e4:	e8d3 2fef 	ldaex	r2, [r3]
   165e8:	3201      	adds	r2, #1
   165ea:	e8c3 2fe1 	stlex	r1, r2, [r3]
   165ee:	2900      	cmp	r1, #0
   165f0:	d1f8      	bne.n	165e4 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_application_irq_handler();
   165f2:	f005 f9fd 	bl	1b9f0 <nrf_modem_application_irq_handler>
	return list->head;
   165f6:	4b0c      	ldr	r3, [pc, #48]	; (16628 <rpc_proxy_irq_handler+0x50>)
   165f8:	681c      	ldr	r4, [r3, #0]
   165fa:	e000      	b.n	165fe <rpc_proxy_irq_handler+0x26>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   165fc:	461c      	mov	r4, r3

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   165fe:	b144      	cbz	r4, 16612 <rpc_proxy_irq_handler+0x3a>
		k_sem_give(&thread->sem);
   16600:	1d20      	adds	r0, r4, #4
	z_impl_k_sem_give(sem);
   16602:	f008 fe23 	bl	1f24c <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   16606:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   16608:	2c00      	cmp	r4, #0
   1660a:	d0f7      	beq.n	165fc <rpc_proxy_irq_handler+0x24>
	return node->next;
   1660c:	6823      	ldr	r3, [r4, #0]
   1660e:	2b00      	cmp	r3, #0
   16610:	d1f4      	bne.n	165fc <rpc_proxy_irq_handler+0x24>
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   16612:	f7fd fc57 	bl	13ec4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   16616:	f7fd fd71 	bl	140fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1661a:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1661e:	4685      	mov	sp, r0
   16620:	4770      	bx	lr
   16622:	bf00      	nop
   16624:	2000e434 	.word	0x2000e434
   16628:	2000e450 	.word	0x2000e450

0001662c <nrf_modem_os_sem_init>:
{
   1662c:	b538      	push	{r3, r4, r5, lr}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1662e:	6803      	ldr	r3, [r0, #0]
   16630:	b12b      	cbz	r3, 1663e <nrf_modem_os_sem_init+0x12>
   16632:	4c0a      	ldr	r4, [pc, #40]	; (1665c <nrf_modem_os_sem_init+0x30>)
   16634:	42a3      	cmp	r3, r4
   16636:	d302      	bcc.n	1663e <nrf_modem_os_sem_init+0x12>
   16638:	3448      	adds	r4, #72	; 0x48
   1663a:	42a3      	cmp	r3, r4
   1663c:	d309      	bcc.n	16652 <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   1663e:	4c08      	ldr	r4, [pc, #32]	; (16660 <nrf_modem_os_sem_init+0x34>)
   16640:	7823      	ldrb	r3, [r4, #0]
   16642:	1c5d      	adds	r5, r3, #1
   16644:	7025      	strb	r5, [r4, #0]
   16646:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1664a:	4c04      	ldr	r4, [pc, #16]	; (1665c <nrf_modem_os_sem_init+0x30>)
   1664c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   16650:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   16652:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16654:	f00f fc75 	bl	25f42 <z_impl_k_sem_init>
}
   16658:	bd38      	pop	{r3, r4, r5, pc}
   1665a:	bf00      	nop
   1665c:	2000e3ec 	.word	0x2000e3ec
   16660:	2000f903 	.word	0x2000f903

00016664 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16664:	4b02      	ldr	r3, [pc, #8]	; (16670 <nrf_modem_os_application_irq_set+0xc>)
   16666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1666a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1666e:	4770      	bx	lr
   16670:	e000e100 	.word	0xe000e100

00016674 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16674:	4b02      	ldr	r3, [pc, #8]	; (16680 <nrf_modem_os_application_irq_clear+0xc>)
   16676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1667a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1667e:	4770      	bx	lr
   16680:	e000e100 	.word	0xe000e100

00016684 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16684:	4b02      	ldr	r3, [pc, #8]	; (16690 <nrf_modem_os_trace_irq_set+0xc>)
   16686:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1668a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1668e:	4770      	bx	lr
   16690:	e000e100 	.word	0xe000e100

00016694 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16694:	4b02      	ldr	r3, [pc, #8]	; (166a0 <nrf_modem_os_trace_irq_clear+0xc>)
   16696:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1669a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1669e:	4770      	bx	lr
   166a0:	e000e100 	.word	0xe000e100

000166a4 <nrf_modem_os_alloc>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
}

void *nrf_modem_os_alloc(size_t bytes)
{
   166a4:	b508      	push	{r3, lr}
   166a6:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   166a8:	2200      	movs	r2, #0
   166aa:	2300      	movs	r3, #0
   166ac:	4801      	ldr	r0, [pc, #4]	; (166b4 <nrf_modem_os_alloc+0x10>)
   166ae:	f00f fad8 	bl	25c62 <k_heap_alloc>
		heap_diag.failed_allocs++;
		LOG_WRN("alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   166b2:	bd08      	pop	{r3, pc}
   166b4:	2000c7dc 	.word	0x2000c7dc

000166b8 <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   166b8:	b508      	push	{r3, lr}
   166ba:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   166bc:	4801      	ldr	r0, [pc, #4]	; (166c4 <nrf_modem_os_free+0xc>)
   166be:	f00f fadb 	bl	25c78 <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_ALLOC
	LOG_INF("free(%p)", mem);
#endif
}
   166c2:	bd08      	pop	{r3, pc}
   166c4:	2000c7dc 	.word	0x2000c7dc

000166c8 <nrf_modem_os_shm_tx_alloc>:

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   166c8:	b508      	push	{r3, lr}
   166ca:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   166cc:	2200      	movs	r2, #0
   166ce:	2300      	movs	r3, #0
   166d0:	4801      	ldr	r0, [pc, #4]	; (166d8 <nrf_modem_os_shm_tx_alloc+0x10>)
   166d2:	f00f fac6 	bl	25c62 <k_heap_alloc>
		shmem_diag.failed_allocs++;
		LOG_WRN("shm_tx_alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   166d6:	bd08      	pop	{r3, pc}
   166d8:	2000e43c 	.word	0x2000e43c

000166dc <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   166dc:	b508      	push	{r3, lr}
   166de:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   166e0:	4801      	ldr	r0, [pc, #4]	; (166e8 <nrf_modem_os_shm_tx_free+0xc>)
   166e2:	f00f fac9 	bl	25c78 <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_SHM_TX_ALLOC
	LOG_INF("shm_tx_free(%p)", mem);
#endif
}
   166e6:	bd08      	pop	{r3, pc}
   166e8:	2000e43c 	.word	0x2000e43c

000166ec <nrf_modem_os_init>:
	}
}

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   166ec:	b510      	push	{r4, lr}
	list->head = NULL;
   166ee:	4b0c      	ldr	r3, [pc, #48]	; (16720 <nrf_modem_os_init+0x34>)
   166f0:	2400      	movs	r4, #0
   166f2:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   166f4:	605c      	str	r4, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   166f6:	4b0b      	ldr	r3, [pc, #44]	; (16724 <nrf_modem_os_init+0x38>)
   166f8:	e8d3 2fef 	ldaex	r2, [r3]
   166fc:	e8c3 4fe1 	stlex	r1, r4, [r3]
   16700:	2900      	cmp	r1, #0
   16702:	d1f9      	bne.n	166f8 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   16704:	f00d f9c9 	bl	23a9a <read_task_create>
		trace_irq_init();
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   16708:	4b07      	ldr	r3, [pc, #28]	; (16728 <nrf_modem_os_init+0x3c>)
   1670a:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   1670c:	4b07      	ldr	r3, [pc, #28]	; (1672c <nrf_modem_os_init+0x40>)
   1670e:	601c      	str	r4, [r3, #0]

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   16710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16714:	4906      	ldr	r1, [pc, #24]	; (16730 <nrf_modem_os_init+0x44>)
   16716:	4807      	ldr	r0, [pc, #28]	; (16734 <nrf_modem_os_init+0x48>)
   16718:	f00f fa50 	bl	25bbc <k_heap_init>
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   1671c:	bd10      	pop	{r4, pc}
   1671e:	bf00      	nop
   16720:	2000e450 	.word	0x2000e450
   16724:	2000e434 	.word	0x2000e434
   16728:	2000e3e8 	.word	0x2000e3e8
   1672c:	2000e438 	.word	0x2000e438
   16730:	200084e8 	.word	0x200084e8
   16734:	2000e43c 	.word	0x2000e43c

00016738 <nrf91_socket_is_supported>:
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
}

static bool nrf91_socket_is_supported(int family, int type, int proto)
{
	if (offload_disabled) {
   16738:	4b0c      	ldr	r3, [pc, #48]	; (1676c <nrf91_socket_is_supported+0x34>)
   1673a:	7818      	ldrb	r0, [r3, #0]
   1673c:	b990      	cbnz	r0, 16764 <nrf91_socket_is_supported+0x2c>
		return false;
	}

	if (tls_offload_disabled && proto_is_secure(proto)) {
   1673e:	4b0c      	ldr	r3, [pc, #48]	; (16770 <nrf91_socket_is_supported+0x38>)
   16740:	781b      	ldrb	r3, [r3, #0]
   16742:	b18b      	cbz	r3, 16768 <nrf91_socket_is_supported+0x30>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   16744:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   16748:	2902      	cmp	r1, #2
   1674a:	d907      	bls.n	1675c <nrf91_socket_is_supported+0x24>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1674c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   16750:	2a01      	cmp	r2, #1
   16752:	d901      	bls.n	16758 <nrf91_socket_is_supported+0x20>
   16754:	2200      	movs	r2, #0
   16756:	e002      	b.n	1675e <nrf91_socket_is_supported+0x26>
   16758:	2201      	movs	r2, #1
   1675a:	e000      	b.n	1675e <nrf91_socket_is_supported+0x26>
   1675c:	2201      	movs	r2, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1675e:	b922      	cbnz	r2, 1676a <nrf91_socket_is_supported+0x32>
		return false;
	}

	return true;
   16760:	4618      	mov	r0, r3
   16762:	4770      	bx	lr
		return false;
   16764:	2000      	movs	r0, #0
   16766:	4770      	bx	lr
	return true;
   16768:	2001      	movs	r0, #1
}
   1676a:	4770      	bx	lr
   1676c:	2000f904 	.word	0x2000f904
   16770:	2000f905 	.word	0x2000f905

00016774 <nrf91_nrf_modem_lib_socket_offload_init>:

static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   16774:	2300      	movs	r3, #0
   16776:	e005      	b.n	16784 <nrf91_nrf_modem_lib_socket_offload_init+0x10>
		offload_ctx[i].nrf_fd = -1;
   16778:	4a04      	ldr	r2, [pc, #16]	; (1678c <nrf91_nrf_modem_lib_socket_offload_init+0x18>)
   1677a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1677e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   16782:	3301      	adds	r3, #1
   16784:	2b07      	cmp	r3, #7
   16786:	ddf7      	ble.n	16778 <nrf91_nrf_modem_lib_socket_offload_init+0x4>
	}

	return 0;
}
   16788:	2000      	movs	r0, #0
   1678a:	4770      	bx	lr
   1678c:	2000e52c 	.word	0x2000e52c

00016790 <release_ctx>:
{
   16790:	b538      	push	{r3, r4, r5, lr}
   16792:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   16794:	4d08      	ldr	r5, [pc, #32]	; (167b8 <release_ctx+0x28>)
   16796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1679a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1679e:	4628      	mov	r0, r5
   167a0:	f008 fc4a 	bl	1f038 <z_impl_k_mutex_lock>
	ctx->nrf_fd = -1;
   167a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   167a8:	6023      	str	r3, [r4, #0]
	ctx->lock = NULL;
   167aa:	2300      	movs	r3, #0
   167ac:	6063      	str	r3, [r4, #4]
	return z_impl_k_mutex_unlock(mutex);
   167ae:	4628      	mov	r0, r5
   167b0:	f008 fccc 	bl	1f14c <z_impl_k_mutex_unlock>
}
   167b4:	bd38      	pop	{r3, r4, r5, pc}
   167b6:	bf00      	nop
   167b8:	2000c804 	.word	0x2000c804

000167bc <allocate_ctx>:
{
   167bc:	b538      	push	{r3, r4, r5, lr}
   167be:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   167c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   167c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   167c8:	480c      	ldr	r0, [pc, #48]	; (167fc <allocate_ctx+0x40>)
   167ca:	f008 fc35 	bl	1f038 <z_impl_k_mutex_lock>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   167ce:	2300      	movs	r3, #0
   167d0:	e000      	b.n	167d4 <allocate_ctx+0x18>
   167d2:	3301      	adds	r3, #1
   167d4:	2b07      	cmp	r3, #7
   167d6:	dc0b      	bgt.n	167f0 <allocate_ctx+0x34>
		if (offload_ctx[i].nrf_fd == -1) {
   167d8:	4a09      	ldr	r2, [pc, #36]	; (16800 <allocate_ctx+0x44>)
   167da:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   167de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   167e2:	d1f6      	bne.n	167d2 <allocate_ctx+0x16>
			ctx = &offload_ctx[i];
   167e4:	4a06      	ldr	r2, [pc, #24]	; (16800 <allocate_ctx+0x44>)
   167e6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   167ea:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
			break;
   167ee:	e000      	b.n	167f2 <allocate_ctx+0x36>
	struct nrf_sock_ctx *ctx = NULL;
   167f0:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
   167f2:	4802      	ldr	r0, [pc, #8]	; (167fc <allocate_ctx+0x40>)
   167f4:	f008 fcaa 	bl	1f14c <z_impl_k_mutex_unlock>
}
   167f8:	4628      	mov	r0, r5
   167fa:	bd38      	pop	{r3, r4, r5, pc}
   167fc:	2000c804 	.word	0x2000c804
   16800:	2000e52c 	.word	0x2000e52c

00016804 <nrf91_socket_offload_sendmsg>:
{
   16804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16808:	b083      	sub	sp, #12
	if (msg == NULL) {
   1680a:	b171      	cbz	r1, 1682a <nrf91_socket_offload_sendmsg+0x26>
   1680c:	4681      	mov	r9, r0
   1680e:	4692      	mov	sl, r2
   16810:	460d      	mov	r5, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   16812:	2300      	movs	r3, #0
	ssize_t len = 0;
   16814:	4619      	mov	r1, r3
	for (i = 0; i < msg->msg_iovlen; i++) {
   16816:	68ea      	ldr	r2, [r5, #12]
   16818:	429a      	cmp	r2, r3
   1681a:	d90d      	bls.n	16838 <nrf91_socket_offload_sendmsg+0x34>
		len += msg->msg_iov[i].iov_len;
   1681c:	68aa      	ldr	r2, [r5, #8]
   1681e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   16822:	6852      	ldr	r2, [r2, #4]
   16824:	4411      	add	r1, r2
	for (i = 0; i < msg->msg_iovlen; i++) {
   16826:	3301      	adds	r3, #1
   16828:	e7f5      	b.n	16816 <nrf91_socket_offload_sendmsg+0x12>
		errno = EINVAL;
   1682a:	f00c fbb4 	bl	22f96 <__errno>
   1682e:	2316      	movs	r3, #22
   16830:	6003      	str	r3, [r0, #0]
		return -1;
   16832:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16836:	e03a      	b.n	168ae <nrf91_socket_offload_sendmsg+0xaa>
	if (len <= sizeof(buf)) {
   16838:	2980      	cmp	r1, #128	; 0x80
   1683a:	d903      	bls.n	16844 <nrf91_socket_offload_sendmsg+0x40>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1683c:	f04f 0b00 	mov.w	fp, #0
	len = 0;
   16840:	46d8      	mov	r8, fp
   16842:	e03a      	b.n	168ba <nrf91_socket_offload_sendmsg+0xb6>
	return z_impl_k_mutex_lock(mutex, timeout);
   16844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1684c:	482c      	ldr	r0, [pc, #176]	; (16900 <nrf91_socket_offload_sendmsg+0xfc>)
   1684e:	f008 fbf3 	bl	1f038 <z_impl_k_mutex_lock>
		for (i = 0; i < msg->msg_iovlen; i++) {
   16852:	2400      	movs	r4, #0
		len = 0;
   16854:	4627      	mov	r7, r4
		for (i = 0; i < msg->msg_iovlen; i++) {
   16856:	e00f      	b.n	16878 <nrf91_socket_offload_sendmsg+0x74>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   16858:	68ab      	ldr	r3, [r5, #8]
   1685a:	00e6      	lsls	r6, r4, #3
   1685c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16860:	6852      	ldr	r2, [r2, #4]
   16862:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   16866:	4827      	ldr	r0, [pc, #156]	; (16904 <nrf91_socket_offload_sendmsg+0x100>)
   16868:	4438      	add	r0, r7
   1686a:	f00f ffea 	bl	26842 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1686e:	68ab      	ldr	r3, [r5, #8]
   16870:	4433      	add	r3, r6
   16872:	685b      	ldr	r3, [r3, #4]
   16874:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   16876:	3401      	adds	r4, #1
   16878:	68eb      	ldr	r3, [r5, #12]
   1687a:	42a3      	cmp	r3, r4
   1687c:	d8ec      	bhi.n	16858 <nrf91_socket_offload_sendmsg+0x54>
		offset = 0;
   1687e:	2600      	movs	r6, #0
		ret = 0;
   16880:	4634      	mov	r4, r6
		while ((offset < len) && (ret >= 0)) {
   16882:	42b7      	cmp	r7, r6
   16884:	dd10      	ble.n	168a8 <nrf91_socket_offload_sendmsg+0xa4>
   16886:	2c00      	cmp	r4, #0
   16888:	db0e      	blt.n	168a8 <nrf91_socket_offload_sendmsg+0xa4>
				msg->msg_name, msg->msg_namelen);
   1688a:	682b      	ldr	r3, [r5, #0]
			ret = nrf91_socket_offload_sendto(obj,
   1688c:	686a      	ldr	r2, [r5, #4]
   1688e:	9201      	str	r2, [sp, #4]
   16890:	9300      	str	r3, [sp, #0]
   16892:	4653      	mov	r3, sl
   16894:	1bba      	subs	r2, r7, r6
   16896:	491b      	ldr	r1, [pc, #108]	; (16904 <nrf91_socket_offload_sendmsg+0x100>)
   16898:	4431      	add	r1, r6
   1689a:	4648      	mov	r0, r9
   1689c:	f00d fba3 	bl	23fe6 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   168a0:	1e04      	subs	r4, r0, #0
   168a2:	ddee      	ble.n	16882 <nrf91_socket_offload_sendmsg+0x7e>
				offset += ret;
   168a4:	4426      	add	r6, r4
   168a6:	e7ec      	b.n	16882 <nrf91_socket_offload_sendmsg+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   168a8:	4815      	ldr	r0, [pc, #84]	; (16900 <nrf91_socket_offload_sendmsg+0xfc>)
   168aa:	f008 fc4f 	bl	1f14c <z_impl_k_mutex_unlock>
}
   168ae:	4620      	mov	r0, r4
   168b0:	b003      	add	sp, #12
   168b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < msg->msg_iovlen; i++) {
   168b6:	f10b 0b01 	add.w	fp, fp, #1
   168ba:	68eb      	ldr	r3, [r5, #12]
   168bc:	455b      	cmp	r3, fp
   168be:	d91d      	bls.n	168fc <nrf91_socket_offload_sendmsg+0xf8>
		if (msg->msg_iov[i].iov_len == 0) {
   168c0:	68ab      	ldr	r3, [r5, #8]
   168c2:	ea4f 07cb 	mov.w	r7, fp, lsl #3
   168c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   168ca:	685b      	ldr	r3, [r3, #4]
   168cc:	2b00      	cmp	r3, #0
   168ce:	d0f2      	beq.n	168b6 <nrf91_socket_offload_sendmsg+0xb2>
		offset = 0;
   168d0:	2600      	movs	r6, #0
		while (offset < msg->msg_iov[i].iov_len) {
   168d2:	68ab      	ldr	r3, [r5, #8]
   168d4:	19da      	adds	r2, r3, r7
   168d6:	6852      	ldr	r2, [r2, #4]
   168d8:	42b2      	cmp	r2, r6
   168da:	d9ec      	bls.n	168b6 <nrf91_socket_offload_sendmsg+0xb2>
				(((uint8_t *) msg->msg_iov[i].iov_base) + offset),
   168dc:	59d9      	ldr	r1, [r3, r7]
				msg->msg_name, msg->msg_namelen);
   168de:	682b      	ldr	r3, [r5, #0]
			ret = nrf91_socket_offload_sendto(obj,
   168e0:	6868      	ldr	r0, [r5, #4]
   168e2:	9001      	str	r0, [sp, #4]
   168e4:	9300      	str	r3, [sp, #0]
   168e6:	4653      	mov	r3, sl
   168e8:	1b92      	subs	r2, r2, r6
   168ea:	4431      	add	r1, r6
   168ec:	4648      	mov	r0, r9
   168ee:	f00d fb7a 	bl	23fe6 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   168f2:	1e04      	subs	r4, r0, #0
   168f4:	dbdb      	blt.n	168ae <nrf91_socket_offload_sendmsg+0xaa>
			offset += ret;
   168f6:	4426      	add	r6, r4
			len += ret;
   168f8:	44a0      	add	r8, r4
   168fa:	e7ea      	b.n	168d2 <nrf91_socket_offload_sendmsg+0xce>
	return len;
   168fc:	4644      	mov	r4, r8
   168fe:	e7d6      	b.n	168ae <nrf91_socket_offload_sendmsg+0xaa>
   16900:	2000c868 	.word	0x2000c868
   16904:	2000e4a8 	.word	0x2000e4a8

00016908 <nrf91_socket_offload_accept>:
{
   16908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1690c:	b08b      	sub	sp, #44	; 0x2c
   1690e:	4606      	mov	r6, r0
   16910:	460c      	mov	r4, r1
   16912:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   16914:	f7fa fe3a 	bl	1158c <z_reserve_fd>
   16918:	4605      	mov	r5, r0
	int sd = OBJ_TO_SD(obj);
   1691a:	6830      	ldr	r0, [r6, #0]
	if (fd < 0) {
   1691c:	2d00      	cmp	r5, #0
   1691e:	db57      	blt.n	169d0 <nrf91_socket_offload_accept+0xc8>
	if ((addr != NULL) && (addrlen != NULL)) {
   16920:	b37c      	cbz	r4, 16982 <nrf91_socket_offload_accept+0x7a>
   16922:	b38f      	cbz	r7, 16988 <nrf91_socket_offload_accept+0x80>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   16924:	683b      	ldr	r3, [r7, #0]
   16926:	2b08      	cmp	r3, #8
   16928:	d025      	beq.n	16976 <nrf91_socket_offload_accept+0x6e>
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1692a:	2324      	movs	r3, #36	; 0x24
   1692c:	9300      	str	r3, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1692e:	466a      	mov	r2, sp
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   16930:	f10d 0804 	add.w	r8, sp, #4
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   16934:	4641      	mov	r1, r8
   16936:	f00f f8a2 	bl	25a7e <nrf_accept>
	if (new_sd < 0) {
   1693a:	1e06      	subs	r6, r0, #0
   1693c:	db33      	blt.n	169a6 <nrf91_socket_offload_accept+0x9e>
	ctx = allocate_ctx(new_sd);
   1693e:	4630      	mov	r0, r6
   16940:	f7ff ff3c 	bl	167bc <allocate_ctx>
	if (ctx == NULL) {
   16944:	4681      	mov	r9, r0
   16946:	b310      	cbz	r0, 1698e <nrf91_socket_offload_accept+0x86>
	if ((addr != NULL) && (addrlen != NULL)) {
   16948:	b164      	cbz	r4, 16964 <nrf91_socket_offload_accept+0x5c>
   1694a:	b15f      	cbz	r7, 16964 <nrf91_socket_offload_accept+0x5c>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1694c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16950:	2b02      	cmp	r3, #2
   16952:	d021      	beq.n	16998 <nrf91_socket_offload_accept+0x90>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   16954:	2b0a      	cmp	r3, #10
   16956:	d128      	bne.n	169aa <nrf91_socket_offload_accept+0xa2>
			*addrlen = sizeof(struct sockaddr_in6);
   16958:	2318      	movs	r3, #24
   1695a:	603b      	str	r3, [r7, #0]
			nrf_to_z_ipv6(
   1695c:	a901      	add	r1, sp, #4
   1695e:	4620      	mov	r0, r4
   16960:	f00d fa18 	bl	23d94 <nrf_to_z_ipv6>
	z_finalize_fd(fd, ctx,
   16964:	4a1c      	ldr	r2, [pc, #112]	; (169d8 <nrf91_socket_offload_accept+0xd0>)
   16966:	4649      	mov	r1, r9
   16968:	4628      	mov	r0, r5
   1696a:	f7fa fe35 	bl	115d8 <z_finalize_fd>
}
   1696e:	4628      	mov	r0, r5
   16970:	b00b      	add	sp, #44	; 0x2c
   16972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   16976:	2310      	movs	r3, #16
   16978:	9300      	str	r3, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1697a:	466a      	mov	r2, sp
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1697c:	f10d 0804 	add.w	r8, sp, #4
   16980:	e7d8      	b.n	16934 <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   16982:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   16984:	46a0      	mov	r8, r4
   16986:	e7d5      	b.n	16934 <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   16988:	463a      	mov	r2, r7
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1698a:	46b8      	mov	r8, r7
   1698c:	e7d2      	b.n	16934 <nrf91_socket_offload_accept+0x2c>
		errno = ENOMEM;
   1698e:	f00c fb02 	bl	22f96 <__errno>
   16992:	230c      	movs	r3, #12
   16994:	6003      	str	r3, [r0, #0]
		goto error;
   16996:	e008      	b.n	169aa <nrf91_socket_offload_accept+0xa2>
			*addrlen = sizeof(struct sockaddr_in);
   16998:	2308      	movs	r3, #8
   1699a:	603b      	str	r3, [r7, #0]
			nrf_to_z_ipv4(
   1699c:	a901      	add	r1, sp, #4
   1699e:	4620      	mov	r0, r4
   169a0:	f00d f890 	bl	23ac4 <nrf_to_z_ipv4>
   169a4:	e7de      	b.n	16964 <nrf91_socket_offload_accept+0x5c>
	struct nrf_sock_ctx *ctx = NULL;
   169a6:	f04f 0900 	mov.w	r9, #0
	if (new_sd != -1) {
   169aa:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   169ae:	d10b      	bne.n	169c8 <nrf91_socket_offload_accept+0xc0>
	if (ctx != NULL) {
   169b0:	f1b9 0f00 	cmp.w	r9, #0
   169b4:	d002      	beq.n	169bc <nrf91_socket_offload_accept+0xb4>
		release_ctx(ctx);
   169b6:	4648      	mov	r0, r9
   169b8:	f7ff feea 	bl	16790 <release_ctx>
	z_free_fd(fd);
   169bc:	4628      	mov	r0, r5
   169be:	f00b f838 	bl	21a32 <z_free_fd>
	return -1;
   169c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   169c6:	e7d2      	b.n	1696e <nrf91_socket_offload_accept+0x66>
		nrf_close(new_sd);
   169c8:	4630      	mov	r0, r6
   169ca:	f00e fff3 	bl	259b4 <nrf_close>
   169ce:	e7ef      	b.n	169b0 <nrf91_socket_offload_accept+0xa8>
		return -1;
   169d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   169d4:	e7cb      	b.n	1696e <nrf91_socket_offload_accept+0x66>
   169d6:	bf00      	nop
   169d8:	0002882c 	.word	0x0002882c

000169dc <nrf91_socket_offload_ioctl>:
{
   169dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   169e0:	b093      	sub	sp, #76	; 0x4c
   169e2:	9201      	str	r2, [sp, #4]
	int sd = OBJ_TO_SD(obj);
   169e4:	6804      	ldr	r4, [r0, #0]
	switch (request) {
   169e6:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   169ea:	2b03      	cmp	r3, #3
   169ec:	f200 80b8 	bhi.w	16b60 <nrf91_socket_offload_ioctl+0x184>
   169f0:	e8df f003 	tbb	[pc, r3]
   169f4:	af08bc02 	.word	0xaf08bc02
	int sd = OBJ_TO_SD(obj);
   169f8:	f06f 0711 	mvn.w	r7, #17
}
   169fc:	4638      	mov	r0, r7
   169fe:	b013      	add	sp, #76	; 0x4c
   16a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		fds = va_arg(args, struct zsock_pollfd *);
   16a04:	9901      	ldr	r1, [sp, #4]
   16a06:	1d0a      	adds	r2, r1, #4
   16a08:	9201      	str	r2, [sp, #4]
   16a0a:	680e      	ldr	r6, [r1, #0]
		nfds = va_arg(args, int);
   16a0c:	f101 0308 	add.w	r3, r1, #8
   16a10:	9301      	str	r3, [sp, #4]
   16a12:	f8d1 8004 	ldr.w	r8, [r1, #4]
		timeout = va_arg(args, int);
   16a16:	f101 030c 	add.w	r3, r1, #12
   16a1a:	9301      	str	r3, [sp, #4]
   16a1c:	f8d1 9008 	ldr.w	r9, [r1, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   16a20:	2240      	movs	r2, #64	; 0x40
   16a22:	2100      	movs	r1, #0
   16a24:	a802      	add	r0, sp, #8
   16a26:	f00f ff2c 	bl	26882 <memset>
	for (int i = 0; i < nfds; i++) {
   16a2a:	2400      	movs	r4, #0
	int retval = 0;
   16a2c:	4627      	mov	r7, r4
	for (int i = 0; i < nfds; i++) {
   16a2e:	e005      	b.n	16a3c <nrf91_socket_offload_ioctl+0x60>
			tmp[i].fd = fds[i].fd;
   16a30:	ab12      	add	r3, sp, #72	; 0x48
   16a32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   16a36:	f843 0c40 	str.w	r0, [r3, #-64]
	for (int i = 0; i < nfds; i++) {
   16a3a:	3401      	adds	r4, #1
   16a3c:	45a0      	cmp	r8, r4
   16a3e:	dd38      	ble.n	16ab2 <nrf91_socket_offload_ioctl+0xd6>
		tmp[i].events = 0;
   16a40:	2200      	movs	r2, #0
   16a42:	ab12      	add	r3, sp, #72	; 0x48
   16a44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   16a48:	f823 2c3c 	strh.w	r2, [r3, #-60]
		fds[i].revents = 0;
   16a4c:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
   16a50:	80ea      	strh	r2, [r5, #6]
		if (fds[i].fd < 0) {
   16a52:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
   16a56:	4290      	cmp	r0, r2
   16a58:	dbea      	blt.n	16a30 <nrf91_socket_offload_ioctl+0x54>
			obj = z_get_fd_obj(fds[i].fd,
   16a5a:	2286      	movs	r2, #134	; 0x86
   16a5c:	4945      	ldr	r1, [pc, #276]	; (16b74 <nrf91_socket_offload_ioctl+0x198>)
   16a5e:	f7fa fd5b 	bl	11518 <z_get_fd_obj>
			if (obj != NULL) {
   16a62:	b310      	cbz	r0, 16aaa <nrf91_socket_offload_ioctl+0xce>
				tmp[i].fd = OBJ_TO_SD(obj);
   16a64:	6802      	ldr	r2, [r0, #0]
   16a66:	ab12      	add	r3, sp, #72	; 0x48
   16a68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   16a6c:	f843 2c40 	str.w	r2, [r3, #-64]
		if (fds[i].events & POLLIN) {
   16a70:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   16a74:	f013 0f01 	tst.w	r3, #1
   16a78:	d008      	beq.n	16a8c <nrf91_socket_offload_ioctl+0xb0>
			tmp[i].events |= NRF_POLLIN;
   16a7a:	ab12      	add	r3, sp, #72	; 0x48
   16a7c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   16a80:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
   16a84:	f043 0301 	orr.w	r3, r3, #1
   16a88:	f822 3c3c 	strh.w	r3, [r2, #-60]
		if (fds[i].events & POLLOUT) {
   16a8c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   16a90:	f013 0f04 	tst.w	r3, #4
   16a94:	d0d1      	beq.n	16a3a <nrf91_socket_offload_ioctl+0x5e>
			tmp[i].events |= NRF_POLLOUT;
   16a96:	ab12      	add	r3, sp, #72	; 0x48
   16a98:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   16a9c:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
   16aa0:	f043 0302 	orr.w	r3, r3, #2
   16aa4:	f822 3c3c 	strh.w	r3, [r2, #-60]
   16aa8:	e7c7      	b.n	16a3a <nrf91_socket_offload_ioctl+0x5e>
				fds[i].revents = POLLNVAL;
   16aaa:	2320      	movs	r3, #32
   16aac:	80eb      	strh	r3, [r5, #6]
				retval++;
   16aae:	3701      	adds	r7, #1
   16ab0:	e7de      	b.n	16a70 <nrf91_socket_offload_ioctl+0x94>
	if (retval > 0) {
   16ab2:	2f00      	cmp	r7, #0
   16ab4:	dca2      	bgt.n	169fc <nrf91_socket_offload_ioctl+0x20>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   16ab6:	464a      	mov	r2, r9
   16ab8:	4641      	mov	r1, r8
   16aba:	a802      	add	r0, sp, #8
   16abc:	f00f f83d 	bl	25b3a <nrf_poll>
   16ac0:	4607      	mov	r7, r0
	for (int i = 0; i < nfds; i++) {
   16ac2:	2300      	movs	r3, #0
   16ac4:	e000      	b.n	16ac8 <nrf91_socket_offload_ioctl+0xec>
   16ac6:	3301      	adds	r3, #1
   16ac8:	4598      	cmp	r8, r3
   16aca:	dd97      	ble.n	169fc <nrf91_socket_offload_ioctl+0x20>
		if (fds[i].fd < 0) {
   16acc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
   16ad0:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
   16ad4:	2900      	cmp	r1, #0
   16ad6:	dbf6      	blt.n	16ac6 <nrf91_socket_offload_ioctl+0xea>
		if (tmp[i].revents & NRF_POLLIN) {
   16ad8:	a912      	add	r1, sp, #72	; 0x48
   16ada:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16ade:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   16ae2:	f011 0f01 	tst.w	r1, #1
   16ae6:	d003      	beq.n	16af0 <nrf91_socket_offload_ioctl+0x114>
			fds[i].revents |= POLLIN;
   16ae8:	88d1      	ldrh	r1, [r2, #6]
   16aea:	f041 0101 	orr.w	r1, r1, #1
   16aee:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   16af0:	a912      	add	r1, sp, #72	; 0x48
   16af2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16af6:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   16afa:	f011 0f02 	tst.w	r1, #2
   16afe:	d003      	beq.n	16b08 <nrf91_socket_offload_ioctl+0x12c>
			fds[i].revents |= POLLOUT;
   16b00:	88d1      	ldrh	r1, [r2, #6]
   16b02:	f041 0104 	orr.w	r1, r1, #4
   16b06:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   16b08:	a912      	add	r1, sp, #72	; 0x48
   16b0a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16b0e:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   16b12:	f011 0f04 	tst.w	r1, #4
   16b16:	d003      	beq.n	16b20 <nrf91_socket_offload_ioctl+0x144>
			fds[i].revents |= POLLERR;
   16b18:	88d1      	ldrh	r1, [r2, #6]
   16b1a:	f041 0108 	orr.w	r1, r1, #8
   16b1e:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   16b20:	a912      	add	r1, sp, #72	; 0x48
   16b22:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16b26:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   16b2a:	f011 0f10 	tst.w	r1, #16
   16b2e:	d003      	beq.n	16b38 <nrf91_socket_offload_ioctl+0x15c>
			fds[i].revents |= POLLNVAL;
   16b30:	88d1      	ldrh	r1, [r2, #6]
   16b32:	f041 0120 	orr.w	r1, r1, #32
   16b36:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   16b38:	a912      	add	r1, sp, #72	; 0x48
   16b3a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16b3e:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   16b42:	f011 0f08 	tst.w	r1, #8
   16b46:	d0be      	beq.n	16ac6 <nrf91_socket_offload_ioctl+0xea>
			fds[i].revents |= POLLHUP;
   16b48:	88d1      	ldrh	r1, [r2, #6]
   16b4a:	f041 0110 	orr.w	r1, r1, #16
   16b4e:	80d1      	strh	r1, [r2, #6]
   16b50:	e7b9      	b.n	16ac6 <nrf91_socket_offload_ioctl+0xea>
		ctx->lock = va_arg(args, struct k_mutex *);
   16b52:	9b01      	ldr	r3, [sp, #4]
   16b54:	1d1a      	adds	r2, r3, #4
   16b56:	9201      	str	r2, [sp, #4]
   16b58:	681b      	ldr	r3, [r3, #0]
   16b5a:	6043      	str	r3, [r0, #4]
		return 0;
   16b5c:	2700      	movs	r7, #0
   16b5e:	e74d      	b.n	169fc <nrf91_socket_offload_ioctl+0x20>
		return nrf91_socket_offload_fcntl(sd, request, args);
   16b60:	9a01      	ldr	r2, [sp, #4]
   16b62:	4620      	mov	r0, r4
   16b64:	f00d faec 	bl	24140 <nrf91_socket_offload_fcntl>
   16b68:	4607      	mov	r7, r0
   16b6a:	e747      	b.n	169fc <nrf91_socket_offload_ioctl+0x20>
		return -EOPNOTSUPP;
   16b6c:	f06f 075e 	mvn.w	r7, #94	; 0x5e
   16b70:	e744      	b.n	169fc <nrf91_socket_offload_ioctl+0x20>
   16b72:	bf00      	nop
   16b74:	0002882c 	.word	0x0002882c

00016b78 <nrf91_socket_create>:
{
   16b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b7a:	4606      	mov	r6, r0
   16b7c:	4617      	mov	r7, r2
	if (type & SOCK_NATIVE) {
   16b7e:	1e0c      	subs	r4, r1, #0
   16b80:	db18      	blt.n	16bb4 <nrf91_socket_create+0x3c>
	} else if (type & SOCK_NATIVE_TLS) {
   16b82:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
   16b86:	d11b      	bne.n	16bc0 <nrf91_socket_create+0x48>
	fd = z_reserve_fd();
   16b88:	f7fa fd00 	bl	1158c <z_reserve_fd>
	if (fd < 0) {
   16b8c:	1e05      	subs	r5, r0, #0
   16b8e:	db30      	blt.n	16bf2 <nrf91_socket_create+0x7a>
	sd = nrf91_socket_offload_socket(family, type, proto);
   16b90:	463a      	mov	r2, r7
   16b92:	4621      	mov	r1, r4
   16b94:	4630      	mov	r0, r6
   16b96:	f00d fb0f 	bl	241b8 <nrf91_socket_offload_socket>
	if (sd < 0) {
   16b9a:	1e04      	subs	r4, r0, #0
   16b9c:	db16      	blt.n	16bcc <nrf91_socket_create+0x54>
	ctx = allocate_ctx(sd);
   16b9e:	4620      	mov	r0, r4
   16ba0:	f7ff fe0c 	bl	167bc <allocate_ctx>
	if (ctx == NULL) {
   16ba4:	4601      	mov	r1, r0
   16ba6:	b1b8      	cbz	r0, 16bd8 <nrf91_socket_create+0x60>
	z_finalize_fd(fd, ctx,
   16ba8:	4a13      	ldr	r2, [pc, #76]	; (16bf8 <nrf91_socket_create+0x80>)
   16baa:	4628      	mov	r0, r5
   16bac:	f7fa fd14 	bl	115d8 <z_finalize_fd>
}
   16bb0:	4628      	mov	r0, r5
   16bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return native_socket(family, type, proto, &offload_disabled);
   16bb4:	4b11      	ldr	r3, [pc, #68]	; (16bfc <nrf91_socket_create+0x84>)
   16bb6:	4621      	mov	r1, r4
   16bb8:	f00d fae8 	bl	2418c <native_socket>
   16bbc:	4605      	mov	r5, r0
   16bbe:	e7f7      	b.n	16bb0 <nrf91_socket_create+0x38>
		return native_socket(family, type, proto, &tls_offload_disabled);
   16bc0:	4b0f      	ldr	r3, [pc, #60]	; (16c00 <nrf91_socket_create+0x88>)
   16bc2:	4621      	mov	r1, r4
   16bc4:	f00d fae2 	bl	2418c <native_socket>
   16bc8:	4605      	mov	r5, r0
   16bca:	e7f1      	b.n	16bb0 <nrf91_socket_create+0x38>
		z_free_fd(fd);
   16bcc:	4628      	mov	r0, r5
   16bce:	f00a ff30 	bl	21a32 <z_free_fd>
		return -1;
   16bd2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16bd6:	e7eb      	b.n	16bb0 <nrf91_socket_create+0x38>
		errno = ENOMEM;
   16bd8:	f00c f9dd 	bl	22f96 <__errno>
   16bdc:	230c      	movs	r3, #12
   16bde:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   16be0:	4620      	mov	r0, r4
   16be2:	f00e fee7 	bl	259b4 <nrf_close>
		z_free_fd(fd);
   16be6:	4628      	mov	r0, r5
   16be8:	f00a ff23 	bl	21a32 <z_free_fd>
		return -1;
   16bec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16bf0:	e7de      	b.n	16bb0 <nrf91_socket_create+0x38>
		return -1;
   16bf2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16bf6:	e7db      	b.n	16bb0 <nrf91_socket_create+0x38>
   16bf8:	0002882c 	.word	0x0002882c
   16bfc:	2000f904 	.word	0x2000f904
   16c00:	2000f905 	.word	0x2000f905

00016c04 <nrf91_socket_iface_init>:
static struct nrf91_socket_iface_data {
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
   16c04:	b508      	push	{r3, lr}
	nrf91_socket_iface_data.iface = iface;
   16c06:	4b04      	ldr	r3, [pc, #16]	; (16c18 <nrf91_socket_iface_init+0x14>)
   16c08:	6018      	str	r0, [r3, #0]

	iface->if_dev->offloaded = true;
   16c0a:	6803      	ldr	r3, [r0, #0]
   16c0c:	2201      	movs	r2, #1
   16c0e:	769a      	strb	r2, [r3, #26]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   16c10:	4802      	ldr	r0, [pc, #8]	; (16c1c <nrf91_socket_iface_init+0x18>)
   16c12:	f7fc ff1f 	bl	13a54 <socket_offload_dns_register>
}
   16c16:	bd08      	pop	{r3, pc}
   16c18:	2000e528 	.word	0x2000e528
   16c1c:	00028824 	.word	0x00028824

00016c20 <nrf91_socket_offload_getaddrinfo>:
{
   16c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c24:	b08a      	sub	sp, #40	; 0x28
   16c26:	4605      	mov	r5, r0
   16c28:	460e      	mov	r6, r1
   16c2a:	4614      	mov	r4, r2
   16c2c:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   16c2e:	2100      	movs	r1, #0
   16c30:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   16c32:	2220      	movs	r2, #32
   16c34:	a802      	add	r0, sp, #8
   16c36:	f00f fe24 	bl	26882 <memset>
	if (hints != NULL) {
   16c3a:	b154      	cbz	r4, 16c52 <nrf91_socket_offload_getaddrinfo+0x32>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   16c3c:	a902      	add	r1, sp, #8
   16c3e:	4620      	mov	r0, r4
   16c40:	f00d fb32 	bl	242a8 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   16c44:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   16c48:	d059      	beq.n	16cfe <nrf91_socket_offload_getaddrinfo+0xde>
		} else if (error == -EAFNOSUPPORT) {
   16c4a:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   16c4e:	d059      	beq.n	16d04 <nrf91_socket_offload_getaddrinfo+0xe4>
		nrf_hints_ptr = &nrf_hints;
   16c50:	ac02      	add	r4, sp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   16c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16c5a:	482c      	ldr	r0, [pc, #176]	; (16d0c <nrf91_socket_offload_getaddrinfo+0xec>)
   16c5c:	f008 f9ec 	bl	1f038 <z_impl_k_mutex_lock>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   16c60:	ab01      	add	r3, sp, #4
   16c62:	4622      	mov	r2, r4
   16c64:	4631      	mov	r1, r6
   16c66:	4628      	mov	r0, r5
   16c68:	f00e ff63 	bl	25b32 <nrf_getaddrinfo>
	if (retval != 0) {
   16c6c:	4680      	mov	r8, r0
   16c6e:	b918      	cbnz	r0, 16c78 <nrf91_socket_offload_getaddrinfo+0x58>
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   16c70:	9c01      	ldr	r4, [sp, #4]
	*res = NULL;
   16c72:	2600      	movs	r6, #0
   16c74:	603e      	str	r6, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   16c76:	e018      	b.n	16caa <nrf91_socket_offload_getaddrinfo+0x8a>
		error = nrf_to_z_dns_error_code(retval);
   16c78:	f00d f854 	bl	23d24 <nrf_to_z_dns_error_code>
   16c7c:	4680      	mov	r8, r0
		goto error;
   16c7e:	e037      	b.n	16cf0 <nrf91_socket_offload_getaddrinfo+0xd0>
			k_free(next_z_res);
   16c80:	4628      	mov	r0, r5
   16c82:	f00f fd98 	bl	267b6 <k_free>
			retval = DNS_EAI_MEMORY;
   16c86:	f06f 0809 	mvn.w	r8, #9
   16c8a:	e029      	b.n	16ce0 <nrf91_socket_offload_getaddrinfo+0xc0>
			k_free(next_z_res);
   16c8c:	4628      	mov	r0, r5
   16c8e:	f00f fd92 	bl	267b6 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   16c92:	f06f 0806 	mvn.w	r8, #6
   16c96:	e023      	b.n	16ce0 <nrf91_socket_offload_getaddrinfo+0xc0>
			k_free(next_z_res);
   16c98:	4628      	mov	r0, r5
   16c9a:	f00f fd8c 	bl	267b6 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   16c9e:	f06f 0808 	mvn.w	r8, #8
   16ca2:	e01d      	b.n	16ce0 <nrf91_socket_offload_getaddrinfo+0xc0>
			*res = next_z_res;
   16ca4:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   16ca6:	69e4      	ldr	r4, [r4, #28]
		latest_z_res = next_z_res;
   16ca8:	462e      	mov	r6, r5
	while ((retval == 0) && (next_nrf_res != NULL)) {
   16caa:	b1b4      	cbz	r4, 16cda <nrf91_socket_offload_getaddrinfo+0xba>
					k_malloc(sizeof(struct zsock_addrinfo));
   16cac:	2050      	movs	r0, #80	; 0x50
   16cae:	f00f fd8b 	bl	267c8 <k_malloc>
		if (next_z_res == NULL) {
   16cb2:	4605      	mov	r5, r0
   16cb4:	b178      	cbz	r0, 16cd6 <nrf91_socket_offload_getaddrinfo+0xb6>
		error = nrf_to_z_addrinfo(next_z_res, next_nrf_res);
   16cb6:	4621      	mov	r1, r4
   16cb8:	f00d fab3 	bl	24222 <nrf_to_z_addrinfo>
		if (error == -ENOMEM) {
   16cbc:	f110 0f0c 	cmn.w	r0, #12
   16cc0:	d0de      	beq.n	16c80 <nrf91_socket_offload_getaddrinfo+0x60>
		} else if (error == -EPROTONOSUPPORT) {
   16cc2:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   16cc6:	d0e1      	beq.n	16c8c <nrf91_socket_offload_getaddrinfo+0x6c>
		} else if (error == -EAFNOSUPPORT) {
   16cc8:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   16ccc:	d0e4      	beq.n	16c98 <nrf91_socket_offload_getaddrinfo+0x78>
		if (latest_z_res == NULL) {
   16cce:	2e00      	cmp	r6, #0
   16cd0:	d0e8      	beq.n	16ca4 <nrf91_socket_offload_getaddrinfo+0x84>
			latest_z_res->ai_next = next_z_res;
   16cd2:	6035      	str	r5, [r6, #0]
   16cd4:	e7e7      	b.n	16ca6 <nrf91_socket_offload_getaddrinfo+0x86>
			retval = DNS_EAI_MEMORY;
   16cd6:	f06f 0809 	mvn.w	r8, #9
	if (retval != 0) {
   16cda:	f1b8 0f00 	cmp.w	r8, #0
   16cde:	d004      	beq.n	16cea <nrf91_socket_offload_getaddrinfo+0xca>
		nrf91_socket_offload_freeaddrinfo(*res);
   16ce0:	6838      	ldr	r0, [r7, #0]
   16ce2:	f00d fa91 	bl	24208 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   16ce6:	2300      	movs	r3, #0
   16ce8:	603b      	str	r3, [r7, #0]
	nrf_freeaddrinfo(nrf_res);
   16cea:	9801      	ldr	r0, [sp, #4]
   16cec:	f00e ff23 	bl	25b36 <nrf_freeaddrinfo>
	return z_impl_k_mutex_unlock(mutex);
   16cf0:	4806      	ldr	r0, [pc, #24]	; (16d0c <nrf91_socket_offload_getaddrinfo+0xec>)
   16cf2:	f008 fa2b 	bl	1f14c <z_impl_k_mutex_unlock>
}
   16cf6:	4640      	mov	r0, r8
   16cf8:	b00a      	add	sp, #40	; 0x28
   16cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return DNS_EAI_SOCKTYPE;
   16cfe:	f06f 0806 	mvn.w	r8, #6
   16d02:	e7f8      	b.n	16cf6 <nrf91_socket_offload_getaddrinfo+0xd6>
			return DNS_EAI_ADDRFAMILY;
   16d04:	f06f 0808 	mvn.w	r8, #8
   16d08:	e7f5      	b.n	16cf6 <nrf91_socket_offload_getaddrinfo+0xd6>
   16d0a:	bf00      	nop
   16d0c:	2000c82c 	.word	0x2000c82c

00016d10 <at_monitor_task>:
	k_fifo_put(&at_monitor_fifo, at_notif);
	k_work_submit(&at_monitor_work);
}

static void at_monitor_task(struct k_work *work)
{
   16d10:	b538      	push	{r3, r4, r5, lr}
	struct at_notif_fifo *at_notif;

	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   16d12:	e016      	b.n	16d42 <at_monitor_task+0x32>
		LOG_DBG("AT notif: %s", log_strdup(at_notif->data));
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
			if (!e->paused &&
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
				LOG_DBG("Dispatching to %p", e->handler);
				e->handler(at_notif->data);
   16d14:	6863      	ldr	r3, [r4, #4]
   16d16:	1d28      	adds	r0, r5, #4
   16d18:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   16d1a:	340c      	adds	r4, #12
   16d1c:	4b0e      	ldr	r3, [pc, #56]	; (16d58 <at_monitor_task+0x48>)
   16d1e:	429c      	cmp	r4, r3
   16d20:	d20b      	bcs.n	16d3a <at_monitor_task+0x2a>
			if (!e->paused &&
   16d22:	7a23      	ldrb	r3, [r4, #8]
   16d24:	2b00      	cmp	r3, #0
   16d26:	d1f8      	bne.n	16d1a <at_monitor_task+0xa>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   16d28:	6821      	ldr	r1, [r4, #0]
			if (!e->paused &&
   16d2a:	2900      	cmp	r1, #0
   16d2c:	d0f2      	beq.n	16d14 <at_monitor_task+0x4>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   16d2e:	1d28      	adds	r0, r5, #4
   16d30:	f00f fe12 	bl	26958 <strstr>
   16d34:	2800      	cmp	r0, #0
   16d36:	d1ed      	bne.n	16d14 <at_monitor_task+0x4>
   16d38:	e7ef      	b.n	16d1a <at_monitor_task+0xa>
			}
		}
		k_heap_free(&at_monitor_heap, at_notif);
   16d3a:	4629      	mov	r1, r5
   16d3c:	4807      	ldr	r0, [pc, #28]	; (16d5c <at_monitor_task+0x4c>)
   16d3e:	f00e ff9b 	bl	25c78 <k_heap_free>
	return z_impl_k_queue_get(queue, timeout);
   16d42:	2200      	movs	r2, #0
   16d44:	2300      	movs	r3, #0
   16d46:	4806      	ldr	r0, [pc, #24]	; (16d60 <at_monitor_task+0x50>)
   16d48:	f008 fa44 	bl	1f1d4 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   16d4c:	4605      	mov	r5, r0
   16d4e:	b108      	cbz	r0, 16d54 <at_monitor_task+0x44>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   16d50:	4c04      	ldr	r4, [pc, #16]	; (16d64 <at_monitor_task+0x54>)
   16d52:	e7e3      	b.n	16d1c <at_monitor_task+0xc>
	}
}
   16d54:	bd38      	pop	{r3, r4, r5, pc}
   16d56:	bf00      	nop
   16d58:	2000c768 	.word	0x2000c768
   16d5c:	2000c7c8 	.word	0x2000c7c8
   16d60:	2000c8dc 	.word	0x2000c8dc
   16d64:	2000c708 	.word	0x2000c708

00016d68 <at_monitor_dispatch>:
{
   16d68:	b538      	push	{r3, r4, r5, lr}
   16d6a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   16d6c:	4c28      	ldr	r4, [pc, #160]	; (16e10 <at_monitor_dispatch+0xa8>)
   16d6e:	e003      	b.n	16d78 <at_monitor_dispatch+0x10>
			e->handler(notif);
   16d70:	6863      	ldr	r3, [r4, #4]
   16d72:	4628      	mov	r0, r5
   16d74:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   16d76:	340c      	adds	r4, #12
   16d78:	4b26      	ldr	r3, [pc, #152]	; (16e14 <at_monitor_dispatch+0xac>)
   16d7a:	429c      	cmp	r4, r3
   16d7c:	d20b      	bcs.n	16d96 <at_monitor_dispatch+0x2e>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   16d7e:	7a23      	ldrb	r3, [r4, #8]
   16d80:	2b00      	cmp	r3, #0
   16d82:	d1f8      	bne.n	16d76 <at_monitor_dispatch+0xe>
   16d84:	6821      	ldr	r1, [r4, #0]
   16d86:	2900      	cmp	r1, #0
   16d88:	d0f2      	beq.n	16d70 <at_monitor_dispatch+0x8>
   16d8a:	4628      	mov	r0, r5
   16d8c:	f00f fde4 	bl	26958 <strstr>
   16d90:	2800      	cmp	r0, #0
   16d92:	d1ed      	bne.n	16d70 <at_monitor_dispatch+0x8>
   16d94:	e7ef      	b.n	16d76 <at_monitor_dispatch+0xe>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   16d96:	4c20      	ldr	r4, [pc, #128]	; (16e18 <at_monitor_dispatch+0xb0>)
   16d98:	e000      	b.n	16d9c <at_monitor_dispatch+0x34>
   16d9a:	340c      	adds	r4, #12
   16d9c:	4b1f      	ldr	r3, [pc, #124]	; (16e1c <at_monitor_dispatch+0xb4>)
   16d9e:	429c      	cmp	r4, r3
   16da0:	d21f      	bcs.n	16de2 <at_monitor_dispatch+0x7a>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   16da2:	7a23      	ldrb	r3, [r4, #8]
   16da4:	2b00      	cmp	r3, #0
   16da6:	d1f8      	bne.n	16d9a <at_monitor_dispatch+0x32>
   16da8:	6821      	ldr	r1, [r4, #0]
   16daa:	b121      	cbz	r1, 16db6 <at_monitor_dispatch+0x4e>
   16dac:	4628      	mov	r0, r5
   16dae:	f00f fdd3 	bl	26958 <strstr>
   16db2:	2800      	cmp	r0, #0
   16db4:	d0f1      	beq.n	16d9a <at_monitor_dispatch+0x32>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   16db6:	4628      	mov	r0, r5
   16db8:	f7fa f834 	bl	10e24 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   16dbc:	2200      	movs	r2, #0
   16dbe:	2300      	movs	r3, #0
   16dc0:	1d41      	adds	r1, r0, #5
   16dc2:	4817      	ldr	r0, [pc, #92]	; (16e20 <at_monitor_dispatch+0xb8>)
   16dc4:	f00e ff4d 	bl	25c62 <k_heap_alloc>
	if (!at_notif) {
   16dc8:	4604      	mov	r4, r0
   16dca:	b158      	cbz	r0, 16de4 <at_monitor_dispatch+0x7c>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   16dcc:	4629      	mov	r1, r5
   16dce:	3004      	adds	r0, #4
   16dd0:	f00f fd88 	bl	268e4 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   16dd4:	4621      	mov	r1, r4
   16dd6:	4813      	ldr	r0, [pc, #76]	; (16e24 <at_monitor_dispatch+0xbc>)
   16dd8:	f00f f8a7 	bl	25f2a <k_queue_append>
	k_work_submit(&at_monitor_work);
   16ddc:	4812      	ldr	r0, [pc, #72]	; (16e28 <at_monitor_dispatch+0xc0>)
   16dde:	f008 fbc3 	bl	1f568 <k_work_submit>
}
   16de2:	bd38      	pop	{r3, r4, r5, pc}
   16de4:	4b11      	ldr	r3, [pc, #68]	; (16e2c <at_monitor_dispatch+0xc4>)
   16de6:	4a12      	ldr	r2, [pc, #72]	; (16e30 <at_monitor_dispatch+0xc8>)
   16de8:	1a9b      	subs	r3, r3, r2
   16dea:	08db      	lsrs	r3, r3, #3
		LOG_WRN("No heap space for incoming notification: %s",
   16dec:	f04f 0400 	mov.w	r4, #0
   16df0:	2202      	movs	r2, #2
   16df2:	f362 0402 	bfi	r4, r2, #0, #3
   16df6:	f36f 04c5 	bfc	r4, #3, #3
   16dfa:	f363 148f 	bfi	r4, r3, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   16dfe:	4628      	mov	r0, r5
   16e00:	f7fb ff24 	bl	12c4c <z_log_strdup>
   16e04:	4601      	mov	r1, r0
   16e06:	4622      	mov	r2, r4
   16e08:	480a      	ldr	r0, [pc, #40]	; (16e34 <at_monitor_dispatch+0xcc>)
   16e0a:	f7fc f88b 	bl	12f24 <log_1>
		return;
   16e0e:	e7e8      	b.n	16de2 <at_monitor_dispatch+0x7a>
   16e10:	2000c768 	.word	0x2000c768
   16e14:	2000c768 	.word	0x2000c768
   16e18:	2000c708 	.word	0x2000c708
   16e1c:	2000c768 	.word	0x2000c768
   16e20:	2000c7c8 	.word	0x2000c7c8
   16e24:	2000c8dc 	.word	0x2000c8dc
   16e28:	2000c61c 	.word	0x2000c61c
   16e2c:	00027110 	.word	0x00027110
   16e30:	00027108 	.word	0x00027108
   16e34:	00028864 	.word	0x00028864

00016e38 <at_monitor_sys_init>:

static int at_monitor_sys_init(const struct device *unused)
{
   16e38:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   16e3a:	480c      	ldr	r0, [pc, #48]	; (16e6c <at_monitor_sys_init+0x34>)
   16e3c:	f006 fe4c 	bl	1dad8 <nrf_modem_at_notif_handler_set>
	if (err) {
   16e40:	b908      	cbnz	r0, 16e46 <at_monitor_sys_init+0xe>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
	}

	return 0;
}
   16e42:	2000      	movs	r0, #0
   16e44:	bd08      	pop	{r3, pc}
   16e46:	4601      	mov	r1, r0
   16e48:	4b09      	ldr	r3, [pc, #36]	; (16e70 <at_monitor_sys_init+0x38>)
   16e4a:	4a0a      	ldr	r2, [pc, #40]	; (16e74 <at_monitor_sys_init+0x3c>)
   16e4c:	1a9b      	subs	r3, r3, r2
   16e4e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   16e50:	f04f 0200 	mov.w	r2, #0
   16e54:	2001      	movs	r0, #1
   16e56:	f360 0202 	bfi	r2, r0, #0, #3
   16e5a:	f36f 02c5 	bfc	r2, #3, #3
   16e5e:	f363 128f 	bfi	r2, r3, #6, #10
   16e62:	4805      	ldr	r0, [pc, #20]	; (16e78 <at_monitor_sys_init+0x40>)
   16e64:	f7fc f85e 	bl	12f24 <log_1>
   16e68:	e7eb      	b.n	16e42 <at_monitor_sys_init+0xa>
   16e6a:	bf00      	nop
   16e6c:	00016d69 	.word	0x00016d69
   16e70:	00027110 	.word	0x00027110
   16e74:	00027108 	.word	0x00027108
   16e78:	00028890 	.word	0x00028890

00016e7c <is_clac>:
 *
 * @retval true  If the string is a CLAC response
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
   16e7c:	b510      	push	{r4, lr}
   16e7e:	4604      	mov	r4, r0
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   16e80:	7823      	ldrb	r3, [r4, #0]
	if ((chr == '\r') || (chr == '\n')) {
   16e82:	2b0d      	cmp	r3, #13
   16e84:	d027      	beq.n	16ed6 <is_clac+0x5a>
   16e86:	2b0a      	cmp	r3, #10
   16e88:	d025      	beq.n	16ed6 <is_clac+0x5a>
		str++;
	}

	if (strlen(str) < 4) {
   16e8a:	4620      	mov	r0, r4
   16e8c:	f7f9 ffca 	bl	10e24 <strlen>
   16e90:	2803      	cmp	r0, #3
   16e92:	d935      	bls.n	16f00 <is_clac+0x84>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   16e94:	7823      	ldrb	r3, [r4, #0]
   16e96:	4a1f      	ldr	r2, [pc, #124]	; (16f14 <is_clac+0x98>)
   16e98:	5c9a      	ldrb	r2, [r3, r2]
   16e9a:	f002 0203 	and.w	r2, r2, #3
   16e9e:	2a02      	cmp	r2, #2
   16ea0:	d01b      	beq.n	16eda <is_clac+0x5e>
   16ea2:	2b41      	cmp	r3, #65	; 0x41
   16ea4:	d12e      	bne.n	16f04 <is_clac+0x88>
   16ea6:	7863      	ldrb	r3, [r4, #1]
   16ea8:	4a1a      	ldr	r2, [pc, #104]	; (16f14 <is_clac+0x98>)
   16eaa:	5c9a      	ldrb	r2, [r3, r2]
   16eac:	f002 0203 	and.w	r2, r2, #3
   16eb0:	2a02      	cmp	r2, #2
   16eb2:	d014      	beq.n	16ede <is_clac+0x62>
   16eb4:	2b54      	cmp	r3, #84	; 0x54
   16eb6:	d127      	bne.n	16f08 <is_clac+0x8c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   16eb8:	78a3      	ldrb	r3, [r4, #2]
   16eba:	4a16      	ldr	r2, [pc, #88]	; (16f14 <is_clac+0x98>)
   16ebc:	5c9a      	ldrb	r2, [r3, r2]
   16ebe:	f002 0203 	and.w	r2, r2, #3
   16ec2:	2a02      	cmp	r2, #2
   16ec4:	d00d      	beq.n	16ee2 <is_clac+0x66>
   16ec6:	2b2b      	cmp	r3, #43	; 0x2b
   16ec8:	d001      	beq.n	16ece <is_clac+0x52>
   16eca:	2b25      	cmp	r3, #37	; 0x25
   16ecc:	d11e      	bne.n	16f0c <is_clac+0x90>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   16ece:	2b25      	cmp	r3, #37	; 0x25
   16ed0:	d009      	beq.n	16ee6 <is_clac+0x6a>
		/* Ignore AT%X to avoid false detect (read resp XCOEX0 etc.) */
		return false;
	}

	return true;
   16ed2:	2001      	movs	r0, #1
   16ed4:	e015      	b.n	16f02 <is_clac+0x86>
		str++;
   16ed6:	3401      	adds	r4, #1
   16ed8:	e7d2      	b.n	16e80 <is_clac+0x4>
	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   16eda:	3b20      	subs	r3, #32
   16edc:	e7e1      	b.n	16ea2 <is_clac+0x26>
   16ede:	3b20      	subs	r3, #32
   16ee0:	e7e8      	b.n	16eb4 <is_clac+0x38>
	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   16ee2:	3b20      	subs	r3, #32
   16ee4:	e7ef      	b.n	16ec6 <is_clac+0x4a>
	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   16ee6:	78e3      	ldrb	r3, [r4, #3]
   16ee8:	4a0a      	ldr	r2, [pc, #40]	; (16f14 <is_clac+0x98>)
   16eea:	5c9a      	ldrb	r2, [r3, r2]
   16eec:	f002 0203 	and.w	r2, r2, #3
   16ef0:	2a02      	cmp	r2, #2
   16ef2:	d003      	beq.n	16efc <is_clac+0x80>
   16ef4:	2b58      	cmp	r3, #88	; 0x58
   16ef6:	d00b      	beq.n	16f10 <is_clac+0x94>
	return true;
   16ef8:	2001      	movs	r0, #1
   16efa:	e002      	b.n	16f02 <is_clac+0x86>
	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   16efc:	3b20      	subs	r3, #32
   16efe:	e7f9      	b.n	16ef4 <is_clac+0x78>
		return false;
   16f00:	2000      	movs	r0, #0
}
   16f02:	bd10      	pop	{r4, pc}
		return false;
   16f04:	2000      	movs	r0, #0
   16f06:	e7fc      	b.n	16f02 <is_clac+0x86>
   16f08:	2000      	movs	r0, #0
   16f0a:	e7fa      	b.n	16f02 <is_clac+0x86>
		return false;
   16f0c:	2000      	movs	r0, #0
   16f0e:	e7f8      	b.n	16f02 <is_clac+0x86>
		return false;
   16f10:	2000      	movs	r0, #0
   16f12:	e7f6      	b.n	16f02 <is_clac+0x86>
   16f14:	0002a397 	.word	0x0002a397

00016f18 <at_parse_detect_type>:

	return false;
}

static int at_parse_detect_type(const char **str, int index)
{
   16f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f1a:	4604      	mov	r4, r0
	const char *tmpstr = *str;
   16f1c:	6806      	ldr	r6, [r0, #0]

	if ((index == 0) && is_notification(*tmpstr)) {
   16f1e:	460d      	mov	r5, r1
   16f20:	b921      	cbnz	r1, 16f2c <at_parse_detect_type+0x14>
   16f22:	7833      	ldrb	r3, [r6, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16f24:	2b2b      	cmp	r3, #43	; 0x2b
   16f26:	d00b      	beq.n	16f40 <at_parse_detect_type+0x28>
   16f28:	2b25      	cmp	r3, #37	; 0x25
   16f2a:	d009      	beq.n	16f40 <at_parse_detect_type+0x28>
		set_new_state(NOTIFICATION);

		/* Check for responses we know need to be strings */
		set_type_string = check_response_for_forced_string(tmpstr);

	} else if (set_type_string) {
   16f2c:	4b6f      	ldr	r3, [pc, #444]	; (170ec <at_parse_detect_type+0x1d4>)
   16f2e:	781f      	ldrb	r7, [r3, #0]
   16f30:	2f00      	cmp	r7, #0
   16f32:	d03c      	beq.n	16fae <at_parse_detect_type+0x96>
	state = new_state;
   16f34:	4b6e      	ldr	r3, [pc, #440]	; (170f0 <at_parse_detect_type+0x1d8>)
   16f36:	2202      	movs	r2, #2
   16f38:	701a      	strb	r2, [r3, #0]
		 */
		*str = tmpstr;
		return -1;
	}

	*str = tmpstr;
   16f3a:	6026      	str	r6, [r4, #0]
	return 0;
   16f3c:	2000      	movs	r0, #0
}
   16f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = new_state;
   16f40:	4b6b      	ldr	r3, [pc, #428]	; (170f0 <at_parse_detect_type+0x1d8>)
   16f42:	2206      	movs	r2, #6
   16f44:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   16f46:	2205      	movs	r2, #5
   16f48:	496a      	ldr	r1, [pc, #424]	; (170f4 <at_parse_detect_type+0x1dc>)
   16f4a:	4630      	mov	r0, r6
   16f4c:	f00f fcd2 	bl	268f4 <strncmp>
   16f50:	b918      	cbnz	r0, 16f5a <at_parse_detect_type+0x42>
			retval = true;
   16f52:	2201      	movs	r2, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   16f54:	4b65      	ldr	r3, [pc, #404]	; (170ec <at_parse_detect_type+0x1d4>)
   16f56:	701a      	strb	r2, [r3, #0]
   16f58:	e7ef      	b.n	16f3a <at_parse_detect_type+0x22>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   16f5a:	2205      	movs	r2, #5
   16f5c:	4966      	ldr	r1, [pc, #408]	; (170f8 <at_parse_detect_type+0x1e0>)
   16f5e:	4630      	mov	r0, r6
   16f60:	f00f fcc8 	bl	268f4 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   16f64:	b908      	cbnz	r0, 16f6a <at_parse_detect_type+0x52>
			retval = true;
   16f66:	2201      	movs	r2, #1
   16f68:	e7f4      	b.n	16f54 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   16f6a:	220b      	movs	r2, #11
   16f6c:	4963      	ldr	r1, [pc, #396]	; (170fc <at_parse_detect_type+0x1e4>)
   16f6e:	4630      	mov	r0, r6
   16f70:	f00f fcc0 	bl	268f4 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   16f74:	b908      	cbnz	r0, 16f7a <at_parse_detect_type+0x62>
			retval = true;
   16f76:	2201      	movs	r2, #1
   16f78:	e7ec      	b.n	16f54 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   16f7a:	220a      	movs	r2, #10
   16f7c:	4960      	ldr	r1, [pc, #384]	; (17100 <at_parse_detect_type+0x1e8>)
   16f7e:	4630      	mov	r0, r6
   16f80:	f00f fcb8 	bl	268f4 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   16f84:	b908      	cbnz	r0, 16f8a <at_parse_detect_type+0x72>
			retval = true;
   16f86:	2201      	movs	r2, #1
   16f88:	e7e4      	b.n	16f54 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   16f8a:	220b      	movs	r2, #11
   16f8c:	495d      	ldr	r1, [pc, #372]	; (17104 <at_parse_detect_type+0x1ec>)
   16f8e:	4630      	mov	r0, r6
   16f90:	f00f fcb0 	bl	268f4 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   16f94:	b908      	cbnz	r0, 16f9a <at_parse_detect_type+0x82>
			retval = true;
   16f96:	2201      	movs	r2, #1
   16f98:	e7dc      	b.n	16f54 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   16f9a:	2207      	movs	r2, #7
   16f9c:	495a      	ldr	r1, [pc, #360]	; (17108 <at_parse_detect_type+0x1f0>)
   16f9e:	4630      	mov	r0, r6
   16fa0:	f00f fca8 	bl	268f4 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   16fa4:	b108      	cbz	r0, 16faa <at_parse_detect_type+0x92>
	bool retval = false;
   16fa6:	2200      	movs	r2, #0
   16fa8:	e7d4      	b.n	16f54 <at_parse_detect_type+0x3c>
			retval = true;
   16faa:	2201      	movs	r2, #1
   16fac:	e7d2      	b.n	16f54 <at_parse_detect_type+0x3c>
	} else if ((index > 0) && is_clac(tmpstr)) {
   16fae:	2d00      	cmp	r5, #0
   16fb0:	dc06      	bgt.n	16fc0 <at_parse_detect_type+0xa8>
	} else if ((index == 0) && is_command(tmpstr)) {
   16fb2:	b185      	cbz	r5, 16fd6 <at_parse_detect_type+0xbe>
	} else if (index == 0) {
   16fb4:	2d00      	cmp	r5, #0
   16fb6:	d146      	bne.n	17046 <at_parse_detect_type+0x12e>
	state = new_state;
   16fb8:	4b4d      	ldr	r3, [pc, #308]	; (170f0 <at_parse_detect_type+0x1d8>)
   16fba:	2202      	movs	r2, #2
   16fbc:	701a      	strb	r2, [r3, #0]
}
   16fbe:	e7bc      	b.n	16f3a <at_parse_detect_type+0x22>
	} else if ((index > 0) && is_clac(tmpstr)) {
   16fc0:	4630      	mov	r0, r6
   16fc2:	f7ff ff5b 	bl	16e7c <is_clac>
   16fc6:	2800      	cmp	r0, #0
   16fc8:	d0f3      	beq.n	16fb2 <at_parse_detect_type+0x9a>
	state = new_state;
   16fca:	4b49      	ldr	r3, [pc, #292]	; (170f0 <at_parse_detect_type+0x1d8>)
   16fcc:	2209      	movs	r2, #9
   16fce:	701a      	strb	r2, [r3, #0]
		return -2;
   16fd0:	f06f 0001 	mvn.w	r0, #1
   16fd4:	e7b3      	b.n	16f3e <at_parse_detect_type+0x26>
	if (strlen(str) < 2) {
   16fd6:	4630      	mov	r0, r6
   16fd8:	f7f9 ff24 	bl	10e24 <strlen>
   16fdc:	2801      	cmp	r0, #1
   16fde:	d924      	bls.n	1702a <at_parse_detect_type+0x112>
	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   16fe0:	7832      	ldrb	r2, [r6, #0]
   16fe2:	4b4a      	ldr	r3, [pc, #296]	; (1710c <at_parse_detect_type+0x1f4>)
   16fe4:	5cd3      	ldrb	r3, [r2, r3]
   16fe6:	f003 0303 	and.w	r3, r3, #3
   16fea:	2b02      	cmp	r3, #2
   16fec:	d018      	beq.n	17020 <at_parse_detect_type+0x108>
   16fee:	2a41      	cmp	r2, #65	; 0x41
   16ff0:	d11b      	bne.n	1702a <at_parse_detect_type+0x112>
   16ff2:	7872      	ldrb	r2, [r6, #1]
   16ff4:	4b45      	ldr	r3, [pc, #276]	; (1710c <at_parse_detect_type+0x1f4>)
   16ff6:	5cd3      	ldrb	r3, [r2, r3]
   16ff8:	f003 0303 	and.w	r3, r3, #3
   16ffc:	2b02      	cmp	r3, #2
   16ffe:	d011      	beq.n	17024 <at_parse_detect_type+0x10c>
   17000:	2a54      	cmp	r2, #84	; 0x54
   17002:	d112      	bne.n	1702a <at_parse_detect_type+0x112>
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   17004:	78b3      	ldrb	r3, [r6, #2]
   17006:	2b2b      	cmp	r3, #43	; 0x2b
   17008:	d00e      	beq.n	17028 <at_parse_detect_type+0x110>
   1700a:	2b25      	cmp	r3, #37	; 0x25
   1700c:	d013      	beq.n	17036 <at_parse_detect_type+0x11e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1700e:	2b23      	cmp	r3, #35	; 0x23
   17010:	d013      	beq.n	1703a <at_parse_detect_type+0x122>
	if ((chr == '\r') || (chr == '\n')) {
   17012:	2b0d      	cmp	r3, #13
   17014:	d013      	beq.n	1703e <at_parse_detect_type+0x126>
   17016:	2b0a      	cmp	r3, #10
   17018:	d013      	beq.n	17042 <at_parse_detect_type+0x12a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1701a:	b933      	cbnz	r3, 1702a <at_parse_detect_type+0x112>
		return true;
   1701c:	2701      	movs	r7, #1
   1701e:	e004      	b.n	1702a <at_parse_detect_type+0x112>
	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   17020:	3a20      	subs	r2, #32
   17022:	e7e4      	b.n	16fee <at_parse_detect_type+0xd6>
   17024:	3a20      	subs	r2, #32
   17026:	e7eb      	b.n	17000 <at_parse_detect_type+0xe8>
		return true;
   17028:	2701      	movs	r7, #1
	} else if ((index == 0) && is_command(tmpstr)) {
   1702a:	2f00      	cmp	r7, #0
   1702c:	d0c2      	beq.n	16fb4 <at_parse_detect_type+0x9c>
	state = new_state;
   1702e:	4b30      	ldr	r3, [pc, #192]	; (170f0 <at_parse_detect_type+0x1d8>)
   17030:	2207      	movs	r2, #7
   17032:	701a      	strb	r2, [r3, #0]
}
   17034:	e781      	b.n	16f3a <at_parse_detect_type+0x22>
   17036:	2701      	movs	r7, #1
   17038:	e7f7      	b.n	1702a <at_parse_detect_type+0x112>
   1703a:	2701      	movs	r7, #1
   1703c:	e7f5      	b.n	1702a <at_parse_detect_type+0x112>
   1703e:	2701      	movs	r7, #1
   17040:	e7f3      	b.n	1702a <at_parse_detect_type+0x112>
   17042:	2701      	movs	r7, #1
   17044:	e7f1      	b.n	1702a <at_parse_detect_type+0x112>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   17046:	2d00      	cmp	r5, #0
   17048:	dd04      	ble.n	17054 <at_parse_detect_type+0x13c>
   1704a:	7833      	ldrb	r3, [r6, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1704c:	2b2b      	cmp	r3, #43	; 0x2b
   1704e:	d021      	beq.n	17094 <at_parse_detect_type+0x17c>
   17050:	2b25      	cmp	r3, #37	; 0x25
   17052:	d01f      	beq.n	17094 <at_parse_detect_type+0x17c>
	} else if (is_number(*tmpstr)) {
   17054:	7833      	ldrb	r3, [r6, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   17056:	4a2d      	ldr	r2, [pc, #180]	; (1710c <at_parse_detect_type+0x1f4>)
   17058:	5c9a      	ldrb	r2, [r3, r2]
   1705a:	f012 0f04 	tst.w	r2, #4
   1705e:	d11d      	bne.n	1709c <at_parse_detect_type+0x184>
   17060:	2b2d      	cmp	r3, #45	; 0x2d
   17062:	d01b      	beq.n	1709c <at_parse_detect_type+0x184>
   17064:	2b2b      	cmp	r3, #43	; 0x2b
   17066:	d019      	beq.n	1709c <at_parse_detect_type+0x184>
	if (chr == '"') {
   17068:	2b22      	cmp	r3, #34	; 0x22
   1706a:	d01b      	beq.n	170a4 <at_parse_detect_type+0x18c>
	if (chr == '(') {
   1706c:	2b28      	cmp	r3, #40	; 0x28
   1706e:	d01e      	beq.n	170ae <at_parse_detect_type+0x196>
	if ((chr == '\r') || (chr == '\n')) {
   17070:	2b0d      	cmp	r3, #13
   17072:	d021      	beq.n	170b8 <at_parse_detect_type+0x1a0>
   17074:	2b0a      	cmp	r3, #10
   17076:	d01f      	beq.n	170b8 <at_parse_detect_type+0x1a0>
   17078:	2b0d      	cmp	r3, #13
   1707a:	d02c      	beq.n	170d6 <at_parse_detect_type+0x1be>
   1707c:	2b0a      	cmp	r3, #10
   1707e:	d02a      	beq.n	170d6 <at_parse_detect_type+0x1be>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   17080:	2b2c      	cmp	r3, #44	; 0x2c
   17082:	d02f      	beq.n	170e4 <at_parse_detect_type+0x1cc>
   17084:	2b3a      	cmp	r3, #58	; 0x3a
   17086:	d02d      	beq.n	170e4 <at_parse_detect_type+0x1cc>
   17088:	2b3d      	cmp	r3, #61	; 0x3d
   1708a:	d02b      	beq.n	170e4 <at_parse_detect_type+0x1cc>
		*str = tmpstr;
   1708c:	6026      	str	r6, [r4, #0]
		return -1;
   1708e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17092:	e754      	b.n	16f3e <at_parse_detect_type+0x26>
		*str = tmpstr;
   17094:	6026      	str	r6, [r4, #0]
		return -1;
   17096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1709a:	e750      	b.n	16f3e <at_parse_detect_type+0x26>
	state = new_state;
   1709c:	4b14      	ldr	r3, [pc, #80]	; (170f0 <at_parse_detect_type+0x1d8>)
   1709e:	2204      	movs	r2, #4
   170a0:	701a      	strb	r2, [r3, #0]
}
   170a2:	e74a      	b.n	16f3a <at_parse_detect_type+0x22>
	state = new_state;
   170a4:	4b12      	ldr	r3, [pc, #72]	; (170f0 <at_parse_detect_type+0x1d8>)
   170a6:	2203      	movs	r2, #3
   170a8:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   170aa:	3601      	adds	r6, #1
   170ac:	e745      	b.n	16f3a <at_parse_detect_type+0x22>
	state = new_state;
   170ae:	4b10      	ldr	r3, [pc, #64]	; (170f0 <at_parse_detect_type+0x1d8>)
   170b0:	2201      	movs	r2, #1
   170b2:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   170b4:	4416      	add	r6, r2
   170b6:	e740      	b.n	16f3a <at_parse_detect_type+0x22>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   170b8:	4a0d      	ldr	r2, [pc, #52]	; (170f0 <at_parse_detect_type+0x1d8>)
   170ba:	7812      	ldrb	r2, [r2, #0]
   170bc:	2a04      	cmp	r2, #4
   170be:	d1db      	bne.n	17078 <at_parse_detect_type+0x160>
		while (is_lfcr(*tmpstr)) {
   170c0:	7833      	ldrb	r3, [r6, #0]
	if ((chr == '\r') || (chr == '\n')) {
   170c2:	2b0d      	cmp	r3, #13
   170c4:	d005      	beq.n	170d2 <at_parse_detect_type+0x1ba>
   170c6:	2b0a      	cmp	r3, #10
   170c8:	d003      	beq.n	170d2 <at_parse_detect_type+0x1ba>
	state = new_state;
   170ca:	4b09      	ldr	r3, [pc, #36]	; (170f0 <at_parse_detect_type+0x1d8>)
   170cc:	2205      	movs	r2, #5
   170ce:	701a      	strb	r2, [r3, #0]
}
   170d0:	e733      	b.n	16f3a <at_parse_detect_type+0x22>
			tmpstr++;
   170d2:	3601      	adds	r6, #1
   170d4:	e7f4      	b.n	170c0 <at_parse_detect_type+0x1a8>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   170d6:	4a06      	ldr	r2, [pc, #24]	; (170f0 <at_parse_detect_type+0x1d8>)
   170d8:	7812      	ldrb	r2, [r2, #0]
   170da:	2a08      	cmp	r2, #8
   170dc:	d1d0      	bne.n	17080 <at_parse_detect_type+0x168>
	state = new_state;
   170de:	4b04      	ldr	r3, [pc, #16]	; (170f0 <at_parse_detect_type+0x1d8>)
   170e0:	701a      	strb	r2, [r3, #0]
}
   170e2:	e72a      	b.n	16f3a <at_parse_detect_type+0x22>
	state = new_state;
   170e4:	4b02      	ldr	r3, [pc, #8]	; (170f0 <at_parse_detect_type+0x1d8>)
   170e6:	2208      	movs	r2, #8
   170e8:	701a      	strb	r2, [r3, #0]
}
   170ea:	e726      	b.n	16f3a <at_parse_detect_type+0x22>
   170ec:	2000f906 	.word	0x2000f906
   170f0:	2000f907 	.word	0x2000f907
   170f4:	000288cc 	.word	0x000288cc
   170f8:	000288d4 	.word	0x000288d4
   170fc:	000288dc 	.word	0x000288dc
   17100:	000288e8 	.word	0x000288e8
   17104:	000288f4 	.word	0x000288f4
   17108:	00028900 	.word	0x00028900
   1710c:	0002a397 	.word	0x0002a397

00017110 <is_result>:
{
   17110:	b570      	push	{r4, r5, r6, lr}
   17112:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   17114:	2400      	movs	r4, #0
   17116:	2c03      	cmp	r4, #3
   17118:	d80d      	bhi.n	17136 <is_result+0x26>
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1711a:	4b09      	ldr	r3, [pc, #36]	; (17140 <is_result+0x30>)
   1711c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   17120:	4628      	mov	r0, r5
   17122:	f7f9 fe7f 	bl	10e24 <strlen>
   17126:	4602      	mov	r2, r0
   17128:	4629      	mov	r1, r5
   1712a:	4630      	mov	r0, r6
   1712c:	f00f fbe2 	bl	268f4 <strncmp>
		if (!diff) {
   17130:	b118      	cbz	r0, 1713a <is_result+0x2a>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   17132:	3401      	adds	r4, #1
   17134:	e7ef      	b.n	17116 <is_result+0x6>
	return false;
   17136:	2000      	movs	r0, #0
}
   17138:	bd70      	pop	{r4, r5, r6, pc}
			return true;
   1713a:	2001      	movs	r0, #1
   1713c:	e7fc      	b.n	17138 <is_result+0x28>
   1713e:	bf00      	nop
   17140:	00028930 	.word	0x00028930

00017144 <at_parse_process_element>:

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   17144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17148:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   1714a:	6806      	ldr	r6, [r0, #0]

	if (is_terminated(*tmpstr)) {
   1714c:	7833      	ldrb	r3, [r6, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1714e:	2b00      	cmp	r3, #0
   17150:	f000 80e1 	beq.w	17316 <at_parse_process_element+0x1d2>
   17154:	4605      	mov	r5, r0
   17156:	4688      	mov	r8, r1
   17158:	4617      	mov	r7, r2
		return -1;
	}

	if (state == NOTIFICATION) {
   1715a:	4b70      	ldr	r3, [pc, #448]	; (1731c <at_parse_process_element+0x1d8>)
   1715c:	781b      	ldrb	r3, [r3, #0]
   1715e:	2b06      	cmp	r3, #6
   17160:	d014      	beq.n	1718c <at_parse_process_element+0x48>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);
	} else if (state == COMMAND) {
   17162:	2b07      	cmp	r3, #7
   17164:	d02e      	beq.n	171c4 <at_parse_process_element+0x80>
			tmpstr += 2;
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
			tmpstr++;
		}

	} else if (state == OPTIONAL) {
   17166:	2b08      	cmp	r3, #8
   17168:	d04e      	beq.n	17208 <at_parse_process_element+0xc4>
		at_params_empty_put(list, index);

	} else if (state == STRING) {
   1716a:	2b02      	cmp	r3, #2
   1716c:	d051      	beq.n	17212 <at_parse_process_element+0xce>

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);

		tmpstr++;
	} else if (state == QUOTED_STRING) {
   1716e:	2b03      	cmp	r3, #3
   17170:	d060      	beq.n	17234 <at_parse_process_element+0xf0>

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);

		tmpstr++;
	} else if (state == ARRAY) {
   17172:	2b01      	cmp	r3, #1
   17174:	d06e      	beq.n	17254 <at_parse_process_element+0x110>
		}

		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));

		tmpstr++;
	} else if (state == NUMBER) {
   17176:	2b04      	cmp	r3, #4
   17178:	f000 80a4 	beq.w	172c4 <at_parse_process_element+0x180>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);

		tmpstr = next;

		at_params_int_put(list, index, value);
	} else if (state == SMS_PDU) {
   1717c:	2b05      	cmp	r3, #5
   1717e:	f000 80bc 	beq.w	172fa <at_parse_process_element+0x1b6>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);
	} else if (state == CLAC) {
   17182:	2b09      	cmp	r3, #9
   17184:	f000 80bb 	beq.w	172fe <at_parse_process_element+0x1ba>
	const char *tmpstr = *str;
   17188:	4634      	mov	r4, r6
   1718a:	e012      	b.n	171b2 <at_parse_process_element+0x6e>
		const char *start_ptr = tmpstr++;
   1718c:	1c74      	adds	r4, r6, #1
		while (is_valid_notification_char(*tmpstr)) {
   1718e:	7823      	ldrb	r3, [r4, #0]
	chr = toupper((int)chr);
   17190:	4a63      	ldr	r2, [pc, #396]	; (17320 <at_parse_process_element+0x1dc>)
   17192:	5c9a      	ldrb	r2, [r3, r2]
   17194:	f002 0203 	and.w	r2, r2, #3
   17198:	2a02      	cmp	r2, #2
   1719a:	d00f      	beq.n	171bc <at_parse_process_element+0x78>
   1719c:	b2db      	uxtb	r3, r3
	if ((chr >= 'A') && (chr <= 'Z')) {
   1719e:	3b41      	subs	r3, #65	; 0x41
   171a0:	b2db      	uxtb	r3, r3
   171a2:	2b19      	cmp	r3, #25
   171a4:	d90c      	bls.n	171c0 <at_parse_process_element+0x7c>
		at_params_string_put(list, index, start_ptr,
   171a6:	1ba3      	subs	r3, r4, r6
   171a8:	4632      	mov	r2, r6
   171aa:	4641      	mov	r1, r8
   171ac:	4638      	mov	r0, r7
   171ae:	f00d f962 	bl	24476 <at_params_string_put>

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
   171b2:	602c      	str	r4, [r5, #0]
	return 0;
   171b4:	2000      	movs	r0, #0
}
   171b6:	b023      	add	sp, #140	; 0x8c
   171b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	chr = toupper((int)chr);
   171bc:	3b20      	subs	r3, #32
   171be:	e7ed      	b.n	1719c <at_parse_process_element+0x58>
			tmpstr++;
   171c0:	3401      	adds	r4, #1
   171c2:	e7e4      	b.n	1718e <at_parse_process_element+0x4a>
	*cmd += sizeof("AT") - 1;
   171c4:	1cb4      	adds	r4, r6, #2
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   171c6:	78b3      	ldrb	r3, [r6, #2]
	if ((chr == '\r') || (chr == '\n')) {
   171c8:	2b0d      	cmp	r3, #13
   171ca:	d005      	beq.n	171d8 <at_parse_process_element+0x94>
   171cc:	2b0a      	cmp	r3, #10
   171ce:	d003      	beq.n	171d8 <at_parse_process_element+0x94>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   171d0:	b113      	cbz	r3, 171d8 <at_parse_process_element+0x94>
	(*cmd)++;
   171d2:	1cf4      	adds	r4, r6, #3
   171d4:	e000      	b.n	171d8 <at_parse_process_element+0x94>
			tmpstr++;
   171d6:	3401      	adds	r4, #1
		while (is_valid_command_char(*tmpstr)) {
   171d8:	7822      	ldrb	r2, [r4, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   171da:	4b51      	ldr	r3, [pc, #324]	; (17320 <at_parse_process_element+0x1dc>)
   171dc:	5cd3      	ldrb	r3, [r2, r3]
   171de:	f013 0f07 	tst.w	r3, #7
   171e2:	d1f8      	bne.n	171d6 <at_parse_process_element+0x92>
		at_params_string_put(list, index, start_ptr,
   171e4:	1ba3      	subs	r3, r4, r6
   171e6:	4632      	mov	r2, r6
   171e8:	4641      	mov	r1, r8
   171ea:	4638      	mov	r0, r7
   171ec:	f00d f943 	bl	24476 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   171f0:	7823      	ldrb	r3, [r4, #0]
   171f2:	2b3d      	cmp	r3, #61	; 0x3d
   171f4:	d003      	beq.n	171fe <at_parse_process_element+0xba>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   171f6:	2b3f      	cmp	r3, #63	; 0x3f
   171f8:	d1db      	bne.n	171b2 <at_parse_process_element+0x6e>
			tmpstr++;
   171fa:	3401      	adds	r4, #1
   171fc:	e7d9      	b.n	171b2 <at_parse_process_element+0x6e>
		    (*(tmpstr + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
   171fe:	7862      	ldrb	r2, [r4, #1]
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   17200:	2a3f      	cmp	r2, #63	; 0x3f
   17202:	d1f8      	bne.n	171f6 <at_parse_process_element+0xb2>
			tmpstr += 2;
   17204:	3402      	adds	r4, #2
   17206:	e7d4      	b.n	171b2 <at_parse_process_element+0x6e>
		at_params_empty_put(list, index);
   17208:	4610      	mov	r0, r2
   1720a:	f00d f8fe 	bl	2440a <at_params_empty_put>
	const char *tmpstr = *str;
   1720e:	4634      	mov	r4, r6
   17210:	e7cf      	b.n	171b2 <at_parse_process_element+0x6e>
   17212:	4634      	mov	r4, r6
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   17214:	7823      	ldrb	r3, [r4, #0]
	if ((chr == '\r') || (chr == '\n')) {
   17216:	2b0d      	cmp	r3, #13
   17218:	d004      	beq.n	17224 <at_parse_process_element+0xe0>
   1721a:	2b0a      	cmp	r3, #10
   1721c:	d002      	beq.n	17224 <at_parse_process_element+0xe0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1721e:	b10b      	cbz	r3, 17224 <at_parse_process_element+0xe0>
			tmpstr++;
   17220:	3401      	adds	r4, #1
   17222:	e7f7      	b.n	17214 <at_parse_process_element+0xd0>
		at_params_string_put(list, index, start_ptr,
   17224:	1ba3      	subs	r3, r4, r6
   17226:	4632      	mov	r2, r6
   17228:	4641      	mov	r1, r8
   1722a:	4638      	mov	r0, r7
   1722c:	f00d f923 	bl	24476 <at_params_string_put>
		tmpstr++;
   17230:	3401      	adds	r4, #1
   17232:	e7be      	b.n	171b2 <at_parse_process_element+0x6e>
	const char *tmpstr = *str;
   17234:	4634      	mov	r4, r6
   17236:	e000      	b.n	1723a <at_parse_process_element+0xf6>
			tmpstr++;
   17238:	3401      	adds	r4, #1
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1723a:	7823      	ldrb	r3, [r4, #0]
	if (chr == '"') {
   1723c:	2b22      	cmp	r3, #34	; 0x22
   1723e:	d001      	beq.n	17244 <at_parse_process_element+0x100>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   17240:	2b00      	cmp	r3, #0
   17242:	d1f9      	bne.n	17238 <at_parse_process_element+0xf4>
		at_params_string_put(list, index, start_ptr,
   17244:	1ba3      	subs	r3, r4, r6
   17246:	4632      	mov	r2, r6
   17248:	4641      	mov	r1, r8
   1724a:	4638      	mov	r0, r7
   1724c:	f00d f913 	bl	24476 <at_params_string_put>
		tmpstr++;
   17250:	3401      	adds	r4, #1
   17252:	e7ae      	b.n	171b2 <at_parse_process_element+0x6e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   17254:	220a      	movs	r2, #10
   17256:	a901      	add	r1, sp, #4
   17258:	4630      	mov	r0, r6
   1725a:	f009 fe7b 	bl	20f54 <strtoul>
   1725e:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   17260:	9c01      	ldr	r4, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   17262:	2601      	movs	r6, #1
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   17264:	e019      	b.n	1729a <at_parse_process_element+0x156>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   17266:	3401      	adds	r4, #1
				tmparray[i++] =
   17268:	f106 0901 	add.w	r9, r6, #1
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1726c:	220a      	movs	r2, #10
   1726e:	a901      	add	r1, sp, #4
   17270:	4620      	mov	r0, r4
   17272:	f009 fe6f 	bl	20f54 <strtoul>
				tmparray[i++] =
   17276:	ab22      	add	r3, sp, #136	; 0x88
   17278:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1727c:	f846 0c80 	str.w	r0, [r6, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   17280:	4620      	mov	r0, r4
   17282:	f7f9 fdcf 	bl	10e24 <strlen>
   17286:	4606      	mov	r6, r0
   17288:	9801      	ldr	r0, [sp, #4]
   1728a:	f7f9 fdcb 	bl	10e24 <strlen>
   1728e:	4286      	cmp	r6, r0
   17290:	d00f      	beq.n	172b2 <at_parse_process_element+0x16e>
					tmpstr = next;
   17292:	9c01      	ldr	r4, [sp, #4]
				tmparray[i++] =
   17294:	464e      	mov	r6, r9
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   17296:	2e20      	cmp	r6, #32
   17298:	d00c      	beq.n	172b4 <at_parse_process_element+0x170>
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1729a:	7823      	ldrb	r3, [r4, #0]
	if (chr == ')') {
   1729c:	2b29      	cmp	r3, #41	; 0x29
   1729e:	d009      	beq.n	172b4 <at_parse_process_element+0x170>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   172a0:	b143      	cbz	r3, 172b4 <at_parse_process_element+0x170>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   172a2:	2b2c      	cmp	r3, #44	; 0x2c
   172a4:	d0df      	beq.n	17266 <at_parse_process_element+0x122>
   172a6:	2b3a      	cmp	r3, #58	; 0x3a
   172a8:	d0dd      	beq.n	17266 <at_parse_process_element+0x122>
   172aa:	2b3d      	cmp	r3, #61	; 0x3d
   172ac:	d0db      	beq.n	17266 <at_parse_process_element+0x122>
				tmpstr++;
   172ae:	3401      	adds	r4, #1
   172b0:	e7f1      	b.n	17296 <at_parse_process_element+0x152>
				tmparray[i++] =
   172b2:	464e      	mov	r6, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   172b4:	00b3      	lsls	r3, r6, #2
   172b6:	aa02      	add	r2, sp, #8
   172b8:	4641      	mov	r1, r8
   172ba:	4638      	mov	r0, r7
   172bc:	f00d f907 	bl	244ce <at_params_array_put>
		tmpstr++;
   172c0:	3401      	adds	r4, #1
   172c2:	e776      	b.n	171b2 <at_parse_process_element+0x6e>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   172c4:	220a      	movs	r2, #10
   172c6:	a902      	add	r1, sp, #8
   172c8:	4630      	mov	r0, r6
   172ca:	f009 fdbf 	bl	20e4c <strtoll>
   172ce:	4602      	mov	r2, r0
   172d0:	460b      	mov	r3, r1
		tmpstr = next;
   172d2:	9c02      	ldr	r4, [sp, #8]
		at_params_int_put(list, index, value);
   172d4:	4641      	mov	r1, r8
   172d6:	4638      	mov	r0, r7
   172d8:	f00d f8b2 	bl	24440 <at_params_int_put>
   172dc:	e769      	b.n	171b2 <at_parse_process_element+0x6e>
			tmpstr++;
   172de:	3401      	adds	r4, #1
		while (isxdigit((int)*tmpstr)) {
   172e0:	7822      	ldrb	r2, [r4, #0]
   172e2:	4b0f      	ldr	r3, [pc, #60]	; (17320 <at_parse_process_element+0x1dc>)
   172e4:	5cd3      	ldrb	r3, [r2, r3]
   172e6:	f013 0f44 	tst.w	r3, #68	; 0x44
   172ea:	d1f8      	bne.n	172de <at_parse_process_element+0x19a>
		at_params_string_put(list, index, start_ptr,
   172ec:	1ba3      	subs	r3, r4, r6
   172ee:	4632      	mov	r2, r6
   172f0:	4641      	mov	r1, r8
   172f2:	4638      	mov	r0, r7
   172f4:	f00d f8bf 	bl	24476 <at_params_string_put>
   172f8:	e75b      	b.n	171b2 <at_parse_process_element+0x6e>
	const char *tmpstr = *str;
   172fa:	4634      	mov	r4, r6
   172fc:	e7f0      	b.n	172e0 <at_parse_process_element+0x19c>
   172fe:	4634      	mov	r4, r6
		while (!is_terminated(*tmpstr)) {
   17300:	7823      	ldrb	r3, [r4, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   17302:	b10b      	cbz	r3, 17308 <at_parse_process_element+0x1c4>
			tmpstr++;
   17304:	3401      	adds	r4, #1
   17306:	e7fb      	b.n	17300 <at_parse_process_element+0x1bc>
		at_params_string_put(list, index, start_ptr,
   17308:	1ba3      	subs	r3, r4, r6
   1730a:	4632      	mov	r2, r6
   1730c:	4641      	mov	r1, r8
   1730e:	4638      	mov	r0, r7
   17310:	f00d f8b1 	bl	24476 <at_params_string_put>
   17314:	e74d      	b.n	171b2 <at_parse_process_element+0x6e>
		return -1;
   17316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1731a:	e74c      	b.n	171b6 <at_parse_process_element+0x72>
   1731c:	2000f907 	.word	0x2000f907
   17320:	0002a397 	.word	0x0002a397

00017324 <at_parse_param>:
 * Parameters cannot be null. String must be null terminated.
 */
static int at_parse_param(const char **at_params_str,
			  struct at_param_list *const list,
			  const size_t max_params)
{
   17324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17328:	b083      	sub	sp, #12
   1732a:	4605      	mov	r5, r0
   1732c:	460f      	mov	r7, r1
   1732e:	4616      	mov	r6, r2
	int index = 0;
	const char *str = *at_params_str;
   17330:	6803      	ldr	r3, [r0, #0]
   17332:	9301      	str	r3, [sp, #4]
	state = IDLE;
   17334:	2400      	movs	r4, #0
   17336:	4b43      	ldr	r3, [pc, #268]	; (17444 <at_parse_param+0x120>)
   17338:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   1733a:	4b43      	ldr	r3, [pc, #268]	; (17448 <at_parse_param+0x124>)
   1733c:	701c      	strb	r4, [r3, #0]
	bool oversized = false;
   1733e:	46a0      	mov	r8, r4
	int ret;

	reset_state();

	while ((!is_terminated(*str)) && (index < max_params)) {
   17340:	9b01      	ldr	r3, [sp, #4]
   17342:	781a      	ldrb	r2, [r3, #0]
   17344:	2a00      	cmp	r2, #0
   17346:	d064      	beq.n	17412 <at_parse_param+0xee>
   17348:	42b4      	cmp	r4, r6
   1734a:	d262      	bcs.n	17412 <at_parse_param+0xee>
		if (isspace((int)*str)) {
   1734c:	493f      	ldr	r1, [pc, #252]	; (1744c <at_parse_param+0x128>)
   1734e:	5c52      	ldrb	r2, [r2, r1]
   17350:	f012 0f08 	tst.w	r2, #8
   17354:	d001      	beq.n	1735a <at_parse_param+0x36>
			str++;
   17356:	3301      	adds	r3, #1
   17358:	9301      	str	r3, [sp, #4]
		}

		ret = at_parse_detect_type(&str, index);
   1735a:	4621      	mov	r1, r4
   1735c:	a801      	add	r0, sp, #4
   1735e:	f7ff fddb 	bl	16f18 <at_parse_detect_type>
		if (ret == -1) {
   17362:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17366:	d054      	beq.n	17412 <at_parse_param+0xee>
			break;
		}
		if (ret == -2) {
   17368:	f110 0f02 	cmn.w	r0, #2
   1736c:	d023      	beq.n	173b6 <at_parse_param+0x92>
			/* CLAC response */
			str = *at_params_str;
			index = 0;
		}

		if (at_parse_process_element(&str, index, list) == -1) {
   1736e:	463a      	mov	r2, r7
   17370:	4621      	mov	r1, r4
   17372:	a801      	add	r0, sp, #4
   17374:	f7ff fee6 	bl	17144 <at_parse_process_element>
   17378:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1737c:	d049      	beq.n	17412 <at_parse_param+0xee>
			break;
		}

		if (is_separator(*str)) {
   1737e:	9a01      	ldr	r2, [sp, #4]
   17380:	7813      	ldrb	r3, [r2, #0]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   17382:	2b2c      	cmp	r3, #44	; 0x2c
   17384:	d003      	beq.n	1738e <at_parse_param+0x6a>
   17386:	2b3a      	cmp	r3, #58	; 0x3a
   17388:	d001      	beq.n	1738e <at_parse_param+0x6a>
   1738a:	2b3d      	cmp	r3, #61	; 0x3d
   1738c:	d107      	bne.n	1739e <at_parse_param+0x7a>
			if (is_lfcr(*(str + 1))) {
   1738e:	7853      	ldrb	r3, [r2, #1]
	if ((chr == '\r') || (chr == '\n')) {
   17390:	2b0d      	cmp	r3, #13
   17392:	d014      	beq.n	173be <at_parse_param+0x9a>
   17394:	2b0a      	cmp	r3, #10
   17396:	d012      	beq.n	173be <at_parse_param+0x9a>
							     list) == -1) {
					break;
				}
			}

			str++;
   17398:	9b01      	ldr	r3, [sp, #4]
   1739a:	3301      	adds	r3, #1
   1739c:	9301      	str	r3, [sp, #4]
		}

		/* Peek forward to see if we will be terminated */
		if (is_lfcr(*str)) {
   1739e:	9a01      	ldr	r2, [sp, #4]
   173a0:	7813      	ldrb	r3, [r2, #0]
   173a2:	2b0d      	cmp	r3, #13
   173a4:	d020      	beq.n	173e8 <at_parse_param+0xc4>
   173a6:	2b0a      	cmp	r3, #10
   173a8:	d01c      	beq.n	173e4 <at_parse_param+0xc0>
				str += i;
				break;
			}
		}

		index++;
   173aa:	3401      	adds	r4, #1

		if (index == max_params) {
   173ac:	42a6      	cmp	r6, r4
   173ae:	d1c7      	bne.n	17340 <at_parse_param+0x1c>
			oversized = true;
   173b0:	f04f 0801 	mov.w	r8, #1
   173b4:	e7c4      	b.n	17340 <at_parse_param+0x1c>
			str = *at_params_str;
   173b6:	682b      	ldr	r3, [r5, #0]
   173b8:	9301      	str	r3, [sp, #4]
			index = 0;
   173ba:	2400      	movs	r4, #0
   173bc:	e7d7      	b.n	1736e <at_parse_param+0x4a>
				index++;
   173be:	3401      	adds	r4, #1
				if (index == max_params) {
   173c0:	42a6      	cmp	r6, r4
   173c2:	d034      	beq.n	1742e <at_parse_param+0x10a>
				if (at_parse_detect_type(&str, index) == -1) {
   173c4:	4621      	mov	r1, r4
   173c6:	a801      	add	r0, sp, #4
   173c8:	f7ff fda6 	bl	16f18 <at_parse_detect_type>
   173cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   173d0:	d01f      	beq.n	17412 <at_parse_param+0xee>
				if (at_parse_process_element(&str, index,
   173d2:	463a      	mov	r2, r7
   173d4:	4621      	mov	r1, r4
   173d6:	a801      	add	r0, sp, #4
   173d8:	f7ff feb4 	bl	17144 <at_parse_process_element>
   173dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   173e0:	d1da      	bne.n	17398 <at_parse_param+0x74>
   173e2:	e016      	b.n	17412 <at_parse_param+0xee>
   173e4:	2300      	movs	r3, #0
   173e6:	e000      	b.n	173ea <at_parse_param+0xc6>
   173e8:	2300      	movs	r3, #0
			while (is_lfcr(str[++i])) {
   173ea:	3301      	adds	r3, #1
   173ec:	4699      	mov	r9, r3
   173ee:	18d0      	adds	r0, r2, r3
   173f0:	5cd1      	ldrb	r1, [r2, r3]
   173f2:	290d      	cmp	r1, #13
   173f4:	d0f9      	beq.n	173ea <at_parse_param+0xc6>
   173f6:	290a      	cmp	r1, #10
   173f8:	d0f7      	beq.n	173ea <at_parse_param+0xc6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   173fa:	b139      	cbz	r1, 1740c <at_parse_param+0xe8>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   173fc:	292b      	cmp	r1, #43	; 0x2b
   173fe:	d005      	beq.n	1740c <at_parse_param+0xe8>
   17400:	2925      	cmp	r1, #37	; 0x25
   17402:	d003      	beq.n	1740c <at_parse_param+0xe8>
			    is_result(str + i)) {
   17404:	f7ff fe84 	bl	17110 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   17408:	2800      	cmp	r0, #0
   1740a:	d0ce      	beq.n	173aa <at_parse_param+0x86>
				str += i;
   1740c:	9b01      	ldr	r3, [sp, #4]
   1740e:	444b      	add	r3, r9
   17410:	9301      	str	r3, [sp, #4]
		}
	}

	*at_params_str = str;
   17412:	9801      	ldr	r0, [sp, #4]
   17414:	6028      	str	r0, [r5, #0]

	if (oversized) {
   17416:	f1b8 0f00 	cmp.w	r8, #0
   1741a:	d10b      	bne.n	17434 <at_parse_param+0x110>
		return -E2BIG;
	}

	if (!is_terminated(*str) && !is_result(str)) {
   1741c:	7803      	ldrb	r3, [r0, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1741e:	b163      	cbz	r3, 1743a <at_parse_param+0x116>
   17420:	f7ff fe76 	bl	17110 <is_result>
   17424:	b158      	cbz	r0, 1743e <at_parse_param+0x11a>
		return -EAGAIN;
	}

	return 0;
   17426:	2000      	movs	r0, #0
}
   17428:	b003      	add	sp, #12
   1742a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					oversized = true;
   1742e:	f04f 0801 	mov.w	r8, #1
   17432:	e7ee      	b.n	17412 <at_parse_param+0xee>
		return -E2BIG;
   17434:	f06f 0006 	mvn.w	r0, #6
   17438:	e7f6      	b.n	17428 <at_parse_param+0x104>
	return 0;
   1743a:	2000      	movs	r0, #0
   1743c:	e7f4      	b.n	17428 <at_parse_param+0x104>
		return -EAGAIN;
   1743e:	f06f 000a 	mvn.w	r0, #10
   17442:	e7f1      	b.n	17428 <at_parse_param+0x104>
   17444:	2000f907 	.word	0x2000f907
   17448:	2000f906 	.word	0x2000f906
   1744c:	0002a397 	.word	0x0002a397

00017450 <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   17450:	b510      	push	{r4, lr}
   17452:	b090      	sub	sp, #64	; 0x40
   17454:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   17456:	2240      	movs	r2, #64	; 0x40
   17458:	2100      	movs	r1, #0
   1745a:	4668      	mov	r0, sp
   1745c:	f00f fa11 	bl	26882 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   17460:	2201      	movs	r2, #1
   17462:	a902      	add	r1, sp, #8
   17464:	4620      	mov	r0, r4
   17466:	f001 f9ff 	bl	18868 <parse_rrc_mode>
	if (err) {
   1746a:	b938      	cbnz	r0, 1747c <at_handler_cscon+0x2c>
		LTE_LC_TRACE(LTE_LC_TRACE_RRC_IDLE);
	} else if (evt.rrc_mode == LTE_LC_RRC_MODE_CONNECTED) {
		LTE_LC_TRACE(LTE_LC_TRACE_RRC_CONNECTED);
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1746c:	2303      	movs	r3, #3
   1746e:	f88d 3000 	strb.w	r3, [sp]

	event_handler_list_dispatch(&evt);
   17472:	4668      	mov	r0, sp
   17474:	f000 ffae 	bl	183d4 <event_handler_list_dispatch>
}
   17478:	b010      	add	sp, #64	; 0x40
   1747a:	bd10      	pop	{r4, pc}
   1747c:	4601      	mov	r1, r0
   1747e:	4b08      	ldr	r3, [pc, #32]	; (174a0 <at_handler_cscon+0x50>)
   17480:	4a08      	ldr	r2, [pc, #32]	; (174a4 <at_handler_cscon+0x54>)
   17482:	1a9b      	subs	r3, r3, r2
   17484:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   17486:	f04f 0200 	mov.w	r2, #0
   1748a:	2001      	movs	r0, #1
   1748c:	f360 0202 	bfi	r2, r0, #0, #3
   17490:	f36f 02c5 	bfc	r2, #3, #3
   17494:	f363 128f 	bfi	r2, r3, #6, #10
   17498:	4803      	ldr	r0, [pc, #12]	; (174a8 <at_handler_cscon+0x58>)
   1749a:	f7fb fd43 	bl	12f24 <log_1>
		return;
   1749e:	e7eb      	b.n	17478 <at_handler_cscon+0x28>
   174a0:	00027140 	.word	0x00027140
   174a4:	00027108 	.word	0x00027108
   174a8:	00028940 	.word	0x00028940

000174ac <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   174ac:	b510      	push	{r4, lr}
   174ae:	b090      	sub	sp, #64	; 0x40
   174b0:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   174b2:	2240      	movs	r2, #64	; 0x40
   174b4:	2100      	movs	r1, #0
   174b6:	4668      	mov	r0, sp
   174b8:	f00f f9e3 	bl	26882 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   174bc:	a902      	add	r1, sp, #8
   174be:	4620      	mov	r0, r4
   174c0:	f000 ffe2 	bl	18488 <parse_edrx>
	if (err) {
   174c4:	b938      	cbnz	r0, 174d6 <at_handler_cedrxp+0x2a>
		LOG_ERR("Can't parse eDRX, error: %d", err);
		return;
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   174c6:	2302      	movs	r3, #2
   174c8:	f88d 3000 	strb.w	r3, [sp]

	event_handler_list_dispatch(&evt);
   174cc:	4668      	mov	r0, sp
   174ce:	f000 ff81 	bl	183d4 <event_handler_list_dispatch>
}
   174d2:	b010      	add	sp, #64	; 0x40
   174d4:	bd10      	pop	{r4, pc}
   174d6:	4601      	mov	r1, r0
   174d8:	4b08      	ldr	r3, [pc, #32]	; (174fc <at_handler_cedrxp+0x50>)
   174da:	4a09      	ldr	r2, [pc, #36]	; (17500 <at_handler_cedrxp+0x54>)
   174dc:	1a9b      	subs	r3, r3, r2
   174de:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse eDRX, error: %d", err);
   174e0:	f04f 0200 	mov.w	r2, #0
   174e4:	2001      	movs	r0, #1
   174e6:	f360 0202 	bfi	r2, r0, #0, #3
   174ea:	f36f 02c5 	bfc	r2, #3, #3
   174ee:	f363 128f 	bfi	r2, r3, #6, #10
   174f2:	4804      	ldr	r0, [pc, #16]	; (17504 <at_handler_cedrxp+0x58>)
   174f4:	f7fb fd16 	bl	12f24 <log_1>
		return;
   174f8:	e7eb      	b.n	174d2 <at_handler_cedrxp+0x26>
   174fa:	bf00      	nop
   174fc:	00027140 	.word	0x00027140
   17500:	00027108 	.word	0x00027108
   17504:	00028968 	.word	0x00028968

00017508 <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   17508:	b510      	push	{r4, lr}
   1750a:	b090      	sub	sp, #64	; 0x40
   1750c:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   1750e:	2240      	movs	r2, #64	; 0x40
   17510:	2100      	movs	r1, #0
   17512:	4668      	mov	r0, sp
   17514:	f00f f9b5 	bl	26882 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   17518:	a902      	add	r1, sp, #8
   1751a:	4620      	mov	r0, r4
   1751c:	f001 fb46 	bl	18bac <parse_xt3412>
	if (err) {
   17520:	b950      	cbnz	r0, 17538 <at_handler_xt3412+0x30>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
		return;
	}

	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   17522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   17526:	f241 3288 	movw	r2, #5000	; 0x1388
   1752a:	2300      	movs	r3, #0
   1752c:	4299      	cmp	r1, r3
   1752e:	bf08      	it	eq
   17530:	4290      	cmpeq	r0, r2
   17532:	d013      	beq.n	1755c <at_handler_xt3412+0x54>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   17534:	b010      	add	sp, #64	; 0x40
   17536:	bd10      	pop	{r4, pc}
   17538:	4601      	mov	r1, r0
   1753a:	4b0c      	ldr	r3, [pc, #48]	; (1756c <at_handler_xt3412+0x64>)
   1753c:	4a0c      	ldr	r2, [pc, #48]	; (17570 <at_handler_xt3412+0x68>)
   1753e:	1a9b      	subs	r3, r3, r2
   17540:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   17542:	f04f 0200 	mov.w	r2, #0
   17546:	2001      	movs	r0, #1
   17548:	f360 0202 	bfi	r2, r0, #0, #3
   1754c:	f36f 02c5 	bfc	r2, #3, #3
   17550:	f363 128f 	bfi	r2, r3, #6, #10
   17554:	4807      	ldr	r0, [pc, #28]	; (17574 <at_handler_xt3412+0x6c>)
   17556:	f7fb fce5 	bl	12f24 <log_1>
		return;
   1755a:	e7eb      	b.n	17534 <at_handler_xt3412+0x2c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1755c:	2306      	movs	r3, #6
   1755e:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   17562:	4668      	mov	r0, sp
   17564:	f000 ff36 	bl	183d4 <event_handler_list_dispatch>
   17568:	e7e4      	b.n	17534 <at_handler_xt3412+0x2c>
   1756a:	bf00      	nop
   1756c:	00027140 	.word	0x00027140
   17570:	00027108 	.word	0x00027108
   17574:	00028984 	.word	0x00028984

00017578 <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   17578:	b570      	push	{r4, r5, r6, lr}
   1757a:	b090      	sub	sp, #64	; 0x40
   1757c:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   1757e:	2240      	movs	r2, #64	; 0x40
   17580:	2100      	movs	r1, #0
   17582:	4668      	mov	r0, sp
   17584:	f00f f97d 	bl	26882 <memset>

	__ASSERT_NO_MSG(response != NULL);

	int ncell_count = neighborcell_count_get(response);
   17588:	4620      	mov	r0, r4
   1758a:	f001 fb99 	bl	18cc0 <neighborcell_count_get>
   1758e:	4605      	mov	r5, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   17590:	f000 fede 	bl	18350 <event_handler_list_is_empty>
   17594:	bb70      	cbnz	r0, 175f4 <at_handler_ncellmeas+0x7c>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   17596:	b1b5      	cbz	r5, 175c6 <at_handler_ncellmeas+0x4e>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   17598:	2110      	movs	r1, #16
   1759a:	4628      	mov	r0, r5
   1759c:	f00f f91a 	bl	267d4 <k_calloc>
		if (neighbor_cells == NULL) {
   175a0:	4605      	mov	r5, r0
   175a2:	b988      	cbnz	r0, 175c8 <at_handler_ncellmeas+0x50>
   175a4:	4b2b      	ldr	r3, [pc, #172]	; (17654 <at_handler_ncellmeas+0xdc>)
   175a6:	4a2c      	ldr	r2, [pc, #176]	; (17658 <at_handler_ncellmeas+0xe0>)
   175a8:	1a9b      	subs	r3, r3, r2
   175aa:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to allocate memory for neighbor cells");
   175ac:	f04f 0100 	mov.w	r1, #0
   175b0:	2201      	movs	r2, #1
   175b2:	f362 0102 	bfi	r1, r2, #0, #3
   175b6:	f36f 01c5 	bfc	r1, #3, #3
   175ba:	f363 118f 	bfi	r1, r3, #6, #10
   175be:	4827      	ldr	r0, [pc, #156]	; (1765c <at_handler_ncellmeas+0xe4>)
   175c0:	f7fb fd44 	bl	1304c <log_0>
			return;
   175c4:	e016      	b.n	175f4 <at_handler_ncellmeas+0x7c>
	struct lte_lc_ncell *neighbor_cells = NULL;
   175c6:	2500      	movs	r5, #0
		}
	}

	evt.cells_info.neighbor_cells = neighbor_cells;
   175c8:	950f      	str	r5, [sp, #60]	; 0x3c

	err = parse_ncellmeas(response, &evt.cells_info);
   175ca:	a902      	add	r1, sp, #8
   175cc:	4620      	mov	r0, r4
   175ce:	f001 fba1 	bl	18d14 <parse_ncellmeas>
   175d2:	4601      	mov	r1, r0

	switch (err) {
   175d4:	f110 0f07 	cmn.w	r0, #7
   175d8:	d00e      	beq.n	175f8 <at_handler_ncellmeas+0x80>
   175da:	db2a      	blt.n	17632 <at_handler_ncellmeas+0xba>
   175dc:	2801      	cmp	r0, #1
   175de:	d828      	bhi.n	17632 <at_handler_ncellmeas+0xba>
		LOG_WRN("More cells than the configured max count of %d were found",
			CONFIG_LTE_NEIGHBOR_CELLS_MAX);
		/* Fall through */
	case 0: /* Fall through */
	case 1:
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   175e0:	2307      	movs	r3, #7
   175e2:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   175e6:	4668      	mov	r0, sp
   175e8:	f000 fef4 	bl	183d4 <event_handler_list_dispatch>
	default:
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
		break;
	}

	if (neighbor_cells) {
   175ec:	b115      	cbz	r5, 175f4 <at_handler_ncellmeas+0x7c>
		k_free(neighbor_cells);
   175ee:	4628      	mov	r0, r5
   175f0:	f00f f8e1 	bl	267b6 <k_free>
	}
}
   175f4:	b010      	add	sp, #64	; 0x40
   175f6:	bd70      	pop	{r4, r5, r6, pc}
   175f8:	4c16      	ldr	r4, [pc, #88]	; (17654 <at_handler_ncellmeas+0xdc>)
   175fa:	4b17      	ldr	r3, [pc, #92]	; (17658 <at_handler_ncellmeas+0xe0>)
   175fc:	1ae4      	subs	r4, r4, r3
   175fe:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("Not all neighbor cells could be parsed");
   17600:	2602      	movs	r6, #2
   17602:	f04f 0100 	mov.w	r1, #0
   17606:	f366 0102 	bfi	r1, r6, #0, #3
   1760a:	f36f 01c5 	bfc	r1, #3, #3
   1760e:	f364 118f 	bfi	r1, r4, #6, #10
   17612:	4813      	ldr	r0, [pc, #76]	; (17660 <at_handler_ncellmeas+0xe8>)
   17614:	f7fb fd1a 	bl	1304c <log_0>
		LOG_WRN("More cells than the configured max count of %d were found",
   17618:	f04f 0200 	mov.w	r2, #0
   1761c:	f366 0202 	bfi	r2, r6, #0, #3
   17620:	f36f 02c5 	bfc	r2, #3, #3
   17624:	f364 128f 	bfi	r2, r4, #6, #10
   17628:	210a      	movs	r1, #10
   1762a:	480e      	ldr	r0, [pc, #56]	; (17664 <at_handler_ncellmeas+0xec>)
   1762c:	f7fb fc7a 	bl	12f24 <log_1>
   17630:	e7d6      	b.n	175e0 <at_handler_ncellmeas+0x68>
   17632:	4b08      	ldr	r3, [pc, #32]	; (17654 <at_handler_ncellmeas+0xdc>)
   17634:	4a08      	ldr	r2, [pc, #32]	; (17658 <at_handler_ncellmeas+0xe0>)
   17636:	1a9b      	subs	r3, r3, r2
   17638:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1763a:	f04f 0200 	mov.w	r2, #0
   1763e:	2001      	movs	r0, #1
   17640:	f360 0202 	bfi	r2, r0, #0, #3
   17644:	f36f 02c5 	bfc	r2, #3, #3
   17648:	f363 128f 	bfi	r2, r3, #6, #10
   1764c:	4806      	ldr	r0, [pc, #24]	; (17668 <at_handler_ncellmeas+0xf0>)
   1764e:	f7fb fc69 	bl	12f24 <log_1>
   17652:	e7cb      	b.n	175ec <at_handler_ncellmeas+0x74>
   17654:	00027140 	.word	0x00027140
   17658:	00027108 	.word	0x00027108
   1765c:	000289b8 	.word	0x000289b8
   17660:	000289e8 	.word	0x000289e8
   17664:	00028a10 	.word	0x00028a10
   17668:	00028a4c 	.word	0x00028a4c

0001766c <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   1766c:	b510      	push	{r4, lr}
   1766e:	b090      	sub	sp, #64	; 0x40
   17670:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   17672:	2240      	movs	r2, #64	; 0x40
   17674:	2100      	movs	r1, #0
   17676:	4668      	mov	r0, sp
   17678:	f00f f903 	bl	26882 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   1767c:	a902      	add	r1, sp, #8
   1767e:	4620      	mov	r0, r4
   17680:	f001 fccc 	bl	1901c <parse_xmodemsleep>
	if (err) {
   17684:	b9b0      	cbnz	r0, 176b4 <at_handler_xmodemsleep+0x48>
	}

	/* Link controller only supports PSM, RF inactivity and flight mode
	 * modem sleep types.
	 */
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   17686:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1768a:	1e53      	subs	r3, r2, #1
   1768c:	b2db      	uxtb	r3, r3
   1768e:	2b01      	cmp	r3, #1
   17690:	d901      	bls.n	17696 <at_handler_xmodemsleep+0x2a>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   17692:	2a04      	cmp	r2, #4
   17694:	d126      	bne.n	176e4 <at_handler_xmodemsleep+0x78>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_FLIGHT_MODE)) {
		return;
	}

	/* Propagate the appropriate event depending on the parsed time parameter. */
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   17696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1769a:	f241 3088 	movw	r0, #5000	; 0x1388
   1769e:	2100      	movs	r1, #0
   176a0:	428b      	cmp	r3, r1
   176a2:	bf08      	it	eq
   176a4:	4282      	cmpeq	r2, r0
   176a6:	d017      	beq.n	176d8 <at_handler_xmodemsleep+0x6c>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
	} else if (evt.modem_sleep.time == 0) {
   176a8:	4313      	orrs	r3, r2
   176aa:	d11d      	bne.n	176e8 <at_handler_xmodemsleep+0x7c>
		LTE_LC_TRACE(LTE_LC_TRACE_MODEM_SLEEP_EXIT);

		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   176ac:	2309      	movs	r3, #9
   176ae:	f88d 3000 	strb.w	r3, [sp]
   176b2:	e014      	b.n	176de <at_handler_xmodemsleep+0x72>
   176b4:	4601      	mov	r1, r0
   176b6:	4b0e      	ldr	r3, [pc, #56]	; (176f0 <at_handler_xmodemsleep+0x84>)
   176b8:	4a0e      	ldr	r2, [pc, #56]	; (176f4 <at_handler_xmodemsleep+0x88>)
   176ba:	1a9b      	subs	r3, r3, r2
   176bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   176be:	f04f 0200 	mov.w	r2, #0
   176c2:	2001      	movs	r0, #1
   176c4:	f360 0202 	bfi	r2, r0, #0, #3
   176c8:	f36f 02c5 	bfc	r2, #3, #3
   176cc:	f363 128f 	bfi	r2, r3, #6, #10
   176d0:	4809      	ldr	r0, [pc, #36]	; (176f8 <at_handler_xmodemsleep+0x8c>)
   176d2:	f7fb fc27 	bl	12f24 <log_1>
		return;
   176d6:	e005      	b.n	176e4 <at_handler_xmodemsleep+0x78>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   176d8:	2308      	movs	r3, #8
   176da:	f88d 3000 	strb.w	r3, [sp]
		LTE_LC_TRACE(LTE_LC_TRACE_MODEM_SLEEP_ENTER);

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
   176de:	4668      	mov	r0, sp
   176e0:	f000 fe78 	bl	183d4 <event_handler_list_dispatch>
}
   176e4:	b010      	add	sp, #64	; 0x40
   176e6:	bd10      	pop	{r4, pc}
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   176e8:	230a      	movs	r3, #10
   176ea:	f88d 3000 	strb.w	r3, [sp]
   176ee:	e7f6      	b.n	176de <at_handler_xmodemsleep+0x72>
   176f0:	00027140 	.word	0x00027140
   176f4:	00027108 	.word	0x00027108
   176f8:	00028a78 	.word	0x00028a78

000176fc <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   176fc:	b510      	push	{r4, lr}
   176fe:	b090      	sub	sp, #64	; 0x40
   17700:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   17702:	2240      	movs	r2, #64	; 0x40
   17704:	2100      	movs	r1, #0
   17706:	4668      	mov	r0, sp
   17708:	f00f f8bb 	bl	26882 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   1770c:	a902      	add	r1, sp, #8
   1770e:	4620      	mov	r0, r4
   17710:	f001 fd1c 	bl	1914c <parse_mdmev>
	if (err) {
   17714:	b938      	cbnz	r0, 17726 <at_handler_mdmev+0x2a>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
		return;
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;
   17716:	230b      	movs	r3, #11
   17718:	f88d 3000 	strb.w	r3, [sp]

	event_handler_list_dispatch(&evt);
   1771c:	4668      	mov	r0, sp
   1771e:	f000 fe59 	bl	183d4 <event_handler_list_dispatch>
}
   17722:	b010      	add	sp, #64	; 0x40
   17724:	bd10      	pop	{r4, pc}
   17726:	4601      	mov	r1, r0
   17728:	4b08      	ldr	r3, [pc, #32]	; (1774c <at_handler_mdmev+0x50>)
   1772a:	4a09      	ldr	r2, [pc, #36]	; (17750 <at_handler_mdmev+0x54>)
   1772c:	1a9b      	subs	r3, r3, r2
   1772e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   17730:	f04f 0200 	mov.w	r2, #0
   17734:	2001      	movs	r0, #1
   17736:	f360 0202 	bfi	r2, r0, #0, #3
   1773a:	f36f 02c5 	bfc	r2, #3, #3
   1773e:	f363 128f 	bfi	r2, r3, #6, #10
   17742:	4804      	ldr	r0, [pc, #16]	; (17754 <at_handler_mdmev+0x58>)
   17744:	f7fb fbee 	bl	12f24 <log_1>
		return;
   17748:	e7eb      	b.n	17722 <at_handler_mdmev+0x26>
   1774a:	bf00      	nop
   1774c:	00027140 	.word	0x00027140
   17750:	00027108 	.word	0x00027108
   17754:	00028ab4 	.word	0x00028ab4

00017758 <enable_notifications>:

static int enable_notifications(void)
{
   17758:	b570      	push	{r4, r5, r6, lr}
   1775a:	b08e      	sub	sp, #56	; 0x38
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   1775c:	482f      	ldr	r0, [pc, #188]	; (1781c <enable_notifications+0xc4>)
   1775e:	f006 f9c1 	bl	1dae4 <nrf_modem_at_printf>
	if (err) {
   17762:	4605      	mov	r5, r0
   17764:	b928      	cbnz	r0, 17772 <enable_notifications+0x1a>
			LOG_WRN("Modem sleep notifications require nRF9160 modem >= v1.3.0");
		}
	}

	/* +CSCON notifications */
	err = nrf_modem_at_printf(cscon);
   17766:	482e      	ldr	r0, [pc, #184]	; (17820 <enable_notifications+0xc8>)
   17768:	f006 f9bc 	bl	1dae4 <nrf_modem_at_printf>
	if (err) {
   1776c:	b9a8      	cbnz	r0, 1779a <enable_notifications+0x42>
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   1776e:	b00e      	add	sp, #56	; 0x38
   17770:	bd70      	pop	{r4, r5, r6, pc}
   17772:	4b2c      	ldr	r3, [pc, #176]	; (17824 <enable_notifications+0xcc>)
   17774:	4a2c      	ldr	r2, [pc, #176]	; (17828 <enable_notifications+0xd0>)
   17776:	1a9b      	subs	r3, r3, r2
   17778:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1777a:	f04f 0200 	mov.w	r2, #0
   1777e:	2101      	movs	r1, #1
   17780:	f361 0202 	bfi	r2, r1, #0, #3
   17784:	f36f 02c5 	bfc	r2, #3, #3
   17788:	f363 128f 	bfi	r2, r3, #6, #10
   1778c:	4601      	mov	r1, r0
   1778e:	4827      	ldr	r0, [pc, #156]	; (1782c <enable_notifications+0xd4>)
   17790:	f7fb fbc8 	bl	12f24 <log_1>
		return -EFAULT;
   17794:	f06f 000d 	mvn.w	r0, #13
   17798:	e7e9      	b.n	1776e <enable_notifications+0x16>
   1779a:	4c22      	ldr	r4, [pc, #136]	; (17824 <enable_notifications+0xcc>)
   1779c:	4b22      	ldr	r3, [pc, #136]	; (17828 <enable_notifications+0xd0>)
   1779e:	1ae4      	subs	r4, r4, r3
   177a0:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   177a2:	2602      	movs	r6, #2
   177a4:	f04f 0200 	mov.w	r2, #0
   177a8:	f366 0202 	bfi	r2, r6, #0, #3
   177ac:	f36f 02c5 	bfc	r2, #3, #3
   177b0:	f364 128f 	bfi	r2, r4, #6, #10
   177b4:	4601      	mov	r1, r0
   177b6:	481e      	ldr	r0, [pc, #120]	; (17830 <enable_notifications+0xd8>)
   177b8:	f7fb fbb4 	bl	12f24 <log_1>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   177bc:	f04f 0100 	mov.w	r1, #0
   177c0:	f366 0102 	bfi	r1, r6, #0, #3
   177c4:	f36f 01c5 	bfc	r1, #3, #3
   177c8:	f364 118f 	bfi	r1, r4, #6, #10
   177cc:	4819      	ldr	r0, [pc, #100]	; (17834 <enable_notifications+0xdc>)
   177ce:	f7fb fc3d 	bl	1304c <log_0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   177d2:	4a19      	ldr	r2, [pc, #100]	; (17838 <enable_notifications+0xe0>)
   177d4:	2132      	movs	r1, #50	; 0x32
   177d6:	a801      	add	r0, sp, #4
   177d8:	f006 f9ac 	bl	1db34 <nrf_modem_at_cmd>
		if (err == 0) {
   177dc:	b108      	cbz	r0, 177e2 <enable_notifications+0x8a>
	return 0;
   177de:	4628      	mov	r0, r5
   177e0:	e7c5      	b.n	1776e <enable_notifications+0x16>
			char *end = strstr(buf, "\r\nOK");
   177e2:	4916      	ldr	r1, [pc, #88]	; (1783c <enable_notifications+0xe4>)
   177e4:	a801      	add	r0, sp, #4
   177e6:	f00f f8b7 	bl	26958 <strstr>
			if (end) {
   177ea:	b108      	cbz	r0, 177f0 <enable_notifications+0x98>
				*end = '\0';
   177ec:	2200      	movs	r2, #0
   177ee:	7002      	strb	r2, [r0, #0]
   177f0:	4b0c      	ldr	r3, [pc, #48]	; (17824 <enable_notifications+0xcc>)
   177f2:	4a0d      	ldr	r2, [pc, #52]	; (17828 <enable_notifications+0xd0>)
   177f4:	1a9b      	subs	r3, r3, r2
   177f6:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   177f8:	f04f 0400 	mov.w	r4, #0
   177fc:	2202      	movs	r2, #2
   177fe:	f362 0402 	bfi	r4, r2, #0, #3
   17802:	f36f 04c5 	bfc	r4, #3, #3
   17806:	f363 148f 	bfi	r4, r3, #6, #10
   1780a:	a801      	add	r0, sp, #4
   1780c:	f7fb fa1e 	bl	12c4c <z_log_strdup>
   17810:	4601      	mov	r1, r0
   17812:	4622      	mov	r2, r4
   17814:	480a      	ldr	r0, [pc, #40]	; (17840 <enable_notifications+0xe8>)
   17816:	f7fb fb85 	bl	12f24 <log_1>
   1781a:	e7e0      	b.n	177de <enable_notifications+0x86>
   1781c:	00028ae4 	.word	0x00028ae4
   17820:	000290d0 	.word	0x000290d0
   17824:	00027140 	.word	0x00027140
   17828:	00027108 	.word	0x00027108
   1782c:	00028af0 	.word	0x00028af0
   17830:	00028b28 	.word	0x00028b28
   17834:	00028b60 	.word	0x00028b60
   17838:	00028b94 	.word	0x00028b94
   1783c:	00028b9c 	.word	0x00028b9c
   17840:	00028ba4 	.word	0x00028ba4

00017844 <lte_lc_register_handler>:

	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
   17844:	b508      	push	{r3, lr}
	if (handler == NULL) {
   17846:	b110      	cbz	r0, 1784e <lte_lc_register_handler+0xa>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   17848:	f000 fd8a 	bl	18360 <event_handler_list_append_handler>
}
   1784c:	bd08      	pop	{r3, pc}
   1784e:	4b08      	ldr	r3, [pc, #32]	; (17870 <lte_lc_register_handler+0x2c>)
   17850:	4a08      	ldr	r2, [pc, #32]	; (17874 <lte_lc_register_handler+0x30>)
   17852:	1a9b      	subs	r3, r3, r2
   17854:	08db      	lsrs	r3, r3, #3
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   17856:	f04f 0100 	mov.w	r1, #0
   1785a:	2203      	movs	r2, #3
   1785c:	f362 0102 	bfi	r1, r2, #0, #3
   17860:	f36f 01c5 	bfc	r1, #3, #3
   17864:	f363 118f 	bfi	r1, r3, #6, #10
   17868:	4803      	ldr	r0, [pc, #12]	; (17878 <lte_lc_register_handler+0x34>)
   1786a:	f7fb fbef 	bl	1304c <log_0>
		return;
   1786e:	e7ed      	b.n	1784c <lte_lc_register_handler+0x8>
   17870:	00027140 	.word	0x00027140
   17874:	00027108 	.word	0x00027108
   17878:	00028bc8 	.word	0x00028bc8

0001787c <lte_lc_psm_get>:

	return 0;
}

int lte_lc_psm_get(int *tau, int *active_time)
{
   1787c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1787e:	b08d      	sub	sp, #52	; 0x34
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   17880:	2300      	movs	r3, #0
   17882:	9307      	str	r3, [sp, #28]
   17884:	9308      	str	r3, [sp, #32]
   17886:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	char tau_ext_str[9] = {0};
   1788a:	9304      	str	r3, [sp, #16]
   1788c:	9305      	str	r3, [sp, #20]
   1788e:	f88d 3018 	strb.w	r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   17892:	9301      	str	r3, [sp, #4]
   17894:	9302      	str	r3, [sp, #8]
   17896:	f88d 300c 	strb.w	r3, [sp, #12]
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1789a:	2800      	cmp	r0, #0
   1789c:	f000 80a7 	beq.w	179ee <lte_lc_psm_get+0x172>
   178a0:	460e      	mov	r6, r1
   178a2:	4607      	mov	r7, r0
   178a4:	2900      	cmp	r1, #0
   178a6:	f000 80a5 	beq.w	179f4 <lte_lc_psm_get+0x178>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   178aa:	4854      	ldr	r0, [pc, #336]	; (179fc <lte_lc_psm_get+0x180>)
   178ac:	7003      	strb	r3, [r0, #0]

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   178ae:	4a54      	ldr	r2, [pc, #336]	; (17a00 <lte_lc_psm_get+0x184>)
   178b0:	21a0      	movs	r1, #160	; 0xa0
   178b2:	f006 f93f 	bl	1db34 <nrf_modem_at_cmd>
	if (err < 0) {
   178b6:	2800      	cmp	r0, #0
   178b8:	db0f      	blt.n	178da <lte_lc_psm_get+0x5e>
		LOG_ERR("AT command failed, error: %d", err);
		return -EFAULT;
	}

	/* Skip over first 13 fields in AT cmd response by counting delimiters (commas). */
	comma_ptr = strchr(response, ch);
   178ba:	212c      	movs	r1, #44	; 0x2c
   178bc:	484f      	ldr	r0, [pc, #316]	; (179fc <lte_lc_psm_get+0x180>)
   178be:	f00f f804 	bl	268ca <strchr>
   178c2:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   178c4:	2500      	movs	r5, #0
   178c6:	2d0b      	cmp	r5, #11
   178c8:	dc2e      	bgt.n	17928 <lte_lc_psm_get+0xac>
		if (comma_ptr) {
   178ca:	b1d4      	cbz	r4, 17902 <lte_lc_psm_get+0x86>
			comma_ptr = strchr(comma_ptr + 1, ch);
   178cc:	212c      	movs	r1, #44	; 0x2c
   178ce:	1c60      	adds	r0, r4, #1
   178d0:	f00e fffb 	bl	268ca <strchr>
   178d4:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   178d6:	3501      	adds	r5, #1
   178d8:	e7f5      	b.n	178c6 <lte_lc_psm_get+0x4a>
   178da:	4b4a      	ldr	r3, [pc, #296]	; (17a04 <lte_lc_psm_get+0x188>)
   178dc:	4a4a      	ldr	r2, [pc, #296]	; (17a08 <lte_lc_psm_get+0x18c>)
   178de:	1a9b      	subs	r3, r3, r2
   178e0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command failed, error: %d", err);
   178e2:	f04f 0200 	mov.w	r2, #0
   178e6:	2101      	movs	r1, #1
   178e8:	f361 0202 	bfi	r2, r1, #0, #3
   178ec:	f36f 02c5 	bfc	r2, #3, #3
   178f0:	f363 128f 	bfi	r2, r3, #6, #10
   178f4:	4601      	mov	r1, r0
   178f6:	4845      	ldr	r0, [pc, #276]	; (17a0c <lte_lc_psm_get+0x190>)
   178f8:	f7fb fb14 	bl	12f24 <log_1>
		return -EFAULT;
   178fc:	f06f 040d 	mvn.w	r4, #13
   17900:	e03a      	b.n	17978 <lte_lc_psm_get+0xfc>
   17902:	4b40      	ldr	r3, [pc, #256]	; (17a04 <lte_lc_psm_get+0x188>)
   17904:	4a40      	ldr	r2, [pc, #256]	; (17a08 <lte_lc_psm_get+0x18c>)
   17906:	1a9b      	subs	r3, r3, r2
   17908:	08db      	lsrs	r3, r3, #3
		} else {
			LOG_ERR("AT command parsing failed");
   1790a:	f04f 0100 	mov.w	r1, #0
   1790e:	2201      	movs	r2, #1
   17910:	f362 0102 	bfi	r1, r2, #0, #3
   17914:	f36f 01c5 	bfc	r1, #3, #3
   17918:	f363 118f 	bfi	r1, r3, #6, #10
   1791c:	483c      	ldr	r0, [pc, #240]	; (17a10 <lte_lc_psm_get+0x194>)
   1791e:	f7fb fb95 	bl	1304c <log_0>
			return -EFAULT;
   17922:	f06f 040d 	mvn.w	r4, #13
   17926:	e027      	b.n	17978 <lte_lc_psm_get+0xfc>
	 * comma_ptr now points the comma before Active-Time. Discard the comma and the quote mark,
	 * hence + 2, and copy Active-Time into active_time_str. Find the next comma and repeat for
	 * Periodic-TAU-ext and so forth.
	 */

	if (comma_ptr) {
   17928:	b34c      	cbz	r4, 1797e <lte_lc_psm_get+0x102>
		strncpy(active_time_str, comma_ptr + 2, 8);
   1792a:	2208      	movs	r2, #8
   1792c:	1ca1      	adds	r1, r4, #2
   1792e:	a807      	add	r0, sp, #28
   17930:	f00e fff2 	bl	26918 <strncpy>
	} else {
		LOG_ERR("AT command parsing failed");
		return -EFAULT;
	}

	comma_ptr = strchr(comma_ptr + 1, ch);
   17934:	212c      	movs	r1, #44	; 0x2c
   17936:	1c60      	adds	r0, r4, #1
   17938:	f00e ffc7 	bl	268ca <strchr>
	if (comma_ptr) {
   1793c:	4604      	mov	r4, r0
   1793e:	b388      	cbz	r0, 179a4 <lte_lc_psm_get+0x128>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   17940:	2208      	movs	r2, #8
   17942:	1c81      	adds	r1, r0, #2
   17944:	a804      	add	r0, sp, #16
   17946:	f00e ffe7 	bl	26918 <strncpy>
		LOG_ERR("AT command parsing failed");
		return -EFAULT;
	}

	/* It's ok not to have legacy Periodic-TAU, older FWs don't provide it. */
	comma_ptr = strchr(comma_ptr + 1, ch);
   1794a:	212c      	movs	r1, #44	; 0x2c
   1794c:	1c60      	adds	r0, r4, #1
   1794e:	f00e ffbc 	bl	268ca <strchr>
	if (comma_ptr) {
   17952:	4601      	mov	r1, r0
   17954:	b120      	cbz	r0, 17960 <lte_lc_psm_get+0xe4>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   17956:	2208      	movs	r2, #8
   17958:	3102      	adds	r1, #2
   1795a:	a801      	add	r0, sp, #4
   1795c:	f00e ffdc 	bl	26918 <strncpy>
	}

	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   17960:	ab0a      	add	r3, sp, #40	; 0x28
   17962:	aa01      	add	r2, sp, #4
   17964:	a904      	add	r1, sp, #16
   17966:	a807      	add	r0, sp, #28
   17968:	f000 febc 	bl	186e4 <parse_psm>
	if (err) {
   1796c:	4604      	mov	r4, r0
   1796e:	bb60      	cbnz	r0, 179ca <lte_lc_psm_get+0x14e>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
		return err;
	}

	*tau = psm_cfg.tau;
   17970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17972:	603b      	str	r3, [r7, #0]
	*active_time = psm_cfg.active_time;
   17974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17976:	6033      	str	r3, [r6, #0]

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   17978:	4620      	mov	r0, r4
   1797a:	b00d      	add	sp, #52	; 0x34
   1797c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1797e:	4b21      	ldr	r3, [pc, #132]	; (17a04 <lte_lc_psm_get+0x188>)
   17980:	4a21      	ldr	r2, [pc, #132]	; (17a08 <lte_lc_psm_get+0x18c>)
   17982:	1a9b      	subs	r3, r3, r2
   17984:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command parsing failed");
   17986:	f04f 0100 	mov.w	r1, #0
   1798a:	2201      	movs	r2, #1
   1798c:	f362 0102 	bfi	r1, r2, #0, #3
   17990:	f36f 01c5 	bfc	r1, #3, #3
   17994:	f363 118f 	bfi	r1, r3, #6, #10
   17998:	481d      	ldr	r0, [pc, #116]	; (17a10 <lte_lc_psm_get+0x194>)
   1799a:	f7fb fb57 	bl	1304c <log_0>
		return -EFAULT;
   1799e:	f06f 040d 	mvn.w	r4, #13
   179a2:	e7e9      	b.n	17978 <lte_lc_psm_get+0xfc>
   179a4:	4b17      	ldr	r3, [pc, #92]	; (17a04 <lte_lc_psm_get+0x188>)
   179a6:	4a18      	ldr	r2, [pc, #96]	; (17a08 <lte_lc_psm_get+0x18c>)
   179a8:	1a9b      	subs	r3, r3, r2
   179aa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command parsing failed");
   179ac:	f04f 0100 	mov.w	r1, #0
   179b0:	2201      	movs	r2, #1
   179b2:	f362 0102 	bfi	r1, r2, #0, #3
   179b6:	f36f 01c5 	bfc	r1, #3, #3
   179ba:	f363 118f 	bfi	r1, r3, #6, #10
   179be:	4814      	ldr	r0, [pc, #80]	; (17a10 <lte_lc_psm_get+0x194>)
   179c0:	f7fb fb44 	bl	1304c <log_0>
		return -EFAULT;
   179c4:	f06f 040d 	mvn.w	r4, #13
   179c8:	e7d6      	b.n	17978 <lte_lc_psm_get+0xfc>
   179ca:	4b0e      	ldr	r3, [pc, #56]	; (17a04 <lte_lc_psm_get+0x188>)
   179cc:	4a0e      	ldr	r2, [pc, #56]	; (17a08 <lte_lc_psm_get+0x18c>)
   179ce:	1a9b      	subs	r3, r3, r2
   179d0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   179d2:	f04f 0200 	mov.w	r2, #0
   179d6:	2101      	movs	r1, #1
   179d8:	f361 0202 	bfi	r2, r1, #0, #3
   179dc:	f36f 02c5 	bfc	r2, #3, #3
   179e0:	f363 128f 	bfi	r2, r3, #6, #10
   179e4:	4601      	mov	r1, r0
   179e6:	480b      	ldr	r0, [pc, #44]	; (17a14 <lte_lc_psm_get+0x198>)
   179e8:	f7fb fa9c 	bl	12f24 <log_1>
		return err;
   179ec:	e7c4      	b.n	17978 <lte_lc_psm_get+0xfc>
		return -EINVAL;
   179ee:	f06f 0415 	mvn.w	r4, #21
   179f2:	e7c1      	b.n	17978 <lte_lc_psm_get+0xfc>
   179f4:	f06f 0415 	mvn.w	r4, #21
   179f8:	e7be      	b.n	17978 <lte_lc_psm_get+0xfc>
   179fa:	bf00      	nop
   179fc:	2000e590 	.word	0x2000e590
   17a00:	00028c3c 	.word	0x00028c3c
   17a04:	00027140 	.word	0x00027140
   17a08:	00027108 	.word	0x00027108
   17a0c:	00028c4c 	.word	0x00028c4c
   17a10:	00028c6c 	.word	0x00028c6c
   17a14:	00028c88 	.word	0x00028c88

00017a18 <at_handler_cereg>:
{
   17a18:	b570      	push	{r4, r5, r6, lr}
   17a1a:	b0a4      	sub	sp, #144	; 0x90
   17a1c:	4605      	mov	r5, r0
	struct lte_lc_evt evt = {0};
   17a1e:	2240      	movs	r2, #64	; 0x40
   17a20:	2100      	movs	r1, #0
   17a22:	a814      	add	r0, sp, #80	; 0x50
   17a24:	f00e ff2d 	bl	26882 <memset>
	enum lte_lc_nw_reg_status reg_status = 0;
   17a28:	2400      	movs	r4, #0
   17a2a:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
	struct lte_lc_cell cell = {0};
   17a2e:	2230      	movs	r2, #48	; 0x30
   17a30:	4621      	mov	r1, r4
   17a32:	a806      	add	r0, sp, #24
   17a34:	f00e ff25 	bl	26882 <memset>
	struct lte_lc_psm_cfg psm_cfg = {0};
   17a38:	9403      	str	r4, [sp, #12]
   17a3a:	9404      	str	r4, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   17a3c:	f10d 0317 	add.w	r3, sp, #23
   17a40:	9300      	str	r3, [sp, #0]
   17a42:	ab06      	add	r3, sp, #24
   17a44:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
   17a48:	2101      	movs	r1, #1
   17a4a:	4628      	mov	r0, r5
   17a4c:	f000 ff8e 	bl	1896c <parse_cereg>
	if (err) {
   17a50:	2800      	cmp	r0, #0
   17a52:	d13e      	bne.n	17ad2 <at_handler_cereg+0xba>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   17a54:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   17a58:	2b01      	cmp	r3, #1
   17a5a:	d053      	beq.n	17b04 <at_handler_cereg+0xec>
   17a5c:	2b05      	cmp	r3, #5
   17a5e:	d051      	beq.n	17b04 <at_handler_cereg+0xec>
	if (event_handler_list_is_empty()) {
   17a60:	f000 fc76 	bl	18350 <event_handler_list_is_empty>
   17a64:	2800      	cmp	r0, #0
   17a66:	d14b      	bne.n	17b00 <at_handler_cereg+0xe8>
	if (reg_status != prev_reg_status) {
   17a68:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   17a6c:	4a4c      	ldr	r2, [pc, #304]	; (17ba0 <at_handler_cereg+0x188>)
   17a6e:	7812      	ldrb	r2, [r2, #0]
   17a70:	4293      	cmp	r3, r2
   17a72:	d153      	bne.n	17b1c <at_handler_cereg+0x104>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   17a74:	2230      	movs	r2, #48	; 0x30
   17a76:	494b      	ldr	r1, [pc, #300]	; (17ba4 <at_handler_cereg+0x18c>)
   17a78:	a806      	add	r0, sp, #24
   17a7a:	f00e fed4 	bl	26826 <memcmp>
   17a7e:	2800      	cmp	r0, #0
   17a80:	d157      	bne.n	17b32 <at_handler_cereg+0x11a>
	if (lte_mode != prev_lte_mode) {
   17a82:	f89d 3017 	ldrb.w	r3, [sp, #23]
   17a86:	4a48      	ldr	r2, [pc, #288]	; (17ba8 <at_handler_cereg+0x190>)
   17a88:	7812      	ldrb	r2, [r2, #0]
   17a8a:	4293      	cmp	r3, r2
   17a8c:	d16c      	bne.n	17b68 <at_handler_cereg+0x150>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   17a8e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   17a92:	2b01      	cmp	r3, #1
   17a94:	d001      	beq.n	17a9a <at_handler_cereg+0x82>
   17a96:	2b05      	cmp	r3, #5
   17a98:	d132      	bne.n	17b00 <at_handler_cereg+0xe8>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   17a9a:	a904      	add	r1, sp, #16
   17a9c:	a803      	add	r0, sp, #12
   17a9e:	f7ff feed 	bl	1787c <lte_lc_psm_get>
	if (err) {
   17aa2:	2800      	cmp	r0, #0
   17aa4:	d16b      	bne.n	17b7e <at_handler_cereg+0x166>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   17aa6:	2208      	movs	r2, #8
   17aa8:	4940      	ldr	r1, [pc, #256]	; (17bac <at_handler_cereg+0x194>)
   17aaa:	a803      	add	r0, sp, #12
   17aac:	f00e febb 	bl	26826 <memcmp>
   17ab0:	b330      	cbz	r0, 17b00 <at_handler_cereg+0xe8>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   17ab2:	2301      	movs	r3, #1
   17ab4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   17ab8:	4a3c      	ldr	r2, [pc, #240]	; (17bac <at_handler_cereg+0x194>)
   17aba:	ab03      	add	r3, sp, #12
   17abc:	e893 0003 	ldmia.w	r3, {r0, r1}
   17ac0:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   17ac4:	aa16      	add	r2, sp, #88	; 0x58
   17ac6:	e882 0003 	stmia.w	r2, {r0, r1}
		event_handler_list_dispatch(&evt);
   17aca:	a814      	add	r0, sp, #80	; 0x50
   17acc:	f000 fc82 	bl	183d4 <event_handler_list_dispatch>
   17ad0:	e016      	b.n	17b00 <at_handler_cereg+0xe8>
   17ad2:	4604      	mov	r4, r0
   17ad4:	4b36      	ldr	r3, [pc, #216]	; (17bb0 <at_handler_cereg+0x198>)
   17ad6:	4a37      	ldr	r2, [pc, #220]	; (17bb4 <at_handler_cereg+0x19c>)
   17ad8:	1a9b      	subs	r3, r3, r2
   17ada:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to parse notification (error %d): %s",
   17adc:	f04f 0600 	mov.w	r6, #0
   17ae0:	2201      	movs	r2, #1
   17ae2:	f362 0602 	bfi	r6, r2, #0, #3
   17ae6:	f36f 06c5 	bfc	r6, #3, #3
   17aea:	f363 168f 	bfi	r6, r3, #6, #10
   17aee:	4628      	mov	r0, r5
   17af0:	f7fb f8ac 	bl	12c4c <z_log_strdup>
   17af4:	4602      	mov	r2, r0
   17af6:	4633      	mov	r3, r6
   17af8:	4621      	mov	r1, r4
   17afa:	482f      	ldr	r0, [pc, #188]	; (17bb8 <at_handler_cereg+0x1a0>)
   17afc:	f7fb fa48 	bl	12f90 <log_2>
}
   17b00:	b024      	add	sp, #144	; 0x90
   17b02:	bd70      	pop	{r4, r5, r6, pc}
		if (!is_cellid_valid(cell.id)) {
   17b04:	9808      	ldr	r0, [sp, #32]
   17b06:	f00c fdfa 	bl	246fe <is_cellid_valid>
   17b0a:	b918      	cbnz	r0, 17b14 <at_handler_cereg+0xfc>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   17b0c:	2304      	movs	r3, #4
   17b0e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   17b12:	e7a5      	b.n	17a60 <at_handler_cereg+0x48>
	z_impl_k_sem_give(sem);
   17b14:	4829      	ldr	r0, [pc, #164]	; (17bbc <at_handler_cereg+0x1a4>)
   17b16:	f007 fb99 	bl	1f24c <z_impl_k_sem_give>
}
   17b1a:	e7a1      	b.n	17a60 <at_handler_cereg+0x48>
		prev_reg_status = reg_status;
   17b1c:	4a20      	ldr	r2, [pc, #128]	; (17ba0 <at_handler_cereg+0x188>)
   17b1e:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   17b20:	2200      	movs	r2, #0
   17b22:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
		evt.nw_reg_status = reg_status;
   17b26:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   17b2a:	a814      	add	r0, sp, #80	; 0x50
   17b2c:	f000 fc52 	bl	183d4 <event_handler_list_dispatch>
   17b30:	e7a0      	b.n	17a74 <at_handler_cereg+0x5c>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   17b32:	2304      	movs	r3, #4
   17b34:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   17b38:	4c1a      	ldr	r4, [pc, #104]	; (17ba4 <at_handler_cereg+0x18c>)
   17b3a:	ad06      	add	r5, sp, #24
   17b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17b44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   17b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   17b4c:	ac16      	add	r4, sp, #88	; 0x58
   17b4e:	ad06      	add	r5, sp, #24
   17b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   17b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   17b60:	a814      	add	r0, sp, #80	; 0x50
   17b62:	f000 fc37 	bl	183d4 <event_handler_list_dispatch>
   17b66:	e78c      	b.n	17a82 <at_handler_cereg+0x6a>
		prev_lte_mode = lte_mode;
   17b68:	4a0f      	ldr	r2, [pc, #60]	; (17ba8 <at_handler_cereg+0x190>)
   17b6a:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   17b6c:	2205      	movs	r2, #5
   17b6e:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
		evt.lte_mode = lte_mode;
   17b72:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   17b76:	a814      	add	r0, sp, #80	; 0x50
   17b78:	f000 fc2c 	bl	183d4 <event_handler_list_dispatch>
   17b7c:	e787      	b.n	17a8e <at_handler_cereg+0x76>
   17b7e:	4b0c      	ldr	r3, [pc, #48]	; (17bb0 <at_handler_cereg+0x198>)
   17b80:	4a0c      	ldr	r2, [pc, #48]	; (17bb4 <at_handler_cereg+0x19c>)
   17b82:	1a9b      	subs	r3, r3, r2
   17b84:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get PSM information");
   17b86:	f04f 0100 	mov.w	r1, #0
   17b8a:	2201      	movs	r2, #1
   17b8c:	f362 0102 	bfi	r1, r2, #0, #3
   17b90:	f36f 01c5 	bfc	r1, #3, #3
   17b94:	f363 118f 	bfi	r1, r3, #6, #10
   17b98:	4809      	ldr	r0, [pc, #36]	; (17bc0 <at_handler_cereg+0x1a8>)
   17b9a:	f7fb fa57 	bl	1304c <log_0>
		return;
   17b9e:	e7af      	b.n	17b00 <at_handler_cereg+0xe8>
   17ba0:	2000f90c 	.word	0x2000f90c
   17ba4:	2000ca78 	.word	0x2000ca78
   17ba8:	2000f90b 	.word	0x2000f90b
   17bac:	2000e588 	.word	0x2000e588
   17bb0:	00027140 	.word	0x00027140
   17bb4:	00027108 	.word	0x00027108
   17bb8:	00028cb8 	.word	0x00028cb8
   17bbc:	2000e570 	.word	0x2000e570
   17bc0:	00028ce4 	.word	0x00028ce4

00017bc4 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   17bc4:	b510      	push	{r4, lr}
   17bc6:	b082      	sub	sp, #8
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   17bc8:	2300      	movs	r3, #0
   17bca:	9300      	str	r3, [sp, #0]

	if (status == NULL) {
   17bcc:	b348      	cbz	r0, 17c22 <lte_lc_nw_reg_status_get+0x5e>
   17bce:	4604      	mov	r4, r0
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   17bd0:	466b      	mov	r3, sp
   17bd2:	f10d 0206 	add.w	r2, sp, #6
   17bd6:	4914      	ldr	r1, [pc, #80]	; (17c28 <lte_lc_nw_reg_status_get+0x64>)
   17bd8:	4814      	ldr	r0, [pc, #80]	; (17c2c <lte_lc_nw_reg_status_get+0x68>)
   17bda:	f006 f811 	bl	1dc00 <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   17bde:	2800      	cmp	r0, #0
   17be0:	dd0b      	ble.n	17bfa <lte_lc_nw_reg_status_get+0x36>
		LOG_ERR("Could not get registration status, error: %d", err);
		return -EFAULT;
	}

	if (!is_cellid_valid(cell_id)) {
   17be2:	9800      	ldr	r0, [sp, #0]
   17be4:	f00c fd8b 	bl	246fe <is_cellid_valid>
   17be8:	b908      	cbnz	r0, 17bee <lte_lc_nw_reg_status_get+0x2a>
		*status = LTE_LC_NW_REG_UNKNOWN;
   17bea:	2304      	movs	r3, #4
   17bec:	7023      	strb	r3, [r4, #0]
	}

	*status = status_tmp;
   17bee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17bf2:	7023      	strb	r3, [r4, #0]

	return 0;
   17bf4:	2000      	movs	r0, #0
}
   17bf6:	b002      	add	sp, #8
   17bf8:	bd10      	pop	{r4, pc}
   17bfa:	4b0d      	ldr	r3, [pc, #52]	; (17c30 <lte_lc_nw_reg_status_get+0x6c>)
   17bfc:	4a0d      	ldr	r2, [pc, #52]	; (17c34 <lte_lc_nw_reg_status_get+0x70>)
   17bfe:	1a9b      	subs	r3, r3, r2
   17c00:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get registration status, error: %d", err);
   17c02:	f04f 0200 	mov.w	r2, #0
   17c06:	2101      	movs	r1, #1
   17c08:	f361 0202 	bfi	r2, r1, #0, #3
   17c0c:	f36f 02c5 	bfc	r2, #3, #3
   17c10:	f363 128f 	bfi	r2, r3, #6, #10
   17c14:	4601      	mov	r1, r0
   17c16:	4808      	ldr	r0, [pc, #32]	; (17c38 <lte_lc_nw_reg_status_get+0x74>)
   17c18:	f7fb f984 	bl	12f24 <log_1>
		return -EFAULT;
   17c1c:	f06f 000d 	mvn.w	r0, #13
   17c20:	e7e9      	b.n	17bf6 <lte_lc_nw_reg_status_get+0x32>
		return -EINVAL;
   17c22:	f06f 0015 	mvn.w	r0, #21
   17c26:	e7e6      	b.n	17bf6 <lte_lc_nw_reg_status_get+0x32>
   17c28:	00028d04 	.word	0x00028d04
   17c2c:	00028d20 	.word	0x00028d20
   17c30:	00027140 	.word	0x00027140
   17c34:	00027108 	.word	0x00027108
   17c38:	00028d2c 	.word	0x00028d2c

00017c3c <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   17c3c:	b538      	push	{r3, r4, r5, lr}
   17c3e:	4604      	mov	r4, r0
	int err;

	switch (mode) {
   17c40:	2807      	cmp	r0, #7
   17c42:	d814      	bhi.n	17c6e <lte_lc_system_mode_set+0x32>
   17c44:	460d      	mov	r5, r1
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
		return -EINVAL;
	}

	switch (preference) {
   17c46:	2904      	cmp	r1, #4
   17c48:	d825      	bhi.n	17c96 <lte_lc_system_mode_set+0x5a>
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
		return -EINVAL;
	}

	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   17c4a:	4b27      	ldr	r3, [pc, #156]	; (17ce8 <lte_lc_system_mode_set+0xac>)
   17c4c:	5c5a      	ldrb	r2, [r3, r1]
   17c4e:	4b27      	ldr	r3, [pc, #156]	; (17cec <lte_lc_system_mode_set+0xb0>)
   17c50:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   17c54:	4826      	ldr	r0, [pc, #152]	; (17cf0 <lte_lc_system_mode_set+0xb4>)
   17c56:	f005 ff45 	bl	1dae4 <nrf_modem_at_printf>
				  system_mode_params[mode],
				  system_mode_preference[preference]);
	if (err) {
   17c5a:	bb80      	cbnz	r0, 17cbe <lte_lc_system_mode_set+0x82>
		LOG_ERR("Could not send AT command, error: %d", err);
		return -EFAULT;
	}

	sys_mode_current = mode;
   17c5c:	4b25      	ldr	r3, [pc, #148]	; (17cf4 <lte_lc_system_mode_set+0xb8>)
   17c5e:	701c      	strb	r4, [r3, #0]
	sys_mode_target = mode;
   17c60:	4b25      	ldr	r3, [pc, #148]	; (17cf8 <lte_lc_system_mode_set+0xbc>)
   17c62:	701c      	strb	r4, [r3, #0]
	mode_pref_current = preference;
   17c64:	4b25      	ldr	r3, [pc, #148]	; (17cfc <lte_lc_system_mode_set+0xc0>)
   17c66:	701d      	strb	r5, [r3, #0]
	mode_pref_target = preference;
   17c68:	4b25      	ldr	r3, [pc, #148]	; (17d00 <lte_lc_system_mode_set+0xc4>)
   17c6a:	701d      	strb	r5, [r3, #0]

	return 0;
}
   17c6c:	bd38      	pop	{r3, r4, r5, pc}
   17c6e:	4b25      	ldr	r3, [pc, #148]	; (17d04 <lte_lc_system_mode_set+0xc8>)
   17c70:	4a25      	ldr	r2, [pc, #148]	; (17d08 <lte_lc_system_mode_set+0xcc>)
   17c72:	1a9b      	subs	r3, r3, r2
   17c74:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid system mode requested: %d", mode);
   17c76:	f04f 0200 	mov.w	r2, #0
   17c7a:	2101      	movs	r1, #1
   17c7c:	f361 0202 	bfi	r2, r1, #0, #3
   17c80:	f36f 02c5 	bfc	r2, #3, #3
   17c84:	f363 128f 	bfi	r2, r3, #6, #10
   17c88:	4601      	mov	r1, r0
   17c8a:	4820      	ldr	r0, [pc, #128]	; (17d0c <lte_lc_system_mode_set+0xd0>)
   17c8c:	f7fb f94a 	bl	12f24 <log_1>
		return -EINVAL;
   17c90:	f06f 0015 	mvn.w	r0, #21
   17c94:	e7ea      	b.n	17c6c <lte_lc_system_mode_set+0x30>
   17c96:	4b1b      	ldr	r3, [pc, #108]	; (17d04 <lte_lc_system_mode_set+0xc8>)
   17c98:	4a1b      	ldr	r2, [pc, #108]	; (17d08 <lte_lc_system_mode_set+0xcc>)
   17c9a:	1a9b      	subs	r3, r3, r2
   17c9c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   17c9e:	f04f 0200 	mov.w	r2, #0
   17ca2:	2101      	movs	r1, #1
   17ca4:	f361 0202 	bfi	r2, r1, #0, #3
   17ca8:	f36f 02c5 	bfc	r2, #3, #3
   17cac:	f363 128f 	bfi	r2, r3, #6, #10
   17cb0:	4629      	mov	r1, r5
   17cb2:	4817      	ldr	r0, [pc, #92]	; (17d10 <lte_lc_system_mode_set+0xd4>)
   17cb4:	f7fb f936 	bl	12f24 <log_1>
		return -EINVAL;
   17cb8:	f06f 0015 	mvn.w	r0, #21
   17cbc:	e7d6      	b.n	17c6c <lte_lc_system_mode_set+0x30>
   17cbe:	4b11      	ldr	r3, [pc, #68]	; (17d04 <lte_lc_system_mode_set+0xc8>)
   17cc0:	4a11      	ldr	r2, [pc, #68]	; (17d08 <lte_lc_system_mode_set+0xcc>)
   17cc2:	1a9b      	subs	r3, r3, r2
   17cc4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not send AT command, error: %d", err);
   17cc6:	f04f 0200 	mov.w	r2, #0
   17cca:	2101      	movs	r1, #1
   17ccc:	f361 0202 	bfi	r2, r1, #0, #3
   17cd0:	f36f 02c5 	bfc	r2, #3, #3
   17cd4:	f363 128f 	bfi	r2, r3, #6, #10
   17cd8:	4601      	mov	r1, r0
   17cda:	480e      	ldr	r0, [pc, #56]	; (17d14 <lte_lc_system_mode_set+0xd8>)
   17cdc:	f7fb f922 	bl	12f24 <log_1>
		return -EFAULT;
   17ce0:	f06f 000d 	mvn.w	r0, #13
   17ce4:	e7c2      	b.n	17c6c <lte_lc_system_mode_set+0x30>
   17ce6:	bf00      	nop
   17ce8:	000290fc 	.word	0x000290fc
   17cec:	000290dc 	.word	0x000290dc
   17cf0:	00028da8 	.word	0x00028da8
   17cf4:	2000f90d 	.word	0x2000f90d
   17cf8:	2000c704 	.word	0x2000c704
   17cfc:	2000f909 	.word	0x2000f909
   17d00:	2000f90a 	.word	0x2000f90a
   17d04:	00027140 	.word	0x00027140
   17d08:	00027108 	.word	0x00027108
   17d0c:	00028d5c 	.word	0x00028d5c
   17d10:	00028d80 	.word	0x00028d80
   17d14:	00028dc0 	.word	0x00028dc0

00017d18 <lte_lc_system_mode_get>:
			   enum lte_lc_system_mode_preference *preference)
{
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   17d18:	2800      	cmp	r0, #0
   17d1a:	f000 80a7 	beq.w	17e6c <lte_lc_system_mode_get+0x154>
{
   17d1e:	b530      	push	{r4, r5, lr}
   17d20:	b087      	sub	sp, #28
   17d22:	460c      	mov	r4, r1
   17d24:	4605      	mov	r5, r0
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   17d26:	ab02      	add	r3, sp, #8
   17d28:	9301      	str	r3, [sp, #4]
   17d2a:	ab03      	add	r3, sp, #12
   17d2c:	9300      	str	r3, [sp, #0]
   17d2e:	ab04      	add	r3, sp, #16
   17d30:	aa05      	add	r2, sp, #20
   17d32:	4952      	ldr	r1, [pc, #328]	; (17e7c <lte_lc_system_mode_get+0x164>)
   17d34:	4852      	ldr	r0, [pc, #328]	; (17e80 <lte_lc_system_mode_get+0x168>)
   17d36:	f005 ff63 	bl	1dc00 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   17d3a:	2804      	cmp	r0, #4
   17d3c:	d116      	bne.n	17d6c <lte_lc_system_mode_get+0x54>
		LOG_ERR("Failed to get system mode, error: %d", err);
		return -EFAULT;
	}

	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   17d3e:	9b05      	ldr	r3, [sp, #20]
   17d40:	b343      	cbz	r3, 17d94 <lte_lc_system_mode_get+0x7c>
   17d42:	2302      	movs	r3, #2
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   17d44:	9a04      	ldr	r2, [sp, #16]
   17d46:	b33a      	cbz	r2, 17d98 <lte_lc_system_mode_get+0x80>
   17d48:	2204      	movs	r2, #4
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   17d4a:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   17d4c:	9a03      	ldr	r2, [sp, #12]
   17d4e:	b32a      	cbz	r2, 17d9c <lte_lc_system_mode_get+0x84>
   17d50:	2208      	movs	r2, #8
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   17d52:	4313      	orrs	r3, r2

	switch (mode_bitmask) {
   17d54:	2b0e      	cmp	r3, #14
   17d56:	d843      	bhi.n	17de0 <lte_lc_system_mode_get+0xc8>
   17d58:	e8df f003 	tbb	[pc, r3]
   17d5c:	422d4222 	.word	0x422d4222
   17d60:	423c4230 	.word	0x423c4230
   17d64:	42364233 	.word	0x42364233
   17d68:	4239      	.short	0x4239
   17d6a:	3f          	.byte	0x3f
   17d6b:	00          	.byte	0x00
   17d6c:	4b45      	ldr	r3, [pc, #276]	; (17e84 <lte_lc_system_mode_get+0x16c>)
   17d6e:	4a46      	ldr	r2, [pc, #280]	; (17e88 <lte_lc_system_mode_get+0x170>)
   17d70:	1a9b      	subs	r3, r3, r2
   17d72:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get system mode, error: %d", err);
   17d74:	f04f 0200 	mov.w	r2, #0
   17d78:	2101      	movs	r1, #1
   17d7a:	f361 0202 	bfi	r2, r1, #0, #3
   17d7e:	f36f 02c5 	bfc	r2, #3, #3
   17d82:	f363 128f 	bfi	r2, r3, #6, #10
   17d86:	4601      	mov	r1, r0
   17d88:	4840      	ldr	r0, [pc, #256]	; (17e8c <lte_lc_system_mode_get+0x174>)
   17d8a:	f7fb f8cb 	bl	12f24 <log_1>
		return -EFAULT;
   17d8e:	f06f 000d 	mvn.w	r0, #13
   17d92:	e04a      	b.n	17e2a <lte_lc_system_mode_get+0x112>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   17d94:	2300      	movs	r3, #0
   17d96:	e7d5      	b.n	17d44 <lte_lc_system_mode_get+0x2c>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   17d98:	2200      	movs	r2, #0
   17d9a:	e7d6      	b.n	17d4a <lte_lc_system_mode_get+0x32>
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   17d9c:	2200      	movs	r2, #0
   17d9e:	e7d8      	b.n	17d52 <lte_lc_system_mode_get+0x3a>
	case 0:
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   17da0:	2300      	movs	r3, #0
   17da2:	702b      	strb	r3, [r5, #0]
		LOG_ERR("Invalid system mode, assuming parsing error");
		return -EFAULT;
	}

	/* Get LTE preference. */
	if (preference != NULL) {
   17da4:	b38c      	cbz	r4, 17e0a <lte_lc_system_mode_get+0xf2>
		switch (mode_preference) {
   17da6:	9902      	ldr	r1, [sp, #8]
   17da8:	2904      	cmp	r1, #4
   17daa:	d84c      	bhi.n	17e46 <lte_lc_system_mode_get+0x12e>
   17dac:	e8df f001 	tbb	[pc, r1]
   17db0:	45423f2b 	.word	0x45423f2b
   17db4:	48          	.byte	0x48
   17db5:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   17db6:	2301      	movs	r3, #1
   17db8:	702b      	strb	r3, [r5, #0]
		break;
   17dba:	e7f3      	b.n	17da4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   17dbc:	2302      	movs	r3, #2
   17dbe:	702b      	strb	r3, [r5, #0]
		break;
   17dc0:	e7f0      	b.n	17da4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   17dc2:	2303      	movs	r3, #3
   17dc4:	702b      	strb	r3, [r5, #0]
		break;
   17dc6:	e7ed      	b.n	17da4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   17dc8:	2304      	movs	r3, #4
   17dca:	702b      	strb	r3, [r5, #0]
		break;
   17dcc:	e7ea      	b.n	17da4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   17dce:	2305      	movs	r3, #5
   17dd0:	702b      	strb	r3, [r5, #0]
		break;
   17dd2:	e7e7      	b.n	17da4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   17dd4:	2306      	movs	r3, #6
   17dd6:	702b      	strb	r3, [r5, #0]
		break;
   17dd8:	e7e4      	b.n	17da4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   17dda:	2307      	movs	r3, #7
   17ddc:	702b      	strb	r3, [r5, #0]
		break;
   17dde:	e7e1      	b.n	17da4 <lte_lc_system_mode_get+0x8c>
   17de0:	4b28      	ldr	r3, [pc, #160]	; (17e84 <lte_lc_system_mode_get+0x16c>)
   17de2:	4a29      	ldr	r2, [pc, #164]	; (17e88 <lte_lc_system_mode_get+0x170>)
   17de4:	1a9b      	subs	r3, r3, r2
   17de6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid system mode, assuming parsing error");
   17de8:	f04f 0100 	mov.w	r1, #0
   17dec:	2201      	movs	r2, #1
   17dee:	f362 0102 	bfi	r1, r2, #0, #3
   17df2:	f36f 01c5 	bfc	r1, #3, #3
   17df6:	f363 118f 	bfi	r1, r3, #6, #10
   17dfa:	4825      	ldr	r0, [pc, #148]	; (17e90 <lte_lc_system_mode_get+0x178>)
   17dfc:	f7fb f926 	bl	1304c <log_0>
		return -EFAULT;
   17e00:	f06f 000d 	mvn.w	r0, #13
   17e04:	e011      	b.n	17e2a <lte_lc_system_mode_get+0x112>
		case 0:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   17e06:	2300      	movs	r3, #0
   17e08:	7023      	strb	r3, [r4, #0]
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
			return -EFAULT;
		}
	}

	if (sys_mode_current != *mode) {
   17e0a:	782b      	ldrb	r3, [r5, #0]
   17e0c:	4a21      	ldr	r2, [pc, #132]	; (17e94 <lte_lc_system_mode_get+0x17c>)
   17e0e:	7812      	ldrb	r2, [r2, #0]
   17e10:	4293      	cmp	r3, r2
   17e12:	d001      	beq.n	17e18 <lte_lc_system_mode_get+0x100>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
   17e14:	4a1f      	ldr	r2, [pc, #124]	; (17e94 <lte_lc_system_mode_get+0x17c>)
   17e16:	7013      	strb	r3, [r2, #0]
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
   17e18:	b35c      	cbz	r4, 17e72 <lte_lc_system_mode_get+0x15a>
   17e1a:	7823      	ldrb	r3, [r4, #0]
   17e1c:	4a1e      	ldr	r2, [pc, #120]	; (17e98 <lte_lc_system_mode_get+0x180>)
   17e1e:	7812      	ldrb	r2, [r2, #0]
   17e20:	4293      	cmp	r3, r2
   17e22:	d028      	beq.n	17e76 <lte_lc_system_mode_get+0x15e>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
   17e24:	4a1c      	ldr	r2, [pc, #112]	; (17e98 <lte_lc_system_mode_get+0x180>)
   17e26:	7013      	strb	r3, [r2, #0]
	}

	return 0;
   17e28:	2000      	movs	r0, #0
}
   17e2a:	b007      	add	sp, #28
   17e2c:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   17e2e:	2301      	movs	r3, #1
   17e30:	7023      	strb	r3, [r4, #0]
			break;
   17e32:	e7ea      	b.n	17e0a <lte_lc_system_mode_get+0xf2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   17e34:	2302      	movs	r3, #2
   17e36:	7023      	strb	r3, [r4, #0]
			break;
   17e38:	e7e7      	b.n	17e0a <lte_lc_system_mode_get+0xf2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   17e3a:	2303      	movs	r3, #3
   17e3c:	7023      	strb	r3, [r4, #0]
			break;
   17e3e:	e7e4      	b.n	17e0a <lte_lc_system_mode_get+0xf2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   17e40:	2304      	movs	r3, #4
   17e42:	7023      	strb	r3, [r4, #0]
			break;
   17e44:	e7e1      	b.n	17e0a <lte_lc_system_mode_get+0xf2>
   17e46:	4b0f      	ldr	r3, [pc, #60]	; (17e84 <lte_lc_system_mode_get+0x16c>)
   17e48:	4a0f      	ldr	r2, [pc, #60]	; (17e88 <lte_lc_system_mode_get+0x170>)
   17e4a:	1a9b      	subs	r3, r3, r2
   17e4c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   17e4e:	f04f 0200 	mov.w	r2, #0
   17e52:	2001      	movs	r0, #1
   17e54:	f360 0202 	bfi	r2, r0, #0, #3
   17e58:	f36f 02c5 	bfc	r2, #3, #3
   17e5c:	f363 128f 	bfi	r2, r3, #6, #10
   17e60:	480e      	ldr	r0, [pc, #56]	; (17e9c <lte_lc_system_mode_get+0x184>)
   17e62:	f7fb f85f 	bl	12f24 <log_1>
			return -EFAULT;
   17e66:	f06f 000d 	mvn.w	r0, #13
   17e6a:	e7de      	b.n	17e2a <lte_lc_system_mode_get+0x112>
		return -EINVAL;
   17e6c:	f06f 0015 	mvn.w	r0, #21
}
   17e70:	4770      	bx	lr
	return 0;
   17e72:	2000      	movs	r0, #0
   17e74:	e7d9      	b.n	17e2a <lte_lc_system_mode_get+0x112>
   17e76:	2000      	movs	r0, #0
   17e78:	e7d7      	b.n	17e2a <lte_lc_system_mode_get+0x112>
   17e7a:	bf00      	nop
   17e7c:	00028de8 	.word	0x00028de8
   17e80:	00028e04 	.word	0x00028e04
   17e84:	00027140 	.word	0x00027140
   17e88:	00027108 	.word	0x00027108
   17e8c:	00028e14 	.word	0x00028e14
   17e90:	00028e3c 	.word	0x00028e3c
   17e94:	2000f90d 	.word	0x2000f90d
   17e98:	2000f909 	.word	0x2000f909
   17e9c:	00028e68 	.word	0x00028e68

00017ea0 <init_and_config>:
{
   17ea0:	b510      	push	{r4, lr}
	if (is_initialized) {
   17ea2:	4b30      	ldr	r3, [pc, #192]	; (17f64 <init_and_config+0xc4>)
   17ea4:	781b      	ldrb	r3, [r3, #0]
   17ea6:	b113      	cbz	r3, 17eae <init_and_config+0xe>
		return 0;
   17ea8:	2400      	movs	r4, #0
}
   17eaa:	4620      	mov	r0, r4
   17eac:	bd10      	pop	{r4, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   17eae:	2201      	movs	r2, #1
   17eb0:	2100      	movs	r1, #0
   17eb2:	482d      	ldr	r0, [pc, #180]	; (17f68 <init_and_config+0xc8>)
   17eb4:	f00e f845 	bl	25f42 <z_impl_k_sem_init>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   17eb8:	492c      	ldr	r1, [pc, #176]	; (17f6c <init_and_config+0xcc>)
   17eba:	482d      	ldr	r0, [pc, #180]	; (17f70 <init_and_config+0xd0>)
   17ebc:	f7ff ff2c 	bl	17d18 <lte_lc_system_mode_get>
	if (err) {
   17ec0:	4604      	mov	r4, r0
   17ec2:	b9c8      	cbnz	r0, 17ef8 <init_and_config+0x58>
	if ((sys_mode_current != sys_mode_target) ||
   17ec4:	4b2a      	ldr	r3, [pc, #168]	; (17f70 <init_and_config+0xd0>)
   17ec6:	781b      	ldrb	r3, [r3, #0]
   17ec8:	4a2a      	ldr	r2, [pc, #168]	; (17f74 <init_and_config+0xd4>)
   17eca:	7810      	ldrb	r0, [r2, #0]
   17ecc:	4283      	cmp	r3, r0
   17ece:	d105      	bne.n	17edc <init_and_config+0x3c>
	    (mode_pref_current != mode_pref_target)) {
   17ed0:	4b26      	ldr	r3, [pc, #152]	; (17f6c <init_and_config+0xcc>)
   17ed2:	781a      	ldrb	r2, [r3, #0]
   17ed4:	4b28      	ldr	r3, [pc, #160]	; (17f78 <init_and_config+0xd8>)
   17ed6:	781b      	ldrb	r3, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   17ed8:	429a      	cmp	r2, r3
   17eda:	d005      	beq.n	17ee8 <init_and_config+0x48>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   17edc:	4b26      	ldr	r3, [pc, #152]	; (17f78 <init_and_config+0xd8>)
   17ede:	7819      	ldrb	r1, [r3, #0]
   17ee0:	f7ff feac 	bl	17c3c <lte_lc_system_mode_set>
		if (err) {
   17ee4:	4604      	mov	r4, r0
   17ee6:	b9c8      	cbnz	r0, 17f1c <init_and_config+0x7c>
	err = enable_notifications();
   17ee8:	f7ff fc36 	bl	17758 <enable_notifications>
	if (err) {
   17eec:	4604      	mov	r4, r0
   17eee:	bb38      	cbnz	r0, 17f40 <init_and_config+0xa0>
	is_initialized = true;
   17ef0:	4b1c      	ldr	r3, [pc, #112]	; (17f64 <init_and_config+0xc4>)
   17ef2:	2201      	movs	r2, #1
   17ef4:	701a      	strb	r2, [r3, #0]
	return 0;
   17ef6:	e7d8      	b.n	17eaa <init_and_config+0xa>
   17ef8:	4b20      	ldr	r3, [pc, #128]	; (17f7c <init_and_config+0xdc>)
   17efa:	4a21      	ldr	r2, [pc, #132]	; (17f80 <init_and_config+0xe0>)
   17efc:	1a9b      	subs	r3, r3, r2
   17efe:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get current system mode, error: %d", err);
   17f00:	f04f 0200 	mov.w	r2, #0
   17f04:	2101      	movs	r1, #1
   17f06:	f361 0202 	bfi	r2, r1, #0, #3
   17f0a:	f36f 02c5 	bfc	r2, #3, #3
   17f0e:	f363 128f 	bfi	r2, r3, #6, #10
   17f12:	4601      	mov	r1, r0
   17f14:	481b      	ldr	r0, [pc, #108]	; (17f84 <init_and_config+0xe4>)
   17f16:	f7fb f805 	bl	12f24 <log_1>
		return err;
   17f1a:	e7c6      	b.n	17eaa <init_and_config+0xa>
   17f1c:	4b17      	ldr	r3, [pc, #92]	; (17f7c <init_and_config+0xdc>)
   17f1e:	4a18      	ldr	r2, [pc, #96]	; (17f80 <init_and_config+0xe0>)
   17f20:	1a9b      	subs	r3, r3, r2
   17f22:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not set system mode, error: %d", err);
   17f24:	f04f 0200 	mov.w	r2, #0
   17f28:	2101      	movs	r1, #1
   17f2a:	f361 0202 	bfi	r2, r1, #0, #3
   17f2e:	f36f 02c5 	bfc	r2, #3, #3
   17f32:	f363 128f 	bfi	r2, r3, #6, #10
   17f36:	4601      	mov	r1, r0
   17f38:	4813      	ldr	r0, [pc, #76]	; (17f88 <init_and_config+0xe8>)
   17f3a:	f7fa fff3 	bl	12f24 <log_1>
			return err;
   17f3e:	e7b4      	b.n	17eaa <init_and_config+0xa>
   17f40:	4b0e      	ldr	r3, [pc, #56]	; (17f7c <init_and_config+0xdc>)
   17f42:	4a0f      	ldr	r2, [pc, #60]	; (17f80 <init_and_config+0xe0>)
   17f44:	1a9b      	subs	r3, r3, r2
   17f46:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable notifications");
   17f48:	f04f 0100 	mov.w	r1, #0
   17f4c:	2201      	movs	r2, #1
   17f4e:	f362 0102 	bfi	r1, r2, #0, #3
   17f52:	f36f 01c5 	bfc	r1, #3, #3
   17f56:	f363 118f 	bfi	r1, r3, #6, #10
   17f5a:	480c      	ldr	r0, [pc, #48]	; (17f8c <init_and_config+0xec>)
   17f5c:	f7fb f876 	bl	1304c <log_0>
		return err;
   17f60:	e7a3      	b.n	17eaa <init_and_config+0xa>
   17f62:	bf00      	nop
   17f64:	2000f908 	.word	0x2000f908
   17f68:	2000e570 	.word	0x2000e570
   17f6c:	2000f909 	.word	0x2000f909
   17f70:	2000f90d 	.word	0x2000f90d
   17f74:	2000c704 	.word	0x2000c704
   17f78:	2000f90a 	.word	0x2000f90a
   17f7c:	00027140 	.word	0x00027140
   17f80:	00027108 	.word	0x00027108
   17f84:	00028e88 	.word	0x00028e88
   17f88:	00028eb8 	.word	0x00028eb8
   17f8c:	00028ee0 	.word	0x00028ee0

00017f90 <lte_lc_func_mode_get>:
int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   17f90:	b320      	cbz	r0, 17fdc <lte_lc_func_mode_get+0x4c>
{
   17f92:	b510      	push	{r4, lr}
   17f94:	b082      	sub	sp, #8
   17f96:	4604      	mov	r4, r0
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   17f98:	f10d 0206 	add.w	r2, sp, #6
   17f9c:	4911      	ldr	r1, [pc, #68]	; (17fe4 <lte_lc_func_mode_get+0x54>)
   17f9e:	4812      	ldr	r0, [pc, #72]	; (17fe8 <lte_lc_func_mode_get+0x58>)
   17fa0:	f005 fe2e 	bl	1dc00 <nrf_modem_at_scanf>
	if (err != 1) {
   17fa4:	2801      	cmp	r0, #1
   17fa6:	d105      	bne.n	17fb4 <lte_lc_func_mode_get+0x24>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
		return -EFAULT;
	}

	*mode = mode_tmp;
   17fa8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17fac:	7023      	strb	r3, [r4, #0]

	return 0;
   17fae:	2000      	movs	r0, #0
}
   17fb0:	b002      	add	sp, #8
   17fb2:	bd10      	pop	{r4, pc}
   17fb4:	4b0d      	ldr	r3, [pc, #52]	; (17fec <lte_lc_func_mode_get+0x5c>)
   17fb6:	4a0e      	ldr	r2, [pc, #56]	; (17ff0 <lte_lc_func_mode_get+0x60>)
   17fb8:	1a9b      	subs	r3, r3, r2
   17fba:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   17fbc:	f04f 0200 	mov.w	r2, #0
   17fc0:	2101      	movs	r1, #1
   17fc2:	f361 0202 	bfi	r2, r1, #0, #3
   17fc6:	f36f 02c5 	bfc	r2, #3, #3
   17fca:	f363 128f 	bfi	r2, r3, #6, #10
   17fce:	4601      	mov	r1, r0
   17fd0:	4808      	ldr	r0, [pc, #32]	; (17ff4 <lte_lc_func_mode_get+0x64>)
   17fd2:	f7fa ffa7 	bl	12f24 <log_1>
		return -EFAULT;
   17fd6:	f06f 000d 	mvn.w	r0, #13
   17fda:	e7e9      	b.n	17fb0 <lte_lc_func_mode_get+0x20>
		return -EINVAL;
   17fdc:	f06f 0015 	mvn.w	r0, #21
}
   17fe0:	4770      	bx	lr
   17fe2:	bf00      	nop
   17fe4:	00028f00 	.word	0x00028f00
   17fe8:	00028f0c 	.word	0x00028f0c
   17fec:	00027140 	.word	0x00027140
   17ff0:	00027108 	.word	0x00027108
   17ff4:	00028f18 	.word	0x00028f18

00017ff8 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   17ff8:	b510      	push	{r4, lr}
   17ffa:	4604      	mov	r4, r0
	int err;

	switch (mode) {
   17ffc:	282c      	cmp	r0, #44	; 0x2c
   17ffe:	d84e      	bhi.n	1809e <lte_lc_func_mode_set+0xa6>
   18000:	e8df f000 	tbb	[pc, r0]
   18004:	4d1b351b 	.word	0x4d1b351b
   18008:	4d4d4d1b 	.word	0x4d4d4d1b
   1800c:	4d4d4d4d 	.word	0x4d4d4d4d
   18010:	4d4d4d4d 	.word	0x4d4d4d4d
   18014:	4d4d4d4d 	.word	0x4d4d4d4d
   18018:	4d4d171b 	.word	0x4d4d171b
   1801c:	4d4d4d4d 	.word	0x4d4d4d4d
   18020:	1b1b4d4d 	.word	0x1b1b4d4d
   18024:	4d4d4d4d 	.word	0x4d4d4d4d
   18028:	4d4d4d4d 	.word	0x4d4d4d4d
   1802c:	4d4d1b1b 	.word	0x4d4d1b1b
   18030:	1b          	.byte	0x1b
   18031:	00          	.byte	0x00
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
   18032:	f7ff fb91 	bl	17758 <enable_notifications>
		if (err) {
   18036:	4601      	mov	r1, r0
   18038:	b930      	cbnz	r0, 18048 <lte_lc_func_mode_set+0x50>
	default:
		LOG_ERR("Invalid functional mode: %d", mode);
		return -EINVAL;
	}

	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   1803a:	4621      	mov	r1, r4
   1803c:	4823      	ldr	r0, [pc, #140]	; (180cc <lte_lc_func_mode_set+0xd4>)
   1803e:	f005 fd51 	bl	1dae4 <nrf_modem_at_printf>
   18042:	2800      	cmp	r0, #0
   18044:	d13f      	bne.n	180c6 <lte_lc_func_mode_set+0xce>
}
   18046:	bd10      	pop	{r4, pc}
   18048:	4b21      	ldr	r3, [pc, #132]	; (180d0 <lte_lc_func_mode_set+0xd8>)
   1804a:	4a22      	ldr	r2, [pc, #136]	; (180d4 <lte_lc_func_mode_set+0xdc>)
   1804c:	1a9b      	subs	r3, r3, r2
   1804e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to enable notifications, error: %d", err);
   18050:	f04f 0200 	mov.w	r2, #0
   18054:	2001      	movs	r0, #1
   18056:	f360 0202 	bfi	r2, r0, #0, #3
   1805a:	f36f 02c5 	bfc	r2, #3, #3
   1805e:	f363 128f 	bfi	r2, r3, #6, #10
   18062:	481d      	ldr	r0, [pc, #116]	; (180d8 <lte_lc_func_mode_set+0xe0>)
   18064:	f7fa ff5e 	bl	12f24 <log_1>
			return -EFAULT;
   18068:	f06f 000d 	mvn.w	r0, #13
   1806c:	e7eb      	b.n	18046 <lte_lc_func_mode_set+0x4e>
		err = enable_notifications();
   1806e:	f7ff fb73 	bl	17758 <enable_notifications>
		if (err) {
   18072:	4601      	mov	r1, r0
   18074:	2800      	cmp	r0, #0
   18076:	d0e0      	beq.n	1803a <lte_lc_func_mode_set+0x42>
   18078:	4b15      	ldr	r3, [pc, #84]	; (180d0 <lte_lc_func_mode_set+0xd8>)
   1807a:	4a16      	ldr	r2, [pc, #88]	; (180d4 <lte_lc_func_mode_set+0xdc>)
   1807c:	1a9b      	subs	r3, r3, r2
   1807e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to enable notifications, error: %d", err);
   18080:	f04f 0200 	mov.w	r2, #0
   18084:	2001      	movs	r0, #1
   18086:	f360 0202 	bfi	r2, r0, #0, #3
   1808a:	f36f 02c5 	bfc	r2, #3, #3
   1808e:	f363 128f 	bfi	r2, r3, #6, #10
   18092:	4811      	ldr	r0, [pc, #68]	; (180d8 <lte_lc_func_mode_set+0xe0>)
   18094:	f7fa ff46 	bl	12f24 <log_1>
			return -EFAULT;
   18098:	f06f 000d 	mvn.w	r0, #13
   1809c:	e7d3      	b.n	18046 <lte_lc_func_mode_set+0x4e>
   1809e:	4b0c      	ldr	r3, [pc, #48]	; (180d0 <lte_lc_func_mode_set+0xd8>)
   180a0:	4a0c      	ldr	r2, [pc, #48]	; (180d4 <lte_lc_func_mode_set+0xdc>)
   180a2:	1a9b      	subs	r3, r3, r2
   180a4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid functional mode: %d", mode);
   180a6:	f04f 0200 	mov.w	r2, #0
   180aa:	2101      	movs	r1, #1
   180ac:	f361 0202 	bfi	r2, r1, #0, #3
   180b0:	f36f 02c5 	bfc	r2, #3, #3
   180b4:	f363 128f 	bfi	r2, r3, #6, #10
   180b8:	4601      	mov	r1, r0
   180ba:	4808      	ldr	r0, [pc, #32]	; (180dc <lte_lc_func_mode_set+0xe4>)
   180bc:	f7fa ff32 	bl	12f24 <log_1>
		return -EINVAL;
   180c0:	f06f 0015 	mvn.w	r0, #21
   180c4:	e7bf      	b.n	18046 <lte_lc_func_mode_set+0x4e>
	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   180c6:	f06f 000d 	mvn.w	r0, #13
   180ca:	e7bc      	b.n	18046 <lte_lc_func_mode_set+0x4e>
   180cc:	00028f9c 	.word	0x00028f9c
   180d0:	00027140 	.word	0x00027140
   180d4:	00027108 	.word	0x00027108
   180d8:	00028f54 	.word	0x00028f54
   180dc:	00028f80 	.word	0x00028f80

000180e0 <connect_lte>:
{
   180e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180e4:	b082      	sub	sp, #8
	if (!is_initialized) {
   180e6:	4b61      	ldr	r3, [pc, #388]	; (1826c <connect_lte+0x18c>)
   180e8:	781b      	ldrb	r3, [r3, #0]
   180ea:	2b00      	cmp	r3, #0
   180ec:	d07f      	beq.n	181ee <connect_lte+0x10e>
   180ee:	4606      	mov	r6, r0
   180f0:	4b5f      	ldr	r3, [pc, #380]	; (18270 <connect_lte+0x190>)
   180f2:	2101      	movs	r1, #1
   180f4:	e8d3 2fef 	ldaex	r2, [r3]
   180f8:	e8c3 1fe0 	stlex	r0, r1, [r3]
   180fc:	2800      	cmp	r0, #0
   180fe:	d1f9      	bne.n	180f4 <connect_lte+0x14>
	if (atomic_set(&in_progress, 1)) {
   18100:	2a00      	cmp	r2, #0
   18102:	f040 80b0 	bne.w	18266 <connect_lte+0x186>
	err = lte_lc_nw_reg_status_get(&reg_status);
   18106:	f10d 0006 	add.w	r0, sp, #6
   1810a:	f7ff fd5b 	bl	17bc4 <lte_lc_nw_reg_status_get>
	if (err) {
   1810e:	4604      	mov	r4, r0
   18110:	2800      	cmp	r0, #0
   18112:	d17f      	bne.n	18214 <connect_lte+0x134>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   18114:	f89d 3006 	ldrb.w	r3, [sp, #6]
   18118:	2b01      	cmp	r3, #1
   1811a:	d064      	beq.n	181e6 <connect_lte+0x106>
   1811c:	2b05      	cmp	r3, #5
   1811e:	d062      	beq.n	181e6 <connect_lte+0x106>
	if (blocking) {
   18120:	2e00      	cmp	r6, #0
   18122:	f040 808a 	bne.w	1823a <connect_lte+0x15a>
{
   18126:	2502      	movs	r5, #2
		tries--;
   18128:	3d01      	subs	r5, #1
		err = lte_lc_func_mode_get(&current_func_mode);
   1812a:	f10d 0007 	add.w	r0, sp, #7
   1812e:	f7ff ff2f 	bl	17f90 <lte_lc_func_mode_get>
		if (err) {
   18132:	2800      	cmp	r0, #0
   18134:	f040 808e 	bne.w	18254 <connect_lte+0x174>
		    ((current_func_mode == LTE_LC_FUNC_MODE_POWER_OFF) ||
   18138:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   1813c:	b10b      	cbz	r3, 18142 <connect_lte+0x62>
   1813e:	2b04      	cmp	r3, #4
   18140:	d108      	bne.n	18154 <connect_lte+0x74>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   18142:	4b4c      	ldr	r3, [pc, #304]	; (18274 <connect_lte+0x194>)
   18144:	7819      	ldrb	r1, [r3, #0]
   18146:	4b4c      	ldr	r3, [pc, #304]	; (18278 <connect_lte+0x198>)
   18148:	7818      	ldrb	r0, [r3, #0]
   1814a:	f7ff fd77 	bl	17c3c <lte_lc_system_mode_set>
			if (err) {
   1814e:	2800      	cmp	r0, #0
   18150:	f040 8083 	bne.w	1825a <connect_lte+0x17a>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   18154:	2001      	movs	r0, #1
   18156:	f7ff ff4f 	bl	17ff8 <lte_lc_func_mode_set>
		if (err || !blocking) {
   1815a:	4604      	mov	r4, r0
   1815c:	2800      	cmp	r0, #0
   1815e:	d13a      	bne.n	181d6 <connect_lte+0xf6>
   18160:	2e00      	cmp	r6, #0
   18162:	d038      	beq.n	181d6 <connect_lte+0xf6>
	return z_impl_k_sem_take(sem, timeout);
   18164:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   18168:	2300      	movs	r3, #0
   1816a:	4844      	ldr	r0, [pc, #272]	; (1827c <connect_lte+0x19c>)
   1816c:	f007 f896 	bl	1f29c <z_impl_k_sem_take>
   18170:	4604      	mov	r4, r0
		if (err == -EAGAIN) {
   18172:	f110 0f0b 	cmn.w	r0, #11
   18176:	d12e      	bne.n	181d6 <connect_lte+0xf6>
   18178:	4b41      	ldr	r3, [pc, #260]	; (18280 <connect_lte+0x1a0>)
   1817a:	4a42      	ldr	r2, [pc, #264]	; (18284 <connect_lte+0x1a4>)
   1817c:	1a9b      	subs	r3, r3, r2
   1817e:	08db      	lsrs	r3, r3, #3
			LOG_INF("Network connection attempt timed out");
   18180:	2203      	movs	r2, #3
   18182:	f362 0702 	bfi	r7, r2, #0, #3
   18186:	f36f 07c5 	bfc	r7, #3, #3
   1818a:	f363 178f 	bfi	r7, r3, #6, #10
   1818e:	4639      	mov	r1, r7
   18190:	483d      	ldr	r0, [pc, #244]	; (18288 <connect_lte+0x1a8>)
   18192:	f7fa ff5b 	bl	1304c <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   18196:	2d00      	cmp	r5, #0
   18198:	dd59      	ble.n	1824e <connect_lte+0x16e>
				if (sys_mode_target == sys_mode_preferred) {
   1819a:	4b37      	ldr	r3, [pc, #220]	; (18278 <connect_lte+0x198>)
   1819c:	781b      	ldrb	r3, [r3, #0]
   1819e:	2b01      	cmp	r3, #1
   181a0:	d051      	beq.n	18246 <connect_lte+0x166>
					sys_mode_target = sys_mode_preferred;
   181a2:	4b35      	ldr	r3, [pc, #212]	; (18278 <connect_lte+0x198>)
   181a4:	2201      	movs	r2, #1
   181a6:	701a      	strb	r2, [r3, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   181a8:	2004      	movs	r0, #4
   181aa:	f7ff ff25 	bl	17ff8 <lte_lc_func_mode_set>
				if (err) {
   181ae:	4604      	mov	r4, r0
   181b0:	2800      	cmp	r0, #0
   181b2:	d155      	bne.n	18260 <connect_lte+0x180>
   181b4:	4b32      	ldr	r3, [pc, #200]	; (18280 <connect_lte+0x1a0>)
   181b6:	4a33      	ldr	r2, [pc, #204]	; (18284 <connect_lte+0x1a4>)
   181b8:	1a9b      	subs	r3, r3, r2
   181ba:	08db      	lsrs	r3, r3, #3
				LOG_INF("Using fallback network mode");
   181bc:	2203      	movs	r2, #3
   181be:	f362 0802 	bfi	r8, r2, #0, #3
   181c2:	f36f 08c5 	bfc	r8, #3, #3
   181c6:	f363 188f 	bfi	r8, r3, #6, #10
   181ca:	4641      	mov	r1, r8
   181cc:	482f      	ldr	r0, [pc, #188]	; (1828c <connect_lte+0x1ac>)
   181ce:	f7fa ff3d 	bl	1304c <log_0>
	} while (tries > 0);
   181d2:	2d00      	cmp	r5, #0
   181d4:	dca8      	bgt.n	18128 <connect_lte+0x48>
   181d6:	4b26      	ldr	r3, [pc, #152]	; (18270 <connect_lte+0x190>)
   181d8:	2200      	movs	r2, #0
   181da:	e8d3 1fef 	ldaex	r1, [r3]
   181de:	e8c3 2fe0 	stlex	r0, r2, [r3]
   181e2:	2800      	cmp	r0, #0
   181e4:	d1f9      	bne.n	181da <connect_lte+0xfa>
}
   181e6:	4620      	mov	r0, r4
   181e8:	b002      	add	sp, #8
   181ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   181ee:	4b24      	ldr	r3, [pc, #144]	; (18280 <connect_lte+0x1a0>)
   181f0:	4a24      	ldr	r2, [pc, #144]	; (18284 <connect_lte+0x1a4>)
   181f2:	1a9b      	subs	r3, r3, r2
   181f4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("The LTE link controller is not initialized");
   181f6:	f04f 0100 	mov.w	r1, #0
   181fa:	2201      	movs	r2, #1
   181fc:	f362 0102 	bfi	r1, r2, #0, #3
   18200:	f36f 01c5 	bfc	r1, #3, #3
   18204:	f363 118f 	bfi	r1, r3, #6, #10
   18208:	4821      	ldr	r0, [pc, #132]	; (18290 <connect_lte+0x1b0>)
   1820a:	f7fa ff1f 	bl	1304c <log_0>
		return -EPERM;
   1820e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18212:	e7e8      	b.n	181e6 <connect_lte+0x106>
   18214:	4b1a      	ldr	r3, [pc, #104]	; (18280 <connect_lte+0x1a0>)
   18216:	4a1b      	ldr	r2, [pc, #108]	; (18284 <connect_lte+0x1a4>)
   18218:	1a9b      	subs	r3, r3, r2
   1821a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get current registration status");
   1821c:	f04f 0100 	mov.w	r1, #0
   18220:	2201      	movs	r2, #1
   18222:	f362 0102 	bfi	r1, r2, #0, #3
   18226:	f36f 01c5 	bfc	r1, #3, #3
   1822a:	f363 118f 	bfi	r1, r3, #6, #10
   1822e:	4819      	ldr	r0, [pc, #100]	; (18294 <connect_lte+0x1b4>)
   18230:	f7fa ff0c 	bl	1304c <log_0>
		return -EFAULT;
   18234:	f06f 040d 	mvn.w	r4, #13
   18238:	e7d5      	b.n	181e6 <connect_lte+0x106>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1823a:	2201      	movs	r2, #1
   1823c:	2100      	movs	r1, #0
   1823e:	480f      	ldr	r0, [pc, #60]	; (1827c <connect_lte+0x19c>)
   18240:	f00d fe7f 	bl	25f42 <z_impl_k_sem_init>
   18244:	e76f      	b.n	18126 <connect_lte+0x46>
					sys_mode_target = sys_mode_fallback;
   18246:	4b0c      	ldr	r3, [pc, #48]	; (18278 <connect_lte+0x198>)
   18248:	2202      	movs	r2, #2
   1824a:	701a      	strb	r2, [r3, #0]
   1824c:	e7ac      	b.n	181a8 <connect_lte+0xc8>
				err = -ETIMEDOUT;
   1824e:	f06f 0473 	mvn.w	r4, #115	; 0x73
   18252:	e7be      	b.n	181d2 <connect_lte+0xf2>
			err = -EFAULT;
   18254:	f06f 040d 	mvn.w	r4, #13
   18258:	e7bd      	b.n	181d6 <connect_lte+0xf6>
				err = -EFAULT;
   1825a:	f06f 040d 	mvn.w	r4, #13
   1825e:	e7ba      	b.n	181d6 <connect_lte+0xf6>
					err = -EFAULT;
   18260:	f06f 040d 	mvn.w	r4, #13
   18264:	e7b7      	b.n	181d6 <connect_lte+0xf6>
		return -EINPROGRESS;
   18266:	f06f 0476 	mvn.w	r4, #118	; 0x76
   1826a:	e7bc      	b.n	181e6 <connect_lte+0x106>
   1826c:	2000f908 	.word	0x2000f908
   18270:	2000e56c 	.word	0x2000e56c
   18274:	2000f909 	.word	0x2000f909
   18278:	2000c704 	.word	0x2000c704
   1827c:	2000e570 	.word	0x2000e570
   18280:	00027140 	.word	0x00027140
   18284:	00027108 	.word	0x00027108
   18288:	00029000 	.word	0x00029000
   1828c:	00029028 	.word	0x00029028
   18290:	00028fa8 	.word	0x00028fa8
   18294:	00028fd4 	.word	0x00028fd4

00018298 <event_handler_list_find_node>:
{
   18298:	b410      	push	{r4}
   1829a:	4604      	mov	r4, r0
	return list->head;
   1829c:	4b09      	ldr	r3, [pc, #36]	; (182c4 <event_handler_list_find_node+0x2c>)
   1829e:	6818      	ldr	r0, [r3, #0]
   182a0:	2200      	movs	r2, #0
   182a2:	e005      	b.n	182b0 <event_handler_list_find_node+0x18>
			*prev_out = prev;
   182a4:	6022      	str	r2, [r4, #0]
}
   182a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   182aa:	4770      	bx	lr
   182ac:	4602      	mov	r2, r0
   182ae:	4618      	mov	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   182b0:	2800      	cmp	r0, #0
   182b2:	d0f8      	beq.n	182a6 <event_handler_list_find_node+0xe>
		if (curr->handler == handler) {
   182b4:	6843      	ldr	r3, [r0, #4]
   182b6:	428b      	cmp	r3, r1
   182b8:	d0f4      	beq.n	182a4 <event_handler_list_find_node+0xc>
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   182ba:	4603      	mov	r3, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   182bc:	2800      	cmp	r0, #0
   182be:	d0f5      	beq.n	182ac <event_handler_list_find_node+0x14>
	return node->next;
   182c0:	6803      	ldr	r3, [r0, #0]
   182c2:	e7f3      	b.n	182ac <event_handler_list_find_node+0x14>
   182c4:	2000e630 	.word	0x2000e630

000182c8 <get_ptw_multiplier>:
	switch (lte_mode) {
   182c8:	2807      	cmp	r0, #7
   182ca:	d004      	beq.n	182d6 <get_ptw_multiplier+0xe>
   182cc:	2809      	cmp	r0, #9
   182ce:	d006      	beq.n	182de <get_ptw_multiplier+0x16>
   182d0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   182d4:	4770      	bx	lr
		*ptw_multiplier = 1.28;
   182d6:	4b04      	ldr	r3, [pc, #16]	; (182e8 <get_ptw_multiplier+0x20>)
   182d8:	600b      	str	r3, [r1, #0]
	return 0;
   182da:	2000      	movs	r0, #0
		break;
   182dc:	4770      	bx	lr
		*ptw_multiplier = 2.56;
   182de:	4b03      	ldr	r3, [pc, #12]	; (182ec <get_ptw_multiplier+0x24>)
   182e0:	600b      	str	r3, [r1, #0]
	return 0;
   182e2:	2000      	movs	r0, #0
}
   182e4:	4770      	bx	lr
   182e6:	bf00      	nop
   182e8:	3fa3d70a 	.word	0x3fa3d70a
   182ec:	4023d70a 	.word	0x4023d70a

000182f0 <get_nw_reg_status>:
/* Get network registration status from CEREG response list.
 * Returns the (positive) registration value if it's found, otherwise a negative
 * error code.
 */
static int get_nw_reg_status(struct at_param_list *list, bool is_notif)
{
   182f0:	b500      	push	{lr}
   182f2:	b083      	sub	sp, #12
	int err, reg_status;
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   182f4:	b1f1      	cbz	r1, 18334 <get_nw_reg_status+0x44>
   182f6:	2101      	movs	r1, #1
					     AT_CEREG_READ_REG_STATUS_INDEX;

	err = at_params_int_get(list, reg_status_index, &reg_status);
   182f8:	aa01      	add	r2, sp, #4
   182fa:	f00c f969 	bl	245d0 <at_params_int_get>
	if (err) {
   182fe:	4601      	mov	r1, r0
   18300:	b9e0      	cbnz	r0, 1833c <get_nw_reg_status+0x4c>
		return err;
	}

	/* Check if the parsed value maps to a valid registration status */
	switch (reg_status) {
   18302:	9901      	ldr	r1, [sp, #4]
   18304:	2908      	cmp	r1, #8
   18306:	d019      	beq.n	1833c <get_nw_reg_status+0x4c>
   18308:	dd16      	ble.n	18338 <get_nw_reg_status+0x48>
   1830a:	295a      	cmp	r1, #90	; 0x5a
   1830c:	d016      	beq.n	1833c <get_nw_reg_status+0x4c>
   1830e:	4b0d      	ldr	r3, [pc, #52]	; (18344 <get_nw_reg_status+0x54>)
   18310:	4a0d      	ldr	r2, [pc, #52]	; (18348 <get_nw_reg_status+0x58>)
   18312:	1a9b      	subs	r3, r3, r2
   18314:	08db      	lsrs	r3, r3, #3
	case LTE_LC_NW_REG_REGISTERED_ROAMING:
	case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
	case LTE_LC_NW_REG_UICC_FAIL:
		break;
	default:
		LOG_ERR("Invalid network registration status: %d", reg_status);
   18316:	f04f 0200 	mov.w	r2, #0
   1831a:	2001      	movs	r0, #1
   1831c:	f360 0202 	bfi	r2, r0, #0, #3
   18320:	f36f 02c5 	bfc	r2, #3, #3
   18324:	f363 128f 	bfi	r2, r3, #6, #10
   18328:	4808      	ldr	r0, [pc, #32]	; (1834c <get_nw_reg_status+0x5c>)
   1832a:	f7fa fdfb 	bl	12f24 <log_1>
		return -EINVAL;
   1832e:	f06f 0115 	mvn.w	r1, #21
   18332:	e003      	b.n	1833c <get_nw_reg_status+0x4c>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   18334:	2102      	movs	r1, #2
   18336:	e7df      	b.n	182f8 <get_nw_reg_status+0x8>
	switch (reg_status) {
   18338:	2905      	cmp	r1, #5
   1833a:	d8e8      	bhi.n	1830e <get_nw_reg_status+0x1e>
	}

	return reg_status;
}
   1833c:	4608      	mov	r0, r1
   1833e:	b003      	add	sp, #12
   18340:	f85d fb04 	ldr.w	pc, [sp], #4
   18344:	00027148 	.word	0x00027148
   18348:	00027108 	.word	0x00027108
   1834c:	00029104 	.word	0x00029104

00018350 <event_handler_list_is_empty>:
	return list->head;
   18350:	4b02      	ldr	r3, [pc, #8]	; (1835c <event_handler_list_is_empty+0xc>)
   18352:	6818      	ldr	r0, [r3, #0]
}
   18354:	fab0 f080 	clz	r0, r0
   18358:	0940      	lsrs	r0, r0, #5
   1835a:	4770      	bx	lr
   1835c:	2000e630 	.word	0x2000e630

00018360 <event_handler_list_append_handler>:
{
   18360:	b510      	push	{r4, lr}
   18362:	b082      	sub	sp, #8
   18364:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   18366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1836a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1836e:	4817      	ldr	r0, [pc, #92]	; (183cc <event_handler_list_append_handler+0x6c>)
   18370:	f006 fe62 	bl	1f038 <z_impl_k_mutex_lock>
	if (event_handler_list_find_node(&to_ins, handler) != NULL) {
   18374:	4621      	mov	r1, r4
   18376:	a801      	add	r0, sp, #4
   18378:	f7ff ff8e 	bl	18298 <event_handler_list_find_node>
   1837c:	b128      	cbz	r0, 1838a <event_handler_list_append_handler+0x2a>
	return z_impl_k_mutex_unlock(mutex);
   1837e:	4813      	ldr	r0, [pc, #76]	; (183cc <event_handler_list_append_handler+0x6c>)
   18380:	f006 fee4 	bl	1f14c <z_impl_k_mutex_unlock>
		return 0;
   18384:	2000      	movs	r0, #0
}
   18386:	b002      	add	sp, #8
   18388:	bd10      	pop	{r4, pc}
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   1838a:	2008      	movs	r0, #8
   1838c:	f00e fa1c 	bl	267c8 <k_malloc>
   18390:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   18392:	b180      	cbz	r0, 183b6 <event_handler_list_append_handler+0x56>
__ssp_bos_icheck3(memset, void *, int)
   18394:	2200      	movs	r2, #0
   18396:	6002      	str	r2, [r0, #0]
   18398:	6042      	str	r2, [r0, #4]
	to_ins->handler = handler;
   1839a:	9b01      	ldr	r3, [sp, #4]
   1839c:	605c      	str	r4, [r3, #4]
	parent->next = child;
   1839e:	601a      	str	r2, [r3, #0]
	return list->tail;
   183a0:	4a0b      	ldr	r2, [pc, #44]	; (183d0 <event_handler_list_append_handler+0x70>)
   183a2:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
   183a4:	b16a      	cbz	r2, 183c2 <event_handler_list_append_handler+0x62>
	parent->next = child;
   183a6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   183a8:	4a09      	ldr	r2, [pc, #36]	; (183d0 <event_handler_list_append_handler+0x70>)
   183aa:	6053      	str	r3, [r2, #4]
   183ac:	4807      	ldr	r0, [pc, #28]	; (183cc <event_handler_list_append_handler+0x6c>)
   183ae:	f006 fecd 	bl	1f14c <z_impl_k_mutex_unlock>
	return 0;
   183b2:	2000      	movs	r0, #0
   183b4:	e7e7      	b.n	18386 <event_handler_list_append_handler+0x26>
   183b6:	4805      	ldr	r0, [pc, #20]	; (183cc <event_handler_list_append_handler+0x6c>)
   183b8:	f006 fec8 	bl	1f14c <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   183bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   183c0:	e7e1      	b.n	18386 <event_handler_list_append_handler+0x26>
   183c2:	4a03      	ldr	r2, [pc, #12]	; (183d0 <event_handler_list_append_handler+0x70>)
   183c4:	6053      	str	r3, [r2, #4]
	list->head = node;
   183c6:	6013      	str	r3, [r2, #0]
}
   183c8:	e7f0      	b.n	183ac <event_handler_list_append_handler+0x4c>
   183ca:	bf00      	nop
   183cc:	2000c840 	.word	0x2000c840
   183d0:	2000e630 	.word	0x2000e630

000183d4 <event_handler_list_dispatch>:
{
   183d4:	b538      	push	{r3, r4, r5, lr}
   183d6:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   183d8:	f7ff ffba 	bl	18350 <event_handler_list_is_empty>
   183dc:	b100      	cbz	r0, 183e0 <event_handler_list_dispatch+0xc>
}
   183de:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   183e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   183e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   183e8:	480e      	ldr	r0, [pc, #56]	; (18424 <event_handler_list_dispatch+0x50>)
   183ea:	f006 fe25 	bl	1f038 <z_impl_k_mutex_lock>
	return list->head;
   183ee:	4b0e      	ldr	r3, [pc, #56]	; (18428 <event_handler_list_dispatch+0x54>)
   183f0:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   183f2:	b11b      	cbz	r3, 183fc <event_handler_list_dispatch+0x28>
   183f4:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   183f6:	b133      	cbz	r3, 18406 <event_handler_list_dispatch+0x32>
	return node->next;
   183f8:	681c      	ldr	r4, [r3, #0]
   183fa:	e004      	b.n	18406 <event_handler_list_dispatch+0x32>
   183fc:	461c      	mov	r4, r3
   183fe:	e002      	b.n	18406 <event_handler_list_dispatch+0x32>
   18400:	4622      	mov	r2, r4
   18402:	4623      	mov	r3, r4
   18404:	4614      	mov	r4, r2
   18406:	b14b      	cbz	r3, 1841c <event_handler_list_dispatch+0x48>
		curr->handler(evt);
   18408:	685b      	ldr	r3, [r3, #4]
   1840a:	4628      	mov	r0, r5
   1840c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1840e:	2c00      	cmp	r4, #0
   18410:	d0f6      	beq.n	18400 <event_handler_list_dispatch+0x2c>
   18412:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   18414:	2c00      	cmp	r4, #0
   18416:	d0f4      	beq.n	18402 <event_handler_list_dispatch+0x2e>
	return node->next;
   18418:	6822      	ldr	r2, [r4, #0]
   1841a:	e7f2      	b.n	18402 <event_handler_list_dispatch+0x2e>
	return z_impl_k_mutex_unlock(mutex);
   1841c:	4801      	ldr	r0, [pc, #4]	; (18424 <event_handler_list_dispatch+0x50>)
   1841e:	f006 fe95 	bl	1f14c <z_impl_k_mutex_unlock>
   18422:	e7dc      	b.n	183de <event_handler_list_dispatch+0xa>
   18424:	2000c840 	.word	0x2000c840
   18428:	2000e630 	.word	0x2000e630

0001842c <response_is_valid>:
{
   1842c:	b570      	push	{r4, r5, r6, lr}
	if ((response == NULL) || (check == NULL)) {
   1842e:	b150      	cbz	r0, 18446 <response_is_valid+0x1a>
   18430:	460d      	mov	r5, r1
   18432:	4614      	mov	r4, r2
   18434:	4606      	mov	r6, r0
   18436:	b132      	cbz	r2, 18446 <response_is_valid+0x1a>
	if ((response_len < strlen(check)) ||
   18438:	4610      	mov	r0, r2
   1843a:	f7f8 fcf3 	bl	10e24 <strlen>
   1843e:	4285      	cmp	r5, r0
   18440:	d213      	bcs.n	1846a <response_is_valid+0x3e>
		return false;
   18442:	2000      	movs	r0, #0
}
   18444:	bd70      	pop	{r4, r5, r6, pc}
   18446:	4b0d      	ldr	r3, [pc, #52]	; (1847c <response_is_valid+0x50>)
   18448:	4a0d      	ldr	r2, [pc, #52]	; (18480 <response_is_valid+0x54>)
   1844a:	1a9b      	subs	r3, r3, r2
   1844c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid pointer provided");
   1844e:	f04f 0100 	mov.w	r1, #0
   18452:	2201      	movs	r2, #1
   18454:	f362 0102 	bfi	r1, r2, #0, #3
   18458:	f36f 01c5 	bfc	r1, #3, #3
   1845c:	f363 118f 	bfi	r1, r3, #6, #10
   18460:	4808      	ldr	r0, [pc, #32]	; (18484 <response_is_valid+0x58>)
   18462:	f7fa fdf3 	bl	1304c <log_0>
		return false;
   18466:	2000      	movs	r0, #0
   18468:	e7ec      	b.n	18444 <response_is_valid+0x18>
	    (memcmp(response, check, response_len) != 0)) {
   1846a:	462a      	mov	r2, r5
   1846c:	4621      	mov	r1, r4
   1846e:	4630      	mov	r0, r6
   18470:	f00e f9d9 	bl	26826 <memcmp>
	if ((response_len < strlen(check)) ||
   18474:	2800      	cmp	r0, #0
   18476:	d1e4      	bne.n	18442 <response_is_valid+0x16>
	return true;
   18478:	2001      	movs	r0, #1
   1847a:	e7e3      	b.n	18444 <response_is_valid+0x18>
   1847c:	00027148 	.word	0x00027148
   18480:	00027108 	.word	0x00027108
   18484:	0002912c 	.word	0x0002912c

00018488 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   18488:	b570      	push	{r4, r5, r6, lr}
   1848a:	b088      	sub	sp, #32
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   1848c:	2300      	movs	r3, #0
   1848e:	9305      	str	r3, [sp, #20]
   18490:	9306      	str	r3, [sp, #24]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   18492:	2304      	movs	r3, #4
   18494:	9302      	str	r3, [sp, #8]
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   18496:	2800      	cmp	r0, #0
   18498:	f000 810a 	beq.w	186b0 <parse_edrx+0x228>
   1849c:	460d      	mov	r5, r1
   1849e:	4606      	mov	r6, r0
   184a0:	2900      	cmp	r1, #0
   184a2:	f000 8108 	beq.w	186b6 <parse_edrx+0x22e>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   184a6:	2106      	movs	r1, #6
   184a8:	a805      	add	r0, sp, #20
   184aa:	f00b ff76 	bl	2439a <at_params_list_init>
	if (err) {
   184ae:	4604      	mov	r4, r0
   184b0:	2800      	cmp	r0, #0
   184b2:	d163      	bne.n	1857c <parse_edrx+0xf4>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   184b4:	aa05      	add	r2, sp, #20
   184b6:	2100      	movs	r1, #0
   184b8:	4630      	mov	r0, r6
   184ba:	f00b ff3d 	bl	24338 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   184be:	4604      	mov	r4, r0
   184c0:	2800      	cmp	r0, #0
   184c2:	d16d      	bne.n	185a0 <parse_edrx+0x118>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   184c4:	ab02      	add	r3, sp, #8
   184c6:	aa03      	add	r2, sp, #12
   184c8:	2103      	movs	r1, #3
   184ca:	a805      	add	r0, sp, #20
   184cc:	f00c f8cc 	bl	24668 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
   184d0:	4604      	mov	r4, r0
   184d2:	2800      	cmp	r0, #0
   184d4:	d17b      	bne.n	185ce <parse_edrx+0x146>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
   184d6:	9b02      	ldr	r3, [sp, #8]
   184d8:	aa08      	add	r2, sp, #32
   184da:	4413      	add	r3, r2
   184dc:	2100      	movs	r1, #0
   184de:	f803 1c14 	strb.w	r1, [r3, #-20]
	 * special case of idx == 0 for LTE-M, where the value is 5.12 seconds.
	 * The variable idx is used to map to the entry of index idx in
	 * Figure 10.5.5.32/3GPP TS 24.008, table for eDRX in S1 mode, and
	 * note 4 and 5 are taken into account.
	 */
	idx = strtoul(tmp_buf, NULL, 2);
   184e2:	2202      	movs	r2, #2
   184e4:	a803      	add	r0, sp, #12
   184e6:	f008 fd35 	bl	20f54 <strtoul>
   184ea:	b2c6      	uxtb	r6, r0

	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   184ec:	aa07      	add	r2, sp, #28
   184ee:	2101      	movs	r1, #1
   184f0:	a805      	add	r0, sp, #20
   184f2:	f00c f86d 	bl	245d0 <at_params_int_get>
	if (err) {
   184f6:	4604      	mov	r4, r0
   184f8:	2800      	cmp	r0, #0
   184fa:	d17a      	bne.n	185f2 <parse_edrx+0x16a>
	}

	/* The acces technology indicators 4 for LTE-M and 5 for NB-IoT are
	 * specified in 3GPP 27.007 Ch. 7.41.
	 */
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   184fc:	9b07      	ldr	r3, [sp, #28]
   184fe:	2b04      	cmp	r3, #4
   18500:	f000 808b 	beq.w	1861a <parse_edrx+0x192>
   18504:	2b05      	cmp	r3, #5
   18506:	f000 8086 	beq.w	18616 <parse_edrx+0x18e>
   1850a:	2000      	movs	r0, #0
   1850c:	7028      	strb	r0, [r5, #0]

	/* Confirm valid system mode and set Paging Time Window multiplier.
	 * Multiplier is 1.28 s for LTE-M, and 2.56 s for NB-IoT, derived from
	 * figure 10.5.5.32/3GPP TS 24.008.
	 */
	err = get_ptw_multiplier(cfg->mode, &ptw_multiplier);
   1850e:	a901      	add	r1, sp, #4
   18510:	f7ff feda 	bl	182c8 <get_ptw_multiplier>
	if (err) {
   18514:	4604      	mov	r4, r0
   18516:	2800      	cmp	r0, #0
   18518:	f040 8081 	bne.w	1861e <parse_edrx+0x196>
		LOG_WRN("Active LTE mode could not be determined");
		goto clean_exit;
	}

	err = get_edrx_value(cfg->mode, idx, &cfg->edrx);
   1851c:	462a      	mov	r2, r5
   1851e:	f812 0b04 	ldrb.w	r0, [r2], #4
   18522:	4631      	mov	r1, r6
   18524:	f7f8 fd5c 	bl	10fe0 <get_edrx_value>
	if (err) {
   18528:	4604      	mov	r4, r0
   1852a:	2800      	cmp	r0, #0
   1852c:	f040 8088 	bne.w	18640 <parse_edrx+0x1b8>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
		goto clean_exit;
	}

	len = sizeof(tmp_buf) - 1;
   18530:	2104      	movs	r1, #4
   18532:	9102      	str	r1, [sp, #8]

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   18534:	ab02      	add	r3, sp, #8
   18536:	aa03      	add	r2, sp, #12
   18538:	a805      	add	r0, sp, #20
   1853a:	f00c f895 	bl	24668 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
   1853e:	4604      	mov	r4, r0
   18540:	2800      	cmp	r0, #0
   18542:	f040 808f 	bne.w	18664 <parse_edrx+0x1dc>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
   18546:	9b02      	ldr	r3, [sp, #8]
   18548:	aa08      	add	r2, sp, #32
   1854a:	4413      	add	r3, r2
   1854c:	2100      	movs	r1, #0
   1854e:	f803 1c14 	strb.w	r1, [r3, #-20]

	/* Value can be a maximum of 15, as there are 16 entries in the table
	 * for paging time window (both for LTE-M and NB1).
	 */
	idx = strtoul(tmp_buf, NULL, 2);
   18552:	2202      	movs	r2, #2
   18554:	a803      	add	r0, sp, #12
   18556:	f008 fcfd 	bl	20f54 <strtoul>
   1855a:	b2c3      	uxtb	r3, r0
	if (idx > 15) {
   1855c:	2b0f      	cmp	r3, #15
   1855e:	f200 8093 	bhi.w	18688 <parse_edrx+0x200>

	/* The Paging Time Window is different for LTE-M and NB-IoT:
	 *	- LTE-M: (idx + 1) * 1.28 s
	 *	- NB-IoT (idx + 1) * 2.56 s
	 */
	idx += 1;
   18562:	3001      	adds	r0, #1
   18564:	b2c0      	uxtb	r0, r0
	cfg->ptw = idx * ptw_multiplier;
   18566:	ee07 0a90 	vmov	s15, r0
   1856a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1856e:	ed9d 7a01 	vldr	s14, [sp, #4]
   18572:	ee67 7a87 	vmul.f32	s15, s15, s14
   18576:	edc5 7a02 	vstr	s15, [r5, #8]

	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   1857a:	e022      	b.n	185c2 <parse_edrx+0x13a>
   1857c:	4b4f      	ldr	r3, [pc, #316]	; (186bc <parse_edrx+0x234>)
   1857e:	4a50      	ldr	r2, [pc, #320]	; (186c0 <parse_edrx+0x238>)
   18580:	1a9b      	subs	r3, r3, r2
   18582:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   18584:	f04f 0200 	mov.w	r2, #0
   18588:	2101      	movs	r1, #1
   1858a:	f361 0202 	bfi	r2, r1, #0, #3
   1858e:	f36f 02c5 	bfc	r2, #3, #3
   18592:	f363 128f 	bfi	r2, r3, #6, #10
   18596:	4601      	mov	r1, r0
   18598:	484a      	ldr	r0, [pc, #296]	; (186c4 <parse_edrx+0x23c>)
   1859a:	f7fa fcc3 	bl	12f24 <log_1>
		return err;
   1859e:	e013      	b.n	185c8 <parse_edrx+0x140>
   185a0:	4b46      	ldr	r3, [pc, #280]	; (186bc <parse_edrx+0x234>)
   185a2:	4a47      	ldr	r2, [pc, #284]	; (186c0 <parse_edrx+0x238>)
   185a4:	1a9b      	subs	r3, r3, r2
   185a6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   185a8:	f04f 0200 	mov.w	r2, #0
   185ac:	2101      	movs	r1, #1
   185ae:	f361 0202 	bfi	r2, r1, #0, #3
   185b2:	f36f 02c5 	bfc	r2, #3, #3
   185b6:	f363 128f 	bfi	r2, r3, #6, #10
   185ba:	4601      	mov	r1, r0
   185bc:	4842      	ldr	r0, [pc, #264]	; (186c8 <parse_edrx+0x240>)
   185be:	f7fa fcb1 	bl	12f24 <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   185c2:	a805      	add	r0, sp, #20
   185c4:	f00b ff12 	bl	243ec <at_params_list_free>

	return err;
}
   185c8:	4620      	mov	r0, r4
   185ca:	b008      	add	sp, #32
   185cc:	bd70      	pop	{r4, r5, r6, pc}
   185ce:	4b3b      	ldr	r3, [pc, #236]	; (186bc <parse_edrx+0x234>)
   185d0:	4a3b      	ldr	r2, [pc, #236]	; (186c0 <parse_edrx+0x238>)
   185d2:	1a9b      	subs	r3, r3, r2
   185d4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   185d6:	f04f 0200 	mov.w	r2, #0
   185da:	2101      	movs	r1, #1
   185dc:	f361 0202 	bfi	r2, r1, #0, #3
   185e0:	f36f 02c5 	bfc	r2, #3, #3
   185e4:	f363 128f 	bfi	r2, r3, #6, #10
   185e8:	4601      	mov	r1, r0
   185ea:	4838      	ldr	r0, [pc, #224]	; (186cc <parse_edrx+0x244>)
   185ec:	f7fa fc9a 	bl	12f24 <log_1>
		goto clean_exit;
   185f0:	e7e7      	b.n	185c2 <parse_edrx+0x13a>
   185f2:	4b32      	ldr	r3, [pc, #200]	; (186bc <parse_edrx+0x234>)
   185f4:	4a32      	ldr	r2, [pc, #200]	; (186c0 <parse_edrx+0x238>)
   185f6:	1a9b      	subs	r3, r3, r2
   185f8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   185fa:	f04f 0200 	mov.w	r2, #0
   185fe:	2101      	movs	r1, #1
   18600:	f361 0202 	bfi	r2, r1, #0, #3
   18604:	f36f 02c5 	bfc	r2, #3, #3
   18608:	f363 128f 	bfi	r2, r3, #6, #10
   1860c:	4601      	mov	r1, r0
   1860e:	4830      	ldr	r0, [pc, #192]	; (186d0 <parse_edrx+0x248>)
   18610:	f7fa fc88 	bl	12f24 <log_1>
		goto clean_exit;
   18614:	e7d5      	b.n	185c2 <parse_edrx+0x13a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   18616:	2009      	movs	r0, #9
   18618:	e778      	b.n	1850c <parse_edrx+0x84>
   1861a:	2007      	movs	r0, #7
   1861c:	e776      	b.n	1850c <parse_edrx+0x84>
   1861e:	4b27      	ldr	r3, [pc, #156]	; (186bc <parse_edrx+0x234>)
   18620:	4a27      	ldr	r2, [pc, #156]	; (186c0 <parse_edrx+0x238>)
   18622:	1a9b      	subs	r3, r3, r2
   18624:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Active LTE mode could not be determined");
   18626:	f04f 0100 	mov.w	r1, #0
   1862a:	2202      	movs	r2, #2
   1862c:	f362 0102 	bfi	r1, r2, #0, #3
   18630:	f36f 01c5 	bfc	r1, #3, #3
   18634:	f363 118f 	bfi	r1, r3, #6, #10
   18638:	4826      	ldr	r0, [pc, #152]	; (186d4 <parse_edrx+0x24c>)
   1863a:	f7fa fd07 	bl	1304c <log_0>
		goto clean_exit;
   1863e:	e7c0      	b.n	185c2 <parse_edrx+0x13a>
   18640:	4b1e      	ldr	r3, [pc, #120]	; (186bc <parse_edrx+0x234>)
   18642:	4a1f      	ldr	r2, [pc, #124]	; (186c0 <parse_edrx+0x238>)
   18644:	1a9b      	subs	r3, r3, r2
   18646:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   18648:	f04f 0200 	mov.w	r2, #0
   1864c:	2101      	movs	r1, #1
   1864e:	f361 0202 	bfi	r2, r1, #0, #3
   18652:	f36f 02c5 	bfc	r2, #3, #3
   18656:	f363 128f 	bfi	r2, r3, #6, #10
   1865a:	4601      	mov	r1, r0
   1865c:	481e      	ldr	r0, [pc, #120]	; (186d8 <parse_edrx+0x250>)
   1865e:	f7fa fc61 	bl	12f24 <log_1>
		goto clean_exit;
   18662:	e7ae      	b.n	185c2 <parse_edrx+0x13a>
   18664:	4b15      	ldr	r3, [pc, #84]	; (186bc <parse_edrx+0x234>)
   18666:	4a16      	ldr	r2, [pc, #88]	; (186c0 <parse_edrx+0x238>)
   18668:	1a9b      	subs	r3, r3, r2
   1866a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1866c:	f04f 0200 	mov.w	r2, #0
   18670:	2101      	movs	r1, #1
   18672:	f361 0202 	bfi	r2, r1, #0, #3
   18676:	f36f 02c5 	bfc	r2, #3, #3
   1867a:	f363 128f 	bfi	r2, r3, #6, #10
   1867e:	4601      	mov	r1, r0
   18680:	4816      	ldr	r0, [pc, #88]	; (186dc <parse_edrx+0x254>)
   18682:	f7fa fc4f 	bl	12f24 <log_1>
		goto clean_exit;
   18686:	e79c      	b.n	185c2 <parse_edrx+0x13a>
   18688:	4b0c      	ldr	r3, [pc, #48]	; (186bc <parse_edrx+0x234>)
   1868a:	4a0d      	ldr	r2, [pc, #52]	; (186c0 <parse_edrx+0x238>)
   1868c:	1a9b      	subs	r3, r3, r2
   1868e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   18690:	f04f 0200 	mov.w	r2, #0
   18694:	2101      	movs	r1, #1
   18696:	f361 0202 	bfi	r2, r1, #0, #3
   1869a:	f36f 02c5 	bfc	r2, #3, #3
   1869e:	f363 128f 	bfi	r2, r3, #6, #10
   186a2:	b2c1      	uxtb	r1, r0
   186a4:	480e      	ldr	r0, [pc, #56]	; (186e0 <parse_edrx+0x258>)
   186a6:	f7fa fc3d 	bl	12f24 <log_1>
		err = -EINVAL;
   186aa:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   186ae:	e788      	b.n	185c2 <parse_edrx+0x13a>
		return -EINVAL;
   186b0:	f06f 0415 	mvn.w	r4, #21
   186b4:	e788      	b.n	185c8 <parse_edrx+0x140>
   186b6:	f06f 0415 	mvn.w	r4, #21
   186ba:	e785      	b.n	185c8 <parse_edrx+0x140>
   186bc:	00027148 	.word	0x00027148
   186c0:	00027108 	.word	0x00027108
   186c4:	00029148 	.word	0x00029148
   186c8:	00029174 	.word	0x00029174
   186cc:	000291a0 	.word	0x000291a0
   186d0:	000291cc 	.word	0x000291cc
   186d4:	000291f0 	.word	0x000291f0
   186d8:	00029218 	.word	0x00029218
   186dc:	0002923c 	.word	0x0002923c
   186e0:	00029268 	.word	0x00029268

000186e4 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   186e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186e8:	b082      	sub	sp, #8
   186ea:	4605      	mov	r5, r0
   186ec:	460c      	mov	r4, r1
   186ee:	4617      	mov	r7, r2
   186f0:	461e      	mov	r6, r3
	char unit_str[4] = {0};
   186f2:	2300      	movs	r3, #0
   186f4:	9301      	str	r3, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   186f6:	f7f8 fb95 	bl	10e24 <strlen>
   186fa:	2808      	cmp	r0, #8
   186fc:	d146      	bne.n	1878c <parse_psm+0xa8>
   186fe:	4620      	mov	r0, r4
   18700:	f7f8 fb90 	bl	10e24 <strlen>
   18704:	2808      	cmp	r0, #8
   18706:	d141      	bne.n	1878c <parse_psm+0xa8>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   18708:	8822      	ldrh	r2, [r4, #0]
   1870a:	78a3      	ldrb	r3, [r4, #2]
   1870c:	f8ad 2004 	strh.w	r2, [sp, #4]
   18710:	f88d 3006 	strb.w	r3, [sp, #6]

	lut_idx = strtoul(unit_str, NULL, 2);
   18714:	2202      	movs	r2, #2
   18716:	2100      	movs	r1, #0
   18718:	a801      	add	r0, sp, #4
   1871a:	f008 fc1b 	bl	20f54 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   1871e:	2807      	cmp	r0, #7
   18720:	d837      	bhi.n	18792 <parse_psm+0xae>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
		return -EINVAL;
	}

	timer_unit = t3412_ext_lookup[lut_idx];
   18722:	4b49      	ldr	r3, [pc, #292]	; (18848 <parse_psm+0x164>)
   18724:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   18728:	2202      	movs	r2, #2
   1872a:	2100      	movs	r1, #0
   1872c:	1ce0      	adds	r0, r4, #3
   1872e:	f008 fc11 	bl	20f54 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18732:	f1b8 0f00 	cmp.w	r8, #0
   18736:	d03f      	beq.n	187b8 <parse_psm+0xd4>
   18738:	fb00 f408 	mul.w	r4, r0, r8
   1873c:	6034      	str	r4, [r6, #0]

	/* If T3412-extended is disabled, there's a chance that the network
	 * only reports the T3412 (legacy) timer. We therefore needs to check
	 * that as well. The legacy timer is only reported by modem fe >= 1.2.0.
	 */
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   1873e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18742:	d105      	bne.n	18750 <parse_psm+0x6c>
   18744:	b127      	cbz	r7, 18750 <parse_psm+0x6c>
   18746:	4638      	mov	r0, r7
   18748:	f7f8 fb6c 	bl	10e24 <strlen>
   1874c:	2808      	cmp	r0, #8
   1874e:	d036      	beq.n	187be <parse_psm+0xda>
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
	}

	/* Parse active time */
	memcpy(unit_str, active_time_str, unit_str_len);
   18750:	882a      	ldrh	r2, [r5, #0]
   18752:	78ab      	ldrb	r3, [r5, #2]
   18754:	f8ad 2004 	strh.w	r2, [sp, #4]
   18758:	f88d 3006 	strb.w	r3, [sp, #6]

	lut_idx = strtoul(unit_str, NULL, 2);
   1875c:	2202      	movs	r2, #2
   1875e:	2100      	movs	r1, #0
   18760:	a801      	add	r0, sp, #4
   18762:	f008 fbf7 	bl	20f54 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   18766:	2807      	cmp	r0, #7
   18768:	d858      	bhi.n	1881c <parse_psm+0x138>
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
	}

	timer_unit = t3324_lookup[lut_idx];
   1876a:	4b38      	ldr	r3, [pc, #224]	; (1884c <parse_psm+0x168>)
   1876c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   18770:	2202      	movs	r2, #2
   18772:	2100      	movs	r1, #0
   18774:	1ce8      	adds	r0, r5, #3
   18776:	f008 fbed 	bl	20f54 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1877a:	2c00      	cmp	r4, #0
   1877c:	d061      	beq.n	18842 <parse_psm+0x15e>
   1877e:	fb04 f000 	mul.w	r0, r4, r0
   18782:	6070      	str	r0, [r6, #4]

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
   18784:	2000      	movs	r0, #0
}
   18786:	b002      	add	sp, #8
   18788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1878c:	f06f 0015 	mvn.w	r0, #21
   18790:	e7f9      	b.n	18786 <parse_psm+0xa2>
   18792:	4b2f      	ldr	r3, [pc, #188]	; (18850 <parse_psm+0x16c>)
   18794:	4a2f      	ldr	r2, [pc, #188]	; (18854 <parse_psm+0x170>)
   18796:	1a9b      	subs	r3, r3, r2
   18798:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   1879a:	f04f 0100 	mov.w	r1, #0
   1879e:	2201      	movs	r2, #1
   187a0:	f362 0102 	bfi	r1, r2, #0, #3
   187a4:	f36f 01c5 	bfc	r1, #3, #3
   187a8:	f363 118f 	bfi	r1, r3, #6, #10
   187ac:	482a      	ldr	r0, [pc, #168]	; (18858 <parse_psm+0x174>)
   187ae:	f7fa fc4d 	bl	1304c <log_0>
		return -EINVAL;
   187b2:	f06f 0015 	mvn.w	r0, #21
   187b6:	e7e6      	b.n	18786 <parse_psm+0xa2>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   187b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   187bc:	e7be      	b.n	1873c <parse_psm+0x58>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   187be:	883a      	ldrh	r2, [r7, #0]
   187c0:	78bb      	ldrb	r3, [r7, #2]
   187c2:	f8ad 2004 	strh.w	r2, [sp, #4]
   187c6:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   187ca:	2202      	movs	r2, #2
   187cc:	2100      	movs	r1, #0
   187ce:	a801      	add	r0, sp, #4
   187d0:	f008 fbc0 	bl	20f54 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   187d4:	2807      	cmp	r0, #7
   187d6:	d80e      	bhi.n	187f6 <parse_psm+0x112>
		timer_unit = t3412_lookup[lut_idx];
   187d8:	4b20      	ldr	r3, [pc, #128]	; (1885c <parse_psm+0x178>)
   187da:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   187de:	2202      	movs	r2, #2
   187e0:	2100      	movs	r1, #0
   187e2:	1cf8      	adds	r0, r7, #3
   187e4:	f008 fbb6 	bl	20f54 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   187e8:	f1b8 0f00 	cmp.w	r8, #0
   187ec:	d001      	beq.n	187f2 <parse_psm+0x10e>
   187ee:	fb00 f408 	mul.w	r4, r0, r8
   187f2:	6034      	str	r4, [r6, #0]
   187f4:	e7ac      	b.n	18750 <parse_psm+0x6c>
   187f6:	4b16      	ldr	r3, [pc, #88]	; (18850 <parse_psm+0x16c>)
   187f8:	4a16      	ldr	r2, [pc, #88]	; (18854 <parse_psm+0x170>)
   187fa:	1a9b      	subs	r3, r3, r2
   187fc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   187fe:	f04f 0100 	mov.w	r1, #0
   18802:	2201      	movs	r2, #1
   18804:	f362 0102 	bfi	r1, r2, #0, #3
   18808:	f36f 01c5 	bfc	r1, #3, #3
   1880c:	f363 118f 	bfi	r1, r3, #6, #10
   18810:	4813      	ldr	r0, [pc, #76]	; (18860 <parse_psm+0x17c>)
   18812:	f7fa fc1b 	bl	1304c <log_0>
			return -EINVAL;
   18816:	f06f 0015 	mvn.w	r0, #21
   1881a:	e7b4      	b.n	18786 <parse_psm+0xa2>
   1881c:	4b0c      	ldr	r3, [pc, #48]	; (18850 <parse_psm+0x16c>)
   1881e:	4a0d      	ldr	r2, [pc, #52]	; (18854 <parse_psm+0x170>)
   18820:	1a9b      	subs	r3, r3, r2
   18822:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to parse active time string");
   18824:	f04f 0100 	mov.w	r1, #0
   18828:	2201      	movs	r2, #1
   1882a:	f362 0102 	bfi	r1, r2, #0, #3
   1882e:	f36f 01c5 	bfc	r1, #3, #3
   18832:	f363 118f 	bfi	r1, r3, #6, #10
   18836:	480b      	ldr	r0, [pc, #44]	; (18864 <parse_psm+0x180>)
   18838:	f7fa fc08 	bl	1304c <log_0>
		return -EINVAL;
   1883c:	f06f 0015 	mvn.w	r0, #21
   18840:	e7a1      	b.n	18786 <parse_psm+0xa2>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   18842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18846:	e79c      	b.n	18782 <parse_psm+0x9e>
   18848:	000296bc 	.word	0x000296bc
   1884c:	0002969c 	.word	0x0002969c
   18850:	00027148 	.word	0x00027148
   18854:	00027108 	.word	0x00027108
   18858:	00029288 	.word	0x00029288
   1885c:	000296dc 	.word	0x000296dc
   18860:	000292c0 	.word	0x000292c0
   18864:	000292ec 	.word	0x000292ec

00018868 <parse_rrc_mode>:
 * @return Zero on success or (negative) error code otherwise.
 */
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
   18868:	b5f0      	push	{r4, r5, r6, r7, lr}
   1886a:	b085      	sub	sp, #20
   1886c:	4605      	mov	r5, r0
   1886e:	460f      	mov	r7, r1
   18870:	4616      	mov	r6, r2
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   18872:	2300      	movs	r3, #0
   18874:	9301      	str	r3, [sp, #4]
   18876:	9302      	str	r3, [sp, #8]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   18878:	2104      	movs	r1, #4
   1887a:	eb0d 0001 	add.w	r0, sp, r1
   1887e:	f00b fd8c 	bl	2439a <at_params_list_init>
	if (err) {
   18882:	b998      	cbnz	r0, 188ac <parse_rrc_mode+0x44>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   18884:	aa01      	add	r2, sp, #4
   18886:	2100      	movs	r1, #0
   18888:	4628      	mov	r0, r5
   1888a:	f00b fd55 	bl	24338 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1888e:	4604      	mov	r4, r0
   18890:	b9f8      	cbnz	r0, 188d2 <parse_rrc_mode+0x6a>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
		goto clean_exit;
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   18892:	aa03      	add	r2, sp, #12
   18894:	4631      	mov	r1, r6
   18896:	a801      	add	r0, sp, #4
   18898:	f00b fe9a 	bl	245d0 <at_params_int_get>
	if (err) {
   1889c:	4604      	mov	r4, r0
   1889e:	bb78      	cbnz	r0, 18900 <parse_rrc_mode+0x98>
		LOG_ERR("Could not get signalling mode, error: %d", err);
		goto clean_exit;
	}

	/* Check if the parsed value maps to a valid registration status */
	if (temp_mode == 0) {
   188a0:	9903      	ldr	r1, [sp, #12]
   188a2:	2900      	cmp	r1, #0
   188a4:	d13e      	bne.n	18924 <parse_rrc_mode+0xbc>
		*mode = LTE_LC_RRC_MODE_IDLE;
   188a6:	2300      	movs	r3, #0
   188a8:	703b      	strb	r3, [r7, #0]
   188aa:	e023      	b.n	188f4 <parse_rrc_mode+0x8c>
   188ac:	4604      	mov	r4, r0
   188ae:	4b29      	ldr	r3, [pc, #164]	; (18954 <parse_rrc_mode+0xec>)
   188b0:	4a29      	ldr	r2, [pc, #164]	; (18958 <parse_rrc_mode+0xf0>)
   188b2:	1a9b      	subs	r3, r3, r2
   188b4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   188b6:	f04f 0200 	mov.w	r2, #0
   188ba:	2101      	movs	r1, #1
   188bc:	f361 0202 	bfi	r2, r1, #0, #3
   188c0:	f36f 02c5 	bfc	r2, #3, #3
   188c4:	f363 128f 	bfi	r2, r3, #6, #10
   188c8:	4601      	mov	r1, r0
   188ca:	4824      	ldr	r0, [pc, #144]	; (1895c <parse_rrc_mode+0xf4>)
   188cc:	f7fa fb2a 	bl	12f24 <log_1>
		return err;
   188d0:	e013      	b.n	188fa <parse_rrc_mode+0x92>
   188d2:	4b20      	ldr	r3, [pc, #128]	; (18954 <parse_rrc_mode+0xec>)
   188d4:	4a20      	ldr	r2, [pc, #128]	; (18958 <parse_rrc_mode+0xf0>)
   188d6:	1a9b      	subs	r3, r3, r2
   188d8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   188da:	f04f 0200 	mov.w	r2, #0
   188de:	2101      	movs	r1, #1
   188e0:	f361 0202 	bfi	r2, r1, #0, #3
   188e4:	f36f 02c5 	bfc	r2, #3, #3
   188e8:	f363 128f 	bfi	r2, r3, #6, #10
   188ec:	4601      	mov	r1, r0
   188ee:	481c      	ldr	r0, [pc, #112]	; (18960 <parse_rrc_mode+0xf8>)
   188f0:	f7fa fb18 	bl	12f24 <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   188f4:	a801      	add	r0, sp, #4
   188f6:	f00b fd79 	bl	243ec <at_params_list_free>

	return err;
}
   188fa:	4620      	mov	r0, r4
   188fc:	b005      	add	sp, #20
   188fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18900:	4b14      	ldr	r3, [pc, #80]	; (18954 <parse_rrc_mode+0xec>)
   18902:	4a15      	ldr	r2, [pc, #84]	; (18958 <parse_rrc_mode+0xf0>)
   18904:	1a9b      	subs	r3, r3, r2
   18906:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get signalling mode, error: %d", err);
   18908:	f04f 0200 	mov.w	r2, #0
   1890c:	2101      	movs	r1, #1
   1890e:	f361 0202 	bfi	r2, r1, #0, #3
   18912:	f36f 02c5 	bfc	r2, #3, #3
   18916:	f363 128f 	bfi	r2, r3, #6, #10
   1891a:	4601      	mov	r1, r0
   1891c:	4811      	ldr	r0, [pc, #68]	; (18964 <parse_rrc_mode+0xfc>)
   1891e:	f7fa fb01 	bl	12f24 <log_1>
		goto clean_exit;
   18922:	e7e7      	b.n	188f4 <parse_rrc_mode+0x8c>
	} else if (temp_mode == 1) {
   18924:	2901      	cmp	r1, #1
   18926:	d102      	bne.n	1892e <parse_rrc_mode+0xc6>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   18928:	2301      	movs	r3, #1
   1892a:	703b      	strb	r3, [r7, #0]
   1892c:	e7e2      	b.n	188f4 <parse_rrc_mode+0x8c>
   1892e:	4b09      	ldr	r3, [pc, #36]	; (18954 <parse_rrc_mode+0xec>)
   18930:	4a09      	ldr	r2, [pc, #36]	; (18958 <parse_rrc_mode+0xf0>)
   18932:	1a9b      	subs	r3, r3, r2
   18934:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   18936:	f04f 0200 	mov.w	r2, #0
   1893a:	2001      	movs	r0, #1
   1893c:	f360 0202 	bfi	r2, r0, #0, #3
   18940:	f36f 02c5 	bfc	r2, #3, #3
   18944:	f363 128f 	bfi	r2, r3, #6, #10
   18948:	4807      	ldr	r0, [pc, #28]	; (18968 <parse_rrc_mode+0x100>)
   1894a:	f7fa faeb 	bl	12f24 <log_1>
		err = -EINVAL;
   1894e:	f06f 0415 	mvn.w	r4, #21
   18952:	e7cf      	b.n	188f4 <parse_rrc_mode+0x8c>
   18954:	00027148 	.word	0x00027148
   18958:	00027108 	.word	0x00027108
   1895c:	00029148 	.word	0x00029148
   18960:	00029310 	.word	0x00029310
   18964:	0002933c 	.word	0x0002933c
   18968:	00029368 	.word	0x00029368

0001896c <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   1896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18970:	b08a      	sub	sp, #40	; 0x28
   18972:	4605      	mov	r5, r0
   18974:	460f      	mov	r7, r1
   18976:	4690      	mov	r8, r2
   18978:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1897a:	2400      	movs	r4, #0
   1897c:	9403      	str	r4, [sp, #12]
   1897e:	f8ad 4010 	strh.w	r4, [sp, #16]
   18982:	f88d 4012 	strb.w	r4, [sp, #18]
	size_t response_prefix_len = sizeof(response_prefix);
   18986:	2307      	movs	r3, #7
   18988:	9302      	str	r3, [sp, #8]
	size_t len = sizeof(str_buf) - 1;
   1898a:	2309      	movs	r3, #9
   1898c:	9301      	str	r3, [sp, #4]

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1898e:	210b      	movs	r1, #11
   18990:	a808      	add	r0, sp, #32
   18992:	f00b fd02 	bl	2439a <at_params_list_init>
	if (err) {
   18996:	2800      	cmp	r0, #0
   18998:	d140      	bne.n	18a1c <parse_cereg+0xb0>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEREG response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1899a:	aa08      	add	r2, sp, #32
   1899c:	2100      	movs	r1, #0
   1899e:	4628      	mov	r0, r5
   189a0:	f00b fcca 	bl	24338 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   189a4:	4604      	mov	r4, r0
   189a6:	2800      	cmp	r0, #0
   189a8:	d14b      	bne.n	18a42 <parse_cereg+0xd6>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with +CEREG */
	err = at_params_string_get(&resp_list,
   189aa:	ab02      	add	r3, sp, #8
   189ac:	aa03      	add	r2, sp, #12
   189ae:	2100      	movs	r1, #0
   189b0:	a808      	add	r0, sp, #32
   189b2:	f00b fe59 	bl	24668 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   189b6:	4604      	mov	r4, r0
   189b8:	2800      	cmp	r0, #0
   189ba:	d15a      	bne.n	18a72 <parse_cereg+0x106>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   189bc:	4a72      	ldr	r2, [pc, #456]	; (18b88 <parse_cereg+0x21c>)
   189be:	9902      	ldr	r1, [sp, #8]
   189c0:	a803      	add	r0, sp, #12
   189c2:	f7ff fd33 	bl	1842c <response_is_valid>
   189c6:	2800      	cmp	r0, #0
   189c8:	d04c      	beq.n	18a64 <parse_cereg+0xf8>
		LOG_DBG("Not a valid CEREG response");
		goto clean_exit;
	}

	/* Get network registration status */
	status = get_nw_reg_status(&resp_list, is_notif);
   189ca:	4639      	mov	r1, r7
   189cc:	a808      	add	r0, sp, #32
   189ce:	f7ff fc8f 	bl	182f0 <get_nw_reg_status>
	if (status < 0) {
   189d2:	1e05      	subs	r5, r0, #0
   189d4:	db5f      	blt.n	18a96 <parse_cereg+0x12a>
		LOG_ERR("Could not get registration status, error: %d", status);
		err = status;
		goto clean_exit;
	}

	if (reg_status) {
   189d6:	f1b8 0f00 	cmp.w	r8, #0
   189da:	d001      	beq.n	189e0 <parse_cereg+0x74>
		*reg_status = status;
   189dc:	f888 5000 	strb.w	r5, [r8]

		LOG_DBG("Network registration status: %d", *reg_status);
	}


	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   189e0:	b10e      	cbz	r6, 189e6 <parse_cereg+0x7a>
   189e2:	2d5a      	cmp	r5, #90	; 0x5a
   189e4:	d16a      	bne.n	18abc <parse_cereg+0x150>
			goto clean_exit;
		}

		str_buf[len] = '\0';
		cell->id = strtoul(str_buf, NULL, 16);
	} else if (cell) {
   189e6:	2e00      	cmp	r6, #0
   189e8:	f000 80c2 	beq.w	18b70 <parse_cereg+0x204>
		cell->tac = UINT32_MAX;
   189ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   189f0:	60f3      	str	r3, [r6, #12]
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   189f2:	60b3      	str	r3, [r6, #8]
	err = at_params_string_get(&resp_list,
   189f4:	4625      	mov	r5, r4
	}

	if (lte_mode) {
   189f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   189f8:	2b00      	cmp	r3, #0
   189fa:	f000 80c2 	beq.w	18b82 <parse_cereg+0x216>
		int mode;

		/* Get currently active LTE mode. */
		err = at_params_int_get(&resp_list,
   189fe:	2f00      	cmp	r7, #0
   18a00:	f000 80b8 	beq.w	18b74 <parse_cereg+0x208>
   18a04:	2104      	movs	r1, #4
   18a06:	466a      	mov	r2, sp
   18a08:	a808      	add	r0, sp, #32
   18a0a:	f00b fde1 	bl	245d0 <at_params_int_get>
				is_notif ? AT_CEREG_ACT_INDEX :
					   AT_CEREG_READ_ACT_INDEX,
				&mode);
		if (err) {
   18a0e:	2800      	cmp	r0, #0
   18a10:	f000 80b2 	beq.w	18b78 <parse_cereg+0x20c>
			LOG_DBG("LTE mode not found, error code: %d", err);
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   18a14:	2300      	movs	r3, #0
   18a16:	9a10      	ldr	r2, [sp, #64]	; 0x40
   18a18:	7013      	strb	r3, [r2, #0]

			/* This is not an error that should be returned, as it's
			 * expected in some situations that LTE mode is not
			 * available.
			 */
			err = 0;
   18a1a:	e023      	b.n	18a64 <parse_cereg+0xf8>
   18a1c:	4604      	mov	r4, r0
   18a1e:	4b5b      	ldr	r3, [pc, #364]	; (18b8c <parse_cereg+0x220>)
   18a20:	4a5b      	ldr	r2, [pc, #364]	; (18b90 <parse_cereg+0x224>)
   18a22:	1a9b      	subs	r3, r3, r2
   18a24:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   18a26:	f04f 0200 	mov.w	r2, #0
   18a2a:	2101      	movs	r1, #1
   18a2c:	f361 0202 	bfi	r2, r1, #0, #3
   18a30:	f36f 02c5 	bfc	r2, #3, #3
   18a34:	f363 128f 	bfi	r2, r3, #6, #10
   18a38:	4601      	mov	r1, r0
   18a3a:	4856      	ldr	r0, [pc, #344]	; (18b94 <parse_cereg+0x228>)
   18a3c:	f7fa fa72 	bl	12f24 <log_1>
		return err;
   18a40:	e013      	b.n	18a6a <parse_cereg+0xfe>
   18a42:	4b52      	ldr	r3, [pc, #328]	; (18b8c <parse_cereg+0x220>)
   18a44:	4a52      	ldr	r2, [pc, #328]	; (18b90 <parse_cereg+0x224>)
   18a46:	1a9b      	subs	r3, r3, r2
   18a48:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   18a4a:	f04f 0200 	mov.w	r2, #0
   18a4e:	2101      	movs	r1, #1
   18a50:	f361 0202 	bfi	r2, r1, #0, #3
   18a54:	f36f 02c5 	bfc	r2, #3, #3
   18a58:	f363 128f 	bfi	r2, r3, #6, #10
   18a5c:	4601      	mov	r1, r0
   18a5e:	484e      	ldr	r0, [pc, #312]	; (18b98 <parse_cereg+0x22c>)
   18a60:	f7fa fa60 	bl	12f24 <log_1>
			LOG_DBG("LTE mode: %d", *lte_mode);
		}
	}

clean_exit:
	at_params_list_free(&resp_list);
   18a64:	a808      	add	r0, sp, #32
   18a66:	f00b fcc1 	bl	243ec <at_params_list_free>

	return err;
}
   18a6a:	4620      	mov	r0, r4
   18a6c:	b00a      	add	sp, #40	; 0x28
   18a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18a72:	4b46      	ldr	r3, [pc, #280]	; (18b8c <parse_cereg+0x220>)
   18a74:	4a46      	ldr	r2, [pc, #280]	; (18b90 <parse_cereg+0x224>)
   18a76:	1a9b      	subs	r3, r3, r2
   18a78:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get response prefix, error: %d", err);
   18a7a:	f04f 0200 	mov.w	r2, #0
   18a7e:	2101      	movs	r1, #1
   18a80:	f361 0202 	bfi	r2, r1, #0, #3
   18a84:	f36f 02c5 	bfc	r2, #3, #3
   18a88:	f363 128f 	bfi	r2, r3, #6, #10
   18a8c:	4601      	mov	r1, r0
   18a8e:	4843      	ldr	r0, [pc, #268]	; (18b9c <parse_cereg+0x230>)
   18a90:	f7fa fa48 	bl	12f24 <log_1>
		goto clean_exit;
   18a94:	e7e6      	b.n	18a64 <parse_cereg+0xf8>
   18a96:	4b3d      	ldr	r3, [pc, #244]	; (18b8c <parse_cereg+0x220>)
   18a98:	4a3d      	ldr	r2, [pc, #244]	; (18b90 <parse_cereg+0x224>)
   18a9a:	1a9b      	subs	r3, r3, r2
   18a9c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get registration status, error: %d", status);
   18a9e:	f04f 0200 	mov.w	r2, #0
   18aa2:	2101      	movs	r1, #1
   18aa4:	f361 0202 	bfi	r2, r1, #0, #3
   18aa8:	f36f 02c5 	bfc	r2, #3, #3
   18aac:	f363 128f 	bfi	r2, r3, #6, #10
   18ab0:	4629      	mov	r1, r5
   18ab2:	483b      	ldr	r0, [pc, #236]	; (18ba0 <parse_cereg+0x234>)
   18ab4:	f7fa fa36 	bl	12f24 <log_1>
		err = status;
   18ab8:	462c      	mov	r4, r5
		goto clean_exit;
   18aba:	e7d3      	b.n	18a64 <parse_cereg+0xf8>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   18abc:	a808      	add	r0, sp, #32
   18abe:	f00b fe05 	bl	246cc <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   18ac2:	2803      	cmp	r0, #3
   18ac4:	d98f      	bls.n	189e6 <parse_cereg+0x7a>
		err = at_params_string_get(
   18ac6:	b34f      	cbz	r7, 18b1c <parse_cereg+0x1b0>
   18ac8:	2102      	movs	r1, #2
   18aca:	ab01      	add	r3, sp, #4
   18acc:	aa05      	add	r2, sp, #20
   18ace:	a808      	add	r0, sp, #32
   18ad0:	f00b fdca 	bl	24668 <at_params_string_get>
		if (err) {
   18ad4:	4605      	mov	r5, r0
   18ad6:	bb18      	cbnz	r0, 18b20 <parse_cereg+0x1b4>
		str_buf[len] = '\0';
   18ad8:	9b01      	ldr	r3, [sp, #4]
   18ada:	aa0a      	add	r2, sp, #40	; 0x28
   18adc:	4413      	add	r3, r2
   18ade:	2100      	movs	r1, #0
   18ae0:	f803 1c14 	strb.w	r1, [r3, #-20]
		cell->tac = strtoul(str_buf, NULL, 16);
   18ae4:	2210      	movs	r2, #16
   18ae6:	a805      	add	r0, sp, #20
   18ae8:	f008 fa34 	bl	20f54 <strtoul>
   18aec:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   18aee:	2309      	movs	r3, #9
   18af0:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   18af2:	b347      	cbz	r7, 18b46 <parse_cereg+0x1da>
   18af4:	2103      	movs	r1, #3
   18af6:	ab01      	add	r3, sp, #4
   18af8:	aa05      	add	r2, sp, #20
   18afa:	a808      	add	r0, sp, #32
   18afc:	f00b fdb4 	bl	24668 <at_params_string_get>
		if (err) {
   18b00:	4605      	mov	r5, r0
   18b02:	bb10      	cbnz	r0, 18b4a <parse_cereg+0x1de>
		str_buf[len] = '\0';
   18b04:	9b01      	ldr	r3, [sp, #4]
   18b06:	aa0a      	add	r2, sp, #40	; 0x28
   18b08:	4413      	add	r3, r2
   18b0a:	2100      	movs	r1, #0
   18b0c:	f803 1c14 	strb.w	r1, [r3, #-20]
		cell->id = strtoul(str_buf, NULL, 16);
   18b10:	2210      	movs	r2, #16
   18b12:	a805      	add	r0, sp, #20
   18b14:	f008 fa1e 	bl	20f54 <strtoul>
   18b18:	60b0      	str	r0, [r6, #8]
   18b1a:	e76c      	b.n	189f6 <parse_cereg+0x8a>
		err = at_params_string_get(
   18b1c:	2103      	movs	r1, #3
   18b1e:	e7d4      	b.n	18aca <parse_cereg+0x15e>
   18b20:	4b1a      	ldr	r3, [pc, #104]	; (18b8c <parse_cereg+0x220>)
   18b22:	4a1b      	ldr	r2, [pc, #108]	; (18b90 <parse_cereg+0x224>)
   18b24:	1a9b      	subs	r3, r3, r2
   18b26:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not get tracking area code, error: %d", err);
   18b28:	f04f 0200 	mov.w	r2, #0
   18b2c:	2101      	movs	r1, #1
   18b2e:	f361 0202 	bfi	r2, r1, #0, #3
   18b32:	f36f 02c5 	bfc	r2, #3, #3
   18b36:	f363 128f 	bfi	r2, r3, #6, #10
   18b3a:	4601      	mov	r1, r0
   18b3c:	4819      	ldr	r0, [pc, #100]	; (18ba4 <parse_cereg+0x238>)
   18b3e:	f7fa f9f1 	bl	12f24 <log_1>
		err = at_params_string_get(
   18b42:	462c      	mov	r4, r5
			goto clean_exit;
   18b44:	e78e      	b.n	18a64 <parse_cereg+0xf8>
		err = at_params_string_get(&resp_list,
   18b46:	2104      	movs	r1, #4
   18b48:	e7d5      	b.n	18af6 <parse_cereg+0x18a>
   18b4a:	4b10      	ldr	r3, [pc, #64]	; (18b8c <parse_cereg+0x220>)
   18b4c:	4a10      	ldr	r2, [pc, #64]	; (18b90 <parse_cereg+0x224>)
   18b4e:	1a9b      	subs	r3, r3, r2
   18b50:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not get cell ID, error: %d", err);
   18b52:	f04f 0200 	mov.w	r2, #0
   18b56:	2101      	movs	r1, #1
   18b58:	f361 0202 	bfi	r2, r1, #0, #3
   18b5c:	f36f 02c5 	bfc	r2, #3, #3
   18b60:	f363 128f 	bfi	r2, r3, #6, #10
   18b64:	4601      	mov	r1, r0
   18b66:	4810      	ldr	r0, [pc, #64]	; (18ba8 <parse_cereg+0x23c>)
   18b68:	f7fa f9dc 	bl	12f24 <log_1>
		err = at_params_string_get(&resp_list,
   18b6c:	462c      	mov	r4, r5
			goto clean_exit;
   18b6e:	e779      	b.n	18a64 <parse_cereg+0xf8>
	err = at_params_string_get(&resp_list,
   18b70:	4625      	mov	r5, r4
   18b72:	e740      	b.n	189f6 <parse_cereg+0x8a>
		err = at_params_int_get(&resp_list,
   18b74:	2105      	movs	r1, #5
   18b76:	e746      	b.n	18a06 <parse_cereg+0x9a>
			*lte_mode = mode;
   18b78:	9a00      	ldr	r2, [sp, #0]
   18b7a:	9910      	ldr	r1, [sp, #64]	; 0x40
   18b7c:	700a      	strb	r2, [r1, #0]
		err = at_params_int_get(&resp_list,
   18b7e:	4604      	mov	r4, r0
			LOG_DBG("LTE mode: %d", *lte_mode);
   18b80:	e770      	b.n	18a64 <parse_cereg+0xf8>
clean_exit:
   18b82:	462c      	mov	r4, r5
   18b84:	e76e      	b.n	18a64 <parse_cereg+0xf8>
   18b86:	bf00      	nop
   18b88:	00029080 	.word	0x00029080
   18b8c:	00027148 	.word	0x00027148
   18b90:	00027108 	.word	0x00027108
   18b94:	00029148 	.word	0x00029148
   18b98:	00029384 	.word	0x00029384
   18b9c:	000293b4 	.word	0x000293b4
   18ba0:	00028d2c 	.word	0x00028d2c
   18ba4:	000293e0 	.word	0x000293e0
   18ba8:	0002940c 	.word	0x0002940c

00018bac <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
   18bac:	b570      	push	{r4, r5, r6, lr}
   18bae:	b082      	sub	sp, #8
	int err;
	struct at_param_list resp_list = {0};
   18bb0:	2300      	movs	r3, #0
   18bb2:	9300      	str	r3, [sp, #0]
   18bb4:	9301      	str	r3, [sp, #4]

	if (time == NULL || at_response == NULL) {
   18bb6:	2900      	cmp	r1, #0
   18bb8:	d06e      	beq.n	18c98 <parse_xt3412+0xec>
   18bba:	4604      	mov	r4, r0
   18bbc:	460e      	mov	r6, r1
   18bbe:	2800      	cmp	r0, #0
   18bc0:	d06d      	beq.n	18c9e <parse_xt3412+0xf2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   18bc2:	2104      	movs	r1, #4
   18bc4:	4668      	mov	r0, sp
   18bc6:	f00b fbe8 	bl	2439a <at_params_list_init>
	if (err) {
   18bca:	4605      	mov	r5, r0
   18bcc:	b9d8      	cbnz	r0, 18c06 <parse_xt3412+0x5a>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse XT3412 response and populate AT parameter list */
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   18bce:	466a      	mov	r2, sp
   18bd0:	2100      	movs	r1, #0
   18bd2:	4620      	mov	r0, r4
   18bd4:	f00b fbb0 	bl	24338 <at_parser_params_from_str>
	if (err) {
   18bd8:	4605      	mov	r5, r0
   18bda:	bb30      	cbnz	r0, 18c2a <parse_xt3412+0x7e>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
		goto clean_exit;
	}

	/* Get the remaining time of T3412 from the response */
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   18bdc:	4632      	mov	r2, r6
   18bde:	2102      	movs	r1, #2
   18be0:	4668      	mov	r0, sp
   18be2:	f00b fd20 	bl	24626 <at_params_int64_get>
	if (err) {
   18be6:	4605      	mov	r5, r0
   18be8:	bb88      	cbnz	r0, 18c4e <parse_xt3412+0xa2>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
		goto clean_exit;
	}

	if ((*time > T3412_MAX) || *time < 0) {
   18bea:	e9d6 2300 	ldrd	r2, r3, [r6]
   18bee:	482d      	ldr	r0, [pc, #180]	; (18ca4 <parse_xt3412+0xf8>)
   18bf0:	2108      	movs	r1, #8
   18bf2:	4299      	cmp	r1, r3
   18bf4:	bf08      	it	eq
   18bf6:	4290      	cmpeq	r0, r2
   18bf8:	d33b      	bcc.n	18c72 <parse_xt3412+0xc6>
		LOG_WRN("Parsed time parameter not within valid range");
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   18bfa:	4668      	mov	r0, sp
   18bfc:	f00b fbf6 	bl	243ec <at_params_list_free>
	return err;
}
   18c00:	4628      	mov	r0, r5
   18c02:	b002      	add	sp, #8
   18c04:	bd70      	pop	{r4, r5, r6, pc}
   18c06:	4b28      	ldr	r3, [pc, #160]	; (18ca8 <parse_xt3412+0xfc>)
   18c08:	4a28      	ldr	r2, [pc, #160]	; (18cac <parse_xt3412+0x100>)
   18c0a:	1a9b      	subs	r3, r3, r2
   18c0c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   18c0e:	f04f 0200 	mov.w	r2, #0
   18c12:	2101      	movs	r1, #1
   18c14:	f361 0202 	bfi	r2, r1, #0, #3
   18c18:	f36f 02c5 	bfc	r2, #3, #3
   18c1c:	f363 128f 	bfi	r2, r3, #6, #10
   18c20:	4601      	mov	r1, r0
   18c22:	4823      	ldr	r0, [pc, #140]	; (18cb0 <parse_xt3412+0x104>)
   18c24:	f7fa f97e 	bl	12f24 <log_1>
		return err;
   18c28:	e7ea      	b.n	18c00 <parse_xt3412+0x54>
   18c2a:	4b1f      	ldr	r3, [pc, #124]	; (18ca8 <parse_xt3412+0xfc>)
   18c2c:	4a1f      	ldr	r2, [pc, #124]	; (18cac <parse_xt3412+0x100>)
   18c2e:	1a9b      	subs	r3, r3, r2
   18c30:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   18c32:	f04f 0200 	mov.w	r2, #0
   18c36:	2101      	movs	r1, #1
   18c38:	f361 0202 	bfi	r2, r1, #0, #3
   18c3c:	f36f 02c5 	bfc	r2, #3, #3
   18c40:	f363 128f 	bfi	r2, r3, #6, #10
   18c44:	4601      	mov	r1, r0
   18c46:	481b      	ldr	r0, [pc, #108]	; (18cb4 <parse_xt3412+0x108>)
   18c48:	f7fa f96c 	bl	12f24 <log_1>
		goto clean_exit;
   18c4c:	e7d5      	b.n	18bfa <parse_xt3412+0x4e>
   18c4e:	4b16      	ldr	r3, [pc, #88]	; (18ca8 <parse_xt3412+0xfc>)
   18c50:	4a16      	ldr	r2, [pc, #88]	; (18cac <parse_xt3412+0x100>)
   18c52:	1a9b      	subs	r3, r3, r2
   18c54:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   18c56:	f04f 0200 	mov.w	r2, #0
   18c5a:	2101      	movs	r1, #1
   18c5c:	f361 0202 	bfi	r2, r1, #0, #3
   18c60:	f36f 02c5 	bfc	r2, #3, #3
   18c64:	f363 128f 	bfi	r2, r3, #6, #10
   18c68:	4601      	mov	r1, r0
   18c6a:	4813      	ldr	r0, [pc, #76]	; (18cb8 <parse_xt3412+0x10c>)
   18c6c:	f7fa f95a 	bl	12f24 <log_1>
		goto clean_exit;
   18c70:	e7c3      	b.n	18bfa <parse_xt3412+0x4e>
   18c72:	4b0d      	ldr	r3, [pc, #52]	; (18ca8 <parse_xt3412+0xfc>)
   18c74:	4a0d      	ldr	r2, [pc, #52]	; (18cac <parse_xt3412+0x100>)
   18c76:	1a9b      	subs	r3, r3, r2
   18c78:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Parsed time parameter not within valid range");
   18c7a:	f04f 0100 	mov.w	r1, #0
   18c7e:	2202      	movs	r2, #2
   18c80:	f362 0102 	bfi	r1, r2, #0, #3
   18c84:	f36f 01c5 	bfc	r1, #3, #3
   18c88:	f363 118f 	bfi	r1, r3, #6, #10
   18c8c:	480b      	ldr	r0, [pc, #44]	; (18cbc <parse_xt3412+0x110>)
   18c8e:	f7fa f9dd 	bl	1304c <log_0>
		err = -EINVAL;
   18c92:	f06f 0515 	mvn.w	r5, #21
   18c96:	e7b0      	b.n	18bfa <parse_xt3412+0x4e>
		return -EINVAL;
   18c98:	f06f 0515 	mvn.w	r5, #21
   18c9c:	e7b0      	b.n	18c00 <parse_xt3412+0x54>
   18c9e:	f06f 0515 	mvn.w	r5, #21
   18ca2:	e7ad      	b.n	18c00 <parse_xt3412+0x54>
   18ca4:	5099e000 	.word	0x5099e000
   18ca8:	00027148 	.word	0x00027148
   18cac:	00027108 	.word	0x00027108
   18cb0:	00029148 	.word	0x00029148
   18cb4:	00029430 	.word	0x00029430
   18cb8:	00029460 	.word	0x00029460
   18cbc:	00029490 	.word	0x00029490

00018cc0 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   18cc0:	b508      	push	{r3, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   18cc2:	b150      	cbz	r0, 18cda <neighborcell_count_get+0x1a>
		LOG_ERR("at_response is NULL, can't get cell count");
		return 0;
	}

	comma_count = get_char_frequency(at_response, ',');
   18cc4:	212c      	movs	r1, #44	; 0x2c
   18cc6:	f00b fd37 	bl	24738 <get_char_frequency>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   18cca:	280a      	cmp	r0, #10
   18ccc:	d917      	bls.n	18cfe <neighborcell_count_get+0x3e>
		return 0;
	}

	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   18cce:	3809      	subs	r0, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   18cd0:	4b0c      	ldr	r3, [pc, #48]	; (18d04 <neighborcell_count_get+0x44>)
   18cd2:	fba3 3000 	umull	r3, r0, r3, r0
   18cd6:	0880      	lsrs	r0, r0, #2

	return ncell_count;
}
   18cd8:	bd08      	pop	{r3, pc}
   18cda:	4b0b      	ldr	r3, [pc, #44]	; (18d08 <neighborcell_count_get+0x48>)
   18cdc:	4a0b      	ldr	r2, [pc, #44]	; (18d0c <neighborcell_count_get+0x4c>)
   18cde:	1a9b      	subs	r3, r3, r2
   18ce0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("at_response is NULL, can't get cell count");
   18ce2:	f04f 0100 	mov.w	r1, #0
   18ce6:	2201      	movs	r2, #1
   18ce8:	f362 0102 	bfi	r1, r2, #0, #3
   18cec:	f36f 01c5 	bfc	r1, #3, #3
   18cf0:	f363 118f 	bfi	r1, r3, #6, #10
   18cf4:	4806      	ldr	r0, [pc, #24]	; (18d10 <neighborcell_count_get+0x50>)
   18cf6:	f7fa f9a9 	bl	1304c <log_0>
		return 0;
   18cfa:	2000      	movs	r0, #0
   18cfc:	e7ec      	b.n	18cd8 <neighborcell_count_get+0x18>
		return 0;
   18cfe:	2000      	movs	r0, #0
   18d00:	e7ea      	b.n	18cd8 <neighborcell_count_get+0x18>
   18d02:	bf00      	nop
   18d04:	cccccccd 	.word	0xcccccccd
   18d08:	00027148 	.word	0x00027148
   18d0c:	00027108 	.word	0x00027108
   18d10:	000294c0 	.word	0x000294c0

00018d14 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   18d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18d18:	b08d      	sub	sp, #52	; 0x34
   18d1a:	4606      	mov	r6, r0
   18d1c:	460d      	mov	r5, r1
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   18d1e:	2400      	movs	r4, #0
   18d20:	9404      	str	r4, [sp, #16]
   18d22:	9405      	str	r4, [sp, #20]
   18d24:	f8cd 4017 	str.w	r4, [sp, #23]
	size_t response_prefix_len = sizeof(response_prefix);
   18d28:	230b      	movs	r3, #11
   18d2a:	9303      	str	r3, [sp, #12]
	 * allocating heap for it. This may save quite a bit of heap as the
	 * worst case scenario is 96 elements.
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   18d2c:	212c      	movs	r1, #44	; 0x2c
   18d2e:	f00b fd03 	bl	24738 <get_char_frequency>

	cells->ncells_count = 0;
   18d32:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   18d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d3a:	60ab      	str	r3, [r5, #8]

	err = at_params_list_init(&resp_list, param_count);
   18d3c:	1cc1      	adds	r1, r0, #3
   18d3e:	a807      	add	r0, sp, #28
   18d40:	f00b fb2b 	bl	2439a <at_params_list_init>
	if (err) {
   18d44:	bb50      	cbnz	r0, 18d9c <parse_ncellmeas+0x88>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_params_from_str(at_response,
   18d46:	aa07      	add	r2, sp, #28
   18d48:	2100      	movs	r1, #0
   18d4a:	4630      	mov	r0, r6
   18d4c:	f00b faf4 	bl	24338 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err && err != -E2BIG) {
   18d50:	4604      	mov	r4, r0
   18d52:	b110      	cbz	r0, 18d5a <parse_ncellmeas+0x46>
   18d54:	f110 0f07 	cmn.w	r0, #7
   18d58:	d133      	bne.n	18dc2 <parse_ncellmeas+0xae>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
		goto clean_exit;
	} else if (err == -E2BIG) {
   18d5a:	f114 0f07 	cmn.w	r4, #7
   18d5e:	d042      	beq.n	18de6 <parse_ncellmeas+0xd2>
	bool incomplete = false;
   18d60:	2700      	movs	r7, #0
		incomplete = true;
	}

	err = at_params_string_get(&resp_list,
   18d62:	ab03      	add	r3, sp, #12
   18d64:	aa04      	add	r2, sp, #16
   18d66:	2100      	movs	r1, #0
   18d68:	a807      	add	r0, sp, #28
   18d6a:	f00b fc7d 	bl	24668 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   18d6e:	4604      	mov	r4, r0
   18d70:	2800      	cmp	r0, #0
   18d72:	d13a      	bne.n	18dea <parse_ncellmeas+0xd6>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   18d74:	4aa3      	ldr	r2, [pc, #652]	; (19004 <parse_ncellmeas+0x2f0>)
   18d76:	9903      	ldr	r1, [sp, #12]
   18d78:	a804      	add	r0, sp, #16
   18d7a:	f7ff fb57 	bl	1842c <response_is_valid>
   18d7e:	2800      	cmp	r0, #0
   18d80:	d044      	beq.n	18e0c <parse_ncellmeas+0xf8>
		LOG_DBG("Not a valid NCELLMEAS response");
		goto clean_exit;
	}

	/* Status code. */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   18d82:	aa0b      	add	r2, sp, #44	; 0x2c
   18d84:	2101      	movs	r1, #1
   18d86:	a807      	add	r0, sp, #28
   18d88:	f00b fc22 	bl	245d0 <at_params_int_get>
	if (err) {
   18d8c:	4604      	mov	r4, r0
   18d8e:	2800      	cmp	r0, #0
   18d90:	d13c      	bne.n	18e0c <parse_ncellmeas+0xf8>
		goto clean_exit;
	}

	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   18d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18d94:	2b00      	cmp	r3, #0
   18d96:	d040      	beq.n	18e1a <parse_ncellmeas+0x106>
		err = 1;
   18d98:	2401      	movs	r4, #1
   18d9a:	e037      	b.n	18e0c <parse_ncellmeas+0xf8>
   18d9c:	4604      	mov	r4, r0
   18d9e:	4b9a      	ldr	r3, [pc, #616]	; (19008 <parse_ncellmeas+0x2f4>)
   18da0:	4a9a      	ldr	r2, [pc, #616]	; (1900c <parse_ncellmeas+0x2f8>)
   18da2:	1a9b      	subs	r3, r3, r2
   18da4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   18da6:	f04f 0200 	mov.w	r2, #0
   18daa:	2101      	movs	r1, #1
   18dac:	f361 0202 	bfi	r2, r1, #0, #3
   18db0:	f36f 02c5 	bfc	r2, #3, #3
   18db4:	f363 128f 	bfi	r2, r3, #6, #10
   18db8:	4601      	mov	r1, r0
   18dba:	4895      	ldr	r0, [pc, #596]	; (19010 <parse_ncellmeas+0x2fc>)
   18dbc:	f7fa f8b2 	bl	12f24 <log_1>
		return err;
   18dc0:	e027      	b.n	18e12 <parse_ncellmeas+0xfe>
   18dc2:	4b91      	ldr	r3, [pc, #580]	; (19008 <parse_ncellmeas+0x2f4>)
   18dc4:	4a91      	ldr	r2, [pc, #580]	; (1900c <parse_ncellmeas+0x2f8>)
   18dc6:	1a9b      	subs	r3, r3, r2
   18dc8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   18dca:	f04f 0200 	mov.w	r2, #0
   18dce:	2101      	movs	r1, #1
   18dd0:	f361 0202 	bfi	r2, r1, #0, #3
   18dd4:	f36f 02c5 	bfc	r2, #3, #3
   18dd8:	f363 128f 	bfi	r2, r3, #6, #10
   18ddc:	4601      	mov	r1, r0
   18dde:	488d      	ldr	r0, [pc, #564]	; (19014 <parse_ncellmeas+0x300>)
   18de0:	f7fa f8a0 	bl	12f24 <log_1>
		goto clean_exit;
   18de4:	e012      	b.n	18e0c <parse_ncellmeas+0xf8>
		incomplete = true;
   18de6:	2701      	movs	r7, #1
   18de8:	e7bb      	b.n	18d62 <parse_ncellmeas+0x4e>
   18dea:	4b87      	ldr	r3, [pc, #540]	; (19008 <parse_ncellmeas+0x2f4>)
   18dec:	4a87      	ldr	r2, [pc, #540]	; (1900c <parse_ncellmeas+0x2f8>)
   18dee:	1a9b      	subs	r3, r3, r2
   18df0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get response prefix, error: %d", err);
   18df2:	f04f 0200 	mov.w	r2, #0
   18df6:	2101      	movs	r1, #1
   18df8:	f361 0202 	bfi	r2, r1, #0, #3
   18dfc:	f36f 02c5 	bfc	r2, #3, #3
   18e00:	f363 128f 	bfi	r2, r3, #6, #10
   18e04:	4601      	mov	r1, r0
   18e06:	4884      	ldr	r0, [pc, #528]	; (19018 <parse_ncellmeas+0x304>)
   18e08:	f7fa f88c 	bl	12f24 <log_1>
	if (incomplete) {
		err = -E2BIG;
	}

clean_exit:
	at_params_list_free(&resp_list);
   18e0c:	a807      	add	r0, sp, #28
   18e0e:	f00b faed 	bl	243ec <at_params_list_free>

	return err;
}
   18e12:	4620      	mov	r0, r4
   18e14:	b00d      	add	sp, #52	; 0x34
   18e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   18e1a:	2310      	movs	r3, #16
   18e1c:	aa0a      	add	r2, sp, #40	; 0x28
   18e1e:	2102      	movs	r1, #2
   18e20:	a807      	add	r0, sp, #28
   18e22:	f00b fcba 	bl	2479a <string_param_to_int>
	if (err) {
   18e26:	4604      	mov	r4, r0
   18e28:	2800      	cmp	r0, #0
   18e2a:	d1ef      	bne.n	18e0c <parse_ncellmeas+0xf8>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   18e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   18e32:	db02      	blt.n	18e3a <parse_ncellmeas+0x126>
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   18e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18e38:	930a      	str	r3, [sp, #40]	; 0x28
	cells->current_cell.id = tmp;
   18e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18e3c:	60ab      	str	r3, [r5, #8]
	len = sizeof(tmp_str);
   18e3e:	2307      	movs	r3, #7
   18e40:	9309      	str	r3, [sp, #36]	; 0x24
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   18e42:	ab09      	add	r3, sp, #36	; 0x24
   18e44:	aa01      	add	r2, sp, #4
   18e46:	2103      	movs	r1, #3
   18e48:	a807      	add	r0, sp, #28
   18e4a:	f00b fc0d 	bl	24668 <at_params_string_get>
	if (err) {
   18e4e:	4604      	mov	r4, r0
   18e50:	2800      	cmp	r0, #0
   18e52:	d1db      	bne.n	18e0c <parse_ncellmeas+0xf8>
	tmp_str[len] = '\0';
   18e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18e56:	aa0c      	add	r2, sp, #48	; 0x30
   18e58:	4413      	add	r3, r2
   18e5a:	2200      	movs	r2, #0
   18e5c:	f803 2c2c 	strb.w	r2, [r3, #-44]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   18e60:	1d2a      	adds	r2, r5, #4
   18e62:	210a      	movs	r1, #10
   18e64:	f10d 0007 	add.w	r0, sp, #7
   18e68:	f00b fc71 	bl	2474e <string_to_int>
	if (err) {
   18e6c:	4604      	mov	r4, r0
   18e6e:	2800      	cmp	r0, #0
   18e70:	d1cc      	bne.n	18e0c <parse_ncellmeas+0xf8>
	tmp_str[3] = '\0';
   18e72:	2300      	movs	r3, #0
   18e74:	f88d 3007 	strb.w	r3, [sp, #7]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   18e78:	462a      	mov	r2, r5
   18e7a:	210a      	movs	r1, #10
   18e7c:	a801      	add	r0, sp, #4
   18e7e:	f00b fc66 	bl	2474e <string_to_int>
	if (err) {
   18e82:	4604      	mov	r4, r0
   18e84:	2800      	cmp	r0, #0
   18e86:	d1c1      	bne.n	18e0c <parse_ncellmeas+0xf8>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   18e88:	2310      	movs	r3, #16
   18e8a:	aa0a      	add	r2, sp, #40	; 0x28
   18e8c:	2104      	movs	r1, #4
   18e8e:	a807      	add	r0, sp, #28
   18e90:	f00b fc83 	bl	2479a <string_param_to_int>
	if (err) {
   18e94:	4604      	mov	r4, r0
   18e96:	2800      	cmp	r0, #0
   18e98:	d1b8      	bne.n	18e0c <parse_ncellmeas+0xf8>
	cells->current_cell.tac = tmp;
   18e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18e9c:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   18e9e:	aa0a      	add	r2, sp, #40	; 0x28
   18ea0:	2105      	movs	r1, #5
   18ea2:	a807      	add	r0, sp, #28
   18ea4:	f00b fb94 	bl	245d0 <at_params_int_get>
	if (err) {
   18ea8:	4604      	mov	r4, r0
   18eaa:	2800      	cmp	r0, #0
   18eac:	d1ae      	bne.n	18e0c <parse_ncellmeas+0xf8>
	cells->current_cell.timing_advance = tmp;
   18eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18eb0:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   18eb2:	f105 0210 	add.w	r2, r5, #16
   18eb6:	2106      	movs	r1, #6
   18eb8:	a807      	add	r0, sp, #28
   18eba:	f00b fb89 	bl	245d0 <at_params_int_get>
	if (err) {
   18ebe:	4604      	mov	r4, r0
   18ec0:	2800      	cmp	r0, #0
   18ec2:	d1a3      	bne.n	18e0c <parse_ncellmeas+0xf8>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   18ec4:	f105 0228 	add.w	r2, r5, #40	; 0x28
   18ec8:	2107      	movs	r1, #7
   18eca:	a807      	add	r0, sp, #28
   18ecc:	f00b fb2b 	bl	24526 <at_params_short_get>
	if (err) {
   18ed0:	4604      	mov	r4, r0
   18ed2:	2800      	cmp	r0, #0
   18ed4:	d19a      	bne.n	18e0c <parse_ncellmeas+0xf8>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   18ed6:	aa0a      	add	r2, sp, #40	; 0x28
   18ed8:	2108      	movs	r1, #8
   18eda:	a807      	add	r0, sp, #28
   18edc:	f00b fb78 	bl	245d0 <at_params_int_get>
	if (err) {
   18ee0:	4604      	mov	r4, r0
   18ee2:	2800      	cmp	r0, #0
   18ee4:	d192      	bne.n	18e0c <parse_ncellmeas+0xf8>
	cells->current_cell.rsrp = tmp;
   18ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18ee8:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   18eea:	aa0a      	add	r2, sp, #40	; 0x28
   18eec:	2109      	movs	r1, #9
   18eee:	a807      	add	r0, sp, #28
   18ef0:	f00b fb6e 	bl	245d0 <at_params_int_get>
	if (err) {
   18ef4:	4604      	mov	r4, r0
   18ef6:	2800      	cmp	r0, #0
   18ef8:	d188      	bne.n	18e0c <parse_ncellmeas+0xf8>
	cells->current_cell.rsrq = tmp;
   18efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18efc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   18efe:	f105 0220 	add.w	r2, r5, #32
   18f02:	210a      	movs	r1, #10
   18f04:	a807      	add	r0, sp, #28
   18f06:	f00b fb8e 	bl	24626 <at_params_int64_get>
	if (err) {
   18f0a:	4604      	mov	r4, r0
   18f0c:	2800      	cmp	r0, #0
   18f0e:	f47f af7d 	bne.w	18e0c <parse_ncellmeas+0xf8>
	cells->ncells_count = neighborcell_count_get(at_response);
   18f12:	4630      	mov	r0, r6
   18f14:	f7ff fed4 	bl	18cc0 <neighborcell_count_get>
   18f18:	b2c3      	uxtb	r3, r0
   18f1a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   18f1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   18f22:	f103 060b 	add.w	r6, r3, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   18f26:	a807      	add	r0, sp, #28
   18f28:	f00b fbd0 	bl	246cc <at_params_valid_count_get>
   18f2c:	4286      	cmp	r6, r0
   18f2e:	d358      	bcc.n	18fe2 <parse_ncellmeas+0x2ce>
		cells->current_cell.timing_advance_meas_time = 0;
   18f30:	2200      	movs	r2, #0
   18f32:	2300      	movs	r3, #0
   18f34:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   18f38:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   18f3c:	2b00      	cmp	r3, #0
   18f3e:	f43f af65 	beq.w	18e0c <parse_ncellmeas+0xf8>
   18f42:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18f44:	2b00      	cmp	r3, #0
   18f46:	f43f af61 	beq.w	18e0c <parse_ncellmeas+0xf8>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   18f4a:	2600      	movs	r6, #0
   18f4c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   18f50:	429e      	cmp	r6, r3
   18f52:	d250      	bcs.n	18ff6 <parse_ncellmeas+0x2e2>
				   i * AT_NCELLMEAS_N_PARAMS_COUNT;
   18f54:	eb06 0886 	add.w	r8, r6, r6, lsl #2
					&cells->neighbor_cells[i].earfcn);
   18f58:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   18f5a:	ea4f 1906 	mov.w	r9, r6, lsl #4
		err = at_params_int_get(&resp_list,
   18f5e:	eb02 1206 	add.w	r2, r2, r6, lsl #4
   18f62:	f108 010b 	add.w	r1, r8, #11
   18f66:	a807      	add	r0, sp, #28
   18f68:	f00b fb32 	bl	245d0 <at_params_int_get>
		if (err) {
   18f6c:	4604      	mov	r4, r0
   18f6e:	2800      	cmp	r0, #0
   18f70:	f47f af4c 	bne.w	18e0c <parse_ncellmeas+0xf8>
					  &cells->neighbor_cells[i].phys_cell_id);
   18f74:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18f76:	444b      	add	r3, r9
		err = at_params_short_get(&resp_list,
   18f78:	f103 0208 	add.w	r2, r3, #8
   18f7c:	f108 010c 	add.w	r1, r8, #12
   18f80:	a807      	add	r0, sp, #28
   18f82:	f00b fad0 	bl	24526 <at_params_short_get>
		if (err) {
   18f86:	4604      	mov	r4, r0
   18f88:	2800      	cmp	r0, #0
   18f8a:	f47f af3f 	bne.w	18e0c <parse_ncellmeas+0xf8>
		err = at_params_int_get(&resp_list,
   18f8e:	aa0a      	add	r2, sp, #40	; 0x28
   18f90:	f108 010d 	add.w	r1, r8, #13
   18f94:	a807      	add	r0, sp, #28
   18f96:	f00b fb1b 	bl	245d0 <at_params_int_get>
		if (err) {
   18f9a:	4604      	mov	r4, r0
   18f9c:	2800      	cmp	r0, #0
   18f9e:	f47f af35 	bne.w	18e0c <parse_ncellmeas+0xf8>
		cells->neighbor_cells[i].rsrp = tmp;
   18fa2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18fa4:	444b      	add	r3, r9
   18fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18fa8:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   18faa:	aa0a      	add	r2, sp, #40	; 0x28
   18fac:	f108 010e 	add.w	r1, r8, #14
   18fb0:	a807      	add	r0, sp, #28
   18fb2:	f00b fb0d 	bl	245d0 <at_params_int_get>
		if (err) {
   18fb6:	4604      	mov	r4, r0
   18fb8:	2800      	cmp	r0, #0
   18fba:	f47f af27 	bne.w	18e0c <parse_ncellmeas+0xf8>
		cells->neighbor_cells[i].rsrq = tmp;
   18fbe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18fc0:	444b      	add	r3, r9
   18fc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18fc4:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   18fc6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18fc8:	444b      	add	r3, r9
		err = at_params_int_get(&resp_list,
   18fca:	1d1a      	adds	r2, r3, #4
   18fcc:	f108 010f 	add.w	r1, r8, #15
   18fd0:	a807      	add	r0, sp, #28
   18fd2:	f00b fafd 	bl	245d0 <at_params_int_get>
		if (err) {
   18fd6:	4604      	mov	r4, r0
   18fd8:	2800      	cmp	r0, #0
   18fda:	f47f af17 	bne.w	18e0c <parse_ncellmeas+0xf8>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   18fde:	3601      	adds	r6, #1
   18fe0:	e7b4      	b.n	18f4c <parse_ncellmeas+0x238>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   18fe2:	f105 0218 	add.w	r2, r5, #24
   18fe6:	4631      	mov	r1, r6
   18fe8:	a807      	add	r0, sp, #28
   18fea:	f00b fb1c 	bl	24626 <at_params_int64_get>
		if (err) {
   18fee:	4604      	mov	r4, r0
   18ff0:	2800      	cmp	r0, #0
   18ff2:	d0a1      	beq.n	18f38 <parse_ncellmeas+0x224>
   18ff4:	e70a      	b.n	18e0c <parse_ncellmeas+0xf8>
	if (incomplete) {
   18ff6:	2f00      	cmp	r7, #0
   18ff8:	f43f af08 	beq.w	18e0c <parse_ncellmeas+0xf8>
		err = -E2BIG;
   18ffc:	f06f 0406 	mvn.w	r4, #6
   19000:	e704      	b.n	18e0c <parse_ncellmeas+0xf8>
   19002:	bf00      	nop
   19004:	0002905c 	.word	0x0002905c
   19008:	00027148 	.word	0x00027148
   1900c:	00027108 	.word	0x00027108
   19010:	00029148 	.word	0x00029148
   19014:	000294ec 	.word	0x000294ec
   19018:	000293b4 	.word	0x000293b4

0001901c <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   1901c:	b570      	push	{r4, r5, r6, lr}
   1901e:	b084      	sub	sp, #16
	int err;
	struct at_param_list resp_list = {0};
   19020:	2300      	movs	r3, #0
   19022:	9302      	str	r3, [sp, #8]
   19024:	9303      	str	r3, [sp, #12]
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   19026:	2900      	cmp	r1, #0
   19028:	d07e      	beq.n	19128 <parse_xmodemsleep+0x10c>
   1902a:	4604      	mov	r4, r0
   1902c:	460e      	mov	r6, r1
   1902e:	2800      	cmp	r0, #0
   19030:	d07d      	beq.n	1912e <parse_xmodemsleep+0x112>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   19032:	2104      	movs	r1, #4
   19034:	a802      	add	r0, sp, #8
   19036:	f00b f9b0 	bl	2439a <at_params_list_init>
	if (err) {
   1903a:	4605      	mov	r5, r0
   1903c:	b9f0      	cbnz	r0, 1907c <parse_xmodemsleep+0x60>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse XMODEMSLEEP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1903e:	aa02      	add	r2, sp, #8
   19040:	2100      	movs	r1, #0
   19042:	4620      	mov	r0, r4
   19044:	f00b f978 	bl	24338 <at_parser_params_from_str>
	if (err) {
   19048:	4605      	mov	r5, r0
   1904a:	bb48      	cbnz	r0, 190a0 <parse_xmodemsleep+0x84>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   1904c:	f10d 0206 	add.w	r2, sp, #6
   19050:	2101      	movs	r1, #1
   19052:	a802      	add	r0, sp, #8
   19054:	f00b fa93 	bl	2457e <at_params_unsigned_short_get>
	if (err) {
   19058:	4605      	mov	r5, r0
   1905a:	2800      	cmp	r0, #0
   1905c:	d137      	bne.n	190ce <parse_xmodemsleep+0xb2>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
		goto clean_exit;
	}
	modem_sleep->type = type;
   1905e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19062:	7033      	strb	r3, [r6, #0]

	/* If the time parameter is not present sleep time is considered infinite. */
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   19064:	a802      	add	r0, sp, #8
   19066:	f00b fb31 	bl	246cc <at_params_valid_count_get>
   1906a:	2802      	cmp	r0, #2
   1906c:	d841      	bhi.n	190f2 <parse_xmodemsleep+0xd6>
		modem_sleep->time = -1;
   1906e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19076:	e9c6 2302 	strd	r2, r3, [r6, #8]
		goto clean_exit;
   1907a:	e022      	b.n	190c2 <parse_xmodemsleep+0xa6>
   1907c:	4b2d      	ldr	r3, [pc, #180]	; (19134 <parse_xmodemsleep+0x118>)
   1907e:	4a2e      	ldr	r2, [pc, #184]	; (19138 <parse_xmodemsleep+0x11c>)
   19080:	1a9b      	subs	r3, r3, r2
   19082:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   19084:	f04f 0200 	mov.w	r2, #0
   19088:	2101      	movs	r1, #1
   1908a:	f361 0202 	bfi	r2, r1, #0, #3
   1908e:	f36f 02c5 	bfc	r2, #3, #3
   19092:	f363 128f 	bfi	r2, r3, #6, #10
   19096:	4601      	mov	r1, r0
   19098:	4828      	ldr	r0, [pc, #160]	; (1913c <parse_xmodemsleep+0x120>)
   1909a:	f7f9 ff43 	bl	12f24 <log_1>
		return err;
   1909e:	e013      	b.n	190c8 <parse_xmodemsleep+0xac>
   190a0:	4b24      	ldr	r3, [pc, #144]	; (19134 <parse_xmodemsleep+0x118>)
   190a2:	4a25      	ldr	r2, [pc, #148]	; (19138 <parse_xmodemsleep+0x11c>)
   190a4:	1a9b      	subs	r3, r3, r2
   190a6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   190a8:	f04f 0200 	mov.w	r2, #0
   190ac:	2101      	movs	r1, #1
   190ae:	f361 0202 	bfi	r2, r1, #0, #3
   190b2:	f36f 02c5 	bfc	r2, #3, #3
   190b6:	f363 128f 	bfi	r2, r3, #6, #10
   190ba:	4601      	mov	r1, r0
   190bc:	4820      	ldr	r0, [pc, #128]	; (19140 <parse_xmodemsleep+0x124>)
   190be:	f7f9 ff31 	bl	12f24 <log_1>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
		goto clean_exit;
	}

clean_exit:
	at_params_list_free(&resp_list);
   190c2:	a802      	add	r0, sp, #8
   190c4:	f00b f992 	bl	243ec <at_params_list_free>
	return err;
}
   190c8:	4628      	mov	r0, r5
   190ca:	b004      	add	sp, #16
   190cc:	bd70      	pop	{r4, r5, r6, pc}
   190ce:	4b19      	ldr	r3, [pc, #100]	; (19134 <parse_xmodemsleep+0x118>)
   190d0:	4a19      	ldr	r2, [pc, #100]	; (19138 <parse_xmodemsleep+0x11c>)
   190d2:	1a9b      	subs	r3, r3, r2
   190d4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   190d6:	f04f 0200 	mov.w	r2, #0
   190da:	2101      	movs	r1, #1
   190dc:	f361 0202 	bfi	r2, r1, #0, #3
   190e0:	f36f 02c5 	bfc	r2, #3, #3
   190e4:	f363 128f 	bfi	r2, r3, #6, #10
   190e8:	4601      	mov	r1, r0
   190ea:	4816      	ldr	r0, [pc, #88]	; (19144 <parse_xmodemsleep+0x128>)
   190ec:	f7f9 ff1a 	bl	12f24 <log_1>
		goto clean_exit;
   190f0:	e7e7      	b.n	190c2 <parse_xmodemsleep+0xa6>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   190f2:	f106 0208 	add.w	r2, r6, #8
   190f6:	2102      	movs	r1, #2
   190f8:	a802      	add	r0, sp, #8
   190fa:	f00b fa94 	bl	24626 <at_params_int64_get>
	if (err) {
   190fe:	4605      	mov	r5, r0
   19100:	2800      	cmp	r0, #0
   19102:	d0de      	beq.n	190c2 <parse_xmodemsleep+0xa6>
   19104:	4b0b      	ldr	r3, [pc, #44]	; (19134 <parse_xmodemsleep+0x118>)
   19106:	4a0c      	ldr	r2, [pc, #48]	; (19138 <parse_xmodemsleep+0x11c>)
   19108:	1a9b      	subs	r3, r3, r2
   1910a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   1910c:	f04f 0200 	mov.w	r2, #0
   19110:	2101      	movs	r1, #1
   19112:	f361 0202 	bfi	r2, r1, #0, #3
   19116:	f36f 02c5 	bfc	r2, #3, #3
   1911a:	f363 128f 	bfi	r2, r3, #6, #10
   1911e:	4601      	mov	r1, r0
   19120:	4809      	ldr	r0, [pc, #36]	; (19148 <parse_xmodemsleep+0x12c>)
   19122:	f7f9 feff 	bl	12f24 <log_1>
		goto clean_exit;
   19126:	e7cc      	b.n	190c2 <parse_xmodemsleep+0xa6>
		return -EINVAL;
   19128:	f06f 0515 	mvn.w	r5, #21
   1912c:	e7cc      	b.n	190c8 <parse_xmodemsleep+0xac>
   1912e:	f06f 0515 	mvn.w	r5, #21
   19132:	e7c9      	b.n	190c8 <parse_xmodemsleep+0xac>
   19134:	00027148 	.word	0x00027148
   19138:	00027108 	.word	0x00027108
   1913c:	00029148 	.word	0x00029148
   19140:	00029520 	.word	0x00029520
   19144:	00029554 	.word	0x00029554
   19148:	00029580 	.word	0x00029580

0001914c <parse_mdmev>:
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   1914c:	b378      	cbz	r0, 191ae <parse_mdmev+0x62>
{
   1914e:	b570      	push	{r4, r5, r6, lr}
   19150:	460e      	mov	r6, r1
   19152:	4605      	mov	r5, r0
	if (at_response == NULL || modem_evt == NULL) {
   19154:	b379      	cbz	r1, 191b6 <parse_mdmev+0x6a>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   19156:	4a19      	ldr	r2, [pc, #100]	; (191bc <parse_mdmev+0x70>)
   19158:	2108      	movs	r1, #8
   1915a:	f7ff f967 	bl	1842c <response_is_valid>
   1915e:	b168      	cbz	r0, 1917c <parse_mdmev+0x30>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
		return -EIO;
	}

	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   19160:	3508      	adds	r5, #8

	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   19162:	2400      	movs	r4, #0
   19164:	2c04      	cmp	r4, #4
   19166:	d81e      	bhi.n	191a6 <parse_mdmev+0x5a>
		if (strcmp(event_types[i], start_ptr) == 0) {
   19168:	4629      	mov	r1, r5
   1916a:	4b15      	ldr	r3, [pc, #84]	; (191c0 <parse_mdmev+0x74>)
   1916c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   19170:	f7f7 fe4e 	bl	10e10 <strcmp>
   19174:	4603      	mov	r3, r0
   19176:	b1a0      	cbz	r0, 191a2 <parse_mdmev+0x56>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   19178:	3401      	adds	r4, #1
   1917a:	e7f3      	b.n	19164 <parse_mdmev+0x18>
   1917c:	4b11      	ldr	r3, [pc, #68]	; (191c4 <parse_mdmev+0x78>)
   1917e:	4a12      	ldr	r2, [pc, #72]	; (191c8 <parse_mdmev+0x7c>)
   19180:	1a9b      	subs	r3, r3, r2
   19182:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid MDMEV response");
   19184:	f04f 0100 	mov.w	r1, #0
   19188:	2201      	movs	r2, #1
   1918a:	f362 0102 	bfi	r1, r2, #0, #3
   1918e:	f36f 01c5 	bfc	r1, #3, #3
   19192:	f363 118f 	bfi	r1, r3, #6, #10
   19196:	480d      	ldr	r0, [pc, #52]	; (191cc <parse_mdmev+0x80>)
   19198:	f7f9 ff58 	bl	1304c <log_0>
		return -EIO;
   1919c:	f06f 0304 	mvn.w	r3, #4
   191a0:	e003      	b.n	191aa <parse_mdmev+0x5e>
			LOG_DBG("Occurrence found: %s", event_types[i]);
			*modem_evt = i;
   191a2:	7034      	strb	r4, [r6, #0]

			return 0;
   191a4:	e001      	b.n	191aa <parse_mdmev+0x5e>
		}
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
   191a6:	f06f 033c 	mvn.w	r3, #60	; 0x3c
}
   191aa:	4618      	mov	r0, r3
   191ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   191ae:	f06f 0315 	mvn.w	r3, #21
}
   191b2:	4618      	mov	r0, r3
   191b4:	4770      	bx	lr
		return -EINVAL;
   191b6:	f06f 0315 	mvn.w	r3, #21
   191ba:	e7f6      	b.n	191aa <parse_mdmev+0x5e>
   191bc:	000295b8 	.word	0x000295b8
   191c0:	00029688 	.word	0x00029688
   191c4:	00027148 	.word	0x00027148
   191c8:	00027108 	.word	0x00027108
   191cc:	000295c4 	.word	0x000295c4

000191d0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   191d0:	b508      	push	{r3, lr}
	z_impl_log_panic();
   191d2:	f7f9 ff6b 	bl	130ac <z_impl_log_panic>
   191d6:	4b09      	ldr	r3, [pc, #36]	; (191fc <k_sys_fatal_error_handler+0x2c>)
   191d8:	4a09      	ldr	r2, [pc, #36]	; (19200 <k_sys_fatal_error_handler+0x30>)
   191da:	1a9b      	subs	r3, r3, r2
   191dc:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   191de:	f04f 0100 	mov.w	r1, #0
   191e2:	2201      	movs	r2, #1
   191e4:	f362 0102 	bfi	r1, r2, #0, #3
   191e8:	f36f 01c5 	bfc	r1, #3, #3
   191ec:	f363 118f 	bfi	r1, r3, #6, #10
   191f0:	4804      	ldr	r0, [pc, #16]	; (19204 <k_sys_fatal_error_handler+0x34>)
   191f2:	f7f9 ff2b 	bl	1304c <log_0>
		sys_arch_reboot(0);
   191f6:	2000      	movs	r0, #0
   191f8:	f7fb fb9a 	bl	14930 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   191fc:	00027128 	.word	0x00027128
   19200:	00027108 	.word	0x00027108
   19204:	000296fc 	.word	0x000296fc

00019208 <translate_error>:
static int translate_error(int err)
{
	/* In case of CME error translate the error value to
	 * an errno value.
	 */
	switch (err) {
   19208:	f2a0 2001 	subw	r0, r0, #513	; 0x201
   1920c:	2805      	cmp	r0, #5
   1920e:	d80d      	bhi.n	1922c <translate_error+0x24>
   19210:	e8df f000 	tbb	[pc, r0]
   19214:	0c060e03 	.word	0x0c060e03
   19218:	090c      	.short	0x090c
	case 514:
		return -EPERM;
	case 515:
		return -ENOMEM;
	case 518:
		return -EACCES;
   1921a:	f06f 0001 	mvn.w	r0, #1
   1921e:	4770      	bx	lr
		return -ENOMEM;
   19220:	f06f 000b 	mvn.w	r0, #11
   19224:	4770      	bx	lr
		return -EACCES;
   19226:	f06f 000c 	mvn.w	r0, #12
   1922a:	4770      	bx	lr
		/* Catch unexpected CME errors.
		 * Return a magic value to make sure this
		 * situation is clearly distinguishable.
		 */
		__ASSERT(false, "Untranslated CME error %d!", err);
		return 0xBAADBAAD;
   1922c:	4802      	ldr	r0, [pc, #8]	; (19238 <translate_error+0x30>)
   1922e:	4770      	bx	lr
		return -EPERM;
   19230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return err;
}
   19234:	4770      	bx	lr
   19236:	bf00      	nop
   19238:	baadbaad 	.word	0xbaadbaad

0001923c <cmee_control>:
{
   1923c:	b508      	push	{r3, lr}
   1923e:	4601      	mov	r1, r0
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   19240:	4801      	ldr	r0, [pc, #4]	; (19248 <cmee_control+0xc>)
   19242:	f004 fc4f 	bl	1dae4 <nrf_modem_at_printf>
}
   19246:	bd08      	pop	{r3, pc}
   19248:	0002971c 	.word	0x0002971c

0001924c <cmee_is_active>:
{
   1924c:	b500      	push	{lr}
   1924e:	b083      	sub	sp, #12
	err = nrf_modem_at_scanf("AT+CMEE?", "+CMEE: %d", &active);
   19250:	aa01      	add	r2, sp, #4
   19252:	490f      	ldr	r1, [pc, #60]	; (19290 <cmee_is_active+0x44>)
   19254:	480f      	ldr	r0, [pc, #60]	; (19294 <cmee_is_active+0x48>)
   19256:	f004 fcd3 	bl	1dc00 <nrf_modem_at_scanf>
	if (err < 0) {
   1925a:	1e01      	subs	r1, r0, #0
   1925c:	db06      	blt.n	1926c <cmee_is_active+0x20>
	return active ? true : false;
   1925e:	9801      	ldr	r0, [sp, #4]
   19260:	3800      	subs	r0, #0
   19262:	bf18      	it	ne
   19264:	2001      	movne	r0, #1
}
   19266:	b003      	add	sp, #12
   19268:	f85d fb04 	ldr.w	pc, [sp], #4
   1926c:	4b0a      	ldr	r3, [pc, #40]	; (19298 <cmee_is_active+0x4c>)
   1926e:	4a0b      	ldr	r2, [pc, #44]	; (1929c <cmee_is_active+0x50>)
   19270:	1a9b      	subs	r3, r3, r2
   19272:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Failed to retrieve CMEE status, err %d", err);
   19274:	f04f 0200 	mov.w	r2, #0
   19278:	2002      	movs	r0, #2
   1927a:	f360 0202 	bfi	r2, r0, #0, #3
   1927e:	f36f 02c5 	bfc	r2, #3, #3
   19282:	f363 128f 	bfi	r2, r3, #6, #10
   19286:	4806      	ldr	r0, [pc, #24]	; (192a0 <cmee_is_active+0x54>)
   19288:	f7f9 fe4c 	bl	12f24 <log_1>
		return false;
   1928c:	2000      	movs	r0, #0
   1928e:	e7ea      	b.n	19266 <cmee_is_active+0x1a>
   19290:	00029728 	.word	0x00029728
   19294:	00029734 	.word	0x00029734
   19298:	00027150 	.word	0x00027150
   1929c:	00027108 	.word	0x00027108
   192a0:	00029740 	.word	0x00029740

000192a4 <key_fetch>:

/* Read the given credential into the static buffer */
static int key_fetch(nrf_sec_tag_t tag,
		     enum modem_key_mgmt_cred_type cred_type)
{
   192a4:	b530      	push	{r4, r5, lr}
   192a6:	b085      	sub	sp, #20
   192a8:	4604      	mov	r4, r0
   192aa:	460d      	mov	r5, r1
	int err;
	bool cmee_was_active;

	cmee_enable(&cmee_was_active);
   192ac:	f10d 000f 	add.w	r0, sp, #15
   192b0:	f00b fa95 	bl	247de <cmee_enable>

	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   192b4:	9500      	str	r5, [sp, #0]
   192b6:	4623      	mov	r3, r4
   192b8:	4a0b      	ldr	r2, [pc, #44]	; (192e8 <key_fetch+0x44>)
   192ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   192be:	480b      	ldr	r0, [pc, #44]	; (192ec <key_fetch+0x48>)
   192c0:	f004 fc38 	bl	1db34 <nrf_modem_at_cmd>
   192c4:	4604      	mov	r4, r0
			       "AT%%CMNG=2,%d,%d", tag, cred_type);

	if (!cmee_was_active) {
   192c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   192ca:	b11b      	cbz	r3, 192d4 <key_fetch+0x30>
		cmee_disable();
	}

	if (err) {
   192cc:	b92c      	cbnz	r4, 192da <key_fetch+0x36>
		return translate_error(nrf_modem_at_err(err));
	}

	return 0;
}
   192ce:	4620      	mov	r0, r4
   192d0:	b005      	add	sp, #20
   192d2:	bd30      	pop	{r4, r5, pc}
		cmee_disable();
   192d4:	f00b fa7e 	bl	247d4 <cmee_disable>
   192d8:	e7f8      	b.n	192cc <key_fetch+0x28>
		return translate_error(nrf_modem_at_err(err));
   192da:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   192de:	f7ff ff93 	bl	19208 <translate_error>
   192e2:	4604      	mov	r4, r0
   192e4:	e7f3      	b.n	192ce <key_fetch+0x2a>
   192e6:	bf00      	nop
   192e8:	00029768 	.word	0x00029768
   192ec:	2000e638 	.word	0x2000e638

000192f0 <modem_key_mgmt_write>:

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   192f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   192f2:	b085      	sub	sp, #20
	int err;
	bool cmee_was_enabled;

	if (buf == NULL || len == 0) {
   192f4:	b302      	cbz	r2, 19338 <modem_key_mgmt_write+0x48>
   192f6:	4605      	mov	r5, r0
   192f8:	460e      	mov	r6, r1
   192fa:	461c      	mov	r4, r3
   192fc:	4617      	mov	r7, r2
   192fe:	b1f3      	cbz	r3, 1933e <modem_key_mgmt_write+0x4e>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_enabled);
   19300:	f10d 000f 	add.w	r0, sp, #15
   19304:	f00b fa6b 	bl	247de <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=0,%d,%d,\"%.*s\"",
   19308:	9700      	str	r7, [sp, #0]
   1930a:	4623      	mov	r3, r4
   1930c:	4632      	mov	r2, r6
   1930e:	4629      	mov	r1, r5
   19310:	480c      	ldr	r0, [pc, #48]	; (19344 <modem_key_mgmt_write+0x54>)
   19312:	f004 fbe7 	bl	1dae4 <nrf_modem_at_printf>
   19316:	4604      	mov	r4, r0
				  sec_tag, cred_type, len, (const char *)buf);

	if (!cmee_was_enabled) {
   19318:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1931c:	b11b      	cbz	r3, 19326 <modem_key_mgmt_write+0x36>
		cmee_disable();
	}

	if (err) {
   1931e:	b92c      	cbnz	r4, 1932c <modem_key_mgmt_write+0x3c>
		return translate_error(nrf_modem_at_err(err));
	}

	return 0;
}
   19320:	4620      	mov	r0, r4
   19322:	b005      	add	sp, #20
   19324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cmee_disable();
   19326:	f00b fa55 	bl	247d4 <cmee_disable>
   1932a:	e7f8      	b.n	1931e <modem_key_mgmt_write+0x2e>
		return translate_error(nrf_modem_at_err(err));
   1932c:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   19330:	f7ff ff6a 	bl	19208 <translate_error>
   19334:	4604      	mov	r4, r0
   19336:	e7f3      	b.n	19320 <modem_key_mgmt_write+0x30>
		return -EINVAL;
   19338:	f06f 0415 	mvn.w	r4, #21
   1933c:	e7f0      	b.n	19320 <modem_key_mgmt_write+0x30>
   1933e:	f06f 0415 	mvn.w	r4, #21
   19342:	e7ed      	b.n	19320 <modem_key_mgmt_write+0x30>
   19344:	0002977c 	.word	0x0002977c

00019348 <modem_key_mgmt_cmp>:
		       const void *buf, size_t len)
{
	int err;
	char *p;

	if (buf == NULL) {
   19348:	b1b2      	cbz	r2, 19378 <modem_key_mgmt_cmp+0x30>
{
   1934a:	b570      	push	{r4, r5, r6, lr}
   1934c:	461d      	mov	r5, r3
   1934e:	4616      	mov	r6, r2
		return -EINVAL;
	}

	err = key_fetch(sec_tag, cred_type);
   19350:	f7ff ffa8 	bl	192a4 <key_fetch>
	if (err) {
   19354:	b978      	cbnz	r0, 19376 <modem_key_mgmt_cmp+0x2e>
		return err;
	}

	p = scratch_buf;
	for (size_t i = 0; i < 3; i++) {
   19356:	2400      	movs	r4, #0
	p = scratch_buf;
   19358:	480b      	ldr	r0, [pc, #44]	; (19388 <modem_key_mgmt_cmp+0x40>)
	for (size_t i = 0; i < 3; i++) {
   1935a:	2c02      	cmp	r4, #2
   1935c:	d806      	bhi.n	1936c <modem_key_mgmt_cmp+0x24>
		p = strchr(p, '\"');
   1935e:	2122      	movs	r1, #34	; 0x22
   19360:	f00d fab3 	bl	268ca <strchr>
		if (!p) {
   19364:	b158      	cbz	r0, 1937e <modem_key_mgmt_cmp+0x36>
			return -ENOENT;
		}
		p++;
   19366:	3001      	adds	r0, #1
	for (size_t i = 0; i < 3; i++) {
   19368:	3401      	adds	r4, #1
   1936a:	e7f6      	b.n	1935a <modem_key_mgmt_cmp+0x12>
	}

	if (memcmp(p, buf, len)) {
   1936c:	462a      	mov	r2, r5
   1936e:	4631      	mov	r1, r6
   19370:	f00d fa59 	bl	26826 <memcmp>
   19374:	b930      	cbnz	r0, 19384 <modem_key_mgmt_cmp+0x3c>
		LOG_DBG("Credential data mismatch");
		return 1;
	}

	return 0;
}
   19376:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   19378:	f06f 0015 	mvn.w	r0, #21
}
   1937c:	4770      	bx	lr
			return -ENOENT;
   1937e:	f06f 0001 	mvn.w	r0, #1
   19382:	e7f8      	b.n	19376 <modem_key_mgmt_cmp+0x2e>
		return 1;
   19384:	2001      	movs	r0, #1
   19386:	e7f6      	b.n	19376 <modem_key_mgmt_cmp+0x2e>
   19388:	2000e638 	.word	0x2000e638

0001938c <modem_key_mgmt_delete>:

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   1938c:	b530      	push	{r4, r5, lr}
   1938e:	b083      	sub	sp, #12
   19390:	4604      	mov	r4, r0
   19392:	460d      	mov	r5, r1
	int err;
	bool cmee_was_enabled;

	cmee_enable(&cmee_was_enabled);
   19394:	f10d 0007 	add.w	r0, sp, #7
   19398:	f00b fa21 	bl	247de <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=3,%d,%d", sec_tag, cred_type);
   1939c:	462a      	mov	r2, r5
   1939e:	4621      	mov	r1, r4
   193a0:	4809      	ldr	r0, [pc, #36]	; (193c8 <modem_key_mgmt_delete+0x3c>)
   193a2:	f004 fb9f 	bl	1dae4 <nrf_modem_at_printf>
   193a6:	4604      	mov	r4, r0

	if (!cmee_was_enabled) {
   193a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   193ac:	b11b      	cbz	r3, 193b6 <modem_key_mgmt_delete+0x2a>
		cmee_disable();
	}

	if (err) {
   193ae:	b92c      	cbnz	r4, 193bc <modem_key_mgmt_delete+0x30>
		return translate_error(nrf_modem_at_err(err));
	}

	return 0;
}
   193b0:	4620      	mov	r0, r4
   193b2:	b003      	add	sp, #12
   193b4:	bd30      	pop	{r4, r5, pc}
		cmee_disable();
   193b6:	f00b fa0d 	bl	247d4 <cmee_disable>
   193ba:	e7f8      	b.n	193ae <modem_key_mgmt_delete+0x22>
		return translate_error(nrf_modem_at_err(err));
   193bc:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   193c0:	f7ff ff22 	bl	19208 <translate_error>
   193c4:	4604      	mov	r4, r0
   193c6:	e7f3      	b.n	193b0 <modem_key_mgmt_delete+0x24>
   193c8:	00029794 	.word	0x00029794

000193cc <modem_key_mgmt_exists>:

int modem_key_mgmt_exists(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type,
			  bool *exists)
{
   193cc:	b570      	push	{r4, r5, r6, lr}
   193ce:	b084      	sub	sp, #16
	int err;
	bool cmee_was_active;

	if (exists == NULL) {
   193d0:	b37a      	cbz	r2, 19432 <modem_key_mgmt_exists+0x66>
   193d2:	4604      	mov	r4, r0
   193d4:	460d      	mov	r5, r1
   193d6:	4616      	mov	r6, r2
		return -EINVAL;
	}

	cmee_enable(&cmee_was_active);
   193d8:	f10d 000f 	add.w	r0, sp, #15
   193dc:	f00b f9ff 	bl	247de <cmee_enable>

	scratch_buf[0] = '\0';
   193e0:	4815      	ldr	r0, [pc, #84]	; (19438 <modem_key_mgmt_exists+0x6c>)
   193e2:	2300      	movs	r3, #0
   193e4:	7003      	strb	r3, [r0, #0]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   193e6:	9500      	str	r5, [sp, #0]
   193e8:	4623      	mov	r3, r4
   193ea:	4a14      	ldr	r2, [pc, #80]	; (1943c <modem_key_mgmt_exists+0x70>)
   193ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   193f0:	f004 fba0 	bl	1db34 <nrf_modem_at_cmd>
   193f4:	4604      	mov	r4, r0
			       "AT%%CMNG=1,%d,%d", sec_tag, cred_type);

	if (!cmee_was_active) {
   193f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   193fa:	b143      	cbz	r3, 1940e <modem_key_mgmt_exists+0x42>
		cmee_disable();
	}

	if (err) {
   193fc:	b154      	cbz	r4, 19414 <modem_key_mgmt_exists+0x48>
		return translate_error(nrf_modem_at_err(err));
   193fe:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   19402:	f7ff ff01 	bl	19208 <translate_error>
   19406:	4604      	mov	r4, r0
	} else {
		*exists = false;
	}

	return 0;
}
   19408:	4620      	mov	r0, r4
   1940a:	b004      	add	sp, #16
   1940c:	bd70      	pop	{r4, r5, r6, pc}
		cmee_disable();
   1940e:	f00b f9e1 	bl	247d4 <cmee_disable>
   19412:	e7f3      	b.n	193fc <modem_key_mgmt_exists+0x30>
	if (strlen(scratch_buf) > strlen("OK\r\n")) {
   19414:	4808      	ldr	r0, [pc, #32]	; (19438 <modem_key_mgmt_exists+0x6c>)
   19416:	f7f7 fd05 	bl	10e24 <strlen>
   1941a:	4605      	mov	r5, r0
   1941c:	4808      	ldr	r0, [pc, #32]	; (19440 <modem_key_mgmt_exists+0x74>)
   1941e:	f7f7 fd01 	bl	10e24 <strlen>
   19422:	4285      	cmp	r5, r0
   19424:	d902      	bls.n	1942c <modem_key_mgmt_exists+0x60>
		*exists = true;
   19426:	2301      	movs	r3, #1
   19428:	7033      	strb	r3, [r6, #0]
   1942a:	e7ed      	b.n	19408 <modem_key_mgmt_exists+0x3c>
		*exists = false;
   1942c:	2300      	movs	r3, #0
   1942e:	7033      	strb	r3, [r6, #0]
   19430:	e7ea      	b.n	19408 <modem_key_mgmt_exists+0x3c>
		return -EINVAL;
   19432:	f06f 0415 	mvn.w	r4, #21
   19436:	e7e7      	b.n	19408 <modem_key_mgmt_exists+0x3c>
   19438:	2000e638 	.word	0x2000e638
   1943c:	000297a8 	.word	0x000297a8
   19440:	00028908 	.word	0x00028908

00019444 <date_time_core_notify_event>:

static int64_t date_time_last_update_uptime;
static date_time_evt_handler_t app_evt_handler;

static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
   19444:	b508      	push	{r3, lr}
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   19446:	28ff      	cmp	r0, #255	; 0xff
   19448:	d001      	beq.n	1944e <date_time_core_notify_event+0xa>
		evt.type = time_source;
   1944a:	4b04      	ldr	r3, [pc, #16]	; (1945c <date_time_core_notify_event+0x18>)
   1944c:	7018      	strb	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   1944e:	4b04      	ldr	r3, [pc, #16]	; (19460 <date_time_core_notify_event+0x1c>)
   19450:	681b      	ldr	r3, [r3, #0]
   19452:	b10b      	cbz	r3, 19458 <date_time_core_notify_event+0x14>
		app_evt_handler(&evt);
   19454:	4801      	ldr	r0, [pc, #4]	; (1945c <date_time_core_notify_event+0x18>)
   19456:	4798      	blx	r3
	}
}
   19458:	bd08      	pop	{r3, pc}
   1945a:	bf00      	nop
   1945c:	2000f63c 	.word	0x2000f63c
   19460:	2000f638 	.word	0x2000f638

00019464 <date_time_handler>:
K_THREAD_DEFINE(time_thread, CONFIG_DATE_TIME_THREAD_STACK_SIZE,
		date_time_update_thread, NULL, NULL, NULL,
		K_LOWEST_APPLICATION_THREAD_PRIO, 0, 0);

static void date_time_handler(struct k_work *work)
{
   19464:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   19466:	4802      	ldr	r0, [pc, #8]	; (19470 <date_time_handler+0xc>)
   19468:	f005 fef0 	bl	1f24c <z_impl_k_sem_give>
	k_sem_give(&time_fetch_sem);
}
   1946c:	bd08      	pop	{r3, pc}
   1946e:	bf00      	nop
   19470:	2000c8c4 	.word	0x2000c8c4

00019474 <date_time_core_schedule_update>:
{
   19474:	b508      	push	{r3, lr}
	return k_work_delayable_busy_get(dwork) != 0;
   19476:	4806      	ldr	r0, [pc, #24]	; (19490 <date_time_core_schedule_update+0x1c>)
   19478:	f00c fe1f 	bl	260ba <k_work_delayable_busy_get>
	if (CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS > 0 &&
   1947c:	b100      	cbz	r0, 19480 <date_time_core_schedule_update+0xc>
}
   1947e:	bd08      	pop	{r3, pc}
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   19480:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
   19484:	2300      	movs	r3, #0
   19486:	4802      	ldr	r0, [pc, #8]	; (19490 <date_time_core_schedule_update+0x1c>)
   19488:	f006 f8b4 	bl	1f5f4 <k_work_schedule>
}
   1948c:	e7f7      	b.n	1947e <date_time_core_schedule_update+0xa>
   1948e:	bf00      	nop
   19490:	2000c5b0 	.word	0x2000c5b0

00019494 <date_time_lte_ind_handler>:

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   19494:	b508      	push	{r3, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   19496:	7803      	ldrb	r3, [r0, #0]
   19498:	b9cb      	cbnz	r3, 194ce <date_time_lte_ind_handler+0x3a>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   1949a:	7a03      	ldrb	r3, [r0, #8]
   1949c:	3b01      	subs	r3, #1
   1949e:	2b07      	cmp	r3, #7
   194a0:	d815      	bhi.n	194ce <date_time_lte_ind_handler+0x3a>
   194a2:	e8df f003 	tbb	[pc, r3]
   194a6:	1204      	.short	0x1204
   194a8:	14041414 	.word	0x14041414
   194ac:	0414      	.short	0x0414
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid() && !k_work_delayable_is_pending(&time_work)) {
   194ae:	f00b f9a9 	bl	24804 <date_time_is_valid>
   194b2:	b960      	cbnz	r0, 194ce <date_time_lte_ind_handler+0x3a>
   194b4:	4806      	ldr	r0, [pc, #24]	; (194d0 <date_time_lte_ind_handler+0x3c>)
   194b6:	f00c fe00 	bl	260ba <k_work_delayable_busy_get>
   194ba:	b940      	cbnz	r0, 194ce <date_time_lte_ind_handler+0x3a>
				k_work_schedule(&time_work, K_SECONDS(1));
   194bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   194c0:	2300      	movs	r3, #0
   194c2:	4803      	ldr	r0, [pc, #12]	; (194d0 <date_time_lte_ind_handler+0x3c>)
   194c4:	f006 f896 	bl	1f5f4 <k_work_schedule>
   194c8:	e001      	b.n	194ce <date_time_lte_ind_handler+0x3a>
			}
			break;
#if defined(CONFIG_DATE_TIME_MODEM)
		case LTE_LC_NW_REG_SEARCHING:
			date_time_modem_xtime_subscribe();
   194ca:	f000 fb37 	bl	19b3c <date_time_modem_xtime_subscribe>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   194ce:	bd08      	pop	{r3, pc}
   194d0:	2000c5b0 	.word	0x2000c5b0

000194d4 <date_time_core_init>:

void date_time_core_init(void)
{
   194d4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   194d6:	4802      	ldr	r0, [pc, #8]	; (194e0 <date_time_core_init+0xc>)
   194d8:	f7fe f9b4 	bl	17844 <lte_lc_register_handler>

	if (!IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) &&
	    CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS > 0) {
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}
   194dc:	bd08      	pop	{r3, pc}
   194de:	bf00      	nop
   194e0:	00019495 	.word	0x00019495

000194e4 <date_time_core_is_valid>:
	return date_time_last_update_uptime;
}

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   194e4:	4b03      	ldr	r3, [pc, #12]	; (194f4 <date_time_core_is_valid+0x10>)
   194e6:	681a      	ldr	r2, [r3, #0]
   194e8:	685b      	ldr	r3, [r3, #4]
   194ea:	4313      	orrs	r3, r2
}
   194ec:	bf14      	ite	ne
   194ee:	2001      	movne	r0, #1
   194f0:	2000      	moveq	r0, #0
   194f2:	4770      	bx	lr
   194f4:	2000cba0 	.word	0x2000cba0

000194f8 <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   194f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (date_time_last_update_uptime == 0) {
   194fa:	4b19      	ldr	r3, [pc, #100]	; (19560 <date_time_core_current_check+0x68>)
   194fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   19500:	4313      	orrs	r3, r2
   19502:	d026      	beq.n	19552 <date_time_core_current_check+0x5a>
	return z_impl_k_uptime_ticks();
   19504:	f00d f860 	bl	265c8 <z_impl_k_uptime_ticks>
   19508:	014b      	lsls	r3, r1, #5
   1950a:	0142      	lsls	r2, r0, #5
   1950c:	ea43 66d0 	orr.w	r6, r3, r0, lsr #27
   19510:	1a13      	subs	r3, r2, r0
   19512:	eb66 0201 	sbc.w	r2, r6, r1
   19516:	0096      	lsls	r6, r2, #2
   19518:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   1951c:	009f      	lsls	r7, r3, #2
   1951e:	4632      	mov	r2, r6
   19520:	183b      	adds	r3, r7, r0
   19522:	eb41 0202 	adc.w	r2, r1, r2
   19526:	00d1      	lsls	r1, r2, #3
   19528:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   1952c:	00d8      	lsls	r0, r3, #3
   1952e:	0bc3      	lsrs	r3, r0, #15
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   19530:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
   19534:	0bc8      	lsrs	r0, r1, #15
		LOG_DBG("Date time never set");
		return -ENODATA;
	}

	if ((k_uptime_get() - date_time_last_update_uptime) >=
   19536:	490a      	ldr	r1, [pc, #40]	; (19560 <date_time_core_current_check+0x68>)
   19538:	680b      	ldr	r3, [r1, #0]
   1953a:	6849      	ldr	r1, [r1, #4]
   1953c:	1ad4      	subs	r4, r2, r3
   1953e:	eb60 0501 	sbc.w	r5, r0, r1
   19542:	4a08      	ldr	r2, [pc, #32]	; (19564 <date_time_core_current_check+0x6c>)
   19544:	2300      	movs	r3, #0
   19546:	4294      	cmp	r4, r2
   19548:	eb75 0303 	sbcs.w	r3, r5, r3
   1954c:	da04      	bge.n	19558 <date_time_core_current_check+0x60>
	    CONFIG_DATE_TIME_TOO_OLD_SECONDS * MSEC_PER_SEC) {
		LOG_DBG("Current date time too old");
		return -ENODATA;
	}

	return 0;
   1954e:	2000      	movs	r0, #0
}
   19550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODATA;
   19552:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   19556:	e7fb      	b.n	19550 <date_time_core_current_check+0x58>
		return -ENODATA;
   19558:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1955c:	e7f8      	b.n	19550 <date_time_core_current_check+0x58>
   1955e:	bf00      	nop
   19560:	2000cba0 	.word	0x2000cba0
   19564:	0036ee80 	.word	0x0036ee80

00019568 <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   19568:	b5f0      	push	{r4, r5, r6, r7, lr}
   1956a:	b08f      	sub	sp, #60	; 0x3c
   1956c:	4606      	mov	r6, r0
   1956e:	460d      	mov	r5, r1
   19570:	4617      	mov	r7, r2
	struct timespec tp = { 0 };
   19572:	2100      	movs	r1, #0
   19574:	910a      	str	r1, [sp, #40]	; 0x28
   19576:	910b      	str	r1, [sp, #44]	; 0x2c
   19578:	910c      	str	r1, [sp, #48]	; 0x30
   1957a:	910d      	str	r1, [sp, #52]	; 0x34
	struct tm ltm = { 0 };
   1957c:	2224      	movs	r2, #36	; 0x24
   1957e:	a801      	add	r0, sp, #4
   19580:	f00d f97f 	bl	26882 <memset>
   19584:	f00d f820 	bl	265c8 <z_impl_k_uptime_ticks>
   19588:	014b      	lsls	r3, r1, #5
   1958a:	0144      	lsls	r4, r0, #5
   1958c:	ea43 62d0 	orr.w	r2, r3, r0, lsr #27
   19590:	1a23      	subs	r3, r4, r0
   19592:	eb62 0401 	sbc.w	r4, r2, r1
   19596:	00a2      	lsls	r2, r4, #2
   19598:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   1959c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   195a0:	4614      	mov	r4, r2
   195a2:	eb1c 0300 	adds.w	r3, ip, r0
   195a6:	eb41 0404 	adc.w	r4, r1, r4
   195aa:	00e2      	lsls	r2, r4, #3
   195ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   195b0:	00d9      	lsls	r1, r3, #3
   195b2:	0bcb      	lsrs	r3, r1, #15
   195b4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   195b8:	0bd2      	lsrs	r2, r2, #15
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   195ba:	491f      	ldr	r1, [pc, #124]	; (19638 <date_time_core_store+0xd0>)
   195bc:	600b      	str	r3, [r1, #0]
   195be:	604a      	str	r2, [r1, #4]

	date_time_core_schedule_update();
   195c0:	f7ff ff58 	bl	19474 <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   195c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   195c8:	2300      	movs	r3, #0
   195ca:	4630      	mov	r0, r6
   195cc:	4629      	mov	r1, r5
   195ce:	f7f7 fa55 	bl	10a7c <__aeabi_ldivmod>
   195d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   195d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   195da:	2300      	movs	r3, #0
   195dc:	4630      	mov	r0, r6
   195de:	4629      	mov	r1, r5
   195e0:	f7f7 fa4c 	bl	10a7c <__aeabi_ldivmod>
   195e4:	4b15      	ldr	r3, [pc, #84]	; (1963c <date_time_core_store+0xd4>)
   195e6:	fb03 f302 	mul.w	r3, r3, r2
   195ea:	930c      	str	r3, [sp, #48]	; 0x30

	ret = clock_settime(CLOCK_REALTIME, &tp);
   195ec:	a90a      	add	r1, sp, #40	; 0x28
   195ee:	2001      	movs	r0, #1
   195f0:	f7f7 fca2 	bl	10f38 <clock_settime>
	if (ret != 0) {
   195f4:	b958      	cbnz	r0, 1960e <date_time_core_store+0xa6>
		LOG_ERR("Could not set system time, %d", ret);
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
		return;
	}
	gmtime_r(&tp.tv_sec, &ltm);
   195f6:	a901      	add	r1, sp, #4
   195f8:	a80a      	add	r0, sp, #40	; 0x28
   195fa:	f007 f973 	bl	208e4 <gmtime_r>
	LOG_DBG("System time updated: %04u-%02u-%02u %02u:%02u:%02u",
		ltm.tm_year + 1900, ltm.tm_mon + 1, ltm.tm_mday,
		ltm.tm_hour, ltm.tm_min, ltm.tm_sec);

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
   195fe:	a801      	add	r0, sp, #4
   19600:	f000 fa5c 	bl	19abc <date_time_modem_store>
#endif

	date_time_core_notify_event(time_source);
   19604:	4638      	mov	r0, r7
   19606:	f7ff ff1d 	bl	19444 <date_time_core_notify_event>
}
   1960a:	b00f      	add	sp, #60	; 0x3c
   1960c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1960e:	4601      	mov	r1, r0
   19610:	4b0b      	ldr	r3, [pc, #44]	; (19640 <date_time_core_store+0xd8>)
   19612:	4a0c      	ldr	r2, [pc, #48]	; (19644 <date_time_core_store+0xdc>)
   19614:	1a9b      	subs	r3, r3, r2
   19616:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not set system time, %d", ret);
   19618:	f04f 0200 	mov.w	r2, #0
   1961c:	2001      	movs	r0, #1
   1961e:	f360 0202 	bfi	r2, r0, #0, #3
   19622:	f36f 02c5 	bfc	r2, #3, #3
   19626:	f363 128f 	bfi	r2, r3, #6, #10
   1962a:	4807      	ldr	r0, [pc, #28]	; (19648 <date_time_core_store+0xe0>)
   1962c:	f7f9 fc7a 	bl	12f24 <log_1>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   19630:	2003      	movs	r0, #3
   19632:	f7ff ff07 	bl	19444 <date_time_core_notify_event>
		return;
   19636:	e7e8      	b.n	1960a <date_time_core_store+0xa2>
   19638:	2000cba0 	.word	0x2000cba0
   1963c:	000f4240 	.word	0x000f4240
   19640:	00027120 	.word	0x00027120
   19644:	00027108 	.word	0x00027108
   19648:	000297d8 	.word	0x000297d8

0001964c <date_time_update_thread>:
{
   1964c:	b500      	push	{lr}
   1964e:	b085      	sub	sp, #20
   19650:	e014      	b.n	1967c <date_time_update_thread+0x30>
		int64_t date_time_ms_modem = 0;
   19652:	2200      	movs	r2, #0
   19654:	2300      	movs	r3, #0
   19656:	e9cd 2300 	strd	r2, r3, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   1965a:	4668      	mov	r0, sp
   1965c:	f000 f9d4 	bl	19a08 <date_time_modem_get>
		if (err == 0) {
   19660:	b1e8      	cbz	r0, 1969e <date_time_update_thread+0x52>
		int64_t date_time_ms_ntp = 0;
   19662:	2200      	movs	r2, #0
   19664:	2300      	movs	r3, #0
   19666:	e9cd 2302 	strd	r2, r3, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   1966a:	a802      	add	r0, sp, #8
   1966c:	f000 f8c8 	bl	19800 <date_time_ntp_get>
		if (err == 0) {
   19670:	b1d8      	cbz	r0, 196aa <date_time_update_thread+0x5e>
		date_time_core_schedule_update();
   19672:	f7ff feff 	bl	19474 <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   19676:	2003      	movs	r0, #3
   19678:	f7ff fee4 	bl	19444 <date_time_core_notify_event>
	return z_impl_k_sem_take(sem, timeout);
   1967c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19684:	480c      	ldr	r0, [pc, #48]	; (196b8 <date_time_update_thread+0x6c>)
   19686:	f005 fe09 	bl	1f29c <z_impl_k_sem_take>
		err = date_time_core_current_check();
   1968a:	f7ff ff35 	bl	194f8 <date_time_core_current_check>
		if (err == 0) {
   1968e:	2800      	cmp	r0, #0
   19690:	d1df      	bne.n	19652 <date_time_update_thread+0x6>
			date_time_core_schedule_update();
   19692:	f7ff feef 	bl	19474 <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   19696:	20ff      	movs	r0, #255	; 0xff
   19698:	f7ff fed4 	bl	19444 <date_time_core_notify_event>
			continue;
   1969c:	e7ee      	b.n	1967c <date_time_update_thread+0x30>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   1969e:	2200      	movs	r2, #0
   196a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   196a4:	f7ff ff60 	bl	19568 <date_time_core_store>
			continue;
   196a8:	e7e8      	b.n	1967c <date_time_update_thread+0x30>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   196aa:	2201      	movs	r2, #1
   196ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   196b0:	f7ff ff5a 	bl	19568 <date_time_core_store>
			continue;
   196b4:	e7e2      	b.n	1967c <date_time_update_thread+0x30>
   196b6:	bf00      	nop
   196b8:	2000c8c4 	.word	0x2000c8c4

000196bc <is_connected_to_lte>:
	return err;
}

#if defined(CONFIG_LTE_LINK_CONTROL)
static bool is_connected_to_lte(void)
{
   196bc:	b500      	push	{lr}
   196be:	b083      	sub	sp, #12
	int err;
	enum lte_lc_nw_reg_status reg_status;

	err = lte_lc_nw_reg_status_get(&reg_status);
   196c0:	f10d 0007 	add.w	r0, sp, #7
   196c4:	f7fe fa7e 	bl	17bc4 <lte_lc_nw_reg_status_get>
	if (err) {
   196c8:	b958      	cbnz	r0, 196e2 <is_connected_to_lte+0x26>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
		return false;
	}

	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   196ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   196ce:	2b08      	cmp	r3, #8
   196d0:	d01a      	beq.n	19708 <is_connected_to_lte+0x4c>
   196d2:	2b01      	cmp	r3, #1
   196d4:	d01a      	beq.n	1970c <is_connected_to_lte+0x50>
	    reg_status == LTE_LC_NW_REG_REGISTERED_HOME ||
   196d6:	2b05      	cmp	r3, #5
   196d8:	d01a      	beq.n	19710 <is_connected_to_lte+0x54>
	    reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING) {
		return true;
	}

	return false;
   196da:	2000      	movs	r0, #0
}
   196dc:	b003      	add	sp, #12
   196de:	f85d fb04 	ldr.w	pc, [sp], #4
   196e2:	4601      	mov	r1, r0
   196e4:	4b0b      	ldr	r3, [pc, #44]	; (19714 <is_connected_to_lte+0x58>)
   196e6:	4a0c      	ldr	r2, [pc, #48]	; (19718 <is_connected_to_lte+0x5c>)
   196e8:	1a9b      	subs	r3, r3, r2
   196ea:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   196ec:	f04f 0200 	mov.w	r2, #0
   196f0:	2002      	movs	r0, #2
   196f2:	f360 0202 	bfi	r2, r0, #0, #3
   196f6:	f36f 02c5 	bfc	r2, #3, #3
   196fa:	f363 128f 	bfi	r2, r3, #6, #10
   196fe:	4807      	ldr	r0, [pc, #28]	; (1971c <is_connected_to_lte+0x60>)
   19700:	f7f9 fc10 	bl	12f24 <log_1>
		return false;
   19704:	2000      	movs	r0, #0
   19706:	e7e9      	b.n	196dc <is_connected_to_lte+0x20>
		return true;
   19708:	2001      	movs	r0, #1
   1970a:	e7e7      	b.n	196dc <is_connected_to_lte+0x20>
   1970c:	2001      	movs	r0, #1
   1970e:	e7e5      	b.n	196dc <is_connected_to_lte+0x20>
   19710:	2001      	movs	r0, #1
   19712:	e7e3      	b.n	196dc <is_connected_to_lte+0x20>
   19714:	00027120 	.word	0x00027120
   19718:	00027108 	.word	0x00027108
   1971c:	00029804 	.word	0x00029804

00019720 <sntp_time_request>:
{
   19720:	b570      	push	{r4, r5, r6, lr}
   19722:	b09a      	sub	sp, #104	; 0x68
   19724:	4604      	mov	r4, r0
   19726:	460e      	mov	r6, r1
   19728:	4615      	mov	r5, r2
	struct addrinfo hints = {
   1972a:	2250      	movs	r2, #80	; 0x50
   1972c:	2100      	movs	r1, #0
   1972e:	4668      	mov	r0, sp
   19730:	f00d f8a7 	bl	26882 <memset>
   19734:	f44f 6380 	mov.w	r3, #1024	; 0x400
   19738:	9301      	str	r3, [sp, #4]
	return zsock_getaddrinfo(host, service, hints, res);
   1973a:	ab19      	add	r3, sp, #100	; 0x64
   1973c:	466a      	mov	r2, sp
   1973e:	492a      	ldr	r1, [pc, #168]	; (197e8 <sntp_time_request+0xc8>)
   19740:	4620      	mov	r0, r4
   19742:	f009 fa21 	bl	22b88 <zsock_getaddrinfo>
	if (err) {
   19746:	b9b8      	cbnz	r0, 19778 <sntp_time_request+0x58>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   19748:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1974a:	695a      	ldr	r2, [r3, #20]
   1974c:	6999      	ldr	r1, [r3, #24]
   1974e:	a814      	add	r0, sp, #80	; 0x50
   19750:	f009 f9da 	bl	22b08 <sntp_init>
	if (err) {
   19754:	4604      	mov	r4, r0
   19756:	bb10      	cbnz	r0, 1979e <sntp_time_request+0x7e>
	err = sntp_query(&sntp_ctx, timeout, time);
   19758:	462a      	mov	r2, r5
   1975a:	4631      	mov	r1, r6
   1975c:	a814      	add	r0, sp, #80	; 0x50
   1975e:	f7f9 ffe1 	bl	13724 <sntp_query>
	if (err) {
   19762:	4604      	mov	r4, r0
   19764:	bb68      	cbnz	r0, 197c2 <sntp_time_request+0xa2>
	zsock_freeaddrinfo(ai);
   19766:	9819      	ldr	r0, [sp, #100]	; 0x64
   19768:	f009 fa12 	bl	22b90 <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   1976c:	a814      	add	r0, sp, #80	; 0x50
   1976e:	f009 fa04 	bl	22b7a <sntp_close>
}
   19772:	4620      	mov	r0, r4
   19774:	b01a      	add	sp, #104	; 0x68
   19776:	bd70      	pop	{r4, r5, r6, pc}
   19778:	4604      	mov	r4, r0
   1977a:	4b1c      	ldr	r3, [pc, #112]	; (197ec <sntp_time_request+0xcc>)
   1977c:	4a1c      	ldr	r2, [pc, #112]	; (197f0 <sntp_time_request+0xd0>)
   1977e:	1a9b      	subs	r3, r3, r2
   19780:	08db      	lsrs	r3, r3, #3
		LOG_WRN("getaddrinfo, error: %d", err);
   19782:	f04f 0200 	mov.w	r2, #0
   19786:	2102      	movs	r1, #2
   19788:	f361 0202 	bfi	r2, r1, #0, #3
   1978c:	f36f 02c5 	bfc	r2, #3, #3
   19790:	f363 128f 	bfi	r2, r3, #6, #10
   19794:	4601      	mov	r1, r0
   19796:	4817      	ldr	r0, [pc, #92]	; (197f4 <sntp_time_request+0xd4>)
   19798:	f7f9 fbc4 	bl	12f24 <log_1>
		return err;
   1979c:	e7e9      	b.n	19772 <sntp_time_request+0x52>
   1979e:	4b13      	ldr	r3, [pc, #76]	; (197ec <sntp_time_request+0xcc>)
   197a0:	4a13      	ldr	r2, [pc, #76]	; (197f0 <sntp_time_request+0xd0>)
   197a2:	1a9b      	subs	r3, r3, r2
   197a4:	08db      	lsrs	r3, r3, #3
		LOG_WRN("sntp_init, error: %d", err);
   197a6:	f04f 0200 	mov.w	r2, #0
   197aa:	2102      	movs	r1, #2
   197ac:	f361 0202 	bfi	r2, r1, #0, #3
   197b0:	f36f 02c5 	bfc	r2, #3, #3
   197b4:	f363 128f 	bfi	r2, r3, #6, #10
   197b8:	4601      	mov	r1, r0
   197ba:	480f      	ldr	r0, [pc, #60]	; (197f8 <sntp_time_request+0xd8>)
   197bc:	f7f9 fbb2 	bl	12f24 <log_1>
		goto socket_close;
   197c0:	e7d1      	b.n	19766 <sntp_time_request+0x46>
   197c2:	4b0a      	ldr	r3, [pc, #40]	; (197ec <sntp_time_request+0xcc>)
   197c4:	4a0a      	ldr	r2, [pc, #40]	; (197f0 <sntp_time_request+0xd0>)
   197c6:	1a9b      	subs	r3, r3, r2
   197c8:	08db      	lsrs	r3, r3, #3
		LOG_WRN("sntp_query, error: %d", err);
   197ca:	f04f 0200 	mov.w	r2, #0
   197ce:	2102      	movs	r1, #2
   197d0:	f361 0202 	bfi	r2, r1, #0, #3
   197d4:	f36f 02c5 	bfc	r2, #3, #3
   197d8:	f363 128f 	bfi	r2, r3, #6, #10
   197dc:	4601      	mov	r1, r0
   197de:	4807      	ldr	r0, [pc, #28]	; (197fc <sntp_time_request+0xdc>)
   197e0:	f7f9 fba0 	bl	12f24 <log_1>
   197e4:	e7bf      	b.n	19766 <sntp_time_request+0x46>
   197e6:	bf00      	nop
   197e8:	00029840 	.word	0x00029840
   197ec:	00027120 	.word	0x00027120
   197f0:	00027108 	.word	0x00027108
   197f4:	00029844 	.word	0x00029844
   197f8:	0002985c 	.word	0x0002985c
   197fc:	00029874 	.word	0x00029874

00019800 <date_time_ntp_get>:
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   19800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19802:	4604      	mov	r4, r0
	int err;

#if defined(CONFIG_LTE_LINK_CONTROL)
	if (!is_connected_to_lte()) {
   19804:	f7ff ff5a 	bl	196bc <is_connected_to_lte>
   19808:	b320      	cbz	r0, 19854 <date_time_ntp_get+0x54>
	}

	LOG_DBG("Connected to LTE, performing NTP UTC time update");
#endif

	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   1980a:	2500      	movs	r5, #0
   1980c:	2d01      	cmp	r5, #1
   1980e:	dc26      	bgt.n	1985e <date_time_ntp_get+0x5e>
		err =  sntp_time_request(servers[i],
   19810:	4a1c      	ldr	r2, [pc, #112]	; (19884 <date_time_ntp_get+0x84>)
   19812:	f241 3188 	movw	r1, #5000	; 0x1388
   19816:	4b1c      	ldr	r3, [pc, #112]	; (19888 <date_time_ntp_get+0x88>)
   19818:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1981c:	f7ff ff80 	bl	19720 <sntp_time_request>
			MSEC_PER_SEC * CONFIG_DATE_TIME_NTP_QUERY_TIME_SECONDS,
			&sntp_time);
		if (err) {
   19820:	b9d8      	cbnz	r0, 1985a <date_time_ntp_get+0x5a>
			LOG_DBG("Did not get time from NTP server %s, error %d", servers[i], err);
			continue;
		}
		LOG_DBG("Time obtained from NTP server %s", servers[i]);
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   19822:	4b18      	ldr	r3, [pc, #96]	; (19884 <date_time_ntp_get+0x84>)
   19824:	6819      	ldr	r1, [r3, #0]
   19826:	685d      	ldr	r5, [r3, #4]
   19828:	016e      	lsls	r6, r5, #5
   1982a:	014b      	lsls	r3, r1, #5
   1982c:	ea46 62d1 	orr.w	r2, r6, r1, lsr #27
   19830:	1a5b      	subs	r3, r3, r1
   19832:	eb62 0205 	sbc.w	r2, r2, r5
   19836:	0096      	lsls	r6, r2, #2
   19838:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   1983c:	009f      	lsls	r7, r3, #2
   1983e:	4632      	mov	r2, r6
   19840:	187b      	adds	r3, r7, r1
   19842:	eb45 0202 	adc.w	r2, r5, r2
   19846:	00d1      	lsls	r1, r2, #3
   19848:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   1984c:	00dd      	lsls	r5, r3, #3
   1984e:	6025      	str	r5, [r4, #0]
   19850:	6061      	str	r1, [r4, #4]
	}

	LOG_WRN("Did not get time from any NTP server");

	return -ENODATA;
}
   19852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODATA;
   19854:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   19858:	e7fb      	b.n	19852 <date_time_ntp_get+0x52>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   1985a:	3501      	adds	r5, #1
   1985c:	e7d6      	b.n	1980c <date_time_ntp_get+0xc>
   1985e:	4b0b      	ldr	r3, [pc, #44]	; (1988c <date_time_ntp_get+0x8c>)
   19860:	4a0b      	ldr	r2, [pc, #44]	; (19890 <date_time_ntp_get+0x90>)
   19862:	1a9b      	subs	r3, r3, r2
   19864:	08db      	lsrs	r3, r3, #3
	LOG_WRN("Did not get time from any NTP server");
   19866:	f04f 0100 	mov.w	r1, #0
   1986a:	2202      	movs	r2, #2
   1986c:	f362 0102 	bfi	r1, r2, #0, #3
   19870:	f36f 01c5 	bfc	r1, #3, #3
   19874:	f363 118f 	bfi	r1, r3, #6, #10
   19878:	4806      	ldr	r0, [pc, #24]	; (19894 <date_time_ntp_get+0x94>)
   1987a:	f7f9 fbe7 	bl	1304c <log_0>
	return -ENODATA;
   1987e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   19882:	e7e6      	b.n	19852 <date_time_ntp_get+0x52>
   19884:	2000cba8 	.word	0x2000cba8
   19888:	000298d0 	.word	0x000298d0
   1988c:	00027120 	.word	0x00027120
   19890:	00027108 	.word	0x00027108
   19894:	0002988c 	.word	0x0002988c

00019898 <date_time_at_xtime_handler>:
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   19898:	2800      	cmp	r0, #0
   1989a:	f000 80a6 	beq.w	199ea <date_time_at_xtime_handler+0x152>
{
   1989e:	b530      	push	{r4, r5, lr}
   198a0:	b08d      	sub	sp, #52	; 0x34
   198a2:	4604      	mov	r4, r0
		return;
	}
	modem_valid_network_time = true;
   198a4:	4b51      	ldr	r3, [pc, #324]	; (199ec <date_time_at_xtime_handler+0x154>)
   198a6:	2201      	movs	r2, #1
   198a8:	701a      	strb	r2, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   198aa:	f7ff fe25 	bl	194f8 <date_time_core_current_check>
	if (err == 0) {
   198ae:	b908      	cbnz	r0, 198b4 <date_time_at_xtime_handler+0x1c>
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   198b0:	b00d      	add	sp, #52	; 0x34
   198b2:	bd30      	pop	{r4, r5, pc}
	time_str_start = strchr(notif, ',');
   198b4:	212c      	movs	r1, #44	; 0x2c
   198b6:	4620      	mov	r0, r4
   198b8:	f00d f807 	bl	268ca <strchr>
	if (time_str_start == NULL) {
   198bc:	4605      	mov	r5, r0
   198be:	b1c0      	cbz	r0, 198f2 <date_time_at_xtime_handler+0x5a>
	if (strlen(time_str_start) < 17) {
   198c0:	f7f7 fab0 	bl	10e24 <strlen>
   198c4:	2810      	cmp	r0, #16
   198c6:	d926      	bls.n	19916 <date_time_at_xtime_handler+0x7e>
	if (*(time_str_start + 1) != '"') {
   198c8:	786b      	ldrb	r3, [r5, #1]
   198ca:	2b22      	cmp	r3, #34	; 0x22
   198cc:	d035      	beq.n	1993a <date_time_at_xtime_handler+0xa2>
   198ce:	4b48      	ldr	r3, [pc, #288]	; (199f0 <date_time_at_xtime_handler+0x158>)
   198d0:	4a48      	ldr	r2, [pc, #288]	; (199f4 <date_time_at_xtime_handler+0x15c>)
   198d2:	1a9b      	subs	r3, r3, r2
   198d4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   198d6:	f04f 0200 	mov.w	r2, #0
   198da:	2101      	movs	r1, #1
   198dc:	f361 0202 	bfi	r2, r1, #0, #3
   198e0:	f36f 02c5 	bfc	r2, #3, #3
   198e4:	f363 128f 	bfi	r2, r3, #6, #10
   198e8:	4621      	mov	r1, r4
   198ea:	4843      	ldr	r0, [pc, #268]	; (199f8 <date_time_at_xtime_handler+0x160>)
   198ec:	f7f9 fb1a 	bl	12f24 <log_1>
		return;
   198f0:	e7de      	b.n	198b0 <date_time_at_xtime_handler+0x18>
   198f2:	4b3f      	ldr	r3, [pc, #252]	; (199f0 <date_time_at_xtime_handler+0x158>)
   198f4:	4a3f      	ldr	r2, [pc, #252]	; (199f4 <date_time_at_xtime_handler+0x15c>)
   198f6:	1a9b      	subs	r3, r3, r2
   198f8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   198fa:	f04f 0200 	mov.w	r2, #0
   198fe:	2101      	movs	r1, #1
   19900:	f361 0202 	bfi	r2, r1, #0, #3
   19904:	f36f 02c5 	bfc	r2, #3, #3
   19908:	f363 128f 	bfi	r2, r3, #6, #10
   1990c:	4621      	mov	r1, r4
   1990e:	483b      	ldr	r0, [pc, #236]	; (199fc <date_time_at_xtime_handler+0x164>)
   19910:	f7f9 fb08 	bl	12f24 <log_1>
		return;
   19914:	e7cc      	b.n	198b0 <date_time_at_xtime_handler+0x18>
   19916:	4b36      	ldr	r3, [pc, #216]	; (199f0 <date_time_at_xtime_handler+0x158>)
   19918:	4a36      	ldr	r2, [pc, #216]	; (199f4 <date_time_at_xtime_handler+0x15c>)
   1991a:	1a9b      	subs	r3, r3, r2
   1991c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%%XTIME notification too short: %s", notif);
   1991e:	f04f 0200 	mov.w	r2, #0
   19922:	2101      	movs	r1, #1
   19924:	f361 0202 	bfi	r2, r1, #0, #3
   19928:	f36f 02c5 	bfc	r2, #3, #3
   1992c:	f363 128f 	bfi	r2, r3, #6, #10
   19930:	4621      	mov	r1, r4
   19932:	4833      	ldr	r0, [pc, #204]	; (19a00 <date_time_at_xtime_handler+0x168>)
   19934:	f7f9 faf6 	bl	12f24 <log_1>
		return;
   19938:	e7ba      	b.n	198b0 <date_time_at_xtime_handler+0x18>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   1993a:	2306      	movs	r3, #6
   1993c:	aa01      	add	r2, sp, #4
   1993e:	210c      	movs	r1, #12
   19940:	1ca8      	adds	r0, r5, #2
   19942:	f008 f897 	bl	21a74 <hex2bin>
   19946:	4601      	mov	r1, r0
	if (time_buf_len < sizeof(time_buf)) {
   19948:	2805      	cmp	r0, #5
   1994a:	d93c      	bls.n	199c6 <date_time_at_xtime_handler+0x12e>
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   1994c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   19950:	f00a ff5c 	bl	2480c <semioctet_to_dec>
   19954:	4605      	mov	r5, r0
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   19956:	f89d 0005 	ldrb.w	r0, [sp, #5]
   1995a:	f00a ff57 	bl	2480c <semioctet_to_dec>
   1995e:	4604      	mov	r4, r0
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   19960:	f89d 0006 	ldrb.w	r0, [sp, #6]
   19964:	f00a ff52 	bl	2480c <semioctet_to_dec>
   19968:	9006      	str	r0, [sp, #24]
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   1996a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1996e:	f00a ff4d 	bl	2480c <semioctet_to_dec>
   19972:	9005      	str	r0, [sp, #20]
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   19974:	f89d 0008 	ldrb.w	r0, [sp, #8]
   19978:	f00a ff48 	bl	2480c <semioctet_to_dec>
   1997c:	9004      	str	r0, [sp, #16]
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   1997e:	f89d 0009 	ldrb.w	r0, [sp, #9]
   19982:	f00a ff43 	bl	2480c <semioctet_to_dec>
   19986:	9003      	str	r0, [sp, #12]
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   19988:	3564      	adds	r5, #100	; 0x64
   1998a:	9508      	str	r5, [sp, #32]
	date_time.tm_mon = date_time.tm_mon - 1;
   1998c:	3c01      	subs	r4, #1
   1998e:	9407      	str	r4, [sp, #28]
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   19990:	a803      	add	r0, sp, #12
   19992:	f008 fa84 	bl	21e9e <timeutil_timegm64>
   19996:	014c      	lsls	r4, r1, #5
   19998:	0143      	lsls	r3, r0, #5
   1999a:	ea44 62d0 	orr.w	r2, r4, r0, lsr #27
   1999e:	1a1b      	subs	r3, r3, r0
   199a0:	eb62 0201 	sbc.w	r2, r2, r1
   199a4:	0094      	lsls	r4, r2, #2
   199a6:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   199aa:	009d      	lsls	r5, r3, #2
   199ac:	1828      	adds	r0, r5, r0
   199ae:	eb44 0101 	adc.w	r1, r4, r1
   199b2:	00cb      	lsls	r3, r1, #3
   199b4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   199b8:	00c2      	lsls	r2, r0, #3
   199ba:	4610      	mov	r0, r2
   199bc:	4619      	mov	r1, r3
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   199be:	2200      	movs	r2, #0
   199c0:	f7ff fdd2 	bl	19568 <date_time_core_store>
   199c4:	e774      	b.n	198b0 <date_time_at_xtime_handler+0x18>
   199c6:	4a0a      	ldr	r2, [pc, #40]	; (199f0 <date_time_at_xtime_handler+0x158>)
   199c8:	4b0a      	ldr	r3, [pc, #40]	; (199f4 <date_time_at_xtime_handler+0x15c>)
   199ca:	1ad2      	subs	r2, r2, r3
   199cc:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   199ce:	f04f 0300 	mov.w	r3, #0
   199d2:	2001      	movs	r0, #1
   199d4:	f360 0302 	bfi	r3, r0, #0, #3
   199d8:	f36f 03c5 	bfc	r3, #3, #3
   199dc:	f362 138f 	bfi	r3, r2, #6, #10
   199e0:	4622      	mov	r2, r4
   199e2:	4808      	ldr	r0, [pc, #32]	; (19a04 <date_time_at_xtime_handler+0x16c>)
   199e4:	f7f9 fad4 	bl	12f90 <log_2>
   199e8:	e7b0      	b.n	1994c <date_time_at_xtime_handler+0xb4>
   199ea:	4770      	bx	lr
   199ec:	2000f90e 	.word	0x2000f90e
   199f0:	00027120 	.word	0x00027120
   199f4:	00027108 	.word	0x00027108
   199f8:	0002992c 	.word	0x0002992c
   199fc:	000298d8 	.word	0x000298d8
   19a00:	00029908 	.word	0x00029908
   19a04:	00029964 	.word	0x00029964

00019a08 <date_time_modem_get>:
	if (!modem_valid_network_time) {
   19a08:	4b26      	ldr	r3, [pc, #152]	; (19aa4 <date_time_modem_get+0x9c>)
   19a0a:	781b      	ldrb	r3, [r3, #0]
   19a0c:	2b00      	cmp	r3, #0
   19a0e:	d046      	beq.n	19a9e <date_time_modem_get+0x96>
{
   19a10:	b570      	push	{r4, r5, r6, lr}
   19a12:	b08e      	sub	sp, #56	; 0x38
   19a14:	4605      	mov	r5, r0
	rc = nrf_modem_at_scanf("AT+CCLK?",
   19a16:	ab05      	add	r3, sp, #20
   19a18:	9303      	str	r3, [sp, #12]
   19a1a:	ab06      	add	r3, sp, #24
   19a1c:	9302      	str	r3, [sp, #8]
   19a1e:	ab07      	add	r3, sp, #28
   19a20:	9301      	str	r3, [sp, #4]
   19a22:	ab08      	add	r3, sp, #32
   19a24:	9300      	str	r3, [sp, #0]
   19a26:	ab09      	add	r3, sp, #36	; 0x24
   19a28:	aa0a      	add	r2, sp, #40	; 0x28
   19a2a:	491f      	ldr	r1, [pc, #124]	; (19aa8 <date_time_modem_get+0xa0>)
   19a2c:	481f      	ldr	r0, [pc, #124]	; (19aac <date_time_modem_get+0xa4>)
   19a2e:	f004 f8e7 	bl	1dc00 <nrf_modem_at_scanf>
	if (rc != 6) {
   19a32:	2806      	cmp	r0, #6
   19a34:	d11f      	bne.n	19a76 <date_time_modem_get+0x6e>
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   19a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19a38:	3364      	adds	r3, #100	; 0x64
   19a3a:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   19a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19a3e:	3b01      	subs	r3, #1
   19a40:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   19a42:	a805      	add	r0, sp, #20
   19a44:	f008 fa2b 	bl	21e9e <timeutil_timegm64>
   19a48:	014b      	lsls	r3, r1, #5
   19a4a:	0142      	lsls	r2, r0, #5
   19a4c:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
   19a50:	1a13      	subs	r3, r2, r0
   19a52:	eb64 0201 	sbc.w	r2, r4, r1
   19a56:	0094      	lsls	r4, r2, #2
   19a58:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   19a5c:	009e      	lsls	r6, r3, #2
   19a5e:	1833      	adds	r3, r6, r0
   19a60:	eb44 0101 	adc.w	r1, r4, r1
   19a64:	00ca      	lsls	r2, r1, #3
   19a66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   19a6a:	00d8      	lsls	r0, r3, #3
   19a6c:	6028      	str	r0, [r5, #0]
   19a6e:	606a      	str	r2, [r5, #4]
	return 0;
   19a70:	2000      	movs	r0, #0
}
   19a72:	b00e      	add	sp, #56	; 0x38
   19a74:	bd70      	pop	{r4, r5, r6, pc}
   19a76:	4b0e      	ldr	r3, [pc, #56]	; (19ab0 <date_time_modem_get+0xa8>)
   19a78:	4a0e      	ldr	r2, [pc, #56]	; (19ab4 <date_time_modem_get+0xac>)
   19a7a:	1a9b      	subs	r3, r3, r2
   19a7c:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Did not get time from cellular network (error: %d). "
   19a7e:	f04f 0200 	mov.w	r2, #0
   19a82:	2102      	movs	r1, #2
   19a84:	f361 0202 	bfi	r2, r1, #0, #3
   19a88:	f36f 02c5 	bfc	r2, #3, #3
   19a8c:	f363 128f 	bfi	r2, r3, #6, #10
   19a90:	4601      	mov	r1, r0
   19a92:	4809      	ldr	r0, [pc, #36]	; (19ab8 <date_time_modem_get+0xb0>)
   19a94:	f7f9 fa46 	bl	12f24 <log_1>
		return -ENODATA;
   19a98:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   19a9c:	e7e9      	b.n	19a72 <date_time_modem_get+0x6a>
		return -ENODATA;
   19a9e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   19aa2:	4770      	bx	lr
   19aa4:	2000f90e 	.word	0x2000f90e
   19aa8:	00029998 	.word	0x00029998
   19aac:	000299b4 	.word	0x000299b4
   19ab0:	00027120 	.word	0x00027120
   19ab4:	00027108 	.word	0x00027108
   19ab8:	000299c0 	.word	0x000299c0

00019abc <date_time_modem_store>:
void date_time_modem_store(struct tm *ltm)
{
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   19abc:	4b19      	ldr	r3, [pc, #100]	; (19b24 <date_time_modem_store+0x68>)
   19abe:	781b      	ldrb	r3, [r3, #0]
   19ac0:	b103      	cbz	r3, 19ac4 <date_time_modem_store+0x8>
   19ac2:	4770      	bx	lr
{
   19ac4:	b530      	push	{r4, r5, lr}
   19ac6:	b085      	sub	sp, #20
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
   19ac8:	6945      	ldr	r5, [r0, #20]
   19aca:	6902      	ldr	r2, [r0, #16]
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   19acc:	4916      	ldr	r1, [pc, #88]	; (19b28 <date_time_modem_store+0x6c>)
   19ace:	fb81 3105 	smull	r3, r1, r1, r5
   19ad2:	17ec      	asrs	r4, r5, #31
   19ad4:	ebc4 1461 	rsb	r4, r4, r1, asr #5
   19ad8:	2300      	movs	r3, #0
   19ada:	9303      	str	r3, [sp, #12]
   19adc:	6803      	ldr	r3, [r0, #0]
   19ade:	9302      	str	r3, [sp, #8]
   19ae0:	6843      	ldr	r3, [r0, #4]
   19ae2:	9301      	str	r3, [sp, #4]
   19ae4:	6883      	ldr	r3, [r0, #8]
   19ae6:	9300      	str	r3, [sp, #0]
   19ae8:	68c3      	ldr	r3, [r0, #12]
   19aea:	3201      	adds	r2, #1
   19aec:	2164      	movs	r1, #100	; 0x64
   19aee:	fb01 5114 	mls	r1, r1, r4, r5
   19af2:	480e      	ldr	r0, [pc, #56]	; (19b2c <date_time_modem_store+0x70>)
   19af4:	f003 fff6 	bl	1dae4 <nrf_modem_at_printf>
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   19af8:	4601      	mov	r1, r0
   19afa:	b908      	cbnz	r0, 19b00 <date_time_modem_store+0x44>
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   19afc:	b005      	add	sp, #20
   19afe:	bd30      	pop	{r4, r5, pc}
   19b00:	4b0b      	ldr	r3, [pc, #44]	; (19b30 <date_time_modem_store+0x74>)
   19b02:	4a0c      	ldr	r2, [pc, #48]	; (19b34 <date_time_modem_store+0x78>)
   19b04:	1a9b      	subs	r3, r3, r2
   19b06:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Setting modem time failed, %d", ret);
   19b08:	f04f 0200 	mov.w	r2, #0
   19b0c:	2001      	movs	r0, #1
   19b0e:	f360 0202 	bfi	r2, r0, #0, #3
   19b12:	f36f 02c5 	bfc	r2, #3, #3
   19b16:	f363 128f 	bfi	r2, r3, #6, #10
   19b1a:	4807      	ldr	r0, [pc, #28]	; (19b38 <date_time_modem_store+0x7c>)
   19b1c:	f7f9 fa02 	bl	12f24 <log_1>
			return;
   19b20:	e7ec      	b.n	19afc <date_time_modem_store+0x40>
   19b22:	bf00      	nop
   19b24:	2000f90e 	.word	0x2000f90e
   19b28:	51eb851f 	.word	0x51eb851f
   19b2c:	00029a50 	.word	0x00029a50
   19b30:	00027120 	.word	0x00027120
   19b34:	00027108 	.word	0x00027108
   19b38:	00029a80 	.word	0x00029a80

00019b3c <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   19b3c:	b508      	push	{r3, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   19b3e:	480b      	ldr	r0, [pc, #44]	; (19b6c <date_time_modem_xtime_subscribe+0x30>)
   19b40:	f003 ffd0 	bl	1dae4 <nrf_modem_at_printf>

	if (err) {
   19b44:	b900      	cbnz	r0, 19b48 <date_time_modem_xtime_subscribe+0xc>
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
	}
}
   19b46:	bd08      	pop	{r3, pc}
   19b48:	4601      	mov	r1, r0
   19b4a:	4b09      	ldr	r3, [pc, #36]	; (19b70 <date_time_modem_xtime_subscribe+0x34>)
   19b4c:	4a09      	ldr	r2, [pc, #36]	; (19b74 <date_time_modem_xtime_subscribe+0x38>)
   19b4e:	1a9b      	subs	r3, r3, r2
   19b50:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   19b52:	f04f 0200 	mov.w	r2, #0
   19b56:	2001      	movs	r0, #1
   19b58:	f360 0202 	bfi	r2, r0, #0, #3
   19b5c:	f36f 02c5 	bfc	r2, #3, #3
   19b60:	f363 128f 	bfi	r2, r3, #6, #10
   19b64:	4804      	ldr	r0, [pc, #16]	; (19b78 <date_time_modem_xtime_subscribe+0x3c>)
   19b66:	f7f9 f9dd 	bl	12f24 <log_1>
}
   19b6a:	e7ec      	b.n	19b46 <date_time_modem_xtime_subscribe+0xa>
   19b6c:	00029aa0 	.word	0x00029aa0
   19b70:	00027120 	.word	0x00027120
   19b74:	00027108 	.word	0x00027108
   19b78:	00029aac 	.word	0x00029aac

00019b7c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   19b7c:	b570      	push	{r4, r5, r6, lr}
   19b7e:	b084      	sub	sp, #16
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);
   19b80:	481d      	ldr	r0, [pc, #116]	; (19bf8 <check_ext_api_requests+0x7c>)
   19b82:	f00a fe68 	bl	24856 <skip_ext_apis>
   19b86:	4604      	mov	r4, r0

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19b88:	2600      	movs	r6, #0
   19b8a:	e00a      	b.n	19ba2 <check_ext_api_requests+0x26>
	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
		== 0) {
		return ext_api;
	}
	return NULL;
   19b8c:	2500      	movs	r5, #0
   19b8e:	e01a      	b.n	19bc6 <check_ext_api_requests+0x4a>
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   19b90:	481a      	ldr	r0, [pc, #104]	; (19bfc <check_ext_api_requests+0x80>)
   19b92:	f008 f80b 	bl	21bac <printk>
				"fulfilled.\r\n");
			*ext_api_req->ext_api = NULL;
   19b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19b98:	2200      	movs	r2, #0
   19b9a:	601a      	str	r2, [r3, #0]
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
   19b9c:	68e3      	ldr	r3, [r4, #12]
   19b9e:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19ba0:	3601      	adds	r6, #1
   19ba2:	4b15      	ldr	r3, [pc, #84]	; (19bf8 <check_ext_api_requests+0x7c>)
   19ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19ba6:	42b3      	cmp	r3, r6
   19ba8:	d922      	bls.n	19bf0 <check_ext_api_requests+0x74>
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   19baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19bac:	681d      	ldr	r5, [r3, #0]
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   19bae:	ab01      	add	r3, sp, #4
   19bb0:	4a13      	ldr	r2, [pc, #76]	; (19c00 <check_ext_api_requests+0x84>)
   19bb2:	ca07      	ldmia	r2, {r0, r1, r2}
   19bb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   19bb8:	220c      	movs	r2, #12
   19bba:	4619      	mov	r1, r3
   19bbc:	4628      	mov	r0, r5
   19bbe:	f00c fe32 	bl	26826 <memcmp>
   19bc2:	2800      	cmp	r0, #0
   19bc4:	d1e2      	bne.n	19b8c <check_ext_api_requests+0x10>
   19bc6:	b135      	cbz	r5, 19bd6 <check_ext_api_requests+0x5a>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19bca:	4621      	mov	r1, r4
   19bcc:	6818      	ldr	r0, [r3, #0]
   19bce:	f00a fe26 	bl	2481e <ext_api_satisfies_req>
   19bd2:	2800      	cmp	r0, #0
   19bd4:	d1e2      	bne.n	19b9c <check_ext_api_requests+0x20>
		} else if (ext_api_req->required) {
   19bd6:	6a23      	ldr	r3, [r4, #32]
   19bd8:	2b00      	cmp	r3, #0
   19bda:	d0d9      	beq.n	19b90 <check_ext_api_requests+0x14>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   19bdc:	4809      	ldr	r0, [pc, #36]	; (19c04 <check_ext_api_requests+0x88>)
   19bde:	f007 ffe5 	bl	21bac <printk>
			k_panic();
   19be2:	4040      	eors	r0, r0
   19be4:	f380 8811 	msr	BASEPRI, r0
   19be8:	f04f 0004 	mov.w	r0, #4
   19bec:	df02      	svc	2
   19bee:	e7d5      	b.n	19b9c <check_ext_api_requests+0x20>
	}

	return 0;
}
   19bf0:	2000      	movs	r0, #0
   19bf2:	b004      	add	sp, #16
   19bf4:	bd70      	pop	{r4, r5, r6, pc}
   19bf6:	bf00      	nop
   19bf8:	00010200 	.word	0x00010200
   19bfc:	00029b1c 	.word	0x00029b1c
   19c00:	0002721c 	.word	0x0002721c
   19c04:	00029af0 	.word	0x00029af0

00019c08 <blocked_work_fn>:
	atomic_set(&drv_data->timeout_occurred, 1);
	notify_event(dev, &evt);
}

static void blocked_work_fn(struct k_work *work)
{
   19c08:	b508      	push	{r3, lr}
	ARG_UNUSED(work);

	int err;

	err = nrf_modem_gnss_prio_mode_enable();
   19c0a:	f004 fbfb 	bl	1e404 <nrf_modem_gnss_prio_mode_enable>
	if (err) {
   19c0e:	b900      	cbnz	r0, 19c12 <blocked_work_fn+0xa>
		LOG_ERR("Failed to enable GPS priority, error: %d", err);
		return;
	}

	LOG_DBG("GPS priority enabled");
}
   19c10:	bd08      	pop	{r3, pc}
   19c12:	4601      	mov	r1, r0
   19c14:	4b08      	ldr	r3, [pc, #32]	; (19c38 <blocked_work_fn+0x30>)
   19c16:	4a09      	ldr	r2, [pc, #36]	; (19c3c <blocked_work_fn+0x34>)
   19c18:	1a9b      	subs	r3, r3, r2
   19c1a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable GPS priority, error: %d", err);
   19c1c:	f04f 0200 	mov.w	r2, #0
   19c20:	2001      	movs	r0, #1
   19c22:	f360 0202 	bfi	r2, r0, #0, #3
   19c26:	f36f 02c5 	bfc	r2, #3, #3
   19c2a:	f363 128f 	bfi	r2, r3, #6, #10
   19c2e:	4804      	ldr	r0, [pc, #16]	; (19c40 <blocked_work_fn+0x38>)
   19c30:	f7f9 f978 	bl	12f24 <log_1>
		return;
   19c34:	e7ec      	b.n	19c10 <blocked_work_fn+0x8>
   19c36:	bf00      	nop
   19c38:	00027168 	.word	0x00027168
   19c3c:	00027108 	.word	0x00027108
   19c40:	00029b50 	.word	0x00029b50

00019c44 <gnss_event_handler>:
{
   19c44:	b500      	push	{lr}
   19c46:	b083      	sub	sp, #12
	struct event_item event = {
   19c48:	f88d 0000 	strb.w	r0, [sp]
   19c4c:	2300      	movs	r3, #0
   19c4e:	9301      	str	r3, [sp, #4]
	switch (event_id) {
   19c50:	2803      	cmp	r0, #3
   19c52:	d023      	beq.n	19c9c <gnss_event_handler+0x58>
   19c54:	2804      	cmp	r0, #4
   19c56:	d027      	beq.n	19ca8 <gnss_event_handler+0x64>
   19c58:	2801      	cmp	r0, #1
   19c5a:	d002      	beq.n	19c62 <gnss_event_handler+0x1e>
}
   19c5c:	b003      	add	sp, #12
   19c5e:	f85d fb04 	ldr.w	pc, [sp], #4
		err = get_event_data(&event.data,
   19c62:	22e8      	movs	r2, #232	; 0xe8
   19c64:	2101      	movs	r1, #1
   19c66:	a801      	add	r0, sp, #4
   19c68:	f00a feac 	bl	249c4 <get_event_data>
	if (err) {
   19c6c:	2800      	cmp	r0, #0
   19c6e:	d1f5      	bne.n	19c5c <gnss_event_handler+0x18>
	return z_impl_k_msgq_put(msgq, data, timeout);
   19c70:	2200      	movs	r2, #0
   19c72:	2300      	movs	r3, #0
   19c74:	4669      	mov	r1, sp
   19c76:	480f      	ldr	r0, [pc, #60]	; (19cb4 <gnss_event_handler+0x70>)
   19c78:	f005 f91c 	bl	1eeb4 <z_impl_k_msgq_put>
	if (err) {
   19c7c:	2800      	cmp	r0, #0
   19c7e:	d0ed      	beq.n	19c5c <gnss_event_handler+0x18>
		k_free(event.data);
   19c80:	9801      	ldr	r0, [sp, #4]
   19c82:	f00c fd98 	bl	267b6 <k_free>
   19c86:	480c      	ldr	r0, [pc, #48]	; (19cb8 <gnss_event_handler+0x74>)
   19c88:	f004 fdda 	bl	1e840 <z_impl_device_get_binding>
		if (dev != NULL) {
   19c8c:	2800      	cmp	r0, #0
   19c8e:	d0e5      	beq.n	19c5c <gnss_event_handler+0x18>
			struct gps_drv_data *drv_data = dev->data;
   19c90:	6900      	ldr	r0, [r0, #16]
			k_work_submit(&drv_data->error_work);
   19c92:	f600 104c 	addw	r0, r0, #2380	; 0x94c
   19c96:	f005 fc67 	bl	1f568 <k_work_submit>
   19c9a:	e7df      	b.n	19c5c <gnss_event_handler+0x18>
		err = get_event_data(&event.data,
   19c9c:	2253      	movs	r2, #83	; 0x53
   19c9e:	2102      	movs	r1, #2
   19ca0:	a801      	add	r0, sp, #4
   19ca2:	f00a fe8f 	bl	249c4 <get_event_data>
		break;
   19ca6:	e7e1      	b.n	19c6c <gnss_event_handler+0x28>
		err = get_event_data(&event.data,
   19ca8:	220c      	movs	r2, #12
   19caa:	2103      	movs	r1, #3
   19cac:	a801      	add	r0, sp, #4
   19cae:	f00a fe89 	bl	249c4 <get_event_data>
		break;
   19cb2:	e7db      	b.n	19c6c <gnss_event_handler+0x28>
   19cb4:	2000c87c 	.word	0x2000c87c
   19cb8:	00029b7c 	.word	0x00029b7c

00019cbc <configure_antenna>:
{
   19cbc:	b510      	push	{r4, lr}
	err = nrf_modem_at_printf("%s", CONFIG_NRF9160_GPS_MAGPIO_STRING);
   19cbe:	4930      	ldr	r1, [pc, #192]	; (19d80 <configure_antenna+0xc4>)
   19cc0:	4830      	ldr	r0, [pc, #192]	; (19d84 <configure_antenna+0xc8>)
   19cc2:	f003 ff0f 	bl	1dae4 <nrf_modem_at_printf>
	if (err) {
   19cc6:	b348      	cbz	r0, 19d1c <configure_antenna+0x60>
   19cc8:	4604      	mov	r4, r0
		if (err > 0) {
   19cca:	2800      	cmp	r0, #0
   19ccc:	dd14      	ble.n	19cf8 <configure_antenna+0x3c>
   19cce:	4a2e      	ldr	r2, [pc, #184]	; (19d88 <configure_antenna+0xcc>)
   19cd0:	4b2e      	ldr	r3, [pc, #184]	; (19d8c <configure_antenna+0xd0>)
   19cd2:	1ad2      	subs	r2, r2, r3
   19cd4:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Could not configure MAGPIO, error_type: %d, error_value: %d",
   19cd6:	f04f 0300 	mov.w	r3, #0
   19cda:	2101      	movs	r1, #1
   19cdc:	f361 0302 	bfi	r3, r1, #0, #3
   19ce0:	f36f 03c5 	bfc	r3, #3, #3
   19ce4:	f362 138f 	bfi	r3, r2, #6, #10
   19ce8:	f420 027f 	bic.w	r2, r0, #16711680	; 0xff0000
   19cec:	f3c0 4107 	ubfx	r1, r0, #16, #8
   19cf0:	4827      	ldr	r0, [pc, #156]	; (19d90 <configure_antenna+0xd4>)
   19cf2:	f7f9 f94d 	bl	12f90 <log_2>
   19cf6:	e017      	b.n	19d28 <configure_antenna+0x6c>
   19cf8:	4b23      	ldr	r3, [pc, #140]	; (19d88 <configure_antenna+0xcc>)
   19cfa:	4a24      	ldr	r2, [pc, #144]	; (19d8c <configure_antenna+0xd0>)
   19cfc:	1a9b      	subs	r3, r3, r2
   19cfe:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not configure MAGPIO, error: %d", err);
   19d00:	f04f 0200 	mov.w	r2, #0
   19d04:	2101      	movs	r1, #1
   19d06:	f361 0202 	bfi	r2, r1, #0, #3
   19d0a:	f36f 02c5 	bfc	r2, #3, #3
   19d0e:	f363 128f 	bfi	r2, r3, #6, #10
   19d12:	4601      	mov	r1, r0
   19d14:	481f      	ldr	r0, [pc, #124]	; (19d94 <configure_antenna+0xd8>)
   19d16:	f7f9 f905 	bl	12f24 <log_1>
		return err;
   19d1a:	e005      	b.n	19d28 <configure_antenna+0x6c>
	err = nrf_modem_at_printf("%s", CONFIG_NRF9160_GPS_COEX0_STRING);
   19d1c:	491e      	ldr	r1, [pc, #120]	; (19d98 <configure_antenna+0xdc>)
   19d1e:	4819      	ldr	r0, [pc, #100]	; (19d84 <configure_antenna+0xc8>)
   19d20:	f003 fee0 	bl	1dae4 <nrf_modem_at_printf>
	if (err) {
   19d24:	4604      	mov	r4, r0
   19d26:	b908      	cbnz	r0, 19d2c <configure_antenna+0x70>
}
   19d28:	4620      	mov	r0, r4
   19d2a:	bd10      	pop	{r4, pc}
		if (err > 0) {
   19d2c:	2800      	cmp	r0, #0
   19d2e:	dd14      	ble.n	19d5a <configure_antenna+0x9e>
   19d30:	4a15      	ldr	r2, [pc, #84]	; (19d88 <configure_antenna+0xcc>)
   19d32:	4b16      	ldr	r3, [pc, #88]	; (19d8c <configure_antenna+0xd0>)
   19d34:	1ad2      	subs	r2, r2, r3
   19d36:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Could not configure COEX0, error_type: %d, error_value: %d",
   19d38:	f04f 0300 	mov.w	r3, #0
   19d3c:	2101      	movs	r1, #1
   19d3e:	f361 0302 	bfi	r3, r1, #0, #3
   19d42:	f36f 03c5 	bfc	r3, #3, #3
   19d46:	f362 138f 	bfi	r3, r2, #6, #10
   19d4a:	f420 027f 	bic.w	r2, r0, #16711680	; 0xff0000
   19d4e:	f3c0 4107 	ubfx	r1, r0, #16, #8
   19d52:	4812      	ldr	r0, [pc, #72]	; (19d9c <configure_antenna+0xe0>)
   19d54:	f7f9 f91c 	bl	12f90 <log_2>
   19d58:	e7e6      	b.n	19d28 <configure_antenna+0x6c>
   19d5a:	4b0b      	ldr	r3, [pc, #44]	; (19d88 <configure_antenna+0xcc>)
   19d5c:	4a0b      	ldr	r2, [pc, #44]	; (19d8c <configure_antenna+0xd0>)
   19d5e:	1a9b      	subs	r3, r3, r2
   19d60:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not configure COEX0, error: %d", err);
   19d62:	f04f 0200 	mov.w	r2, #0
   19d66:	2101      	movs	r1, #1
   19d68:	f361 0202 	bfi	r2, r1, #0, #3
   19d6c:	f36f 02c5 	bfc	r2, #3, #3
   19d70:	f363 128f 	bfi	r2, r3, #6, #10
   19d74:	4601      	mov	r1, r0
   19d76:	480a      	ldr	r0, [pc, #40]	; (19da0 <configure_antenna+0xe4>)
   19d78:	f7f9 f8d4 	bl	12f24 <log_1>
		return err;
   19d7c:	e7d4      	b.n	19d28 <configure_antenna+0x6c>
   19d7e:	bf00      	nop
   19d80:	00029b88 	.word	0x00029b88
   19d84:	00029960 	.word	0x00029960
   19d88:	00027168 	.word	0x00027168
   19d8c:	00027108 	.word	0x00027108
   19d90:	00029ba8 	.word	0x00029ba8
   19d94:	00029be4 	.word	0x00029be4
   19d98:	00029c0c 	.word	0x00029c0c
   19d9c:	00029c24 	.word	0x00029c24
   19da0:	00029c60 	.word	0x00029c60

00019da4 <print_satellite_stats>:
	for (int i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; ++i) {
   19da4:	2300      	movs	r3, #0
   19da6:	2b0b      	cmp	r3, #11
   19da8:	dc01      	bgt.n	19dae <print_satellite_stats+0xa>
   19daa:	3301      	adds	r3, #1
   19dac:	e7fb      	b.n	19da6 <print_satellite_stats+0x2>
	if (fix_timestamp > start_timestamp) {
   19dae:	4b0d      	ldr	r3, [pc, #52]	; (19de4 <print_satellite_stats+0x40>)
   19db0:	e9d3 2300 	ldrd	r2, r3, [r3]
   19db4:	490c      	ldr	r1, [pc, #48]	; (19de8 <print_satellite_stats+0x44>)
   19db6:	e9d1 0100 	ldrd	r0, r1, [r1]
   19dba:	4299      	cmp	r1, r3
   19dbc:	bf08      	it	eq
   19dbe:	4290      	cmpeq	r0, r2
   19dc0:	d300      	bcc.n	19dc4 <print_satellite_stats+0x20>
   19dc2:	4770      	bx	lr
{
   19dc4:	b500      	push	{lr}
   19dc6:	b08b      	sub	sp, #44	; 0x2c
		snprintf(buf, sizeof(buf), "Seconds for this fix %d",
   19dc8:	1a12      	subs	r2, r2, r0
   19dca:	4b08      	ldr	r3, [pc, #32]	; (19dec <print_satellite_stats+0x48>)
   19dcc:	fba3 2302 	umull	r2, r3, r3, r2
   19dd0:	099b      	lsrs	r3, r3, #6
   19dd2:	4a07      	ldr	r2, [pc, #28]	; (19df0 <print_satellite_stats+0x4c>)
   19dd4:	2123      	movs	r1, #35	; 0x23
   19dd6:	a801      	add	r0, sp, #4
   19dd8:	f006 feec 	bl	20bb4 <sniprintf>
}
   19ddc:	b00b      	add	sp, #44	; 0x2c
   19dde:	f85d fb04 	ldr.w	pc, [sp], #4
   19de2:	bf00      	nop
   19de4:	2000cbb8 	.word	0x2000cbb8
   19de8:	2000d580 	.word	0x2000d580
   19dec:	10624dd3 	.word	0x10624dd3
   19df0:	00029c88 	.word	0x00029c88

00019df4 <init_thread>:
{
   19df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19df6:	b089      	sub	sp, #36	; 0x24
   19df8:	4603      	mov	r3, r0
	struct gps_drv_data *drv_data = dev->data;
   19dfa:	6904      	ldr	r4, [r0, #16]
		k_thread_create(&drv_data->thread, drv_data->thread_stack,
   19dfc:	f504 6003 	add.w	r0, r4, #2096	; 0x830
   19e00:	f104 0130 	add.w	r1, r4, #48	; 0x30
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19e04:	2600      	movs	r6, #0
   19e06:	2700      	movs	r7, #0
   19e08:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19e0c:	2200      	movs	r2, #0
   19e0e:	9204      	str	r2, [sp, #16]
   19e10:	250a      	movs	r5, #10
   19e12:	9503      	str	r5, [sp, #12]
   19e14:	9202      	str	r2, [sp, #8]
   19e16:	9201      	str	r2, [sp, #4]
   19e18:	9300      	str	r3, [sp, #0]
   19e1a:	4b06      	ldr	r3, [pc, #24]	; (19e34 <init_thread+0x40>)
   19e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19e20:	f00b ffbc 	bl	25d9c <z_impl_k_thread_create>
	drv_data->thread_id =
   19e24:	f8c4 0928 	str.w	r0, [r4, #2344]	; 0x928
	return z_impl_k_thread_name_set(thread, str);
   19e28:	4903      	ldr	r1, [pc, #12]	; (19e38 <init_thread+0x44>)
   19e2a:	f004 ff55 	bl	1ecd8 <z_impl_k_thread_name_set>
}
   19e2e:	b009      	add	sp, #36	; 0x24
   19e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e32:	bf00      	nop
   19e34:	00019f85 	.word	0x00019f85
   19e38:	00029ca0 	.word	0x00029ca0

00019e3c <init>:

	return 0;
}

static int init(const struct device *dev, gps_event_handler_t handler)
{
   19e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gps_drv_data *drv_data = dev->data;
   19e3e:	6904      	ldr	r4, [r0, #16]
	int err;

	if (atomic_get(&drv_data->is_init)) {
   19e40:	f104 0718 	add.w	r7, r4, #24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19e44:	e8d7 3faf 	lda	r3, [r7]
   19e48:	2b00      	cmp	r3, #0
   19e4a:	d13b      	bne.n	19ec4 <init+0x88>
   19e4c:	4605      	mov	r5, r0
		LOG_WRN("GPS is already initialized");
		return -EALREADY;
	}

	if (handler == NULL) {
   19e4e:	2900      	cmp	r1, #0
   19e50:	d04b      	beq.n	19eea <init+0xae>
		LOG_ERR("No event handler provided");
		return -EINVAL;
	}

	drv_data->handler = handler;
   19e52:	6061      	str	r1, [r4, #4]

	err = configure_antenna();
   19e54:	f7ff ff32 	bl	19cbc <configure_antenna>
	if (err) {
   19e58:	4606      	mov	r6, r0
   19e5a:	2800      	cmp	r0, #0
   19e5c:	d156      	bne.n	19f0c <init+0xd0>
		LOG_ERR("Failed to configure antenna, error: %d", err);
		return err;
	}

	err = nrf_modem_gnss_event_handler_set(gnss_event_handler);
   19e5e:	483d      	ldr	r0, [pc, #244]	; (19f54 <init+0x118>)
   19e60:	f004 fb82 	bl	1e568 <nrf_modem_gnss_event_handler_set>
	if (err) {
   19e64:	4606      	mov	r6, r0
   19e66:	2800      	cmp	r0, #0
   19e68:	d162      	bne.n	19f30 <init+0xf4>
		LOG_ERR("Failed to set GNSS event handler, error: %d", err);
		return err;
	}

	init_thread(dev);
   19e6a:	4628      	mov	r0, r5
   19e6c:	f7ff ffc2 	bl	19df4 <init_thread>

	k_work_init(&drv_data->start_work, start_work_fn);
   19e70:	4939      	ldr	r1, [pc, #228]	; (19f58 <init+0x11c>)
   19e72:	f604 102c 	addw	r0, r4, #2348	; 0x92c
   19e76:	f00c f8ee 	bl	26056 <k_work_init>
	k_work_init(&drv_data->stop_work, stop_work_fn);
   19e7a:	4938      	ldr	r1, [pc, #224]	; (19f5c <init+0x120>)
   19e7c:	f604 103c 	addw	r0, r4, #2364	; 0x93c
   19e80:	f00c f8e9 	bl	26056 <k_work_init>
	k_work_init(&drv_data->error_work, error_work_fn);
   19e84:	4936      	ldr	r1, [pc, #216]	; (19f60 <init+0x124>)
   19e86:	f604 104c 	addw	r0, r4, #2380	; 0x94c
   19e8a:	f00c f8e4 	bl	26056 <k_work_init>
	k_work_init_delayable(&drv_data->timeout_work, timeout_work_fn);
   19e8e:	4935      	ldr	r1, [pc, #212]	; (19f64 <init+0x128>)
   19e90:	f504 6016 	add.w	r0, r4, #2400	; 0x960
   19e94:	f00c f905 	bl	260a2 <k_work_init_delayable>
	k_work_init_delayable(&drv_data->blocked_work, blocked_work_fn);
   19e98:	4933      	ldr	r1, [pc, #204]	; (19f68 <init+0x12c>)
   19e9a:	f504 6019 	add.w	r0, r4, #2448	; 0x990
   19e9e:	f00c f900 	bl	260a2 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19ea2:	2301      	movs	r3, #1
   19ea4:	e8d7 2fef 	ldaex	r2, [r7]
   19ea8:	e8c7 3fe1 	stlex	r1, r3, [r7]
   19eac:	2900      	cmp	r1, #0
   19eae:	d1f9      	bne.n	19ea4 <init+0x68>

	atomic_set(&drv_data->is_init, 1);
	atomic_set(&drv_data->is_running, 0);
   19eb0:	341c      	adds	r4, #28
   19eb2:	2300      	movs	r3, #0
   19eb4:	e8d4 2fef 	ldaex	r2, [r4]
   19eb8:	e8c4 3fe1 	stlex	r1, r3, [r4]
   19ebc:	2900      	cmp	r1, #0
   19ebe:	d1f9      	bne.n	19eb4 <init+0x78>

	return 0;
}
   19ec0:	4630      	mov	r0, r6
   19ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ec4:	4b29      	ldr	r3, [pc, #164]	; (19f6c <init+0x130>)
   19ec6:	4a2a      	ldr	r2, [pc, #168]	; (19f70 <init+0x134>)
   19ec8:	1a9b      	subs	r3, r3, r2
   19eca:	08db      	lsrs	r3, r3, #3
		LOG_WRN("GPS is already initialized");
   19ecc:	f04f 0100 	mov.w	r1, #0
   19ed0:	2202      	movs	r2, #2
   19ed2:	f362 0102 	bfi	r1, r2, #0, #3
   19ed6:	f36f 01c5 	bfc	r1, #3, #3
   19eda:	f363 118f 	bfi	r1, r3, #6, #10
   19ede:	4825      	ldr	r0, [pc, #148]	; (19f74 <init+0x138>)
   19ee0:	f7f9 f8b4 	bl	1304c <log_0>
		return -EALREADY;
   19ee4:	f06f 0677 	mvn.w	r6, #119	; 0x77
   19ee8:	e7ea      	b.n	19ec0 <init+0x84>
   19eea:	4b20      	ldr	r3, [pc, #128]	; (19f6c <init+0x130>)
   19eec:	4a20      	ldr	r2, [pc, #128]	; (19f70 <init+0x134>)
   19eee:	1a9b      	subs	r3, r3, r2
   19ef0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No event handler provided");
   19ef2:	2201      	movs	r2, #1
   19ef4:	f362 0102 	bfi	r1, r2, #0, #3
   19ef8:	f36f 01c5 	bfc	r1, #3, #3
   19efc:	f363 118f 	bfi	r1, r3, #6, #10
   19f00:	481d      	ldr	r0, [pc, #116]	; (19f78 <init+0x13c>)
   19f02:	f7f9 f8a3 	bl	1304c <log_0>
		return -EINVAL;
   19f06:	f06f 0615 	mvn.w	r6, #21
   19f0a:	e7d9      	b.n	19ec0 <init+0x84>
   19f0c:	4b17      	ldr	r3, [pc, #92]	; (19f6c <init+0x130>)
   19f0e:	4a18      	ldr	r2, [pc, #96]	; (19f70 <init+0x134>)
   19f10:	1a9b      	subs	r3, r3, r2
   19f12:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure antenna, error: %d", err);
   19f14:	f04f 0200 	mov.w	r2, #0
   19f18:	2101      	movs	r1, #1
   19f1a:	f361 0202 	bfi	r2, r1, #0, #3
   19f1e:	f36f 02c5 	bfc	r2, #3, #3
   19f22:	f363 128f 	bfi	r2, r3, #6, #10
   19f26:	4601      	mov	r1, r0
   19f28:	4814      	ldr	r0, [pc, #80]	; (19f7c <init+0x140>)
   19f2a:	f7f8 fffb 	bl	12f24 <log_1>
		return err;
   19f2e:	e7c7      	b.n	19ec0 <init+0x84>
   19f30:	4b0e      	ldr	r3, [pc, #56]	; (19f6c <init+0x130>)
   19f32:	4a0f      	ldr	r2, [pc, #60]	; (19f70 <init+0x134>)
   19f34:	1a9b      	subs	r3, r3, r2
   19f36:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to set GNSS event handler, error: %d", err);
   19f38:	f04f 0200 	mov.w	r2, #0
   19f3c:	2101      	movs	r1, #1
   19f3e:	f361 0202 	bfi	r2, r1, #0, #3
   19f42:	f36f 02c5 	bfc	r2, #3, #3
   19f46:	f363 128f 	bfi	r2, r3, #6, #10
   19f4a:	4601      	mov	r1, r0
   19f4c:	480c      	ldr	r0, [pc, #48]	; (19f80 <init+0x144>)
   19f4e:	f7f8 ffe9 	bl	12f24 <log_1>
		return err;
   19f52:	e7b5      	b.n	19ec0 <init+0x84>
   19f54:	00019c45 	.word	0x00019c45
   19f58:	0002494b 	.word	0x0002494b
   19f5c:	0002496b 	.word	0x0002496b
   19f60:	00024991 	.word	0x00024991
   19f64:	00024a0d 	.word	0x00024a0d
   19f68:	00019c09 	.word	0x00019c09
   19f6c:	00027168 	.word	0x00027168
   19f70:	00027108 	.word	0x00027108
   19f74:	00029cb4 	.word	0x00029cb4
   19f78:	00029cd0 	.word	0x00029cd0
   19f7c:	00029cec 	.word	0x00029cec
   19f80:	00029d14 	.word	0x00029d14

00019f84 <gps_thread>:
{
   19f84:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f86:	b0b3      	sub	sp, #204	; 0xcc
   19f88:	4605      	mov	r5, r0
	struct gps_drv_data *drv_data = dev->data;
   19f8a:	6904      	ldr	r4, [r0, #16]
   19f8c:	e0c7      	b.n	1a11e <gps_thread+0x19a>
				k_work_reschedule(&drv_data->timeout_work, K_SECONDS(5));
   19f8e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   19f92:	2300      	movs	r3, #0
   19f94:	f504 6016 	add.w	r0, r4, #2400	; 0x960
   19f98:	f005 fb34 	bl	1f604 <k_work_reschedule>
   19f9c:	e0da      	b.n	1a154 <gps_thread+0x1d0>
			} else if (atomic_get(&drv_data->operation_blocked)) {
   19f9e:	f104 0328 	add.w	r3, r4, #40	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19fa2:	e8d3 2faf 	lda	r2, [r3]
   19fa6:	b18a      	cbz	r2, 19fcc <gps_thread+0x48>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19fa8:	2200      	movs	r2, #0
   19faa:	e8d3 1fef 	ldaex	r1, [r3]
   19fae:	e8c3 2fe0 	stlex	r0, r2, [r3]
   19fb2:	2800      	cmp	r0, #0
   19fb4:	d1f9      	bne.n	19faa <gps_thread+0x26>
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   19fb6:	2308      	movs	r3, #8
   19fb8:	f88d 3000 	strb.w	r3, [sp]
				notify_event(dev, &evt);
   19fbc:	4669      	mov	r1, sp
   19fbe:	4628      	mov	r0, r5
   19fc0:	f00a fcba 	bl	24938 <notify_event>
				k_work_cancel_delayable(&drv_data->blocked_work);
   19fc4:	f504 6019 	add.w	r0, r4, #2448	; 0x990
   19fc8:	f00c f8c7 	bl	2615a <k_work_cancel_delayable>
			copy_pvt(&evt.pvt, pvt_data);
   19fcc:	4631      	mov	r1, r6
   19fce:	a802      	add	r0, sp, #8
   19fd0:	f00a fc4c 	bl	2486c <copy_pvt>
			if (pvt_data->flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
   19fd4:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
   19fd8:	f013 0f01 	tst.w	r3, #1
   19fdc:	d031      	beq.n	1a042 <gps_thread+0xbe>
				evt.type = GPS_EVT_PVT_FIX;
   19fde:	2304      	movs	r3, #4
   19fe0:	f88d 3000 	strb.w	r3, [sp]
	return z_impl_k_uptime_ticks();
   19fe4:	f00c faf0 	bl	265c8 <z_impl_k_uptime_ticks>
   19fe8:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   19fec:	0143      	lsls	r3, r0, #5
   19fee:	ea4c 62d0 	orr.w	r2, ip, r0, lsr #27
   19ff2:	1a1b      	subs	r3, r3, r0
   19ff4:	eb62 0201 	sbc.w	r2, r2, r1
   19ff8:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   19ffc:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
   1a000:	ea4f 0e83 	mov.w	lr, r3, lsl #2
   1a004:	4662      	mov	r2, ip
   1a006:	eb1e 0300 	adds.w	r3, lr, r0
   1a00a:	eb41 0202 	adc.w	r2, r1, r2
   1a00e:	00d1      	lsls	r1, r2, #3
   1a010:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   1a014:	00d8      	lsls	r0, r3, #3
   1a016:	0bc3      	lsrs	r3, r0, #15
   1a018:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1a01c:	0bc9      	lsrs	r1, r1, #15
				fix_timestamp = k_uptime_get();
   1a01e:	4a86      	ldr	r2, [pc, #536]	; (1a238 <gps_thread+0x2b4>)
   1a020:	6013      	str	r3, [r2, #0]
   1a022:	6051      	str	r1, [r2, #4]
   1a024:	2301      	movs	r3, #1
   1a026:	e8d7 2fef 	ldaex	r2, [r7]
   1a02a:	e8c7 3fe1 	stlex	r1, r3, [r7]
   1a02e:	2900      	cmp	r1, #0
   1a030:	d1f9      	bne.n	1a026 <gps_thread+0xa2>
			notify_event(dev, &evt);
   1a032:	4669      	mov	r1, sp
   1a034:	4628      	mov	r0, r5
   1a036:	f00a fc7f 	bl	24938 <notify_event>
			print_satellite_stats(pvt_data);
   1a03a:	4630      	mov	r0, r6
   1a03c:	f7ff feb2 	bl	19da4 <print_satellite_stats>
			break;
   1a040:	e06a      	b.n	1a118 <gps_thread+0x194>
				evt.type = GPS_EVT_PVT;
   1a042:	2303      	movs	r3, #3
   1a044:	f88d 3000 	strb.w	r3, [sp]
   1a048:	2300      	movs	r3, #0
   1a04a:	e8d7 2fef 	ldaex	r2, [r7]
   1a04e:	e8c7 3fe1 	stlex	r1, r3, [r7]
   1a052:	2900      	cmp	r1, #0
   1a054:	d0ed      	beq.n	1a032 <gps_thread+0xae>
   1a056:	e7f8      	b.n	1a04a <gps_thread+0xc6>
			if (atomic_get(&drv_data->operation_blocked)) {
   1a058:	f104 0328 	add.w	r3, r4, #40	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a05c:	e8d3 3faf 	lda	r3, [r3]
   1a060:	2b00      	cmp	r3, #0
   1a062:	d159      	bne.n	1a118 <gps_thread+0x194>
			nmea_data = event.data;
   1a064:	9f31      	ldr	r7, [sp, #196]	; 0xc4
			nmea_len = strlen(nmea_data->nmea_str);
   1a066:	4638      	mov	r0, r7
   1a068:	f7f6 fedc 	bl	10e24 <strlen>
   1a06c:	4606      	mov	r6, r0
			memcpy(evt.nmea.buf, nmea_data->nmea_str, nmea_len + 1);
   1a06e:	23b8      	movs	r3, #184	; 0xb8
   1a070:	1c42      	adds	r2, r0, #1
   1a072:	4639      	mov	r1, r7
   1a074:	a802      	add	r0, sp, #8
   1a076:	f00c fbf1 	bl	2685c <__memcpy_chk>
			evt.nmea.len = nmea_len;
   1a07a:	f88d 605b 	strb.w	r6, [sp, #91]	; 0x5b
			if (atomic_get(&drv_data->fix_valid)) {
   1a07e:	f104 0320 	add.w	r3, r4, #32
   1a082:	e8d3 3faf 	lda	r3, [r3]
   1a086:	b13b      	cbz	r3, 1a098 <gps_thread+0x114>
				evt.type = GPS_EVT_NMEA_FIX;
   1a088:	2306      	movs	r3, #6
   1a08a:	f88d 3000 	strb.w	r3, [sp]
			notify_event(dev, &evt);
   1a08e:	4669      	mov	r1, sp
   1a090:	4628      	mov	r0, r5
   1a092:	f00a fc51 	bl	24938 <notify_event>
			break;
   1a096:	e03f      	b.n	1a118 <gps_thread+0x194>
				evt.type = GPS_EVT_NMEA;
   1a098:	2305      	movs	r3, #5
   1a09a:	f88d 3000 	strb.w	r3, [sp]
   1a09e:	e7f6      	b.n	1a08e <gps_thread+0x10a>
			agps_data = event.data;
   1a0a0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
			evt.type = GPS_EVT_AGPS_DATA_NEEDED;
   1a0a2:	2209      	movs	r2, #9
   1a0a4:	f88d 2000 	strb.w	r2, [sp]
				agps_data->sv_mask_ephe;
   1a0a8:	681a      	ldr	r2, [r3, #0]
			evt.agps_request.sv_mask_ephe =
   1a0aa:	9202      	str	r2, [sp, #8]
				agps_data->sv_mask_alm;
   1a0ac:	685a      	ldr	r2, [r3, #4]
			evt.agps_request.sv_mask_alm =
   1a0ae:	9203      	str	r2, [sp, #12]
				agps_data->data_flags &
   1a0b0:	6899      	ldr	r1, [r3, #8]
			evt.agps_request.utc =
   1a0b2:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1a0b6:	f361 0200 	bfi	r2, r1, #0, #1
   1a0ba:	f88d 2010 	strb.w	r2, [sp, #16]
				agps_data->data_flags &
   1a0be:	689a      	ldr	r2, [r3, #8]
				NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST ? 1 : 0;
   1a0c0:	f3c2 0240 	ubfx	r2, r2, #1, #1
			evt.agps_request.klobuchar =
   1a0c4:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1a0c8:	f362 0141 	bfi	r1, r2, #1, #1
   1a0cc:	f88d 1010 	strb.w	r1, [sp, #16]
				agps_data->data_flags &
   1a0d0:	689a      	ldr	r2, [r3, #8]
				NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST ? 1 : 0;
   1a0d2:	f3c2 0280 	ubfx	r2, r2, #2, #1
			evt.agps_request.nequick =
   1a0d6:	b2c9      	uxtb	r1, r1
   1a0d8:	f362 0182 	bfi	r1, r2, #2, #1
   1a0dc:	f88d 1010 	strb.w	r1, [sp, #16]
				agps_data->data_flags &
   1a0e0:	689a      	ldr	r2, [r3, #8]
				NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST ? 1 : 0;
   1a0e2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
			evt.agps_request.system_time_tow =
   1a0e6:	b2c9      	uxtb	r1, r1
   1a0e8:	f362 01c3 	bfi	r1, r2, #3, #1
   1a0ec:	f88d 1010 	strb.w	r1, [sp, #16]
				agps_data->data_flags &
   1a0f0:	689a      	ldr	r2, [r3, #8]
				NRF_MODEM_GNSS_AGPS_POSITION_REQUEST ? 1 : 0;
   1a0f2:	f3c2 1200 	ubfx	r2, r2, #4, #1
			evt.agps_request.position =
   1a0f6:	b2c9      	uxtb	r1, r1
   1a0f8:	f362 1104 	bfi	r1, r2, #4, #1
   1a0fc:	f88d 1010 	strb.w	r1, [sp, #16]
				agps_data->data_flags &
   1a100:	689b      	ldr	r3, [r3, #8]
				NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST ? 1 : 0;
   1a102:	f3c3 1340 	ubfx	r3, r3, #5, #1
			evt.agps_request.integrity =
   1a106:	b2ca      	uxtb	r2, r1
   1a108:	f363 1245 	bfi	r2, r3, #5, #1
   1a10c:	f88d 2010 	strb.w	r2, [sp, #16]
			notify_event(dev, &evt);
   1a110:	4669      	mov	r1, sp
   1a112:	4628      	mov	r0, r5
   1a114:	f00a fc10 	bl	24938 <notify_event>
		k_free(event.data);
   1a118:	9831      	ldr	r0, [sp, #196]	; 0xc4
   1a11a:	f00c fb4c 	bl	267b6 <k_free>
	return z_impl_k_msgq_get(msgq, data, timeout);
   1a11e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a126:	a930      	add	r1, sp, #192	; 0xc0
   1a128:	4844      	ldr	r0, [pc, #272]	; (1a23c <gps_thread+0x2b8>)
   1a12a:	f004 ff21 	bl	1ef70 <z_impl_k_msgq_get>
		switch (event.id) {
   1a12e:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
   1a132:	2b03      	cmp	r3, #3
   1a134:	d090      	beq.n	1a058 <gps_thread+0xd4>
   1a136:	2b04      	cmp	r3, #4
   1a138:	d0b2      	beq.n	1a0a0 <gps_thread+0x11c>
   1a13a:	2b01      	cmp	r3, #1
   1a13c:	d1ec      	bne.n	1a118 <gps_thread+0x194>
			pvt_data = event.data;
   1a13e:	9e31      	ldr	r6, [sp, #196]	; 0xc4
			if (pvt_data->flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
   1a140:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
   1a144:	f013 0f01 	tst.w	r3, #1
   1a148:	f43f af21 	beq.w	19f8e <gps_thread+0xa>
				k_work_cancel_delayable(&drv_data->timeout_work);
   1a14c:	f504 6016 	add.w	r0, r4, #2400	; 0x960
   1a150:	f00c f803 	bl	2615a <k_work_cancel_delayable>
			if (drv_data->config.interval > 1) {
   1a154:	8963      	ldrh	r3, [r4, #10]
   1a156:	2b01      	cmp	r3, #1
   1a158:	d93e      	bls.n	1a1d8 <gps_thread+0x254>
				if (atomic_get(&drv_data->fix_valid) ||
   1a15a:	f104 0320 	add.w	r3, r4, #32
   1a15e:	e8d3 3faf 	lda	r3, [r3]
   1a162:	b923      	cbnz	r3, 1a16e <gps_thread+0x1ea>
				    atomic_get(&drv_data->timeout_occurred)) {
   1a164:	f104 0324 	add.w	r3, r4, #36	; 0x24
   1a168:	e8d3 3faf 	lda	r3, [r3]
				if (atomic_get(&drv_data->fix_valid) ||
   1a16c:	b3a3      	cbz	r3, 1a1d8 <gps_thread+0x254>
					atomic_set(&drv_data->timeout_occurred, 0);
   1a16e:	f104 0324 	add.w	r3, r4, #36	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a172:	2200      	movs	r2, #0
   1a174:	e8d3 1fef 	ldaex	r1, [r3]
   1a178:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1a17c:	2800      	cmp	r0, #0
   1a17e:	d1f9      	bne.n	1a174 <gps_thread+0x1f0>
					atomic_set(&drv_data->operation_blocked, 0);
   1a180:	f104 0328 	add.w	r3, r4, #40	; 0x28
   1a184:	e8d3 1fef 	ldaex	r1, [r3]
   1a188:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1a18c:	2800      	cmp	r0, #0
   1a18e:	d1f9      	bne.n	1a184 <gps_thread+0x200>
					evt.type = GPS_EVT_SEARCH_STARTED;
   1a190:	f88d 2000 	strb.w	r2, [sp]
					notify_event(dev, &evt);
   1a194:	4669      	mov	r1, sp
   1a196:	4628      	mov	r0, r5
   1a198:	f00a fbce 	bl	24938 <notify_event>
	return z_impl_k_uptime_ticks();
   1a19c:	f00c fa14 	bl	265c8 <z_impl_k_uptime_ticks>
   1a1a0:	014b      	lsls	r3, r1, #5
   1a1a2:	0142      	lsls	r2, r0, #5
   1a1a4:	ea43 67d0 	orr.w	r7, r3, r0, lsr #27
   1a1a8:	1a13      	subs	r3, r2, r0
   1a1aa:	eb67 0201 	sbc.w	r2, r7, r1
   1a1ae:	0097      	lsls	r7, r2, #2
   1a1b0:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
   1a1b4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1a1b8:	463a      	mov	r2, r7
   1a1ba:	eb1c 0300 	adds.w	r3, ip, r0
   1a1be:	eb41 0202 	adc.w	r2, r1, r2
   1a1c2:	00d1      	lsls	r1, r2, #3
   1a1c4:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   1a1c8:	00d8      	lsls	r0, r3, #3
   1a1ca:	0bc3      	lsrs	r3, r0, #15
   1a1cc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1a1d0:	0bc9      	lsrs	r1, r1, #15
					start_timestamp = k_uptime_get();
   1a1d2:	4a1b      	ldr	r2, [pc, #108]	; (1a240 <gps_thread+0x2bc>)
   1a1d4:	6013      	str	r3, [r2, #0]
   1a1d6:	6051      	str	r1, [r2, #4]
			atomic_set(&drv_data->fix_valid, 0);
   1a1d8:	f104 0720 	add.w	r7, r4, #32
   1a1dc:	2300      	movs	r3, #0
   1a1de:	e8d7 2fef 	ldaex	r2, [r7]
   1a1e2:	e8c7 3fe1 	stlex	r1, r3, [r7]
   1a1e6:	2900      	cmp	r1, #0
   1a1e8:	d1f9      	bne.n	1a1de <gps_thread+0x25a>
			if (pvt_data->flags & NRF_MODEM_GNSS_PVT_FLAG_NOT_ENOUGH_WINDOW_TIME ||
   1a1ea:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
   1a1ee:	f013 0f18 	tst.w	r3, #24
   1a1f2:	f43f aed4 	beq.w	19f9e <gps_thread+0x1a>
				if (atomic_get(&drv_data->operation_blocked)) {
   1a1f6:	f104 0328 	add.w	r3, r4, #40	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a1fa:	e8d3 2faf 	lda	r2, [r3]
   1a1fe:	2a00      	cmp	r2, #0
   1a200:	d18a      	bne.n	1a118 <gps_thread+0x194>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a202:	2201      	movs	r2, #1
   1a204:	e8d3 1fef 	ldaex	r1, [r3]
   1a208:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1a20c:	2800      	cmp	r0, #0
   1a20e:	d1f9      	bne.n	1a204 <gps_thread+0x280>
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   1a210:	2307      	movs	r3, #7
   1a212:	f88d 3000 	strb.w	r3, [sp]
				notify_event(dev, &evt);
   1a216:	4669      	mov	r1, sp
   1a218:	4628      	mov	r0, r5
   1a21a:	f00a fb8d 	bl	24938 <notify_event>
				if (drv_data->config.priority) {
   1a21e:	7da3      	ldrb	r3, [r4, #22]
   1a220:	2b00      	cmp	r3, #0
   1a222:	f43f af79 	beq.w	1a118 <gps_thread+0x194>
					k_work_schedule(
   1a226:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1a22a:	2300      	movs	r3, #0
   1a22c:	f504 6019 	add.w	r0, r4, #2448	; 0x990
   1a230:	f005 f9e0 	bl	1f5f4 <k_work_schedule>
				goto free_event;
   1a234:	e770      	b.n	1a118 <gps_thread+0x194>
   1a236:	bf00      	nop
   1a238:	2000cbb8 	.word	0x2000cbb8
   1a23c:	2000c87c 	.word	0x2000c87c
   1a240:	2000d580 	.word	0x2000d580

0001a244 <agps_write>:
	return 0;
}

static int agps_write(const struct device *dev, enum gps_agps_type type,
		      void *data, size_t data_len)
{
   1a244:	b510      	push	{r4, lr}
   1a246:	4610      	mov	r0, r2
	ARG_UNUSED(dev);

	int err;
	uint16_t data_type = type_lookup_gps2gnss_api[type];

	err = nrf_modem_gnss_agps_write(data, data_len, data_type);
   1a248:	4a0d      	ldr	r2, [pc, #52]	; (1a280 <agps_write+0x3c>)
   1a24a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
   1a24e:	4619      	mov	r1, r3
   1a250:	f00b f924 	bl	2549c <nrf_modem_gnss_agps_write>
	if (err) {
   1a254:	4604      	mov	r4, r0
   1a256:	b908      	cbnz	r0, 1a25c <agps_write+0x18>
	}

	LOG_DBG("Sent A-GPS data to modem, type: %d", type);

	return 0;
}
   1a258:	4620      	mov	r0, r4
   1a25a:	bd10      	pop	{r4, pc}
   1a25c:	4b09      	ldr	r3, [pc, #36]	; (1a284 <agps_write+0x40>)
   1a25e:	4a0a      	ldr	r2, [pc, #40]	; (1a288 <agps_write+0x44>)
   1a260:	1a9b      	subs	r3, r3, r2
   1a262:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to send A-GPS data to modem, error: %d", err);
   1a264:	f04f 0200 	mov.w	r2, #0
   1a268:	2101      	movs	r1, #1
   1a26a:	f361 0202 	bfi	r2, r1, #0, #3
   1a26e:	f36f 02c5 	bfc	r2, #3, #3
   1a272:	f363 128f 	bfi	r2, r3, #6, #10
   1a276:	4601      	mov	r1, r0
   1a278:	4804      	ldr	r0, [pc, #16]	; (1a28c <agps_write+0x48>)
   1a27a:	f7f8 fe53 	bl	12f24 <log_1>
		return err;
   1a27e:	e7eb      	b.n	1a258 <agps_write+0x14>
   1a280:	0002a01c 	.word	0x0002a01c
   1a284:	00027168 	.word	0x00027168
   1a288:	00027108 	.word	0x00027108
   1a28c:	00029d40 	.word	0x00029d40

0001a290 <stop>:
{
   1a290:	b538      	push	{r3, r4, r5, lr}
	struct gps_drv_data *drv_data = dev->data;
   1a292:	6904      	ldr	r4, [r0, #16]
	if (atomic_get(&drv_data->is_running) == 0) {
   1a294:	f104 051c 	add.w	r5, r4, #28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a298:	e8d5 3faf 	lda	r3, [r5]
   1a29c:	b16b      	cbz	r3, 1a2ba <stop+0x2a>
	cancel_works(drv_data);
   1a29e:	4620      	mov	r0, r4
   1a2a0:	f00a fba9 	bl	249f6 <cancel_works>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a2a4:	2300      	movs	r3, #0
   1a2a6:	e8d5 2fef 	ldaex	r2, [r5]
   1a2aa:	e8c5 3fe1 	stlex	r1, r3, [r5]
   1a2ae:	2900      	cmp	r1, #0
   1a2b0:	d1f9      	bne.n	1a2a6 <stop+0x16>
	err = nrf_modem_gnss_stop();
   1a2b2:	f004 f86b 	bl	1e38c <nrf_modem_gnss_stop>
	if (err) {
   1a2b6:	4601      	mov	r1, r0
   1a2b8:	b928      	cbnz	r0, 1a2c6 <stop+0x36>
	k_work_submit(&drv_data->stop_work);
   1a2ba:	f604 103c 	addw	r0, r4, #2364	; 0x93c
   1a2be:	f005 f953 	bl	1f568 <k_work_submit>
	return 0;
   1a2c2:	2000      	movs	r0, #0
}
   1a2c4:	bd38      	pop	{r3, r4, r5, pc}
   1a2c6:	4b09      	ldr	r3, [pc, #36]	; (1a2ec <stop+0x5c>)
   1a2c8:	4a09      	ldr	r2, [pc, #36]	; (1a2f0 <stop+0x60>)
   1a2ca:	1a9b      	subs	r3, r3, r2
   1a2cc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Stopping GPS failed, error: %d", err);
   1a2ce:	f04f 0200 	mov.w	r2, #0
   1a2d2:	2001      	movs	r0, #1
   1a2d4:	f360 0202 	bfi	r2, r0, #0, #3
   1a2d8:	f36f 02c5 	bfc	r2, #3, #3
   1a2dc:	f363 128f 	bfi	r2, r3, #6, #10
   1a2e0:	4804      	ldr	r0, [pc, #16]	; (1a2f4 <stop+0x64>)
   1a2e2:	f7f8 fe1f 	bl	12f24 <log_1>
		return -EIO;
   1a2e6:	f06f 0004 	mvn.w	r0, #4
   1a2ea:	e7eb      	b.n	1a2c4 <stop+0x34>
   1a2ec:	00027168 	.word	0x00027168
   1a2f0:	00027108 	.word	0x00027108
   1a2f4:	00029d70 	.word	0x00029d70

0001a2f8 <parse_cfg>:
{
   1a2f8:	b538      	push	{r3, r4, r5, lr}
   1a2fa:	4605      	mov	r5, r0
   1a2fc:	460c      	mov	r4, r1
   1a2fe:	2300      	movs	r3, #0
   1a300:	600b      	str	r3, [r1, #0]
   1a302:	604b      	str	r3, [r1, #4]
   1a304:	608b      	str	r3, [r1, #8]
   1a306:	60cb      	str	r3, [r1, #12]
	switch (cfg_src->nav_mode) {
   1a308:	7801      	ldrb	r1, [r0, #0]
   1a30a:	2901      	cmp	r1, #1
   1a30c:	d02f      	beq.n	1a36e <parse_cfg+0x76>
   1a30e:	2902      	cmp	r1, #2
   1a310:	d032      	beq.n	1a378 <parse_cfg+0x80>
   1a312:	b191      	cbz	r1, 1a33a <parse_cfg+0x42>
   1a314:	4b2a      	ldr	r3, [pc, #168]	; (1a3c0 <parse_cfg+0xc8>)
   1a316:	4a2b      	ldr	r2, [pc, #172]	; (1a3c4 <parse_cfg+0xcc>)
   1a318:	1a9b      	subs	r3, r3, r2
   1a31a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid operation mode (%d), GPS will not start",
   1a31c:	f04f 0200 	mov.w	r2, #0
   1a320:	2001      	movs	r0, #1
   1a322:	f360 0202 	bfi	r2, r0, #0, #3
   1a326:	f36f 02c5 	bfc	r2, #3, #3
   1a32a:	f363 128f 	bfi	r2, r3, #6, #10
   1a32e:	4826      	ldr	r0, [pc, #152]	; (1a3c8 <parse_cfg+0xd0>)
   1a330:	f7f8 fdf8 	bl	12f24 <log_1>
		return -EINVAL;
   1a334:	f06f 0015 	mvn.w	r0, #21
   1a338:	e018      	b.n	1a36c <parse_cfg+0x74>
		cfg_dst->interval = 0;
   1a33a:	8063      	strh	r3, [r4, #2]
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   1a33c:	6883      	ldr	r3, [r0, #8]
   1a33e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a342:	8023      	strh	r3, [r4, #0]
	if (cfg_src->delete_agps_data) {
   1a344:	7b2b      	ldrb	r3, [r5, #12]
   1a346:	b10b      	cbz	r3, 1a34c <parse_cfg+0x54>
		cfg_dst->delete_mask = 0x7F;
   1a348:	237f      	movs	r3, #127	; 0x7f
   1a34a:	60a3      	str	r3, [r4, #8]
	set_nmea_mask(&cfg_dst->nmea_mask);
   1a34c:	1d20      	adds	r0, r4, #4
   1a34e:	f00a faf9 	bl	24944 <set_nmea_mask>
	if (cfg_src->power_mode == GPS_POWER_MODE_PERFORMANCE) {
   1a352:	786b      	ldrb	r3, [r5, #1]
   1a354:	2b01      	cmp	r3, #1
   1a356:	d02a      	beq.n	1a3ae <parse_cfg+0xb6>
	} else if (cfg_src->power_mode == GPS_POWER_MODE_SAVE) {
   1a358:	2b02      	cmp	r3, #2
   1a35a:	d02a      	beq.n	1a3b2 <parse_cfg+0xba>
	cfg_dst->priority = cfg_src->priority;
   1a35c:	7b6b      	ldrb	r3, [r5, #13]
   1a35e:	73a3      	strb	r3, [r4, #14]
	cfg_dst->use_case = NRF_MODEM_GNSS_USE_CASE_MULTIPLE_HOT_START;
   1a360:	2301      	movs	r3, #1
   1a362:	7363      	strb	r3, [r4, #13]
	if (cfg_src->accuracy == GPS_ACCURACY_LOW) {
   1a364:	78eb      	ldrb	r3, [r5, #3]
   1a366:	2b01      	cmp	r3, #1
   1a368:	d025      	beq.n	1a3b6 <parse_cfg+0xbe>
	return 0;
   1a36a:	2000      	movs	r0, #0
}
   1a36c:	bd38      	pop	{r3, r4, r5, pc}
		cfg_dst->retry = 0;
   1a36e:	2300      	movs	r3, #0
   1a370:	8023      	strh	r3, [r4, #0]
		cfg_dst->interval = 1;
   1a372:	2301      	movs	r3, #1
   1a374:	8063      	strh	r3, [r4, #2]
		break;
   1a376:	e7e5      	b.n	1a344 <parse_cfg+0x4c>
		if (cfg_src->interval < 10) {
   1a378:	6843      	ldr	r3, [r0, #4]
   1a37a:	2b09      	cmp	r3, #9
   1a37c:	d904      	bls.n	1a388 <parse_cfg+0x90>
		cfg_dst->retry = cfg_src->timeout;
   1a37e:	6883      	ldr	r3, [r0, #8]
   1a380:	8023      	strh	r3, [r4, #0]
		cfg_dst->interval = cfg_src->interval;
   1a382:	6843      	ldr	r3, [r0, #4]
   1a384:	8063      	strh	r3, [r4, #2]
		break;
   1a386:	e7dd      	b.n	1a344 <parse_cfg+0x4c>
   1a388:	4b0d      	ldr	r3, [pc, #52]	; (1a3c0 <parse_cfg+0xc8>)
   1a38a:	4a0e      	ldr	r2, [pc, #56]	; (1a3c4 <parse_cfg+0xcc>)
   1a38c:	1a9b      	subs	r3, r3, r2
   1a38e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Minimum periodic interval is 10 sec");
   1a390:	f04f 0100 	mov.w	r1, #0
   1a394:	2201      	movs	r2, #1
   1a396:	f362 0102 	bfi	r1, r2, #0, #3
   1a39a:	f36f 01c5 	bfc	r1, #3, #3
   1a39e:	f363 118f 	bfi	r1, r3, #6, #10
   1a3a2:	480a      	ldr	r0, [pc, #40]	; (1a3cc <parse_cfg+0xd4>)
   1a3a4:	f7f8 fe52 	bl	1304c <log_0>
			return -EINVAL;
   1a3a8:	f06f 0015 	mvn.w	r0, #21
   1a3ac:	e7de      	b.n	1a36c <parse_cfg+0x74>
		cfg_dst->power_mode = NRF_MODEM_GNSS_PSM_DUTY_CYCLING_PERFORMANCE;
   1a3ae:	7323      	strb	r3, [r4, #12]
   1a3b0:	e7d4      	b.n	1a35c <parse_cfg+0x64>
		cfg_dst->power_mode = NRF_MODEM_GNSS_PSM_DUTY_CYCLING_POWER;
   1a3b2:	7323      	strb	r3, [r4, #12]
   1a3b4:	e7d2      	b.n	1a35c <parse_cfg+0x64>
		cfg_dst->use_case |= NRF_MODEM_GNSS_USE_CASE_LOW_ACCURACY;
   1a3b6:	2303      	movs	r3, #3
   1a3b8:	7363      	strb	r3, [r4, #13]
	return 0;
   1a3ba:	2000      	movs	r0, #0
   1a3bc:	e7d6      	b.n	1a36c <parse_cfg+0x74>
   1a3be:	bf00      	nop
   1a3c0:	00027168 	.word	0x00027168
   1a3c4:	00027108 	.word	0x00027108
   1a3c8:	00029db4 	.word	0x00029db4
   1a3cc:	00029d90 	.word	0x00029d90

0001a3d0 <enable_gps>:
{
   1a3d0:	b510      	push	{r4, lr}
   1a3d2:	b082      	sub	sp, #8
	err = lte_lc_system_mode_get(&system_mode, &preference);
   1a3d4:	f10d 0105 	add.w	r1, sp, #5
   1a3d8:	f10d 0007 	add.w	r0, sp, #7
   1a3dc:	f7fd fc9c 	bl	17d18 <lte_lc_system_mode_get>
	if (err) {
   1a3e0:	bb08      	cbnz	r0, 1a426 <enable_gps+0x56>
	    (system_mode != LTE_LC_SYSTEM_MODE_LTEM_GPS) &&
   1a3e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1a3e6:	1ed3      	subs	r3, r2, #3
   1a3e8:	b2db      	uxtb	r3, r3
	if ((system_mode != LTE_LC_SYSTEM_MODE_GPS) &&
   1a3ea:	2b02      	cmp	r3, #2
   1a3ec:	d90c      	bls.n	1a408 <enable_gps+0x38>
	    (system_mode != LTE_LC_SYSTEM_MODE_NBIOT_GPS) &&
   1a3ee:	2a07      	cmp	r2, #7
   1a3f0:	d00a      	beq.n	1a408 <enable_gps+0x38>
		if (system_mode == LTE_LC_SYSTEM_MODE_LTEM) {
   1a3f2:	2a01      	cmp	r2, #1
   1a3f4:	d02a      	beq.n	1a44c <enable_gps+0x7c>
		} else if (system_mode == LTE_LC_SYSTEM_MODE_NBIOT) {
   1a3f6:	2a02      	cmp	r2, #2
   1a3f8:	d02a      	beq.n	1a450 <enable_gps+0x80>
		enum lte_lc_system_mode new_mode = LTE_LC_SYSTEM_MODE_GPS;
   1a3fa:	2003      	movs	r0, #3
		err = lte_lc_system_mode_set(new_mode, preference);
   1a3fc:	f89d 1005 	ldrb.w	r1, [sp, #5]
   1a400:	f7fd fc1c 	bl	17c3c <lte_lc_system_mode_set>
		if (err) {
   1a404:	4604      	mov	r4, r0
   1a406:	bb28      	cbnz	r0, 1a454 <enable_gps+0x84>
	err = lte_lc_func_mode_get(&functional_mode);
   1a408:	f10d 0006 	add.w	r0, sp, #6
   1a40c:	f7fd fdc0 	bl	17f90 <lte_lc_func_mode_get>
	if (err) {
   1a410:	4604      	mov	r4, r0
   1a412:	bb88      	cbnz	r0, 1a478 <enable_gps+0xa8>
	if ((functional_mode != LTE_LC_FUNC_MODE_NORMAL) &&
   1a414:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1a418:	2b01      	cmp	r3, #1
   1a41a:	d001      	beq.n	1a420 <enable_gps+0x50>
   1a41c:	2b1f      	cmp	r3, #31
   1a41e:	d13d      	bne.n	1a49c <enable_gps+0xcc>
}
   1a420:	4620      	mov	r0, r4
   1a422:	b002      	add	sp, #8
   1a424:	bd10      	pop	{r4, pc}
   1a426:	4604      	mov	r4, r0
   1a428:	4b26      	ldr	r3, [pc, #152]	; (1a4c4 <enable_gps+0xf4>)
   1a42a:	4a27      	ldr	r2, [pc, #156]	; (1a4c8 <enable_gps+0xf8>)
   1a42c:	1a9b      	subs	r3, r3, r2
   1a42e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get modem system mode, error: %d", err);
   1a430:	f04f 0200 	mov.w	r2, #0
   1a434:	2101      	movs	r1, #1
   1a436:	f361 0202 	bfi	r2, r1, #0, #3
   1a43a:	f36f 02c5 	bfc	r2, #3, #3
   1a43e:	f363 128f 	bfi	r2, r3, #6, #10
   1a442:	4601      	mov	r1, r0
   1a444:	4821      	ldr	r0, [pc, #132]	; (1a4cc <enable_gps+0xfc>)
   1a446:	f7f8 fd6d 	bl	12f24 <log_1>
		return err;
   1a44a:	e7e9      	b.n	1a420 <enable_gps+0x50>
			new_mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   1a44c:	2004      	movs	r0, #4
   1a44e:	e7d5      	b.n	1a3fc <enable_gps+0x2c>
			new_mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1a450:	2005      	movs	r0, #5
   1a452:	e7d3      	b.n	1a3fc <enable_gps+0x2c>
   1a454:	4b1b      	ldr	r3, [pc, #108]	; (1a4c4 <enable_gps+0xf4>)
   1a456:	4a1c      	ldr	r2, [pc, #112]	; (1a4c8 <enable_gps+0xf8>)
   1a458:	1a9b      	subs	r3, r3, r2
   1a45a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   1a45c:	f04f 0200 	mov.w	r2, #0
   1a460:	2101      	movs	r1, #1
   1a462:	f361 0202 	bfi	r2, r1, #0, #3
   1a466:	f36f 02c5 	bfc	r2, #3, #3
   1a46a:	f363 128f 	bfi	r2, r3, #6, #10
   1a46e:	4601      	mov	r1, r0
   1a470:	4817      	ldr	r0, [pc, #92]	; (1a4d0 <enable_gps+0x100>)
   1a472:	f7f8 fd57 	bl	12f24 <log_1>
			return err;
   1a476:	e7d3      	b.n	1a420 <enable_gps+0x50>
   1a478:	4b12      	ldr	r3, [pc, #72]	; (1a4c4 <enable_gps+0xf4>)
   1a47a:	4a13      	ldr	r2, [pc, #76]	; (1a4c8 <enable_gps+0xf8>)
   1a47c:	1a9b      	subs	r3, r3, r2
   1a47e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get modem's functional mode, error: %d",
   1a480:	f04f 0200 	mov.w	r2, #0
   1a484:	2101      	movs	r1, #1
   1a486:	f361 0202 	bfi	r2, r1, #0, #3
   1a48a:	f36f 02c5 	bfc	r2, #3, #3
   1a48e:	f363 128f 	bfi	r2, r3, #6, #10
   1a492:	4601      	mov	r1, r0
   1a494:	480f      	ldr	r0, [pc, #60]	; (1a4d4 <enable_gps+0x104>)
   1a496:	f7f8 fd45 	bl	12f24 <log_1>
		return err;
   1a49a:	e7c1      	b.n	1a420 <enable_gps+0x50>
   1a49c:	4b09      	ldr	r3, [pc, #36]	; (1a4c4 <enable_gps+0xf4>)
   1a49e:	4a0a      	ldr	r2, [pc, #40]	; (1a4c8 <enable_gps+0xf8>)
   1a4a0:	1a9b      	subs	r3, r3, r2
   1a4a2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("GPS is not supported in current functional mode");
   1a4a4:	f04f 0100 	mov.w	r1, #0
   1a4a8:	2201      	movs	r2, #1
   1a4aa:	f362 0102 	bfi	r1, r2, #0, #3
   1a4ae:	f36f 01c5 	bfc	r1, #3, #3
   1a4b2:	f363 118f 	bfi	r1, r3, #6, #10
   1a4b6:	4808      	ldr	r0, [pc, #32]	; (1a4d8 <enable_gps+0x108>)
   1a4b8:	f7f8 fdc8 	bl	1304c <log_0>
		return -EIO;
   1a4bc:	f06f 0404 	mvn.w	r4, #4
   1a4c0:	e7ae      	b.n	1a420 <enable_gps+0x50>
   1a4c2:	bf00      	nop
   1a4c4:	00027168 	.word	0x00027168
   1a4c8:	00027108 	.word	0x00027108
   1a4cc:	00029de4 	.word	0x00029de4
   1a4d0:	00029e10 	.word	0x00029e10
   1a4d4:	00029e38 	.word	0x00029e38
   1a4d8:	00029e6c 	.word	0x00029e6c

0001a4dc <start>:
{
   1a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gps_drv_data *drv_data = dev->data;
   1a4de:	6904      	ldr	r4, [r0, #16]
	if (atomic_get(&drv_data->is_init) != 1) {
   1a4e0:	f104 0318 	add.w	r3, r4, #24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a4e4:	e8d3 3faf 	lda	r3, [r3]
   1a4e8:	2b01      	cmp	r3, #1
   1a4ea:	f040 808a 	bne.w	1a602 <start+0x126>
   1a4ee:	4605      	mov	r5, r0
   1a4f0:	460f      	mov	r7, r1
	if (atomic_get(&drv_data->is_running)) {
   1a4f2:	f104 061c 	add.w	r6, r4, #28
   1a4f6:	e8d6 3faf 	lda	r3, [r6]
   1a4fa:	2b00      	cmp	r3, #0
   1a4fc:	f040 8094 	bne.w	1a628 <start+0x14c>
	if (parse_cfg(cfg, &drv_data->config) != 0) {
   1a500:	f104 0108 	add.w	r1, r4, #8
   1a504:	4638      	mov	r0, r7
   1a506:	f7ff fef7 	bl	1a2f8 <parse_cfg>
   1a50a:	2800      	cmp	r0, #0
   1a50c:	f040 80ad 	bne.w	1a66a <start+0x18e>
	if (enable_gps(dev) != 0) {
   1a510:	4628      	mov	r0, r5
   1a512:	f7ff ff5d 	bl	1a3d0 <enable_gps>
   1a516:	2800      	cmp	r0, #0
   1a518:	f040 80ba 	bne.w	1a690 <start+0x1b4>
	err = nrf_modem_gnss_fix_retry_set(drv_data->config.retry);
   1a51c:	8920      	ldrh	r0, [r4, #8]
   1a51e:	f003 ffc9 	bl	1e4b4 <nrf_modem_gnss_fix_retry_set>
	if (err) {
   1a522:	4601      	mov	r1, r0
   1a524:	2800      	cmp	r0, #0
   1a526:	f040 80c6 	bne.w	1a6b6 <start+0x1da>
	err = nrf_modem_gnss_fix_interval_set(drv_data->config.interval);
   1a52a:	8960      	ldrh	r0, [r4, #10]
   1a52c:	f003 ffa4 	bl	1e478 <nrf_modem_gnss_fix_interval_set>
	if (err) {
   1a530:	4601      	mov	r1, r0
   1a532:	2800      	cmp	r0, #0
   1a534:	f040 80d2 	bne.w	1a6dc <start+0x200>
	err = nrf_modem_gnss_nmea_mask_set(drv_data->config.nmea_mask);
   1a538:	89a0      	ldrh	r0, [r4, #12]
   1a53a:	f003 ffd9 	bl	1e4f0 <nrf_modem_gnss_nmea_mask_set>
	if (err) {
   1a53e:	4601      	mov	r1, r0
   1a540:	2800      	cmp	r0, #0
   1a542:	f040 80de 	bne.w	1a702 <start+0x226>
	err = nrf_modem_gnss_power_mode_set(drv_data->config.power_mode);
   1a546:	7d20      	ldrb	r0, [r4, #20]
   1a548:	f003 fff0 	bl	1e52c <nrf_modem_gnss_power_mode_set>
	if (err) {
   1a54c:	4601      	mov	r1, r0
   1a54e:	2800      	cmp	r0, #0
   1a550:	f040 80ea 	bne.w	1a728 <start+0x24c>
		err = nrf_modem_gnss_use_case_set(use_case);
   1a554:	7d60      	ldrb	r0, [r4, #21]
   1a556:	f003 ff71 	bl	1e43c <nrf_modem_gnss_use_case_set>
	if (err) {
   1a55a:	4601      	mov	r1, r0
   1a55c:	2800      	cmp	r0, #0
   1a55e:	f040 80f6 	bne.w	1a74e <start+0x272>
	if (drv_data->config.delete_mask != 0) {
   1a562:	6920      	ldr	r0, [r4, #16]
   1a564:	b128      	cbz	r0, 1a572 <start+0x96>
		err = nrf_modem_gnss_nv_data_delete(drv_data->config.delete_mask);
   1a566:	f003 ff2f 	bl	1e3c8 <nrf_modem_gnss_nv_data_delete>
		if (err) {
   1a56a:	4601      	mov	r1, r0
   1a56c:	2800      	cmp	r0, #0
   1a56e:	f040 8101 	bne.w	1a774 <start+0x298>
	err = nrf_modem_gnss_start();
   1a572:	f003 feb7 	bl	1e2e4 <nrf_modem_gnss_start>
	if (err) {
   1a576:	4605      	mov	r5, r0
   1a578:	2800      	cmp	r0, #0
   1a57a:	f040 810e 	bne.w	1a79a <start+0x2be>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a57e:	2301      	movs	r3, #1
   1a580:	e8d6 2fef 	ldaex	r2, [r6]
   1a584:	e8c6 3fe1 	stlex	r1, r3, [r6]
   1a588:	2900      	cmp	r1, #0
   1a58a:	d1f9      	bne.n	1a580 <start+0xa4>
	atomic_set(&drv_data->fix_valid, 0);
   1a58c:	f104 0220 	add.w	r2, r4, #32
   1a590:	2300      	movs	r3, #0
   1a592:	e8d2 1fef 	ldaex	r1, [r2]
   1a596:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1a59a:	2800      	cmp	r0, #0
   1a59c:	d1f9      	bne.n	1a592 <start+0xb6>
	atomic_set(&drv_data->timeout_occurred, 0);
   1a59e:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1a5a2:	e8d2 1fef 	ldaex	r1, [r2]
   1a5a6:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1a5aa:	2800      	cmp	r0, #0
   1a5ac:	d1f9      	bne.n	1a5a2 <start+0xc6>
	atomic_set(&drv_data->operation_blocked, 0);
   1a5ae:	f104 0228 	add.w	r2, r4, #40	; 0x28
   1a5b2:	e8d2 1fef 	ldaex	r1, [r2]
   1a5b6:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1a5ba:	2800      	cmp	r0, #0
   1a5bc:	d1f9      	bne.n	1a5b2 <start+0xd6>
   1a5be:	f00c f803 	bl	265c8 <z_impl_k_uptime_ticks>
   1a5c2:	014b      	lsls	r3, r1, #5
   1a5c4:	0142      	lsls	r2, r0, #5
   1a5c6:	ea43 66d0 	orr.w	r6, r3, r0, lsr #27
   1a5ca:	1a13      	subs	r3, r2, r0
   1a5cc:	eb66 0201 	sbc.w	r2, r6, r1
   1a5d0:	0096      	lsls	r6, r2, #2
   1a5d2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   1a5d6:	009f      	lsls	r7, r3, #2
   1a5d8:	4632      	mov	r2, r6
   1a5da:	183b      	adds	r3, r7, r0
   1a5dc:	eb41 0202 	adc.w	r2, r1, r2
   1a5e0:	00d1      	lsls	r1, r2, #3
   1a5e2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   1a5e6:	00d8      	lsls	r0, r3, #3
   1a5e8:	0bc3      	lsrs	r3, r0, #15
   1a5ea:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1a5ee:	0bc9      	lsrs	r1, r1, #15
	start_timestamp = k_uptime_get();
   1a5f0:	4a74      	ldr	r2, [pc, #464]	; (1a7c4 <start+0x2e8>)
   1a5f2:	6013      	str	r3, [r2, #0]
   1a5f4:	6051      	str	r1, [r2, #4]
	k_work_submit(&drv_data->start_work);
   1a5f6:	f604 102c 	addw	r0, r4, #2348	; 0x92c
   1a5fa:	f004 ffb5 	bl	1f568 <k_work_submit>
}
   1a5fe:	4628      	mov	r0, r5
   1a600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a602:	4b71      	ldr	r3, [pc, #452]	; (1a7c8 <start+0x2ec>)
   1a604:	4a71      	ldr	r2, [pc, #452]	; (1a7cc <start+0x2f0>)
   1a606:	1a9b      	subs	r3, r3, r2
   1a608:	08db      	lsrs	r3, r3, #3
		LOG_WRN("GPS must be initialized first");
   1a60a:	f04f 0100 	mov.w	r1, #0
   1a60e:	2202      	movs	r2, #2
   1a610:	f362 0102 	bfi	r1, r2, #0, #3
   1a614:	f36f 01c5 	bfc	r1, #3, #3
   1a618:	f363 118f 	bfi	r1, r3, #6, #10
   1a61c:	486c      	ldr	r0, [pc, #432]	; (1a7d0 <start+0x2f4>)
   1a61e:	f7f8 fd15 	bl	1304c <log_0>
		return -ENODEV;
   1a622:	f06f 0512 	mvn.w	r5, #18
   1a626:	e7ea      	b.n	1a5fe <start+0x122>
		cancel_works(drv_data);
   1a628:	4620      	mov	r0, r4
   1a62a:	f00a f9e4 	bl	249f6 <cancel_works>
   1a62e:	2300      	movs	r3, #0
   1a630:	e8d6 2fef 	ldaex	r2, [r6]
   1a634:	e8c6 3fe1 	stlex	r1, r3, [r6]
   1a638:	2900      	cmp	r1, #0
   1a63a:	d1f9      	bne.n	1a630 <start+0x154>
		err = nrf_modem_gnss_stop();
   1a63c:	f003 fea6 	bl	1e38c <nrf_modem_gnss_stop>
		if (err) {
   1a640:	4601      	mov	r1, r0
   1a642:	2800      	cmp	r0, #0
   1a644:	f43f af5c 	beq.w	1a500 <start+0x24>
   1a648:	4b5f      	ldr	r3, [pc, #380]	; (1a7c8 <start+0x2ec>)
   1a64a:	4a60      	ldr	r2, [pc, #384]	; (1a7cc <start+0x2f0>)
   1a64c:	1a9b      	subs	r3, r3, r2
   1a64e:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Stopping GPS failed, error: %d", err);
   1a650:	f04f 0200 	mov.w	r2, #0
   1a654:	2002      	movs	r0, #2
   1a656:	f360 0202 	bfi	r2, r0, #0, #3
   1a65a:	f36f 02c5 	bfc	r2, #3, #3
   1a65e:	f363 128f 	bfi	r2, r3, #6, #10
   1a662:	485c      	ldr	r0, [pc, #368]	; (1a7d4 <start+0x2f8>)
   1a664:	f7f8 fc5e 	bl	12f24 <log_1>
   1a668:	e74a      	b.n	1a500 <start+0x24>
   1a66a:	4b57      	ldr	r3, [pc, #348]	; (1a7c8 <start+0x2ec>)
   1a66c:	4a57      	ldr	r2, [pc, #348]	; (1a7cc <start+0x2f0>)
   1a66e:	1a9b      	subs	r3, r3, r2
   1a670:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid GPS configuration");
   1a672:	f04f 0100 	mov.w	r1, #0
   1a676:	2201      	movs	r2, #1
   1a678:	f362 0102 	bfi	r1, r2, #0, #3
   1a67c:	f36f 01c5 	bfc	r1, #3, #3
   1a680:	f363 118f 	bfi	r1, r3, #6, #10
   1a684:	4854      	ldr	r0, [pc, #336]	; (1a7d8 <start+0x2fc>)
   1a686:	f7f8 fce1 	bl	1304c <log_0>
		return -EINVAL;
   1a68a:	f06f 0515 	mvn.w	r5, #21
   1a68e:	e7b6      	b.n	1a5fe <start+0x122>
   1a690:	4b4d      	ldr	r3, [pc, #308]	; (1a7c8 <start+0x2ec>)
   1a692:	4a4e      	ldr	r2, [pc, #312]	; (1a7cc <start+0x2f0>)
   1a694:	1a9b      	subs	r3, r3, r2
   1a696:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable GPS");
   1a698:	f04f 0100 	mov.w	r1, #0
   1a69c:	2201      	movs	r2, #1
   1a69e:	f362 0102 	bfi	r1, r2, #0, #3
   1a6a2:	f36f 01c5 	bfc	r1, #3, #3
   1a6a6:	f363 118f 	bfi	r1, r3, #6, #10
   1a6aa:	484c      	ldr	r0, [pc, #304]	; (1a7dc <start+0x300>)
   1a6ac:	f7f8 fcce 	bl	1304c <log_0>
		return -EIO;
   1a6b0:	f06f 0504 	mvn.w	r5, #4
   1a6b4:	e7a3      	b.n	1a5fe <start+0x122>
   1a6b6:	4b44      	ldr	r3, [pc, #272]	; (1a7c8 <start+0x2ec>)
   1a6b8:	4a44      	ldr	r2, [pc, #272]	; (1a7cc <start+0x2f0>)
   1a6ba:	1a9b      	subs	r3, r3, r2
   1a6bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to set fix retry value, error: %d", err);
   1a6be:	f04f 0200 	mov.w	r2, #0
   1a6c2:	2001      	movs	r0, #1
   1a6c4:	f360 0202 	bfi	r2, r0, #0, #3
   1a6c8:	f36f 02c5 	bfc	r2, #3, #3
   1a6cc:	f363 128f 	bfi	r2, r3, #6, #10
   1a6d0:	4843      	ldr	r0, [pc, #268]	; (1a7e0 <start+0x304>)
   1a6d2:	f7f8 fc27 	bl	12f24 <log_1>
		return -EIO;
   1a6d6:	f06f 0504 	mvn.w	r5, #4
   1a6da:	e790      	b.n	1a5fe <start+0x122>
   1a6dc:	4b3a      	ldr	r3, [pc, #232]	; (1a7c8 <start+0x2ec>)
   1a6de:	4a3b      	ldr	r2, [pc, #236]	; (1a7cc <start+0x2f0>)
   1a6e0:	1a9b      	subs	r3, r3, r2
   1a6e2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to set fix interval value, error: %d", err);
   1a6e4:	f04f 0200 	mov.w	r2, #0
   1a6e8:	2001      	movs	r0, #1
   1a6ea:	f360 0202 	bfi	r2, r0, #0, #3
   1a6ee:	f36f 02c5 	bfc	r2, #3, #3
   1a6f2:	f363 128f 	bfi	r2, r3, #6, #10
   1a6f6:	483b      	ldr	r0, [pc, #236]	; (1a7e4 <start+0x308>)
   1a6f8:	f7f8 fc14 	bl	12f24 <log_1>
		return -EIO;
   1a6fc:	f06f 0504 	mvn.w	r5, #4
   1a700:	e77d      	b.n	1a5fe <start+0x122>
   1a702:	4b31      	ldr	r3, [pc, #196]	; (1a7c8 <start+0x2ec>)
   1a704:	4a31      	ldr	r2, [pc, #196]	; (1a7cc <start+0x2f0>)
   1a706:	1a9b      	subs	r3, r3, r2
   1a708:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to set NMEA mask, error: %d", err);
   1a70a:	f04f 0200 	mov.w	r2, #0
   1a70e:	2001      	movs	r0, #1
   1a710:	f360 0202 	bfi	r2, r0, #0, #3
   1a714:	f36f 02c5 	bfc	r2, #3, #3
   1a718:	f363 128f 	bfi	r2, r3, #6, #10
   1a71c:	4832      	ldr	r0, [pc, #200]	; (1a7e8 <start+0x30c>)
   1a71e:	f7f8 fc01 	bl	12f24 <log_1>
		return -EIO;
   1a722:	f06f 0504 	mvn.w	r5, #4
   1a726:	e76a      	b.n	1a5fe <start+0x122>
   1a728:	4b27      	ldr	r3, [pc, #156]	; (1a7c8 <start+0x2ec>)
   1a72a:	4a28      	ldr	r2, [pc, #160]	; (1a7cc <start+0x2f0>)
   1a72c:	1a9b      	subs	r3, r3, r2
   1a72e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to set GPS power mode, error: %d", err);
   1a730:	f04f 0200 	mov.w	r2, #0
   1a734:	2001      	movs	r0, #1
   1a736:	f360 0202 	bfi	r2, r0, #0, #3
   1a73a:	f36f 02c5 	bfc	r2, #3, #3
   1a73e:	f363 128f 	bfi	r2, r3, #6, #10
   1a742:	482a      	ldr	r0, [pc, #168]	; (1a7ec <start+0x310>)
   1a744:	f7f8 fbee 	bl	12f24 <log_1>
		return -EIO;
   1a748:	f06f 0504 	mvn.w	r5, #4
   1a74c:	e757      	b.n	1a5fe <start+0x122>
   1a74e:	4b1e      	ldr	r3, [pc, #120]	; (1a7c8 <start+0x2ec>)
   1a750:	4a1e      	ldr	r2, [pc, #120]	; (1a7cc <start+0x2f0>)
   1a752:	1a9b      	subs	r3, r3, r2
   1a754:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure use case: %d", err);
   1a756:	f04f 0200 	mov.w	r2, #0
   1a75a:	2001      	movs	r0, #1
   1a75c:	f360 0202 	bfi	r2, r0, #0, #3
   1a760:	f36f 02c5 	bfc	r2, #3, #3
   1a764:	f363 128f 	bfi	r2, r3, #6, #10
   1a768:	4821      	ldr	r0, [pc, #132]	; (1a7f0 <start+0x314>)
   1a76a:	f7f8 fbdb 	bl	12f24 <log_1>
		return -EIO;
   1a76e:	f06f 0504 	mvn.w	r5, #4
   1a772:	e744      	b.n	1a5fe <start+0x122>
   1a774:	4b14      	ldr	r3, [pc, #80]	; (1a7c8 <start+0x2ec>)
   1a776:	4a15      	ldr	r2, [pc, #84]	; (1a7cc <start+0x2f0>)
   1a778:	1a9b      	subs	r3, r3, r2
   1a77a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to delete NV data, error: %d", err);
   1a77c:	f04f 0200 	mov.w	r2, #0
   1a780:	2001      	movs	r0, #1
   1a782:	f360 0202 	bfi	r2, r0, #0, #3
   1a786:	f36f 02c5 	bfc	r2, #3, #3
   1a78a:	f363 128f 	bfi	r2, r3, #6, #10
   1a78e:	4819      	ldr	r0, [pc, #100]	; (1a7f4 <start+0x318>)
   1a790:	f7f8 fbc8 	bl	12f24 <log_1>
			return -EIO;
   1a794:	f06f 0504 	mvn.w	r5, #4
   1a798:	e731      	b.n	1a5fe <start+0x122>
   1a79a:	4b0b      	ldr	r3, [pc, #44]	; (1a7c8 <start+0x2ec>)
   1a79c:	4a0b      	ldr	r2, [pc, #44]	; (1a7cc <start+0x2f0>)
   1a79e:	1a9b      	subs	r3, r3, r2
   1a7a0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Starting GPS failed, error: %d", err);
   1a7a2:	f04f 0200 	mov.w	r2, #0
   1a7a6:	2101      	movs	r1, #1
   1a7a8:	f361 0202 	bfi	r2, r1, #0, #3
   1a7ac:	f36f 02c5 	bfc	r2, #3, #3
   1a7b0:	f363 128f 	bfi	r2, r3, #6, #10
   1a7b4:	4601      	mov	r1, r0
   1a7b6:	4810      	ldr	r0, [pc, #64]	; (1a7f8 <start+0x31c>)
   1a7b8:	f7f8 fbb4 	bl	12f24 <log_1>
		return -EIO;
   1a7bc:	f06f 0504 	mvn.w	r5, #4
   1a7c0:	e71d      	b.n	1a5fe <start+0x122>
   1a7c2:	bf00      	nop
   1a7c4:	2000d580 	.word	0x2000d580
   1a7c8:	00027168 	.word	0x00027168
   1a7cc:	00027108 	.word	0x00027108
   1a7d0:	00029e9c 	.word	0x00029e9c
   1a7d4:	00029d70 	.word	0x00029d70
   1a7d8:	00029ebc 	.word	0x00029ebc
   1a7dc:	00029ed8 	.word	0x00029ed8
   1a7e0:	00029ef0 	.word	0x00029ef0
   1a7e4:	00029f1c 	.word	0x00029f1c
   1a7e8:	00029f48 	.word	0x00029f48
   1a7ec:	00029f6c 	.word	0x00029f6c
   1a7f0:	00029f94 	.word	0x00029f94
   1a7f4:	00029fb8 	.word	0x00029fb8
   1a7f8:	00029fdc 	.word	0x00029fdc

0001a7fc <SystemCoreClockUpdate>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   1a7fc:	4b01      	ldr	r3, [pc, #4]	; (1a804 <SystemCoreClockUpdate+0x8>)
   1a7fe:	4a02      	ldr	r2, [pc, #8]	; (1a808 <SystemCoreClockUpdate+0xc>)
   1a800:	601a      	str	r2, [r3, #0]
}
   1a802:	4770      	bx	lr
   1a804:	2000c62c 	.word	0x2000c62c
   1a808:	03d09000 	.word	0x03d09000

0001a80c <SystemInit>:

void SystemInit(void)
{
   1a80c:	b508      	push	{r3, lr}
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1a80e:	4a07      	ldr	r2, [pc, #28]	; (1a82c <SystemInit+0x20>)
   1a810:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1a814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1a818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1a81c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a820:	f3bf 8f6f 	isb	sy
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
   1a824:	f7ff ffea 	bl	1a7fc <SystemCoreClockUpdate>
}
   1a828:	bd08      	pop	{r3, pc}
   1a82a:	bf00      	nop
   1a82c:	e000ed00 	.word	0xe000ed00

0001a830 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1a830:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1a832:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1a834:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   1a838:	f1d3 031f 	rsbs	r3, r3, #31
   1a83c:	d411      	bmi.n	1a862 <nrfx_flag32_alloc+0x32>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1a83e:	2201      	movs	r2, #1
   1a840:	409a      	lsls	r2, r3
   1a842:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a846:	e8d0 5fef 	ldaex	r5, [r0]
   1a84a:	42a5      	cmp	r5, r4
   1a84c:	d104      	bne.n	1a858 <nrfx_flag32_alloc+0x28>
   1a84e:	e8c0 2fec 	stlex	ip, r2, [r0]
   1a852:	f1bc 0f00 	cmp.w	ip, #0
   1a856:	d1f6      	bne.n	1a846 <nrfx_flag32_alloc+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1a858:	d1eb      	bne.n	1a832 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   1a85a:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   1a85c:	4802      	ldr	r0, [pc, #8]	; (1a868 <nrfx_flag32_alloc+0x38>)
}
   1a85e:	bc30      	pop	{r4, r5}
   1a860:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   1a862:	4802      	ldr	r0, [pc, #8]	; (1a86c <nrfx_flag32_alloc+0x3c>)
   1a864:	e7fb      	b.n	1a85e <nrfx_flag32_alloc+0x2e>
   1a866:	bf00      	nop
   1a868:	0bad0000 	.word	0x0bad0000
   1a86c:	0bad0002 	.word	0x0bad0002

0001a870 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1a870:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1a872:	6803      	ldr	r3, [r0, #0]
   1a874:	460c      	mov	r4, r1
   1a876:	fa23 f101 	lsr.w	r1, r3, r1
   1a87a:	f011 0f01 	tst.w	r1, #1
   1a87e:	d111      	bne.n	1a8a4 <nrfx_flag32_free+0x34>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   1a880:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1a882:	2301      	movs	r3, #1
   1a884:	40a3      	lsls	r3, r4
   1a886:	4313      	orrs	r3, r2
   1a888:	e8d0 1fef 	ldaex	r1, [r0]
   1a88c:	4291      	cmp	r1, r2
   1a88e:	d104      	bne.n	1a89a <nrfx_flag32_free+0x2a>
   1a890:	e8c0 3fec 	stlex	ip, r3, [r0]
   1a894:	f1bc 0f00 	cmp.w	ip, #0
   1a898:	d1f6      	bne.n	1a888 <nrfx_flag32_free+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1a89a:	d1f1      	bne.n	1a880 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1a89c:	4802      	ldr	r0, [pc, #8]	; (1a8a8 <nrfx_flag32_free+0x38>)
}
   1a89e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a8a2:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   1a8a4:	4801      	ldr	r0, [pc, #4]	; (1a8ac <nrfx_flag32_free+0x3c>)
   1a8a6:	e7fa      	b.n	1a89e <nrfx_flag32_free+0x2e>
   1a8a8:	0bad0000 	.word	0x0bad0000
   1a8ac:	0bad0004 	.word	0x0bad0004

0001a8b0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1a8b0:	4b05      	ldr	r3, [pc, #20]	; (1a8c8 <nrfx_clock_init+0x18>)
   1a8b2:	791b      	ldrb	r3, [r3, #4]
   1a8b4:	b92b      	cbnz	r3, 1a8c2 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   1a8b6:	4b04      	ldr	r3, [pc, #16]	; (1a8c8 <nrfx_clock_init+0x18>)
   1a8b8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1a8ba:	2201      	movs	r2, #1
   1a8bc:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a8be:	4803      	ldr	r0, [pc, #12]	; (1a8cc <nrfx_clock_init+0x1c>)
   1a8c0:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1a8c2:	4803      	ldr	r0, [pc, #12]	; (1a8d0 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a8c4:	4770      	bx	lr
   1a8c6:	bf00      	nop
   1a8c8:	2000f640 	.word	0x2000f640
   1a8cc:	0bad0000 	.word	0x0bad0000
   1a8d0:	0bad000c 	.word	0x0bad000c

0001a8d4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1a8d4:	b110      	cbz	r0, 1a8dc <nrfx_clock_start+0x8>
   1a8d6:	2801      	cmp	r0, #1
   1a8d8:	d021      	beq.n	1a91e <_flash_used+0x6>
   1a8da:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1a8dc:	4a15      	ldr	r2, [pc, #84]	; (1a934 <_flash_used+0x1c>)
   1a8de:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1a8e2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a8e6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1a8ea:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1a8ee:	d10f      	bne.n	1a910 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1a8f0:	4b10      	ldr	r3, [pc, #64]	; (1a934 <_flash_used+0x1c>)
   1a8f2:	2201      	movs	r2, #1
   1a8f4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a8f8:	4b0f      	ldr	r3, [pc, #60]	; (1a938 <_flash_used+0x20>)
   1a8fa:	2200      	movs	r2, #0
   1a8fc:	601a      	str	r2, [r3, #0]
   1a8fe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1a900:	4b0c      	ldr	r3, [pc, #48]	; (1a934 <_flash_used+0x1c>)
   1a902:	2202      	movs	r2, #2
   1a904:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a908:	3308      	adds	r3, #8
   1a90a:	2201      	movs	r2, #1
   1a90c:	601a      	str	r2, [r3, #0]
}
   1a90e:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1a910:	2b02      	cmp	r3, #2
   1a912:	d1ed      	bne.n	1a8f0 <nrfx_clock_start+0x1c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1a914:	4b07      	ldr	r3, [pc, #28]	; (1a934 <_flash_used+0x1c>)
   1a916:	2202      	movs	r2, #2
   1a918:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1a91c:	e7ec      	b.n	1a8f8 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a91e:	4b07      	ldr	r3, [pc, #28]	; (1a93c <_flash_used+0x24>)
   1a920:	2200      	movs	r2, #0
   1a922:	601a      	str	r2, [r3, #0]
   1a924:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1a926:	4b03      	ldr	r3, [pc, #12]	; (1a934 <_flash_used+0x1c>)
   1a928:	2201      	movs	r2, #1
   1a92a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a92e:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1a930:	4770      	bx	lr
   1a932:	bf00      	nop
   1a934:	40005000 	.word	0x40005000
   1a938:	40005104 	.word	0x40005104
   1a93c:	40005100 	.word	0x40005100

0001a940 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1a940:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1a942:	4604      	mov	r4, r0
   1a944:	b110      	cbz	r0, 1a94c <nrfx_clock_stop+0xc>
   1a946:	2801      	cmp	r0, #1
   1a948:	d011      	beq.n	1a96e <nrfx_clock_stop+0x2e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1a94a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   1a94c:	4b35      	ldr	r3, [pc, #212]	; (1aa24 <nrfx_clock_stop+0xe4>)
   1a94e:	2202      	movs	r2, #2
   1a950:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a954:	f503 7382 	add.w	r3, r3, #260	; 0x104
   1a958:	2200      	movs	r2, #0
   1a95a:	601a      	str	r2, [r3, #0]
   1a95c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a95e:	4b32      	ldr	r3, [pc, #200]	; (1aa28 <nrfx_clock_stop+0xe8>)
   1a960:	2201      	movs	r2, #1
   1a962:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   1a964:	2c01      	cmp	r4, #1
   1a966:	d00e      	beq.n	1a986 <nrfx_clock_stop+0x46>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1a968:	f242 7510 	movw	r5, #10000	; 0x2710
   1a96c:	e047      	b.n	1a9fe <nrfx_clock_stop+0xbe>
    p_reg->INTENCLR = mask;
   1a96e:	2301      	movs	r3, #1
   1a970:	4a2c      	ldr	r2, [pc, #176]	; (1aa24 <nrfx_clock_stop+0xe4>)
   1a972:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a976:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1a97a:	2100      	movs	r1, #0
   1a97c:	6011      	str	r1, [r2, #0]
   1a97e:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a980:	4a2a      	ldr	r2, [pc, #168]	; (1aa2c <nrfx_clock_stop+0xec>)
   1a982:	6013      	str	r3, [r2, #0]
}
   1a984:	e7ee      	b.n	1a964 <nrfx_clock_stop+0x24>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1a986:	4625      	mov	r5, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1a988:	f242 7610 	movw	r6, #10000	; 0x2710
   1a98c:	e013      	b.n	1a9b6 <nrfx_clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1a98e:	4b25      	ldr	r3, [pc, #148]	; (1aa24 <nrfx_clock_stop+0xe4>)
   1a990:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
   1a994:	f005 0503 	and.w	r5, r5, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a998:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   1a99c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a9a0:	d11b      	bne.n	1a9da <nrfx_clock_stop+0x9a>
    return false;
   1a9a2:	2300      	movs	r3, #0
   1a9a4:	2b00      	cmp	r3, #0
   1a9a6:	d0d0      	beq.n	1a94a <nrfx_clock_stop+0xa>
   1a9a8:	2d01      	cmp	r5, #1
   1a9aa:	d1ce      	bne.n	1a94a <nrfx_clock_stop+0xa>
   1a9ac:	2001      	movs	r0, #1
   1a9ae:	f00a f84d 	bl	24a4c <nrfx_busy_wait>
   1a9b2:	3e01      	subs	r6, #1
   1a9b4:	d0c9      	beq.n	1a94a <nrfx_clock_stop+0xa>
    switch (domain)
   1a9b6:	2c00      	cmp	r4, #0
   1a9b8:	d0e9      	beq.n	1a98e <nrfx_clock_stop+0x4e>
   1a9ba:	2c01      	cmp	r4, #1
   1a9bc:	d001      	beq.n	1a9c2 <nrfx_clock_stop+0x82>
   1a9be:	2300      	movs	r3, #0
   1a9c0:	e7f0      	b.n	1a9a4 <nrfx_clock_stop+0x64>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1a9c2:	4b18      	ldr	r3, [pc, #96]	; (1aa24 <nrfx_clock_stop+0xe4>)
   1a9c4:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
   1a9c8:	f005 0501 	and.w	r5, r5, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1a9cc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1a9d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a9d4:	d103      	bne.n	1a9de <nrfx_clock_stop+0x9e>
    return false;
   1a9d6:	2300      	movs	r3, #0
   1a9d8:	e7e4      	b.n	1a9a4 <nrfx_clock_stop+0x64>
                return true;
   1a9da:	2301      	movs	r3, #1
   1a9dc:	e7e2      	b.n	1a9a4 <nrfx_clock_stop+0x64>
                return true;
   1a9de:	2301      	movs	r3, #1
   1a9e0:	e7e0      	b.n	1a9a4 <nrfx_clock_stop+0x64>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a9e2:	4b10      	ldr	r3, [pc, #64]	; (1aa24 <nrfx_clock_stop+0xe4>)
   1a9e4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   1a9e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a9ec:	d115      	bne.n	1aa1a <nrfx_clock_stop+0xda>
    return false;
   1a9ee:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1a9f0:	2b00      	cmp	r3, #0
   1a9f2:	d0aa      	beq.n	1a94a <nrfx_clock_stop+0xa>
   1a9f4:	2001      	movs	r0, #1
   1a9f6:	f00a f829 	bl	24a4c <nrfx_busy_wait>
   1a9fa:	3d01      	subs	r5, #1
   1a9fc:	d0a5      	beq.n	1a94a <nrfx_clock_stop+0xa>
    switch (domain)
   1a9fe:	2c00      	cmp	r4, #0
   1aa00:	d0ef      	beq.n	1a9e2 <nrfx_clock_stop+0xa2>
   1aa02:	2c01      	cmp	r4, #1
   1aa04:	d001      	beq.n	1aa0a <nrfx_clock_stop+0xca>
   1aa06:	2300      	movs	r3, #0
   1aa08:	e7f2      	b.n	1a9f0 <nrfx_clock_stop+0xb0>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1aa0a:	4b06      	ldr	r3, [pc, #24]	; (1aa24 <nrfx_clock_stop+0xe4>)
   1aa0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1aa10:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1aa14:	d103      	bne.n	1aa1e <nrfx_clock_stop+0xde>
    return false;
   1aa16:	2300      	movs	r3, #0
   1aa18:	e7ea      	b.n	1a9f0 <nrfx_clock_stop+0xb0>
                return true;
   1aa1a:	2301      	movs	r3, #1
   1aa1c:	e7e8      	b.n	1a9f0 <nrfx_clock_stop+0xb0>
                return true;
   1aa1e:	2301      	movs	r3, #1
   1aa20:	e7e6      	b.n	1a9f0 <nrfx_clock_stop+0xb0>
   1aa22:	bf00      	nop
   1aa24:	40005000 	.word	0x40005000
   1aa28:	4000500c 	.word	0x4000500c
   1aa2c:	40005004 	.word	0x40005004

0001aa30 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1aa30:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1aa32:	4b17      	ldr	r3, [pc, #92]	; (1aa90 <nrfx_power_clock_irq_handler+0x60>)
   1aa34:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1aa36:	b153      	cbz	r3, 1aa4e <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aa38:	4b15      	ldr	r3, [pc, #84]	; (1aa90 <nrfx_power_clock_irq_handler+0x60>)
   1aa3a:	2000      	movs	r0, #0
   1aa3c:	6018      	str	r0, [r3, #0]
   1aa3e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1aa40:	4b14      	ldr	r3, [pc, #80]	; (1aa94 <nrfx_power_clock_irq_handler+0x64>)
   1aa42:	2201      	movs	r2, #1
   1aa44:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1aa48:	4b13      	ldr	r3, [pc, #76]	; (1aa98 <nrfx_power_clock_irq_handler+0x68>)
   1aa4a:	681b      	ldr	r3, [r3, #0]
   1aa4c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1aa4e:	4b13      	ldr	r3, [pc, #76]	; (1aa9c <nrfx_power_clock_irq_handler+0x6c>)
   1aa50:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1aa52:	b1a3      	cbz	r3, 1aa7e <nrfx_power_clock_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aa54:	4b11      	ldr	r3, [pc, #68]	; (1aa9c <nrfx_power_clock_irq_handler+0x6c>)
   1aa56:	2200      	movs	r2, #0
   1aa58:	601a      	str	r2, [r3, #0]
   1aa5a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1aa5c:	4a0d      	ldr	r2, [pc, #52]	; (1aa94 <nrfx_power_clock_irq_handler+0x64>)
   1aa5e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1aa62:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1aa66:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1aa6a:	2b01      	cmp	r3, #1
   1aa6c:	d008      	beq.n	1aa80 <nrfx_power_clock_irq_handler+0x50>
    p_reg->INTENCLR = mask;
   1aa6e:	4b09      	ldr	r3, [pc, #36]	; (1aa94 <nrfx_power_clock_irq_handler+0x64>)
   1aa70:	2202      	movs	r2, #2
   1aa72:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1aa76:	4b08      	ldr	r3, [pc, #32]	; (1aa98 <nrfx_power_clock_irq_handler+0x68>)
   1aa78:	681b      	ldr	r3, [r3, #0]
   1aa7a:	2001      	movs	r0, #1
   1aa7c:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1aa7e:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   1aa80:	4b04      	ldr	r3, [pc, #16]	; (1aa94 <nrfx_power_clock_irq_handler+0x64>)
   1aa82:	2202      	movs	r2, #2
   1aa84:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa88:	3308      	adds	r3, #8
   1aa8a:	2201      	movs	r2, #1
   1aa8c:	601a      	str	r2, [r3, #0]
}
   1aa8e:	e7f6      	b.n	1aa7e <nrfx_power_clock_irq_handler+0x4e>
   1aa90:	40005100 	.word	0x40005100
   1aa94:	40005000 	.word	0x40005000
   1aa98:	2000f640 	.word	0x2000f640
   1aa9c:	40005104 	.word	0x40005104

0001aaa0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1aaa0:	b508      	push	{r3, lr}
   1aaa2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1aaa4:	4801      	ldr	r0, [pc, #4]	; (1aaac <nrfx_dppi_channel_alloc+0xc>)
   1aaa6:	f7ff fec3 	bl	1a830 <nrfx_flag32_alloc>
}
   1aaaa:	bd08      	pop	{r3, pc}
   1aaac:	2000c630 	.word	0x2000c630

0001aab0 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1aab0:	3008      	adds	r0, #8
   1aab2:	4b03      	ldr	r3, [pc, #12]	; (1aac0 <pin_in_use+0x10>)
   1aab4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1aab8:	f000 0001 	and.w	r0, r0, #1
   1aabc:	4770      	bx	lr
   1aabe:	bf00      	nop
   1aac0:	2000c634 	.word	0x2000c634

0001aac4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1aac4:	3008      	adds	r0, #8
   1aac6:	4b03      	ldr	r3, [pc, #12]	; (1aad4 <pin_in_use_by_te+0x10>)
   1aac8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1aacc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1aad0:	4770      	bx	lr
   1aad2:	bf00      	nop
   1aad4:	2000c634 	.word	0x2000c634

0001aad8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1aad8:	3008      	adds	r0, #8
   1aada:	4b04      	ldr	r3, [pc, #16]	; (1aaec <pin_has_trigger+0x14>)
   1aadc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1aae0:	f010 001c 	ands.w	r0, r0, #28
   1aae4:	bf18      	it	ne
   1aae6:	2001      	movne	r0, #1
   1aae8:	4770      	bx	lr
   1aaea:	bf00      	nop
   1aaec:	2000c634 	.word	0x2000c634

0001aaf0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1aaf0:	3008      	adds	r0, #8
   1aaf2:	4b03      	ldr	r3, [pc, #12]	; (1ab00 <pin_is_output+0x10>)
   1aaf4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1aaf8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1aafc:	4770      	bx	lr
   1aafe:	bf00      	nop
   1ab00:	2000c634 	.word	0x2000c634

0001ab04 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ab04:	3008      	adds	r0, #8
   1ab06:	4b02      	ldr	r3, [pc, #8]	; (1ab10 <pin_te_get+0xc>)
   1ab08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ab0c:	0b40      	lsrs	r0, r0, #13
   1ab0e:	4770      	bx	lr
   1ab10:	2000c634 	.word	0x2000c634

0001ab14 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ab14:	2200      	movs	r2, #0
   1ab16:	e004      	b.n	1ab22 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1ab18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab1c:	4283      	cmp	r3, r0
   1ab1e:	d00f      	beq.n	1ab40 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ab20:	3201      	adds	r2, #1
   1ab22:	2a1f      	cmp	r2, #31
   1ab24:	d80a      	bhi.n	1ab3c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1ab26:	f102 0308 	add.w	r3, r2, #8
   1ab2a:	4906      	ldr	r1, [pc, #24]	; (1ab44 <handler_in_use+0x30>)
   1ab2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1ab30:	f413 7f80 	tst.w	r3, #256	; 0x100
   1ab34:	d0f0      	beq.n	1ab18 <handler_in_use+0x4>
   1ab36:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1ab3a:	e7ef      	b.n	1ab1c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   1ab3c:	2000      	movs	r0, #0
   1ab3e:	4770      	bx	lr
            return true;
   1ab40:	2001      	movs	r0, #1
}
   1ab42:	4770      	bx	lr
   1ab44:	2000c634 	.word	0x2000c634

0001ab48 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1ab48:	2300      	movs	r3, #0
   1ab4a:	b113      	cbz	r3, 1ab52 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   1ab4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1ab50:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ab52:	4a07      	ldr	r2, [pc, #28]	; (1ab70 <find_handler+0x28>)
   1ab54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1ab58:	4282      	cmp	r2, r0
   1ab5a:	d001      	beq.n	1ab60 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1ab5c:	3301      	adds	r3, #1
   1ab5e:	e7f4      	b.n	1ab4a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ab60:	4a03      	ldr	r2, [pc, #12]	; (1ab70 <find_handler+0x28>)
   1ab62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1ab66:	6852      	ldr	r2, [r2, #4]
   1ab68:	428a      	cmp	r2, r1
   1ab6a:	d1f7      	bne.n	1ab5c <find_handler+0x14>
            return i;
   1ab6c:	4618      	mov	r0, r3
   1ab6e:	4770      	bx	lr
   1ab70:	2000c634 	.word	0x2000c634

0001ab74 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ab74:	3008      	adds	r0, #8
   1ab76:	4b06      	ldr	r3, [pc, #24]	; (1ab90 <channel_handler_get+0x1c>)
   1ab78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1ab7c:	f410 7f80 	tst.w	r0, #256	; 0x100
   1ab80:	d004      	beq.n	1ab8c <channel_handler_get+0x18>
   1ab82:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   1ab86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1ab8a:	4770      	bx	lr
        return NULL;
   1ab8c:	2000      	movs	r0, #0
}
   1ab8e:	4770      	bx	lr
   1ab90:	2000c634 	.word	0x2000c634

0001ab94 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1ab94:	b570      	push	{r4, r5, r6, lr}
   1ab96:	4604      	mov	r4, r0
   1ab98:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   1ab9a:	f7ff ffeb 	bl	1ab74 <channel_handler_get>

    if (handler)
   1ab9e:	b120      	cbz	r0, 1abaa <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1aba0:	6806      	ldr	r6, [r0, #0]
   1aba2:	6842      	ldr	r2, [r0, #4]
   1aba4:	4629      	mov	r1, r5
   1aba6:	4620      	mov	r0, r4
   1aba8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   1abaa:	4b04      	ldr	r3, [pc, #16]	; (1abbc <call_handler+0x28>)
   1abac:	689b      	ldr	r3, [r3, #8]
   1abae:	b123      	cbz	r3, 1abba <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1abb0:	4a02      	ldr	r2, [pc, #8]	; (1abbc <call_handler+0x28>)
   1abb2:	68d2      	ldr	r2, [r2, #12]
   1abb4:	4629      	mov	r1, r5
   1abb6:	4620      	mov	r0, r4
   1abb8:	4798      	blx	r3
    }
}
   1abba:	bd70      	pop	{r4, r5, r6, pc}
   1abbc:	2000c634 	.word	0x2000c634

0001abc0 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   1abc0:	b570      	push	{r4, r5, r6, lr}
   1abc2:	4604      	mov	r4, r0
   1abc4:	460d      	mov	r5, r1
   1abc6:	4616      	mov	r6, r2
    if (is_level(trigger))
   1abc8:	4608      	mov	r0, r1
   1abca:	f009 ff65 	bl	24a98 <is_level>
   1abce:	b9a8      	cbnz	r0, 1abfc <next_sense_cond_call_handler+0x3c>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1abd0:	2e02      	cmp	r6, #2
   1abd2:	d033      	beq.n	1ac3c <next_sense_cond_call_handler+0x7c>
   1abd4:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   1abd6:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1abda:	491e      	ldr	r1, [pc, #120]	; (1ac54 <next_sense_cond_call_handler+0x94>)
   1abdc:	3380      	adds	r3, #128	; 0x80
   1abde:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1abe2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1abe6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1abea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1abee:	2d03      	cmp	r5, #3
   1abf0:	d028      	beq.n	1ac44 <next_sense_cond_call_handler+0x84>
   1abf2:	2e02      	cmp	r6, #2
   1abf4:	d024      	beq.n	1ac40 <next_sense_cond_call_handler+0x80>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1abf6:	2e03      	cmp	r6, #3
   1abf8:	d029      	beq.n	1ac4e <next_sense_cond_call_handler+0x8e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   1abfa:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   1abfc:	4629      	mov	r1, r5
   1abfe:	4620      	mov	r0, r4
   1ac00:	f7ff ffc8 	bl	1ab94 <call_handler>
    *p_pin = pin_number & 0x1F;
   1ac04:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ac08:	f104 0280 	add.w	r2, r4, #128	; 0x80
   1ac0c:	4b11      	ldr	r3, [pc, #68]	; (1ac54 <next_sense_cond_call_handler+0x94>)
   1ac0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ac12:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1ac16:	429e      	cmp	r6, r3
   1ac18:	d1ef      	bne.n	1abfa <next_sense_cond_call_handler+0x3a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ac1a:	4b0e      	ldr	r3, [pc, #56]	; (1ac54 <next_sense_cond_call_handler+0x94>)
   1ac1c:	4614      	mov	r4, r2
   1ac1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cnf &= ~to_update;
   1ac22:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1ac26:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ac2a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    cnf &= ~to_update;
   1ac2e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ac32:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1ac36:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
   1ac3a:	e7de      	b.n	1abfa <next_sense_cond_call_handler+0x3a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1ac3c:	2003      	movs	r0, #3
   1ac3e:	e7ca      	b.n	1abd6 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1ac40:	2d01      	cmp	r5, #1
   1ac42:	d1d8      	bne.n	1abf6 <next_sense_cond_call_handler+0x36>
            call_handler(pin, trigger);
   1ac44:	4629      	mov	r1, r5
   1ac46:	4620      	mov	r0, r4
   1ac48:	f7ff ffa4 	bl	1ab94 <call_handler>
}
   1ac4c:	e7d5      	b.n	1abfa <next_sense_cond_call_handler+0x3a>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1ac4e:	2d02      	cmp	r5, #2
   1ac50:	d1d3      	bne.n	1abfa <next_sense_cond_call_handler+0x3a>
   1ac52:	e7f7      	b.n	1ac44 <next_sense_cond_call_handler+0x84>
   1ac54:	40842500 	.word	0x40842500

0001ac58 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   1ac58:	b410      	push	{r4}
    for (i = start_port; i < (start_port + length); i++)
   1ac5a:	4604      	mov	r4, r0
   1ac5c:	2300      	movs	r3, #0
   1ac5e:	b933      	cbnz	r3, 1ac6e <latch_pending_read_and_check+0x16>
        *p_masks = gpio_regs[i]->LATCH;
   1ac60:	4a09      	ldr	r2, [pc, #36]	; (1ac88 <latch_pending_read_and_check+0x30>)
   1ac62:	6a11      	ldr	r1, [r2, #32]
   1ac64:	f844 1b04 	str.w	r1, [r4], #4
        gpio_regs[i]->LATCH = *p_masks;
   1ac68:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   1ac6a:	3301      	adds	r3, #1
   1ac6c:	e7f7      	b.n	1ac5e <latch_pending_read_and_check+0x6>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1ac6e:	2300      	movs	r3, #0
   1ac70:	b11b      	cbz	r3, 1ac7a <latch_pending_read_and_check+0x22>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   1ac72:	2000      	movs	r0, #0
}
   1ac74:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ac78:	4770      	bx	lr
        if (latch[port_idx])
   1ac7a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   1ac7e:	b90a      	cbnz	r2, 1ac84 <latch_pending_read_and_check+0x2c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1ac80:	3301      	adds	r3, #1
   1ac82:	e7f5      	b.n	1ac70 <latch_pending_read_and_check+0x18>
            return true;
   1ac84:	2001      	movs	r0, #1
   1ac86:	e7f5      	b.n	1ac74 <latch_pending_read_and_check+0x1c>
   1ac88:	40842500 	.word	0x40842500

0001ac8c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ac8c:	f100 0208 	add.w	r2, r0, #8
   1ac90:	4b0e      	ldr	r3, [pc, #56]	; (1accc <release_handler+0x40>)
   1ac92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1ac96:	f413 7f80 	tst.w	r3, #256	; 0x100
   1ac9a:	d016      	beq.n	1acca <release_handler+0x3e>
{
   1ac9c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ac9e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1aca2:	4610      	mov	r0, r2
   1aca4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1aca8:	4a08      	ldr	r2, [pc, #32]	; (1accc <release_handler+0x40>)
   1acaa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   1acae:	4620      	mov	r0, r4
   1acb0:	f7ff ff30 	bl	1ab14 <handler_in_use>
   1acb4:	b100      	cbz	r0, 1acb8 <release_handler+0x2c>
}
   1acb6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   1acb8:	4804      	ldr	r0, [pc, #16]	; (1accc <release_handler+0x40>)
   1acba:	2300      	movs	r3, #0
   1acbc:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1acc0:	4621      	mov	r1, r4
   1acc2:	3054      	adds	r0, #84	; 0x54
   1acc4:	f7ff fdd4 	bl	1a870 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1acc8:	e7f5      	b.n	1acb6 <release_handler+0x2a>
   1acca:	4770      	bx	lr
   1accc:	2000c634 	.word	0x2000c634

0001acd0 <pin_handler_trigger_uninit>:
{
   1acd0:	b510      	push	{r4, lr}
   1acd2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   1acd4:	f7ff fef6 	bl	1aac4 <pin_in_use_by_te>
   1acd8:	b150      	cbz	r0, 1acf0 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1acda:	4620      	mov	r0, r4
   1acdc:	f7ff ff12 	bl	1ab04 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1ace0:	4b08      	ldr	r3, [pc, #32]	; (1ad04 <pin_handler_trigger_uninit+0x34>)
   1ace2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1ace6:	2200      	movs	r2, #0
   1ace8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1acec:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   1acf0:	4620      	mov	r0, r4
   1acf2:	f7ff ffcb 	bl	1ac8c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1acf6:	3408      	adds	r4, #8
   1acf8:	4b03      	ldr	r3, [pc, #12]	; (1ad08 <pin_handler_trigger_uninit+0x38>)
   1acfa:	2200      	movs	r2, #0
   1acfc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   1ad00:	bd10      	pop	{r4, pc}
   1ad02:	bf00      	nop
   1ad04:	40031000 	.word	0x40031000
   1ad08:	2000c634 	.word	0x2000c634

0001ad0c <pin_handler_set>:
{
   1ad0c:	b570      	push	{r4, r5, r6, lr}
   1ad0e:	b082      	sub	sp, #8
   1ad10:	4606      	mov	r6, r0
   1ad12:	460c      	mov	r4, r1
   1ad14:	4615      	mov	r5, r2
    release_handler(pin);
   1ad16:	f7ff ffb9 	bl	1ac8c <release_handler>
    if (!handler)
   1ad1a:	b324      	cbz	r4, 1ad66 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   1ad1c:	4629      	mov	r1, r5
   1ad1e:	4620      	mov	r0, r4
   1ad20:	f7ff ff12 	bl	1ab48 <find_handler>
    if (handler_id < 0)
   1ad24:	1e03      	subs	r3, r0, #0
   1ad26:	db13      	blt.n	1ad50 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   1ad28:	4a10      	ldr	r2, [pc, #64]	; (1ad6c <pin_handler_set+0x60>)
   1ad2a:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1ad2e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1ad32:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ad34:	025b      	lsls	r3, r3, #9
   1ad36:	b29b      	uxth	r3, r3
   1ad38:	f106 0008 	add.w	r0, r6, #8
   1ad3c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   1ad40:	430b      	orrs	r3, r1
   1ad42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1ad46:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   1ad4a:	4809      	ldr	r0, [pc, #36]	; (1ad70 <pin_handler_set+0x64>)
}
   1ad4c:	b002      	add	sp, #8
   1ad4e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1ad50:	f10d 0107 	add.w	r1, sp, #7
   1ad54:	4807      	ldr	r0, [pc, #28]	; (1ad74 <pin_handler_set+0x68>)
   1ad56:	f7ff fd6b 	bl	1a830 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1ad5a:	4b05      	ldr	r3, [pc, #20]	; (1ad70 <pin_handler_set+0x64>)
   1ad5c:	4298      	cmp	r0, r3
   1ad5e:	d1f5      	bne.n	1ad4c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1ad60:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ad64:	e7e0      	b.n	1ad28 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   1ad66:	4802      	ldr	r0, [pc, #8]	; (1ad70 <pin_handler_set+0x64>)
   1ad68:	e7f0      	b.n	1ad4c <pin_handler_set+0x40>
   1ad6a:	bf00      	nop
   1ad6c:	2000c634 	.word	0x2000c634
   1ad70:	0bad0000 	.word	0x0bad0000
   1ad74:	2000c688 	.word	0x2000c688

0001ad78 <port_event_handle>:

static void port_event_handle(void)
{
   1ad78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad7a:	b083      	sub	sp, #12
   1ad7c:	2300      	movs	r3, #0
   1ad7e:	a801      	add	r0, sp, #4
   1ad80:	e005      	b.n	1ad8e <port_event_handle+0x16>
        *p_masks = gpio_regs[i]->LATCH;
   1ad82:	4a22      	ldr	r2, [pc, #136]	; (1ae0c <port_event_handle+0x94>)
   1ad84:	6a11      	ldr	r1, [r2, #32]
   1ad86:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1ad8a:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   1ad8c:	3301      	adds	r3, #1
   1ad8e:	2b00      	cmp	r3, #0
   1ad90:	d0f7      	beq.n	1ad82 <port_event_handle+0xa>
   1ad92:	e036      	b.n	1ae02 <port_event_handle+0x8a>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
        {
            while (latch[i])
   1ad94:	ab02      	add	r3, sp, #8
   1ad96:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1ad9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1ad9e:	b328      	cbz	r0, 1adec <port_event_handle+0x74>
            {
                uint32_t pin = NRF_CTZ(latch[i]);
   1ada0:	fa90 f0a0 	rbit	r0, r0
   1ada4:	fab0 f080 	clz	r0, r0

                /* Convert to absolute value. */
                pin += 32 * i;
   1ada8:	eb00 1045 	add.w	r0, r0, r5, lsl #5
                nrf_gpio_pin_sense_t sense;
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1adac:	f100 0208 	add.w	r2, r0, #8
   1adb0:	4b17      	ldr	r3, [pc, #92]	; (1ae10 <port_event_handle+0x98>)
   1adb2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1adb6:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   1adb8:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1adbc:	af01      	add	r7, sp, #4
   1adbe:	2401      	movs	r4, #1
   1adc0:	fa04 f203 	lsl.w	r2, r4, r3
   1adc4:	5dbb      	ldrb	r3, [r7, r6]
   1adc6:	ea23 0302 	bic.w	r3, r3, r2
   1adca:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
   1adcc:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1add0:	4e0e      	ldr	r6, [pc, #56]	; (1ae0c <port_event_handle+0x94>)
   1add2:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1add6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   1adda:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1adde:	f3c1 0182 	ubfx	r1, r1, #2, #3
   1ade2:	f7ff feed 	bl	1abc0 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   1ade6:	40bc      	lsls	r4, r7
   1ade8:	6234      	str	r4, [r6, #32]
}
   1adea:	e7d3      	b.n	1ad94 <port_event_handle+0x1c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1adec:	3501      	adds	r5, #1
   1adee:	2d00      	cmp	r5, #0
   1adf0:	d0d0      	beq.n	1ad94 <port_event_handle+0x1c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1adf2:	4b08      	ldr	r3, [pc, #32]	; (1ae14 <port_event_handle+0x9c>)
   1adf4:	2200      	movs	r2, #0
   1adf6:	601a      	str	r2, [r3, #0]
   1adf8:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   1adfa:	a801      	add	r0, sp, #4
   1adfc:	f7ff ff2c 	bl	1ac58 <latch_pending_read_and_check>
   1ae00:	b108      	cbz	r0, 1ae06 <port_event_handle+0x8e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1ae02:	2500      	movs	r5, #0
   1ae04:	e7f3      	b.n	1adee <port_event_handle+0x76>
}
   1ae06:	b003      	add	sp, #12
   1ae08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae0a:	bf00      	nop
   1ae0c:	40842500 	.word	0x40842500
   1ae10:	2000c634 	.word	0x2000c634
   1ae14:	4003117c 	.word	0x4003117c

0001ae18 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   1ae18:	b538      	push	{r3, r4, r5, lr}
   1ae1a:	4604      	mov	r4, r0
    while (mask)
   1ae1c:	b1cc      	cbz	r4, 1ae52 <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   1ae1e:	fa94 f3a4 	rbit	r3, r4
   1ae22:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1ae26:	2201      	movs	r2, #1
   1ae28:	409a      	lsls	r2, r3
   1ae2a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ae2e:	4a09      	ldr	r2, [pc, #36]	; (1ae54 <gpiote_evt_handle+0x3c>)
   1ae30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1ae34:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1ae38:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1ae3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1ae40:	f3c0 4001 	ubfx	r0, r0, #16, #2
   1ae44:	f009 fe26 	bl	24a94 <gpiote_polarity_to_trigger>
   1ae48:	4601      	mov	r1, r0
   1ae4a:	4628      	mov	r0, r5
   1ae4c:	f7ff fea2 	bl	1ab94 <call_handler>
   1ae50:	e7e4      	b.n	1ae1c <gpiote_evt_handle+0x4>
    }
}
   1ae52:	bd38      	pop	{r3, r4, r5, pc}
   1ae54:	40031000 	.word	0x40031000

0001ae58 <nrfx_gpiote_input_configure>:
{
   1ae58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ae5c:	4604      	mov	r4, r0
   1ae5e:	4615      	mov	r5, r2
   1ae60:	461e      	mov	r6, r3
    if (p_input_config)
   1ae62:	b341      	cbz	r1, 1aeb6 <nrfx_gpiote_input_configure+0x5e>
   1ae64:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   1ae66:	f009 fdff 	bl	24a68 <pin_is_task_output>
   1ae6a:	2800      	cmp	r0, #0
   1ae6c:	f040 8093 	bne.w	1af96 <nrfx_gpiote_input_configure+0x13e>
    *p_pin = pin_number & 0x1F;
   1ae70:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ae74:	f102 0180 	add.w	r1, r2, #128	; 0x80
   1ae78:	4b4b      	ldr	r3, [pc, #300]	; (1afa8 <nrfx_gpiote_input_configure+0x150>)
   1ae7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1ae7e:	2f00      	cmp	r7, #0
   1ae80:	d03a      	beq.n	1aef8 <nrfx_gpiote_input_configure+0xa0>
   1ae82:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1ae84:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   1ae88:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1ae8c:	2f00      	cmp	r7, #0
   1ae8e:	d035      	beq.n	1aefc <nrfx_gpiote_input_configure+0xa4>
   1ae90:	7839      	ldrb	r1, [r7, #0]
   1ae92:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ae94:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   1ae96:	3280      	adds	r2, #128	; 0x80
   1ae98:	4943      	ldr	r1, [pc, #268]	; (1afa8 <nrfx_gpiote_input_configure+0x150>)
   1ae9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1ae9e:	4a43      	ldr	r2, [pc, #268]	; (1afac <nrfx_gpiote_input_configure+0x154>)
   1aea0:	f104 0108 	add.w	r1, r4, #8
   1aea4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1aea8:	f023 0302 	bic.w	r3, r3, #2
   1aeac:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1aeae:	f043 0301 	orr.w	r3, r3, #1
   1aeb2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1aeb6:	b1b5      	cbz	r5, 1aee6 <nrfx_gpiote_input_configure+0x8e>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1aeb8:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1aebc:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   1aec0:	4620      	mov	r0, r4
   1aec2:	f7ff fe15 	bl	1aaf0 <pin_is_output>
   1aec6:	b1d8      	cbz	r0, 1af00 <nrfx_gpiote_input_configure+0xa8>
            if (use_evt)
   1aec8:	f1b9 0f00 	cmp.w	r9, #0
   1aecc:	d165      	bne.n	1af9a <nrfx_gpiote_input_configure+0x142>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1aece:	4b37      	ldr	r3, [pc, #220]	; (1afac <nrfx_gpiote_input_configure+0x154>)
   1aed0:	f104 0208 	add.w	r2, r4, #8
   1aed4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   1aed8:	f020 001c 	bic.w	r0, r0, #28
   1aedc:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1aede:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   1aee2:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   1aee6:	2e00      	cmp	r6, #0
   1aee8:	d05b      	beq.n	1afa2 <nrfx_gpiote_input_configure+0x14a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1aeea:	6872      	ldr	r2, [r6, #4]
   1aeec:	6831      	ldr	r1, [r6, #0]
   1aeee:	4620      	mov	r0, r4
   1aef0:	f7ff ff0c 	bl	1ad0c <pin_handler_set>
}
   1aef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1aef8:	2100      	movs	r1, #0
   1aefa:	e7c3      	b.n	1ae84 <nrfx_gpiote_input_configure+0x2c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1aefc:	2100      	movs	r1, #0
   1aefe:	e7c9      	b.n	1ae94 <nrfx_gpiote_input_configure+0x3c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1af00:	4b2a      	ldr	r3, [pc, #168]	; (1afac <nrfx_gpiote_input_configure+0x154>)
   1af02:	f104 0208 	add.w	r2, r4, #8
   1af06:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   1af0a:	f027 0720 	bic.w	r7, r7, #32
   1af0e:	04ff      	lsls	r7, r7, #19
   1af10:	0cff      	lsrs	r7, r7, #19
   1af12:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   1af16:	f1b9 0f00 	cmp.w	r9, #0
   1af1a:	d0d8      	beq.n	1aece <nrfx_gpiote_input_configure+0x76>
                if (!edge)
   1af1c:	f1b8 0f03 	cmp.w	r8, #3
   1af20:	d83d      	bhi.n	1af9e <nrfx_gpiote_input_configure+0x146>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1af22:	686b      	ldr	r3, [r5, #4]
   1af24:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1af26:	f1b8 0f00 	cmp.w	r8, #0
   1af2a:	d108      	bne.n	1af3e <nrfx_gpiote_input_configure+0xe6>
    p_reg->CONFIG[idx] = 0;
   1af2c:	4b20      	ldr	r3, [pc, #128]	; (1afb0 <nrfx_gpiote_input_configure+0x158>)
   1af2e:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   1af32:	2200      	movs	r2, #0
   1af34:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   1af38:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
   1af3c:	e7c7      	b.n	1aece <nrfx_gpiote_input_configure+0x76>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   1af3e:	4640      	mov	r0, r8
   1af40:	f009 fda9 	bl	24a96 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1af44:	4b1a      	ldr	r3, [pc, #104]	; (1afb0 <nrfx_gpiote_input_configure+0x158>)
   1af46:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   1af4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1af4e:	f021 0103 	bic.w	r1, r1, #3
   1af52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1af56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1af5a:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   1af5e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1af62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1af66:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   1af6a:	0221      	lsls	r1, r4, #8
   1af6c:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1af70:	0400      	lsls	r0, r0, #16
   1af72:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1af76:	4301      	orrs	r1, r0
   1af78:	ea4c 0101 	orr.w	r1, ip, r1
   1af7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1af80:	036d      	lsls	r5, r5, #13
   1af82:	b2ad      	uxth	r5, r5
   1af84:	f104 0308 	add.w	r3, r4, #8
   1af88:	432f      	orrs	r7, r5
   1af8a:	f047 0720 	orr.w	r7, r7, #32
   1af8e:	4a07      	ldr	r2, [pc, #28]	; (1afac <nrfx_gpiote_input_configure+0x154>)
   1af90:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   1af94:	e79b      	b.n	1aece <nrfx_gpiote_input_configure+0x76>
            return NRFX_ERROR_INVALID_PARAM;
   1af96:	4807      	ldr	r0, [pc, #28]	; (1afb4 <nrfx_gpiote_input_configure+0x15c>)
   1af98:	e7ac      	b.n	1aef4 <nrfx_gpiote_input_configure+0x9c>
                return NRFX_ERROR_INVALID_PARAM;
   1af9a:	4806      	ldr	r0, [pc, #24]	; (1afb4 <nrfx_gpiote_input_configure+0x15c>)
   1af9c:	e7aa      	b.n	1aef4 <nrfx_gpiote_input_configure+0x9c>
                    return NRFX_ERROR_INVALID_PARAM;
   1af9e:	4805      	ldr	r0, [pc, #20]	; (1afb4 <nrfx_gpiote_input_configure+0x15c>)
   1afa0:	e7a8      	b.n	1aef4 <nrfx_gpiote_input_configure+0x9c>
        err = NRFX_SUCCESS;
   1afa2:	4805      	ldr	r0, [pc, #20]	; (1afb8 <nrfx_gpiote_input_configure+0x160>)
   1afa4:	e7a6      	b.n	1aef4 <nrfx_gpiote_input_configure+0x9c>
   1afa6:	bf00      	nop
   1afa8:	40842500 	.word	0x40842500
   1afac:	2000c634 	.word	0x2000c634
   1afb0:	40031000 	.word	0x40031000
   1afb4:	0bad0004 	.word	0x0bad0004
   1afb8:	0bad0000 	.word	0x0bad0000

0001afbc <nrfx_gpiote_output_configure>:
{
   1afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1afbe:	4604      	mov	r4, r0
   1afc0:	4616      	mov	r6, r2
    if (p_config)
   1afc2:	2900      	cmp	r1, #0
   1afc4:	d04a      	beq.n	1b05c <nrfx_gpiote_output_configure+0xa0>
   1afc6:	460d      	mov	r5, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1afc8:	f009 fd5d 	bl	24a86 <pin_is_input>
   1afcc:	b128      	cbz	r0, 1afda <nrfx_gpiote_output_configure+0x1e>
   1afce:	4620      	mov	r0, r4
   1afd0:	f7ff fd78 	bl	1aac4 <pin_in_use_by_te>
   1afd4:	2800      	cmp	r0, #0
   1afd6:	f040 8095 	bne.w	1b104 <nrfx_gpiote_output_configure+0x148>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1afda:	4620      	mov	r0, r4
   1afdc:	f7ff fd7c 	bl	1aad8 <pin_has_trigger>
   1afe0:	b118      	cbz	r0, 1afea <nrfx_gpiote_output_configure+0x2e>
   1afe2:	786b      	ldrb	r3, [r5, #1]
   1afe4:	2b01      	cmp	r3, #1
   1afe6:	f000 808f 	beq.w	1b108 <nrfx_gpiote_output_configure+0x14c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1afea:	1ca8      	adds	r0, r5, #2
    *p_pin = pin_number & 0x1F;
   1afec:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1aff0:	f102 0180 	add.w	r1, r2, #128	; 0x80
   1aff4:	4b48      	ldr	r3, [pc, #288]	; (1b118 <nrfx_gpiote_output_configure+0x15c>)
   1aff6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1affa:	1c6f      	adds	r7, r5, #1
   1affc:	d074      	beq.n	1b0e8 <nrfx_gpiote_output_configure+0x12c>
   1affe:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1b000:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1b004:	2800      	cmp	r0, #0
   1b006:	d071      	beq.n	1b0ec <nrfx_gpiote_output_configure+0x130>
   1b008:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1b00c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1b010:	2d00      	cmp	r5, #0
   1b012:	d06e      	beq.n	1b0f2 <nrfx_gpiote_output_configure+0x136>
   1b014:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1b018:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1b01c:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1b020:	2f00      	cmp	r7, #0
   1b022:	d069      	beq.n	1b0f8 <nrfx_gpiote_output_configure+0x13c>
   1b024:	786b      	ldrb	r3, [r5, #1]
   1b026:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1b028:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1b02c:	2800      	cmp	r0, #0
   1b02e:	d065      	beq.n	1b0fc <nrfx_gpiote_output_configure+0x140>
   1b030:	78a8      	ldrb	r0, [r5, #2]
   1b032:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1b034:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1b036:	2d00      	cmp	r5, #0
   1b038:	d062      	beq.n	1b100 <nrfx_gpiote_output_configure+0x144>
   1b03a:	7828      	ldrb	r0, [r5, #0]
   1b03c:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1b03e:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1b040:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   1b042:	3280      	adds	r2, #128	; 0x80
   1b044:	4934      	ldr	r1, [pc, #208]	; (1b118 <nrfx_gpiote_output_configure+0x15c>)
   1b046:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1b04a:	4a34      	ldr	r2, [pc, #208]	; (1b11c <nrfx_gpiote_output_configure+0x160>)
   1b04c:	f104 0108 	add.w	r1, r4, #8
   1b050:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1b054:	f043 0303 	orr.w	r3, r3, #3
   1b058:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1b05c:	2e00      	cmp	r6, #0
   1b05e:	d055      	beq.n	1b10c <nrfx_gpiote_output_configure+0x150>
        if (pin_is_input(pin))
   1b060:	4620      	mov	r0, r4
   1b062:	f009 fd10 	bl	24a86 <pin_is_input>
   1b066:	2800      	cmp	r0, #0
   1b068:	d152      	bne.n	1b110 <nrfx_gpiote_output_configure+0x154>
        uint32_t ch = p_task_config->task_ch;
   1b06a:	7832      	ldrb	r2, [r6, #0]
    p_reg->CONFIG[idx] = 0;
   1b06c:	4b2c      	ldr	r3, [pc, #176]	; (1b120 <nrfx_gpiote_output_configure+0x164>)
   1b06e:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   1b072:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
   1b076:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1b07a:	4928      	ldr	r1, [pc, #160]	; (1b11c <nrfx_gpiote_output_configure+0x160>)
   1b07c:	f104 0008 	add.w	r0, r4, #8
   1b080:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   1b084:	f023 0320 	bic.w	r3, r3, #32
   1b088:	04db      	lsls	r3, r3, #19
   1b08a:	0cdb      	lsrs	r3, r3, #19
   1b08c:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1b090:	7871      	ldrb	r1, [r6, #1]
   1b092:	2900      	cmp	r1, #0
   1b094:	d03e      	beq.n	1b114 <nrfx_gpiote_output_configure+0x158>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1b096:	f896 c002 	ldrb.w	ip, [r6, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1b09a:	4d21      	ldr	r5, [pc, #132]	; (1b120 <nrfx_gpiote_output_configure+0x164>)
   1b09c:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   1b0a0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1b0a4:	f420 1098 	bic.w	r0, r0, #1245184	; 0x130000
   1b0a8:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   1b0ac:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b0b0:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   1b0b4:	0220      	lsls	r0, r4, #8
   1b0b6:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1b0ba:	0409      	lsls	r1, r1, #16
   1b0bc:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b0c0:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1b0c2:	ea4f 500c 	mov.w	r0, ip, lsl #20
   1b0c6:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1b0ca:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b0cc:	4339      	orrs	r1, r7
   1b0ce:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1b0d2:	0352      	lsls	r2, r2, #13
   1b0d4:	b292      	uxth	r2, r2
   1b0d6:	3408      	adds	r4, #8
   1b0d8:	431a      	orrs	r2, r3
   1b0da:	f042 0220 	orr.w	r2, r2, #32
   1b0de:	4b0f      	ldr	r3, [pc, #60]	; (1b11c <nrfx_gpiote_output_configure+0x160>)
   1b0e0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   1b0e4:	480f      	ldr	r0, [pc, #60]	; (1b124 <nrfx_gpiote_output_configure+0x168>)
   1b0e6:	e012      	b.n	1b10e <nrfx_gpiote_output_configure+0x152>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1b0e8:	2300      	movs	r3, #0
   1b0ea:	e789      	b.n	1b000 <nrfx_gpiote_output_configure+0x44>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1b0ec:	f04f 0c00 	mov.w	ip, #0
   1b0f0:	e78c      	b.n	1b00c <nrfx_gpiote_output_configure+0x50>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1b0f2:	f04f 0c00 	mov.w	ip, #0
   1b0f6:	e78f      	b.n	1b018 <nrfx_gpiote_output_configure+0x5c>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1b0f8:	2300      	movs	r3, #0
   1b0fa:	e795      	b.n	1b028 <nrfx_gpiote_output_configure+0x6c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1b0fc:	2000      	movs	r0, #0
   1b0fe:	e799      	b.n	1b034 <nrfx_gpiote_output_configure+0x78>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1b100:	2000      	movs	r0, #0
   1b102:	e79c      	b.n	1b03e <nrfx_gpiote_output_configure+0x82>
   1b104:	4808      	ldr	r0, [pc, #32]	; (1b128 <nrfx_gpiote_output_configure+0x16c>)
   1b106:	e002      	b.n	1b10e <nrfx_gpiote_output_configure+0x152>
   1b108:	4807      	ldr	r0, [pc, #28]	; (1b128 <nrfx_gpiote_output_configure+0x16c>)
   1b10a:	e000      	b.n	1b10e <nrfx_gpiote_output_configure+0x152>
   1b10c:	4805      	ldr	r0, [pc, #20]	; (1b124 <nrfx_gpiote_output_configure+0x168>)
}
   1b10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
   1b110:	4805      	ldr	r0, [pc, #20]	; (1b128 <nrfx_gpiote_output_configure+0x16c>)
   1b112:	e7fc      	b.n	1b10e <nrfx_gpiote_output_configure+0x152>
    return NRFX_SUCCESS;
   1b114:	4803      	ldr	r0, [pc, #12]	; (1b124 <nrfx_gpiote_output_configure+0x168>)
   1b116:	e7fa      	b.n	1b10e <nrfx_gpiote_output_configure+0x152>
   1b118:	40842500 	.word	0x40842500
   1b11c:	2000c634 	.word	0x2000c634
   1b120:	40031000 	.word	0x40031000
   1b124:	0bad0000 	.word	0x0bad0000
   1b128:	0bad0004 	.word	0x0bad0004

0001b12c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1b12c:	4b01      	ldr	r3, [pc, #4]	; (1b134 <nrfx_gpiote_global_callback_set+0x8>)
   1b12e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   1b130:	60d9      	str	r1, [r3, #12]
}
   1b132:	4770      	bx	lr
   1b134:	2000c634 	.word	0x2000c634

0001b138 <nrfx_gpiote_channel_get>:
{
   1b138:	b538      	push	{r3, r4, r5, lr}
   1b13a:	4604      	mov	r4, r0
   1b13c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   1b13e:	f7ff fcc1 	bl	1aac4 <pin_in_use_by_te>
   1b142:	b140      	cbz	r0, 1b156 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b144:	f104 0008 	add.w	r0, r4, #8
   1b148:	4b04      	ldr	r3, [pc, #16]	; (1b15c <nrfx_gpiote_channel_get+0x24>)
   1b14a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   1b14e:	0b5b      	lsrs	r3, r3, #13
   1b150:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   1b152:	4803      	ldr	r0, [pc, #12]	; (1b160 <nrfx_gpiote_channel_get+0x28>)
}
   1b154:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b156:	4803      	ldr	r0, [pc, #12]	; (1b164 <nrfx_gpiote_channel_get+0x2c>)
   1b158:	e7fc      	b.n	1b154 <nrfx_gpiote_channel_get+0x1c>
   1b15a:	bf00      	nop
   1b15c:	2000c634 	.word	0x2000c634
   1b160:	0bad0000 	.word	0x0bad0000
   1b164:	0bad0004 	.word	0x0bad0004

0001b168 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1b168:	4b0f      	ldr	r3, [pc, #60]	; (1b1a8 <nrfx_gpiote_init+0x40>)
   1b16a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   1b16e:	b10b      	cbz	r3, 1b174 <nrfx_gpiote_init+0xc>
        return err_code;
   1b170:	480e      	ldr	r0, [pc, #56]	; (1b1ac <nrfx_gpiote_init+0x44>)
}
   1b172:	4770      	bx	lr
{
   1b174:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1b176:	4c0c      	ldr	r4, [pc, #48]	; (1b1a8 <nrfx_gpiote_init+0x40>)
   1b178:	2240      	movs	r2, #64	; 0x40
   1b17a:	2100      	movs	r1, #0
   1b17c:	f104 0010 	add.w	r0, r4, #16
   1b180:	f00b fb7f 	bl	26882 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1b184:	2031      	movs	r0, #49	; 0x31
   1b186:	f7f8 fe69 	bl	13e5c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b18a:	4b09      	ldr	r3, [pc, #36]	; (1b1b0 <nrfx_gpiote_init+0x48>)
   1b18c:	2200      	movs	r2, #0
   1b18e:	601a      	str	r2, [r3, #0]
   1b190:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1b192:	4b08      	ldr	r3, [pc, #32]	; (1b1b4 <nrfx_gpiote_init+0x4c>)
   1b194:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b198:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1b19c:	2301      	movs	r3, #1
   1b19e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1b1a2:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
   1b1a4:	4804      	ldr	r0, [pc, #16]	; (1b1b8 <nrfx_gpiote_init+0x50>)
}
   1b1a6:	bd10      	pop	{r4, pc}
   1b1a8:	2000c634 	.word	0x2000c634
   1b1ac:	0bad0005 	.word	0x0bad0005
   1b1b0:	4003117c 	.word	0x4003117c
   1b1b4:	40031000 	.word	0x40031000
   1b1b8:	0bad0000 	.word	0x0bad0000

0001b1bc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1b1bc:	4b03      	ldr	r3, [pc, #12]	; (1b1cc <nrfx_gpiote_is_init+0x10>)
   1b1be:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1b1c2:	3800      	subs	r0, #0
   1b1c4:	bf18      	it	ne
   1b1c6:	2001      	movne	r0, #1
   1b1c8:	4770      	bx	lr
   1b1ca:	bf00      	nop
   1b1cc:	2000c634 	.word	0x2000c634

0001b1d0 <nrfx_gpiote_channel_free>:
{
   1b1d0:	b508      	push	{r3, lr}
   1b1d2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1b1d4:	4801      	ldr	r0, [pc, #4]	; (1b1dc <nrfx_gpiote_channel_free+0xc>)
   1b1d6:	f7ff fb4b 	bl	1a870 <nrfx_flag32_free>
}
   1b1da:	bd08      	pop	{r3, pc}
   1b1dc:	2000c684 	.word	0x2000c684

0001b1e0 <nrfx_gpiote_channel_alloc>:
{
   1b1e0:	b508      	push	{r3, lr}
   1b1e2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1b1e4:	4801      	ldr	r0, [pc, #4]	; (1b1ec <nrfx_gpiote_channel_alloc+0xc>)
   1b1e6:	f7ff fb23 	bl	1a830 <nrfx_flag32_alloc>
}
   1b1ea:	bd08      	pop	{r3, pc}
   1b1ec:	2000c684 	.word	0x2000c684

0001b1f0 <nrfx_gpiote_trigger_enable>:
{
   1b1f0:	b538      	push	{r3, r4, r5, lr}
   1b1f2:	4604      	mov	r4, r0
   1b1f4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b1f6:	f7ff fc65 	bl	1aac4 <pin_in_use_by_te>
   1b1fa:	b320      	cbz	r0, 1b246 <nrfx_gpiote_trigger_enable+0x56>
   1b1fc:	4620      	mov	r0, r4
   1b1fe:	f009 fc42 	bl	24a86 <pin_is_input>
   1b202:	b300      	cbz	r0, 1b246 <nrfx_gpiote_trigger_enable+0x56>
        uint8_t ch = pin_te_get(pin);
   1b204:	4620      	mov	r0, r4
   1b206:	f7ff fc7d 	bl	1ab04 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1b20a:	0083      	lsls	r3, r0, #2
   1b20c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   1b210:	b29b      	uxth	r3, r3
   1b212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b216:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b21a:	2200      	movs	r2, #0
   1b21c:	601a      	str	r2, [r3, #0]
   1b21e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1b220:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b224:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   1b228:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1b22c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1b230:	f043 0301 	orr.w	r3, r3, #1
   1b234:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   1b238:	b345      	cbz	r5, 1b28c <nrfx_gpiote_trigger_enable+0x9c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1b23a:	2301      	movs	r3, #1
   1b23c:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   1b240:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   1b244:	e022      	b.n	1b28c <nrfx_gpiote_trigger_enable+0x9c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b246:	f104 0308 	add.w	r3, r4, #8
   1b24a:	4a13      	ldr	r2, [pc, #76]	; (1b298 <nrfx_gpiote_trigger_enable+0xa8>)
   1b24c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1b250:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1b254:	2b04      	cmp	r3, #4
   1b256:	d00c      	beq.n	1b272 <nrfx_gpiote_trigger_enable+0x82>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1b258:	2b05      	cmp	r3, #5
   1b25a:	d018      	beq.n	1b28e <nrfx_gpiote_trigger_enable+0x9e>
    *p_pin = pin_number & 0x1F;
   1b25c:	f004 031f 	and.w	r3, r4, #31
    return p_reg->IN;
   1b260:	4a0e      	ldr	r2, [pc, #56]	; (1b29c <nrfx_gpiote_trigger_enable+0xac>)
   1b262:	6912      	ldr	r2, [r2, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b264:	fa22 f303 	lsr.w	r3, r2, r3
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1b268:	f013 0f01 	tst.w	r3, #1
   1b26c:	d011      	beq.n	1b292 <nrfx_gpiote_trigger_enable+0xa2>
   1b26e:	2103      	movs	r1, #3
   1b270:	e000      	b.n	1b274 <nrfx_gpiote_trigger_enable+0x84>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1b272:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   1b274:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1b278:	4a08      	ldr	r2, [pc, #32]	; (1b29c <nrfx_gpiote_trigger_enable+0xac>)
   1b27a:	3480      	adds	r4, #128	; 0x80
   1b27c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   1b280:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1b284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1b288:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   1b28c:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1b28e:	2102      	movs	r1, #2
   1b290:	e7f0      	b.n	1b274 <nrfx_gpiote_trigger_enable+0x84>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1b292:	2102      	movs	r1, #2
   1b294:	e7ee      	b.n	1b274 <nrfx_gpiote_trigger_enable+0x84>
   1b296:	bf00      	nop
   1b298:	2000c634 	.word	0x2000c634
   1b29c:	40842500 	.word	0x40842500

0001b2a0 <nrfx_gpiote_trigger_disable>:
{
   1b2a0:	b510      	push	{r4, lr}
   1b2a2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b2a4:	f7ff fc0e 	bl	1aac4 <pin_in_use_by_te>
   1b2a8:	b1a0      	cbz	r0, 1b2d4 <nrfx_gpiote_trigger_disable+0x34>
   1b2aa:	4620      	mov	r0, r4
   1b2ac:	f009 fbeb 	bl	24a86 <pin_is_input>
   1b2b0:	b180      	cbz	r0, 1b2d4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   1b2b2:	4620      	mov	r0, r4
   1b2b4:	f7ff fc26 	bl	1ab04 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1b2b8:	2201      	movs	r2, #1
   1b2ba:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   1b2bc:	4b0b      	ldr	r3, [pc, #44]	; (1b2ec <nrfx_gpiote_trigger_disable+0x4c>)
   1b2be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1b2c2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1b2c6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   1b2ca:	f022 0203 	bic.w	r2, r2, #3
   1b2ce:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   1b2d2:	e009      	b.n	1b2e8 <nrfx_gpiote_trigger_disable+0x48>
    *p_pin = pin_number & 0x1F;
   1b2d4:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1b2d8:	4a05      	ldr	r2, [pc, #20]	; (1b2f0 <nrfx_gpiote_trigger_disable+0x50>)
   1b2da:	3480      	adds	r4, #128	; 0x80
   1b2dc:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   1b2e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1b2e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   1b2e8:	bd10      	pop	{r4, pc}
   1b2ea:	bf00      	nop
   1b2ec:	40031000 	.word	0x40031000
   1b2f0:	40842500 	.word	0x40842500

0001b2f4 <nrfx_gpiote_pin_uninit>:
{
   1b2f4:	b510      	push	{r4, lr}
   1b2f6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1b2f8:	f7ff fbda 	bl	1aab0 <pin_in_use>
   1b2fc:	b908      	cbnz	r0, 1b302 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   1b2fe:	4808      	ldr	r0, [pc, #32]	; (1b320 <nrfx_gpiote_pin_uninit+0x2c>)
}
   1b300:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   1b302:	4620      	mov	r0, r4
   1b304:	f7ff ffcc 	bl	1b2a0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1b308:	4620      	mov	r0, r4
   1b30a:	f7ff fce1 	bl	1acd0 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   1b30e:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   1b312:	3480      	adds	r4, #128	; 0x80
   1b314:	4b03      	ldr	r3, [pc, #12]	; (1b324 <nrfx_gpiote_pin_uninit+0x30>)
   1b316:	2202      	movs	r2, #2
   1b318:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
   1b31c:	4802      	ldr	r0, [pc, #8]	; (1b328 <nrfx_gpiote_pin_uninit+0x34>)
   1b31e:	e7ef      	b.n	1b300 <nrfx_gpiote_pin_uninit+0xc>
   1b320:	0bad0004 	.word	0x0bad0004
   1b324:	40842500 	.word	0x40842500
   1b328:	0bad0000 	.word	0x0bad0000

0001b32c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   1b32c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1b32e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   1b330:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b334:	2100      	movs	r1, #0
    uint32_t status = 0;
   1b336:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b338:	e003      	b.n	1b342 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   1b33a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   1b33c:	3304      	adds	r3, #4
   1b33e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b340:	3101      	adds	r1, #1
   1b342:	2907      	cmp	r1, #7
   1b344:	d814      	bhi.n	1b370 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b346:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1b34a:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   1b34e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1b350:	2a00      	cmp	r2, #0
   1b352:	d0f2      	beq.n	1b33a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   1b354:	4a0b      	ldr	r2, [pc, #44]	; (1b384 <nrfx_gpiote_irq_handler+0x58>)
   1b356:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1b35a:	4210      	tst	r0, r2
   1b35c:	d0ed      	beq.n	1b33a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   1b35e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1b362:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b366:	2400      	movs	r4, #0
   1b368:	6014      	str	r4, [r2, #0]
   1b36a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   1b36c:	4305      	orrs	r5, r0
   1b36e:	e7e4      	b.n	1b33a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b370:	4b05      	ldr	r3, [pc, #20]	; (1b388 <nrfx_gpiote_irq_handler+0x5c>)
   1b372:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1b374:	b91b      	cbnz	r3, 1b37e <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   1b376:	4628      	mov	r0, r5
   1b378:	f7ff fd4e 	bl	1ae18 <gpiote_evt_handle>
}
   1b37c:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   1b37e:	f7ff fcfb 	bl	1ad78 <port_event_handle>
   1b382:	e7f8      	b.n	1b376 <nrfx_gpiote_irq_handler+0x4a>
   1b384:	40031000 	.word	0x40031000
   1b388:	4003117c 	.word	0x4003117c

0001b38c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1b38c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1b38e:	4b08      	ldr	r3, [pc, #32]	; (1b3b0 <nrfx_ipc_init+0x24>)
   1b390:	791b      	ldrb	r3, [r3, #4]
   1b392:	b10b      	cbz	r3, 1b398 <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1b394:	4807      	ldr	r0, [pc, #28]	; (1b3b4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   1b396:	bd38      	pop	{r3, r4, r5, pc}
   1b398:	460d      	mov	r5, r1
   1b39a:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1b39c:	202a      	movs	r0, #42	; 0x2a
   1b39e:	f7f8 fd5d 	bl	13e5c <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1b3a2:	4b03      	ldr	r3, [pc, #12]	; (1b3b0 <nrfx_ipc_init+0x24>)
   1b3a4:	2201      	movs	r2, #1
   1b3a6:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   1b3a8:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   1b3aa:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   1b3ac:	4802      	ldr	r0, [pc, #8]	; (1b3b8 <nrfx_ipc_init+0x2c>)
   1b3ae:	e7f2      	b.n	1b396 <nrfx_ipc_init+0xa>
   1b3b0:	2000f648 	.word	0x2000f648
   1b3b4:	0bad000c 	.word	0x0bad000c
   1b3b8:	0bad0000 	.word	0x0bad0000

0001b3bc <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1b3bc:	b410      	push	{r4}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1b3be:	2300      	movs	r3, #0
   1b3c0:	e008      	b.n	1b3d4 <nrfx_ipc_config_load+0x18>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1b3c2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   1b3c6:	b2da      	uxtb	r2, r3
   1b3c8:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1b3cc:	490d      	ldr	r1, [pc, #52]	; (1b404 <nrfx_ipc_config_load+0x48>)
   1b3ce:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1b3d2:	3301      	adds	r3, #1
   1b3d4:	2b07      	cmp	r3, #7
   1b3d6:	d9f4      	bls.n	1b3c2 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1b3d8:	2300      	movs	r3, #0
   1b3da:	e00a      	b.n	1b3f2 <nrfx_ipc_config_load+0x36>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1b3dc:	f103 0208 	add.w	r2, r3, #8
   1b3e0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1b3e4:	b2da      	uxtb	r2, r3
   1b3e6:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   1b3ea:	4906      	ldr	r1, [pc, #24]	; (1b404 <nrfx_ipc_config_load+0x48>)
   1b3ec:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1b3f0:	3301      	adds	r3, #1
   1b3f2:	2b07      	cmp	r3, #7
   1b3f4:	d9f2      	bls.n	1b3dc <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1b3f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   1b3f8:	4b02      	ldr	r3, [pc, #8]	; (1b404 <nrfx_ipc_config_load+0x48>)
   1b3fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b402:	4770      	bx	lr
   1b404:	4002a000 	.word	0x4002a000

0001b408 <nrfx_ipc_uninit>:
void nrfx_ipc_uninit(void)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1b408:	2300      	movs	r3, #0
   1b40a:	e007      	b.n	1b41c <nrfx_ipc_uninit+0x14>
    p_reg->SEND_CNF[index] = channels_mask;
   1b40c:	b2da      	uxtb	r2, r3
   1b40e:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   1b412:	490e      	ldr	r1, [pc, #56]	; (1b44c <nrfx_ipc_uninit+0x44>)
   1b414:	2000      	movs	r0, #0
   1b416:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1b41a:	3301      	adds	r3, #1
   1b41c:	2b07      	cmp	r3, #7
   1b41e:	d9f5      	bls.n	1b40c <nrfx_ipc_uninit+0x4>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, 0);
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1b420:	2300      	movs	r3, #0
   1b422:	e007      	b.n	1b434 <nrfx_ipc_uninit+0x2c>
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1b424:	b2da      	uxtb	r2, r3
   1b426:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   1b42a:	4908      	ldr	r1, [pc, #32]	; (1b44c <nrfx_ipc_uninit+0x44>)
   1b42c:	2000      	movs	r0, #0
   1b42e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1b432:	3301      	adds	r3, #1
   1b434:	2b07      	cmp	r3, #7
   1b436:	d9f5      	bls.n	1b424 <nrfx_ipc_uninit+0x1c>
    p_reg->INTENCLR = mask;
   1b438:	4b04      	ldr	r3, [pc, #16]	; (1b44c <nrfx_ipc_uninit+0x44>)
   1b43a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b43e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   1b442:	4b03      	ldr	r3, [pc, #12]	; (1b450 <nrfx_ipc_uninit+0x48>)
   1b444:	2200      	movs	r2, #0
   1b446:	711a      	strb	r2, [r3, #4]
}
   1b448:	4770      	bx	lr
   1b44a:	bf00      	nop
   1b44c:	4002a000 	.word	0x4002a000
   1b450:	2000f648 	.word	0x2000f648

0001b454 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1b454:	2301      	movs	r3, #1
   1b456:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1b458:	4a01      	ldr	r2, [pc, #4]	; (1b460 <nrfx_ipc_receive_event_enable+0xc>)
   1b45a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1b45e:	4770      	bx	lr
   1b460:	4002a000 	.word	0x4002a000

0001b464 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1b464:	2301      	movs	r3, #1
   1b466:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1b468:	4a01      	ldr	r2, [pc, #4]	; (1b470 <nrfx_ipc_receive_event_disable+0xc>)
   1b46a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1b46e:	4770      	bx	lr
   1b470:	4002a000 	.word	0x4002a000

0001b474 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1b474:	b508      	push	{r3, lr}
    return p_reg->INTPEND;
   1b476:	4b0c      	ldr	r3, [pc, #48]	; (1b4a8 <nrfx_ipc_irq_handler+0x34>)
   1b478:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   1b47c:	4602      	mov	r2, r0
    while (bitmask)
   1b47e:	b16a      	cbz	r2, 1b49c <nrfx_ipc_irq_handler+0x28>
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1b480:	fa92 f3a2 	rbit	r3, r2
   1b484:	fab3 f383 	clz	r3, r3
   1b488:	2101      	movs	r1, #1
   1b48a:	4099      	lsls	r1, r3
   1b48c:	ea22 0201 	bic.w	r2, r2, r1
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1b490:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b492:	4906      	ldr	r1, [pc, #24]	; (1b4ac <nrfx_ipc_irq_handler+0x38>)
   1b494:	4419      	add	r1, r3
   1b496:	2300      	movs	r3, #0
   1b498:	600b      	str	r3, [r1, #0]
}
   1b49a:	e7f0      	b.n	1b47e <nrfx_ipc_irq_handler+0xa>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   1b49c:	4b04      	ldr	r3, [pc, #16]	; (1b4b0 <nrfx_ipc_irq_handler+0x3c>)
   1b49e:	681a      	ldr	r2, [r3, #0]
   1b4a0:	6899      	ldr	r1, [r3, #8]
   1b4a2:	4790      	blx	r2
}
   1b4a4:	bd08      	pop	{r3, pc}
   1b4a6:	bf00      	nop
   1b4a8:	4002a000 	.word	0x4002a000
   1b4ac:	4002a100 	.word	0x4002a100
   1b4b0:	2000f648 	.word	0x2000f648

0001b4b4 <rpc_handle_data_message>:
   1b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4b8:	4680      	mov	r8, r0
   1b4ba:	4604      	mov	r4, r0
   1b4bc:	2700      	movs	r7, #0
   1b4be:	f858 6b08 	ldr.w	r6, [r8], #8
   1b4c2:	4d0c      	ldr	r5, [pc, #48]	; (1b4f4 <rpc_handle_data_message+0x40>)
   1b4c4:	b2f6      	uxtb	r6, r6
   1b4c6:	782b      	ldrb	r3, [r5, #0]
   1b4c8:	42b3      	cmp	r3, r6
   1b4ca:	d00a      	beq.n	1b4e2 <rpc_handle_data_message+0x2e>
   1b4cc:	3701      	adds	r7, #1
   1b4ce:	2f04      	cmp	r7, #4
   1b4d0:	f105 050c 	add.w	r5, r5, #12
   1b4d4:	d1f7      	bne.n	1b4c6 <rpc_handle_data_message+0x12>
   1b4d6:	68a0      	ldr	r0, [r4, #8]
   1b4d8:	b150      	cbz	r0, 1b4f0 <rpc_handle_data_message+0x3c>
   1b4da:	f009 fb26 	bl	24b2a <rpc_transport_peer_data_free>
   1b4de:	2000      	movs	r0, #0
   1b4e0:	e006      	b.n	1b4f0 <rpc_handle_data_message+0x3c>
   1b4e2:	6821      	ldr	r1, [r4, #0]
   1b4e4:	4640      	mov	r0, r8
   1b4e6:	686b      	ldr	r3, [r5, #4]
   1b4e8:	0c09      	lsrs	r1, r1, #16
   1b4ea:	4798      	blx	r3
   1b4ec:	2802      	cmp	r0, #2
   1b4ee:	d0ed      	beq.n	1b4cc <rpc_handle_data_message+0x18>
   1b4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4f4:	0002a030 	.word	0x0002a030

0001b4f8 <trace_write>:
   1b4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4fc:	4f53      	ldr	r7, [pc, #332]	; (1b64c <trace_write+0x154>)
   1b4fe:	4605      	mov	r5, r0
   1b500:	2100      	movs	r1, #0
   1b502:	6838      	ldr	r0, [r7, #0]
   1b504:	f008 faa1 	bl	23a4a <nrf_modem_os_sem_take>
   1b508:	4604      	mov	r4, r0
   1b50a:	2800      	cmp	r0, #0
   1b50c:	d14c      	bne.n	1b5a8 <trace_write+0xb0>
   1b50e:	782b      	ldrb	r3, [r5, #0]
   1b510:	f8d5 8008 	ldr.w	r8, [r5, #8]
   1b514:	2b62      	cmp	r3, #98	; 0x62
   1b516:	d043      	beq.n	1b5a0 <trace_write+0xa8>
   1b518:	2b63      	cmp	r3, #99	; 0x63
   1b51a:	d043      	beq.n	1b5a4 <trace_write+0xac>
   1b51c:	2b61      	cmp	r3, #97	; 0x61
   1b51e:	d102      	bne.n	1b526 <trace_write+0x2e>
   1b520:	4b4b      	ldr	r3, [pc, #300]	; (1b650 <trace_write+0x158>)
   1b522:	881c      	ldrh	r4, [r3, #0]
   1b524:	b2a4      	uxth	r4, r4
   1b526:	6838      	ldr	r0, [r7, #0]
   1b528:	f008 fa8b 	bl	23a42 <nrf_modem_os_sem_give>
   1b52c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   1b530:	6929      	ldr	r1, [r5, #16]
   1b532:	eba8 080a 	sub.w	r8, r8, sl
   1b536:	eba1 030a 	sub.w	r3, r1, sl
   1b53a:	b29b      	uxth	r3, r3
   1b53c:	fa14 f488 	uxtah	r4, r4, r8
   1b540:	fbb4 f2f3 	udiv	r2, r4, r3
   1b544:	fb03 4412 	mls	r4, r3, r2, r4
   1b548:	686a      	ldr	r2, [r5, #4]
   1b54a:	eba2 020a 	sub.w	r2, r2, sl
   1b54e:	fa13 f282 	uxtah	r2, r3, r2
   1b552:	1b12      	subs	r2, r2, r4
   1b554:	fb92 f0f3 	sdiv	r0, r2, r3
   1b558:	fb03 2210 	mls	r2, r3, r0, r2
   1b55c:	fa1f f982 	uxth.w	r9, r2
   1b560:	fa14 f282 	uxtah	r2, r4, r2
   1b564:	4293      	cmp	r3, r2
   1b566:	44a2      	add	sl, r4
   1b568:	da22      	bge.n	1b5b0 <trace_write+0xb8>
   1b56a:	eba1 030a 	sub.w	r3, r1, sl
   1b56e:	b29b      	uxth	r3, r3
   1b570:	eba9 0403 	sub.w	r4, r9, r3
   1b574:	4699      	mov	r9, r3
   1b576:	b2a4      	uxth	r4, r4
   1b578:	f1b9 0f00 	cmp.w	r9, #0
   1b57c:	d064      	beq.n	1b648 <trace_write+0x150>
   1b57e:	2005      	movs	r0, #5
   1b580:	f7fb f890 	bl	166a4 <nrf_modem_os_alloc>
   1b584:	4680      	mov	r8, r0
   1b586:	2800      	cmp	r0, #0
   1b588:	d05e      	beq.n	1b648 <trace_write+0x150>
   1b58a:	b19c      	cbz	r4, 1b5b4 <trace_write+0xbc>
   1b58c:	2005      	movs	r0, #5
   1b58e:	f7fb f889 	bl	166a4 <nrf_modem_os_alloc>
   1b592:	4606      	mov	r6, r0
   1b594:	b970      	cbnz	r0, 1b5b4 <trace_write+0xbc>
   1b596:	4640      	mov	r0, r8
   1b598:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b59c:	f7fb b88c 	b.w	166b8 <nrf_modem_os_free>
   1b5a0:	4b2c      	ldr	r3, [pc, #176]	; (1b654 <trace_write+0x15c>)
   1b5a2:	e7be      	b.n	1b522 <trace_write+0x2a>
   1b5a4:	4b2c      	ldr	r3, [pc, #176]	; (1b658 <trace_write+0x160>)
   1b5a6:	e7bc      	b.n	1b522 <trace_write+0x2a>
   1b5a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5ac:	f7fb b86a 	b.w	16684 <nrf_modem_os_trace_irq_set>
   1b5b0:	2400      	movs	r4, #0
   1b5b2:	e7e1      	b.n	1b578 <trace_write+0x80>
   1b5b4:	2100      	movs	r1, #0
   1b5b6:	6838      	ldr	r0, [r7, #0]
   1b5b8:	f008 fa47 	bl	23a4a <nrf_modem_os_sem_take>
   1b5bc:	b140      	cbz	r0, 1b5d0 <trace_write+0xd8>
   1b5be:	f7fb f861 	bl	16684 <nrf_modem_os_trace_irq_set>
   1b5c2:	4640      	mov	r0, r8
   1b5c4:	f7fb f878 	bl	166b8 <nrf_modem_os_free>
   1b5c8:	2c00      	cmp	r4, #0
   1b5ca:	d03d      	beq.n	1b648 <trace_write+0x150>
   1b5cc:	4630      	mov	r0, r6
   1b5ce:	e7e3      	b.n	1b598 <trace_write+0xa0>
   1b5d0:	782b      	ldrb	r3, [r5, #0]
   1b5d2:	2b62      	cmp	r3, #98	; 0x62
   1b5d4:	d034      	beq.n	1b640 <trace_write+0x148>
   1b5d6:	2b63      	cmp	r3, #99	; 0x63
   1b5d8:	d034      	beq.n	1b644 <trace_write+0x14c>
   1b5da:	2b61      	cmp	r3, #97	; 0x61
   1b5dc:	d107      	bne.n	1b5ee <trace_write+0xf6>
   1b5de:	4a1c      	ldr	r2, [pc, #112]	; (1b650 <trace_write+0x158>)
   1b5e0:	8813      	ldrh	r3, [r2, #0]
   1b5e2:	eb04 0109 	add.w	r1, r4, r9
   1b5e6:	fa11 f383 	uxtah	r3, r1, r3
   1b5ea:	b29b      	uxth	r3, r3
   1b5ec:	8013      	strh	r3, [r2, #0]
   1b5ee:	6838      	ldr	r0, [r7, #0]
   1b5f0:	f06f 0b10 	mvn.w	fp, #16
   1b5f4:	f06f 0741 	mvn.w	r7, #65	; 0x41
   1b5f8:	f008 fa23 	bl	23a42 <nrf_modem_os_sem_give>
   1b5fc:	f888 b000 	strb.w	fp, [r8]
   1b600:	f888 7001 	strb.w	r7, [r8, #1]
   1b604:	782b      	ldrb	r3, [r5, #0]
   1b606:	2105      	movs	r1, #5
   1b608:	4640      	mov	r0, r8
   1b60a:	f888 3004 	strb.w	r3, [r8, #4]
   1b60e:	f8a8 9002 	strh.w	r9, [r8, #2]
   1b612:	f008 fa4c 	bl	23aae <nrf_modem_os_trace_put>
   1b616:	4649      	mov	r1, r9
   1b618:	4650      	mov	r0, sl
   1b61a:	f008 fa48 	bl	23aae <nrf_modem_os_trace_put>
   1b61e:	b19c      	cbz	r4, 1b648 <trace_write+0x150>
   1b620:	f886 b000 	strb.w	fp, [r6]
   1b624:	7077      	strb	r7, [r6, #1]
   1b626:	782b      	ldrb	r3, [r5, #0]
   1b628:	2105      	movs	r1, #5
   1b62a:	4630      	mov	r0, r6
   1b62c:	7133      	strb	r3, [r6, #4]
   1b62e:	8074      	strh	r4, [r6, #2]
   1b630:	f008 fa3d 	bl	23aae <nrf_modem_os_trace_put>
   1b634:	4621      	mov	r1, r4
   1b636:	68e8      	ldr	r0, [r5, #12]
   1b638:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b63c:	f008 ba37 	b.w	23aae <nrf_modem_os_trace_put>
   1b640:	4a04      	ldr	r2, [pc, #16]	; (1b654 <trace_write+0x15c>)
   1b642:	e7cd      	b.n	1b5e0 <trace_write+0xe8>
   1b644:	4a04      	ldr	r2, [pc, #16]	; (1b658 <trace_write+0x160>)
   1b646:	e7cb      	b.n	1b5e0 <trace_write+0xe8>
   1b648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b64c:	2000f664 	.word	0x2000f664
   1b650:	2000f8f4 	.word	0x2000f8f4
   1b654:	2000f8f0 	.word	0x2000f8f0
   1b658:	2000f8f2 	.word	0x2000f8f2

0001b65c <ipc_trace_init>:
   1b65c:	2300      	movs	r3, #0
   1b65e:	4a08      	ldr	r2, [pc, #32]	; (1b680 <ipc_trace_init+0x24>)
   1b660:	b510      	push	{r4, lr}
   1b662:	8013      	strh	r3, [r2, #0]
   1b664:	4a07      	ldr	r2, [pc, #28]	; (1b684 <ipc_trace_init+0x28>)
   1b666:	4604      	mov	r4, r0
   1b668:	8013      	strh	r3, [r2, #0]
   1b66a:	4a07      	ldr	r2, [pc, #28]	; (1b688 <ipc_trace_init+0x2c>)
   1b66c:	4807      	ldr	r0, [pc, #28]	; (1b68c <ipc_trace_init+0x30>)
   1b66e:	8013      	strh	r3, [r2, #0]
   1b670:	2201      	movs	r2, #1
   1b672:	4611      	mov	r1, r2
   1b674:	f7fa ffda 	bl	1662c <nrf_modem_os_sem_init>
   1b678:	4b05      	ldr	r3, [pc, #20]	; (1b690 <ipc_trace_init+0x34>)
   1b67a:	601c      	str	r4, [r3, #0]
   1b67c:	bd10      	pop	{r4, pc}
   1b67e:	bf00      	nop
   1b680:	2000f8f4 	.word	0x2000f8f4
   1b684:	2000f8f0 	.word	0x2000f8f0
   1b688:	2000f8f2 	.word	0x2000f8f2
   1b68c:	2000f664 	.word	0x2000f664
   1b690:	2000f660 	.word	0x2000f660

0001b694 <nrf_modem_trace_irq_handler>:
   1b694:	b508      	push	{r3, lr}
   1b696:	4b10      	ldr	r3, [pc, #64]	; (1b6d8 <nrf_modem_trace_irq_handler+0x44>)
   1b698:	781b      	ldrb	r3, [r3, #0]
   1b69a:	b90b      	cbnz	r3, 1b6a0 <nrf_modem_trace_irq_handler+0xc>
   1b69c:	f7fa fffa 	bl	16694 <nrf_modem_os_trace_irq_clear>
   1b6a0:	4b0e      	ldr	r3, [pc, #56]	; (1b6dc <nrf_modem_trace_irq_handler+0x48>)
   1b6a2:	6818      	ldr	r0, [r3, #0]
   1b6a4:	6842      	ldr	r2, [r0, #4]
   1b6a6:	6883      	ldr	r3, [r0, #8]
   1b6a8:	429a      	cmp	r2, r3
   1b6aa:	d001      	beq.n	1b6b0 <nrf_modem_trace_irq_handler+0x1c>
   1b6ac:	f7ff ff24 	bl	1b4f8 <trace_write>
   1b6b0:	4b0b      	ldr	r3, [pc, #44]	; (1b6e0 <nrf_modem_trace_irq_handler+0x4c>)
   1b6b2:	6818      	ldr	r0, [r3, #0]
   1b6b4:	6882      	ldr	r2, [r0, #8]
   1b6b6:	6843      	ldr	r3, [r0, #4]
   1b6b8:	429a      	cmp	r2, r3
   1b6ba:	d001      	beq.n	1b6c0 <nrf_modem_trace_irq_handler+0x2c>
   1b6bc:	f7ff ff1c 	bl	1b4f8 <trace_write>
   1b6c0:	4b08      	ldr	r3, [pc, #32]	; (1b6e4 <nrf_modem_trace_irq_handler+0x50>)
   1b6c2:	6818      	ldr	r0, [r3, #0]
   1b6c4:	6882      	ldr	r2, [r0, #8]
   1b6c6:	6843      	ldr	r3, [r0, #4]
   1b6c8:	429a      	cmp	r2, r3
   1b6ca:	d003      	beq.n	1b6d4 <nrf_modem_trace_irq_handler+0x40>
   1b6cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b6d0:	f7ff bf12 	b.w	1b4f8 <trace_write>
   1b6d4:	bd08      	pop	{r3, pc}
   1b6d6:	bf00      	nop
   1b6d8:	2000f90f 	.word	0x2000f90f
   1b6dc:	2000f65c 	.word	0x2000f65c
   1b6e0:	2000f654 	.word	0x2000f654
   1b6e4:	2000f658 	.word	0x2000f658

0001b6e8 <ipc_trace_handle>:
   1b6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6ec:	4b43      	ldr	r3, [pc, #268]	; (1b7fc <ipc_trace_handle+0x114>)
   1b6ee:	681b      	ldr	r3, [r3, #0]
   1b6f0:	6919      	ldr	r1, [r3, #16]
   1b6f2:	f8d3 a014 	ldr.w	sl, [r3, #20]
   1b6f6:	7c1a      	ldrb	r2, [r3, #16]
   1b6f8:	2200      	movs	r2, #0
   1b6fa:	741a      	strb	r2, [r3, #16]
   1b6fc:	7c58      	ldrb	r0, [r3, #17]
   1b6fe:	745a      	strb	r2, [r3, #17]
   1b700:	7c98      	ldrb	r0, [r3, #18]
   1b702:	749a      	strb	r2, [r3, #18]
   1b704:	7cd8      	ldrb	r0, [r3, #19]
   1b706:	74da      	strb	r2, [r3, #19]
   1b708:	7d18      	ldrb	r0, [r3, #20]
   1b70a:	751a      	strb	r2, [r3, #20]
   1b70c:	7d58      	ldrb	r0, [r3, #21]
   1b70e:	755a      	strb	r2, [r3, #21]
   1b710:	7d98      	ldrb	r0, [r3, #22]
   1b712:	759a      	strb	r2, [r3, #22]
   1b714:	7dd8      	ldrb	r0, [r3, #23]
   1b716:	75da      	strb	r2, [r3, #23]
   1b718:	2900      	cmp	r1, #0
   1b71a:	d033      	beq.n	1b784 <ipc_trace_handle+0x9c>
   1b71c:	3901      	subs	r1, #1
   1b71e:	2903      	cmp	r1, #3
   1b720:	d830      	bhi.n	1b784 <ipc_trace_handle+0x9c>
   1b722:	e8df f001 	tbb	[pc, r1]
   1b726:	6502      	.short	0x6502
   1b728:	534c      	.short	0x534c
   1b72a:	4a35      	ldr	r2, [pc, #212]	; (1b800 <ipc_trace_handle+0x118>)
   1b72c:	7811      	ldrb	r1, [r2, #0]
   1b72e:	b109      	cbz	r1, 1b734 <ipc_trace_handle+0x4c>
   1b730:	2100      	movs	r1, #0
   1b732:	7011      	strb	r1, [r2, #0]
   1b734:	2200      	movs	r2, #0
   1b736:	4691      	mov	r9, r2
   1b738:	4617      	mov	r7, r2
   1b73a:	4614      	mov	r4, r2
   1b73c:	4d31      	ldr	r5, [pc, #196]	; (1b804 <ipc_trace_handle+0x11c>)
   1b73e:	4932      	ldr	r1, [pc, #200]	; (1b808 <ipc_trace_handle+0x120>)
   1b740:	4832      	ldr	r0, [pc, #200]	; (1b80c <ipc_trace_handle+0x124>)
   1b742:	f8d5 e000 	ldr.w	lr, [r5]
   1b746:	f8d1 8000 	ldr.w	r8, [r1]
   1b74a:	6806      	ldr	r6, [r0, #0]
   1b74c:	f8da b008 	ldr.w	fp, [sl, #8]
   1b750:	9501      	str	r5, [sp, #4]
   1b752:	45a3      	cmp	fp, r4
   1b754:	d119      	bne.n	1b78a <ipc_trace_handle+0xa2>
   1b756:	b107      	cbz	r7, 1b75a <ipc_trace_handle+0x72>
   1b758:	6006      	str	r6, [r0, #0]
   1b75a:	f1b9 0f00 	cmp.w	r9, #0
   1b75e:	d001      	beq.n	1b764 <ipc_trace_handle+0x7c>
   1b760:	f8c1 8000 	str.w	r8, [r1]
   1b764:	b112      	cbz	r2, 1b76c <ipc_trace_handle+0x84>
   1b766:	9a01      	ldr	r2, [sp, #4]
   1b768:	f8c2 e000 	str.w	lr, [r2]
   1b76c:	7a1a      	ldrb	r2, [r3, #8]
   1b76e:	2101      	movs	r1, #1
   1b770:	2200      	movs	r2, #0
   1b772:	7219      	strb	r1, [r3, #8]
   1b774:	7a59      	ldrb	r1, [r3, #9]
   1b776:	725a      	strb	r2, [r3, #9]
   1b778:	7a99      	ldrb	r1, [r3, #10]
   1b77a:	729a      	strb	r2, [r3, #10]
   1b77c:	7ada      	ldrb	r2, [r3, #11]
   1b77e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1b782:	72da      	strb	r2, [r3, #11]
   1b784:	b003      	add	sp, #12
   1b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b78a:	1ca5      	adds	r5, r4, #2
   1b78c:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   1b790:	686d      	ldr	r5, [r5, #4]
   1b792:	f895 c000 	ldrb.w	ip, [r5]
   1b796:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   1b79a:	d009      	beq.n	1b7b0 <ipc_trace_handle+0xc8>
   1b79c:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   1b7a0:	d00a      	beq.n	1b7b8 <ipc_trace_handle+0xd0>
   1b7a2:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   1b7a6:	bf04      	itt	eq
   1b7a8:	462e      	moveq	r6, r5
   1b7aa:	2701      	moveq	r7, #1
   1b7ac:	3401      	adds	r4, #1
   1b7ae:	e7d0      	b.n	1b752 <ipc_trace_handle+0x6a>
   1b7b0:	46a8      	mov	r8, r5
   1b7b2:	f04f 0901 	mov.w	r9, #1
   1b7b6:	e7f9      	b.n	1b7ac <ipc_trace_handle+0xc4>
   1b7b8:	46ae      	mov	lr, r5
   1b7ba:	2201      	movs	r2, #1
   1b7bc:	e7f6      	b.n	1b7ac <ipc_trace_handle+0xc4>
   1b7be:	2101      	movs	r1, #1
   1b7c0:	4a0f      	ldr	r2, [pc, #60]	; (1b800 <ipc_trace_handle+0x118>)
   1b7c2:	7011      	strb	r1, [r2, #0]
   1b7c4:	7a1a      	ldrb	r2, [r3, #8]
   1b7c6:	2103      	movs	r1, #3
   1b7c8:	2200      	movs	r2, #0
   1b7ca:	e7d2      	b.n	1b772 <ipc_trace_handle+0x8a>
   1b7cc:	7a19      	ldrb	r1, [r3, #8]
   1b7ce:	2104      	movs	r1, #4
   1b7d0:	7219      	strb	r1, [r3, #8]
   1b7d2:	7a59      	ldrb	r1, [r3, #9]
   1b7d4:	725a      	strb	r2, [r3, #9]
   1b7d6:	7a99      	ldrb	r1, [r3, #10]
   1b7d8:	729a      	strb	r2, [r3, #10]
   1b7da:	7ad9      	ldrb	r1, [r3, #11]
   1b7dc:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1b7e0:	72d9      	strb	r1, [r3, #11]
   1b7e2:	4b07      	ldr	r3, [pc, #28]	; (1b800 <ipc_trace_handle+0x118>)
   1b7e4:	701a      	strb	r2, [r3, #0]
   1b7e6:	b003      	add	sp, #12
   1b7e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7ec:	f7ff bf52 	b.w	1b694 <nrf_modem_trace_irq_handler>
   1b7f0:	b003      	add	sp, #12
   1b7f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7f6:	f7fa bf45 	b.w	16684 <nrf_modem_os_trace_irq_set>
   1b7fa:	bf00      	nop
   1b7fc:	2000f660 	.word	0x2000f660
   1b800:	2000f90f 	.word	0x2000f90f
   1b804:	2000f658 	.word	0x2000f658
   1b808:	2000f654 	.word	0x2000f654
   1b80c:	2000f65c 	.word	0x2000f65c

0001b810 <rpc_trace_coredump_in_progress>:
   1b810:	4b01      	ldr	r3, [pc, #4]	; (1b818 <rpc_trace_coredump_in_progress+0x8>)
   1b812:	7818      	ldrb	r0, [r3, #0]
   1b814:	4770      	bx	lr
   1b816:	bf00      	nop
   1b818:	2000f90f 	.word	0x2000f90f

0001b81c <handle_modem_rpc_msg>:
   1b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b820:	4606      	mov	r6, r0
   1b822:	460f      	mov	r7, r1
   1b824:	2500      	movs	r5, #0
   1b826:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1b89c <handle_modem_rpc_msg+0x80>
   1b82a:	6833      	ldr	r3, [r6, #0]
   1b82c:	42ab      	cmp	r3, r5
   1b82e:	d801      	bhi.n	1b834 <handle_modem_rpc_msg+0x18>
   1b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b834:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   1b838:	68a3      	ldr	r3, [r4, #8]
   1b83a:	b1fb      	cbz	r3, 1b87c <handle_modem_rpc_msg+0x60>
   1b83c:	6863      	ldr	r3, [r4, #4]
   1b83e:	b2db      	uxtb	r3, r3
   1b840:	2b01      	cmp	r3, #1
   1b842:	d11b      	bne.n	1b87c <handle_modem_rpc_msg+0x60>
   1b844:	6862      	ldr	r2, [r4, #4]
   1b846:	f8b8 3000 	ldrh.w	r3, [r8]
   1b84a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1b84e:	d115      	bne.n	1b87c <handle_modem_rpc_msg+0x60>
   1b850:	2f02      	cmp	r7, #2
   1b852:	68a0      	ldr	r0, [r4, #8]
   1b854:	d114      	bne.n	1b880 <handle_modem_rpc_msg+0x64>
   1b856:	f7ff fe2d 	bl	1b4b4 <rpc_handle_data_message>
   1b85a:	2802      	cmp	r0, #2
   1b85c:	d00e      	beq.n	1b87c <handle_modem_rpc_msg+0x60>
   1b85e:	2801      	cmp	r0, #1
   1b860:	d113      	bne.n	1b88a <handle_modem_rpc_msg+0x6e>
   1b862:	6863      	ldr	r3, [r4, #4]
   1b864:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1b868:	f043 0302 	orr.w	r3, r3, #2
   1b86c:	6063      	str	r3, [r4, #4]
   1b86e:	f8b8 3000 	ldrh.w	r3, [r8]
   1b872:	3301      	adds	r3, #1
   1b874:	f8a8 3000 	strh.w	r3, [r8]
   1b878:	f7fa fef4 	bl	16664 <nrf_modem_os_application_irq_set>
   1b87c:	3501      	adds	r5, #1
   1b87e:	e7d4      	b.n	1b82a <handle_modem_rpc_msg+0xe>
   1b880:	6801      	ldr	r1, [r0, #0]
   1b882:	0c09      	lsrs	r1, r1, #16
   1b884:	f009 f90d 	bl	24aa2 <rpc_handle_ctrl_message>
   1b888:	e7e7      	b.n	1b85a <handle_modem_rpc_msg+0x3e>
   1b88a:	2800      	cmp	r0, #0
   1b88c:	d1ef      	bne.n	1b86e <handle_modem_rpc_msg+0x52>
   1b88e:	6863      	ldr	r3, [r4, #4]
   1b890:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1b894:	f043 0303 	orr.w	r3, r3, #3
   1b898:	e7e8      	b.n	1b86c <handle_modem_rpc_msg+0x50>
   1b89a:	bf00      	nop
   1b89c:	2000f8f6 	.word	0x2000f8f6

0001b8a0 <rpc_transport_ipc_msg_alloc>:
   1b8a0:	b570      	push	{r4, r5, r6, lr}
   1b8a2:	4616      	mov	r6, r2
   1b8a4:	2400      	movs	r4, #0
   1b8a6:	6803      	ldr	r3, [r0, #0]
   1b8a8:	42a3      	cmp	r3, r4
   1b8aa:	d101      	bne.n	1b8b0 <rpc_transport_ipc_msg_alloc+0x10>
   1b8ac:	2300      	movs	r3, #0
   1b8ae:	e01c      	b.n	1b8ea <rpc_transport_ipc_msg_alloc+0x4a>
   1b8b0:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   1b8b4:	6855      	ldr	r5, [r2, #4]
   1b8b6:	b2ed      	uxtb	r5, r5
   1b8b8:	2d03      	cmp	r5, #3
   1b8ba:	d118      	bne.n	1b8ee <rpc_transport_ipc_msg_alloc+0x4e>
   1b8bc:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   1b8c0:	6093      	str	r3, [r2, #8]
   1b8c2:	6851      	ldr	r1, [r2, #4]
   1b8c4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1b8c8:	6051      	str	r1, [r2, #4]
   1b8ca:	490c      	ldr	r1, [pc, #48]	; (1b8fc <rpc_transport_ipc_msg_alloc+0x5c>)
   1b8cc:	8808      	ldrh	r0, [r1, #0]
   1b8ce:	1c44      	adds	r4, r0, #1
   1b8d0:	800c      	strh	r4, [r1, #0]
   1b8d2:	6851      	ldr	r1, [r2, #4]
   1b8d4:	b289      	uxth	r1, r1
   1b8d6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1b8da:	6051      	str	r1, [r2, #4]
   1b8dc:	4618      	mov	r0, r3
   1b8de:	2240      	movs	r2, #64	; 0x40
   1b8e0:	2100      	movs	r1, #0
   1b8e2:	f00a ffce 	bl	26882 <memset>
   1b8e6:	4603      	mov	r3, r0
   1b8e8:	6046      	str	r6, [r0, #4]
   1b8ea:	4618      	mov	r0, r3
   1b8ec:	bd70      	pop	{r4, r5, r6, pc}
   1b8ee:	b915      	cbnz	r5, 1b8f6 <rpc_transport_ipc_msg_alloc+0x56>
   1b8f0:	6895      	ldr	r5, [r2, #8]
   1b8f2:	2d00      	cmp	r5, #0
   1b8f4:	d0e2      	beq.n	1b8bc <rpc_transport_ipc_msg_alloc+0x1c>
   1b8f6:	3401      	adds	r4, #1
   1b8f8:	e7d6      	b.n	1b8a8 <rpc_transport_ipc_msg_alloc+0x8>
   1b8fa:	bf00      	nop
   1b8fc:	2000f8f8 	.word	0x2000f8f8

0001b900 <rpc_transport_ipc_data_msg_send>:
   1b900:	b508      	push	{r3, lr}
   1b902:	4b0b      	ldr	r3, [pc, #44]	; (1b930 <rpc_transport_ipc_data_msg_send+0x30>)
   1b904:	681b      	ldr	r3, [r3, #0]
   1b906:	1ac0      	subs	r0, r0, r3
   1b908:	4b0a      	ldr	r3, [pc, #40]	; (1b934 <rpc_transport_ipc_data_msg_send+0x34>)
   1b90a:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1b90e:	681b      	ldr	r3, [r3, #0]
   1b910:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1b914:	6843      	ldr	r3, [r0, #4]
   1b916:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1b91a:	f043 0301 	orr.w	r3, r3, #1
   1b91e:	6043      	str	r3, [r0, #4]
   1b920:	2003      	movs	r0, #3
   1b922:	f007 ffe8 	bl	238f6 <nrf_modem_os_busywait>
   1b926:	2201      	movs	r2, #1
   1b928:	4b03      	ldr	r3, [pc, #12]	; (1b938 <rpc_transport_ipc_data_msg_send+0x38>)
   1b92a:	601a      	str	r2, [r3, #0]
   1b92c:	bd08      	pop	{r3, pc}
   1b92e:	bf00      	nop
   1b930:	2000f680 	.word	0x2000f680
   1b934:	2000f684 	.word	0x2000f684
   1b938:	4002a00c 	.word	0x4002a00c

0001b93c <rpc_transport_ipc_ctrl_msg_send>:
   1b93c:	b508      	push	{r3, lr}
   1b93e:	4b0b      	ldr	r3, [pc, #44]	; (1b96c <rpc_transport_ipc_ctrl_msg_send+0x30>)
   1b940:	681b      	ldr	r3, [r3, #0]
   1b942:	1ac0      	subs	r0, r0, r3
   1b944:	4b0a      	ldr	r3, [pc, #40]	; (1b970 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   1b946:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1b94a:	681b      	ldr	r3, [r3, #0]
   1b94c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1b950:	6843      	ldr	r3, [r0, #4]
   1b952:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1b956:	f043 0301 	orr.w	r3, r3, #1
   1b95a:	6043      	str	r3, [r0, #4]
   1b95c:	2003      	movs	r0, #3
   1b95e:	f007 ffca 	bl	238f6 <nrf_modem_os_busywait>
   1b962:	2201      	movs	r2, #1
   1b964:	4b03      	ldr	r3, [pc, #12]	; (1b974 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   1b966:	601a      	str	r2, [r3, #0]
   1b968:	bd08      	pop	{r3, pc}
   1b96a:	bf00      	nop
   1b96c:	2000f678 	.word	0x2000f678
   1b970:	2000f67c 	.word	0x2000f67c
   1b974:	4002a004 	.word	0x4002a004

0001b978 <rpc_transport_ipc_data_msg_alloc>:
   1b978:	4b05      	ldr	r3, [pc, #20]	; (1b990 <rpc_transport_ipc_data_msg_alloc+0x18>)
   1b97a:	781b      	ldrb	r3, [r3, #0]
   1b97c:	b933      	cbnz	r3, 1b98c <rpc_transport_ipc_data_msg_alloc+0x14>
   1b97e:	4b05      	ldr	r3, [pc, #20]	; (1b994 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   1b980:	2202      	movs	r2, #2
   1b982:	6819      	ldr	r1, [r3, #0]
   1b984:	4b04      	ldr	r3, [pc, #16]	; (1b998 <rpc_transport_ipc_data_msg_alloc+0x20>)
   1b986:	6818      	ldr	r0, [r3, #0]
   1b988:	f7ff bf8a 	b.w	1b8a0 <rpc_transport_ipc_msg_alloc>
   1b98c:	2000      	movs	r0, #0
   1b98e:	4770      	bx	lr
   1b990:	2000f911 	.word	0x2000f911
   1b994:	2000f680 	.word	0x2000f680
   1b998:	2000f684 	.word	0x2000f684

0001b99c <rpc_transport_ipc_ctrl_msg_alloc>:
   1b99c:	230a      	movs	r3, #10
   1b99e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b9a0:	4c0c      	ldr	r4, [pc, #48]	; (1b9d4 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   1b9a2:	4d0d      	ldr	r5, [pc, #52]	; (1b9d8 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   1b9a4:	9301      	str	r3, [sp, #4]
   1b9a6:	2201      	movs	r2, #1
   1b9a8:	6821      	ldr	r1, [r4, #0]
   1b9aa:	6828      	ldr	r0, [r5, #0]
   1b9ac:	f7ff ff78 	bl	1b8a0 <rpc_transport_ipc_msg_alloc>
   1b9b0:	b968      	cbnz	r0, 1b9ce <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   1b9b2:	f008 f842 	bl	23a3a <nrf_modem_os_is_in_isr>
   1b9b6:	b918      	cbnz	r0, 1b9c0 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   1b9b8:	a901      	add	r1, sp, #4
   1b9ba:	f007 ffa0 	bl	238fe <nrf_modem_os_timedwait>
   1b9be:	e7f2      	b.n	1b9a6 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1b9c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1b9c4:	9b01      	ldr	r3, [sp, #4]
   1b9c6:	4358      	muls	r0, r3
   1b9c8:	f007 ff95 	bl	238f6 <nrf_modem_os_busywait>
   1b9cc:	e7eb      	b.n	1b9a6 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1b9ce:	b003      	add	sp, #12
   1b9d0:	bd30      	pop	{r4, r5, pc}
   1b9d2:	bf00      	nop
   1b9d4:	2000f678 	.word	0x2000f678
   1b9d8:	2000f67c 	.word	0x2000f67c

0001b9dc <rpc_transport_ipc_data_alloc>:
   1b9dc:	4b03      	ldr	r3, [pc, #12]	; (1b9ec <rpc_transport_ipc_data_alloc+0x10>)
   1b9de:	781b      	ldrb	r3, [r3, #0]
   1b9e0:	b90b      	cbnz	r3, 1b9e6 <rpc_transport_ipc_data_alloc+0xa>
   1b9e2:	f7fa be71 	b.w	166c8 <nrf_modem_os_shm_tx_alloc>
   1b9e6:	2000      	movs	r0, #0
   1b9e8:	4770      	bx	lr
   1b9ea:	bf00      	nop
   1b9ec:	2000f911 	.word	0x2000f911

0001b9f0 <nrf_modem_application_irq_handler>:
   1b9f0:	b510      	push	{r4, lr}
   1b9f2:	4c06      	ldr	r4, [pc, #24]	; (1ba0c <nrf_modem_application_irq_handler+0x1c>)
   1b9f4:	f7fa fe3e 	bl	16674 <nrf_modem_os_application_irq_clear>
   1b9f8:	6820      	ldr	r0, [r4, #0]
   1b9fa:	2101      	movs	r1, #1
   1b9fc:	f7ff ff0e 	bl	1b81c <handle_modem_rpc_msg>
   1ba00:	6860      	ldr	r0, [r4, #4]
   1ba02:	2102      	movs	r1, #2
   1ba04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba08:	f7ff bf08 	b.w	1b81c <handle_modem_rpc_msg>
   1ba0c:	2000f66c 	.word	0x2000f66c

0001ba10 <rpc_transport_ipc_msg_free>:
   1ba10:	2300      	movs	r3, #0
   1ba12:	4911      	ldr	r1, [pc, #68]	; (1ba58 <rpc_transport_ipc_msg_free+0x48>)
   1ba14:	b530      	push	{r4, r5, lr}
   1ba16:	680a      	ldr	r2, [r1, #0]
   1ba18:	6814      	ldr	r4, [r2, #0]
   1ba1a:	42a3      	cmp	r3, r4
   1ba1c:	d10b      	bne.n	1ba36 <rpc_transport_ipc_msg_free+0x26>
   1ba1e:	2300      	movs	r3, #0
   1ba20:	684a      	ldr	r2, [r1, #4]
   1ba22:	6811      	ldr	r1, [r2, #0]
   1ba24:	428b      	cmp	r3, r1
   1ba26:	d015      	beq.n	1ba54 <rpc_transport_ipc_msg_free+0x44>
   1ba28:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1ba2c:	68a4      	ldr	r4, [r4, #8]
   1ba2e:	42a0      	cmp	r0, r4
   1ba30:	d008      	beq.n	1ba44 <rpc_transport_ipc_msg_free+0x34>
   1ba32:	3301      	adds	r3, #1
   1ba34:	e7f6      	b.n	1ba24 <rpc_transport_ipc_msg_free+0x14>
   1ba36:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   1ba3a:	68ad      	ldr	r5, [r5, #8]
   1ba3c:	42a8      	cmp	r0, r5
   1ba3e:	d001      	beq.n	1ba44 <rpc_transport_ipc_msg_free+0x34>
   1ba40:	3301      	adds	r3, #1
   1ba42:	e7ea      	b.n	1ba1a <rpc_transport_ipc_msg_free+0xa>
   1ba44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ba48:	685a      	ldr	r2, [r3, #4]
   1ba4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1ba4e:	f042 0203 	orr.w	r2, r2, #3
   1ba52:	605a      	str	r2, [r3, #4]
   1ba54:	bd30      	pop	{r4, r5, pc}
   1ba56:	bf00      	nop
   1ba58:	2000f66c 	.word	0x2000f66c

0001ba5c <rpc_transport_ipc_init>:
   1ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba60:	2200      	movs	r2, #0
   1ba62:	b095      	sub	sp, #84	; 0x54
   1ba64:	4605      	mov	r5, r0
   1ba66:	494d      	ldr	r1, [pc, #308]	; (1bb9c <rpc_transport_ipc_init+0x140>)
   1ba68:	7900      	ldrb	r0, [r0, #4]
   1ba6a:	f7ff fc8f 	bl	1b38c <nrfx_ipc_init>
   1ba6e:	2238      	movs	r2, #56	; 0x38
   1ba70:	2100      	movs	r1, #0
   1ba72:	a803      	add	r0, sp, #12
   1ba74:	f00a ff05 	bl	26882 <memset>
   1ba78:	2302      	movs	r3, #2
   1ba7a:	9304      	str	r3, [sp, #16]
   1ba7c:	2308      	movs	r3, #8
   1ba7e:	9306      	str	r3, [sp, #24]
   1ba80:	2320      	movs	r3, #32
   1ba82:	9308      	str	r3, [sp, #32]
   1ba84:	2301      	movs	r3, #1
   1ba86:	930b      	str	r3, [sp, #44]	; 0x2c
   1ba88:	2304      	movs	r3, #4
   1ba8a:	930d      	str	r3, [sp, #52]	; 0x34
   1ba8c:	2310      	movs	r3, #16
   1ba8e:	f04f 0c40 	mov.w	ip, #64	; 0x40
   1ba92:	930f      	str	r3, [sp, #60]	; 0x3c
   1ba94:	2380      	movs	r3, #128	; 0x80
   1ba96:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   1ba9a:	23d5      	movs	r3, #213	; 0xd5
   1ba9c:	a803      	add	r0, sp, #12
   1ba9e:	9313      	str	r3, [sp, #76]	; 0x4c
   1baa0:	f7ff fc8c 	bl	1b3bc <nrfx_ipc_config_load>
   1baa4:	682b      	ldr	r3, [r5, #0]
   1baa6:	2100      	movs	r1, #0
   1baa8:	685a      	ldr	r2, [r3, #4]
   1baaa:	6818      	ldr	r0, [r3, #0]
   1baac:	f00a fee9 	bl	26882 <memset>
   1bab0:	682a      	ldr	r2, [r5, #0]
   1bab2:	6814      	ldr	r4, [r2, #0]
   1bab4:	69d3      	ldr	r3, [r2, #28]
   1bab6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   1baba:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   1babe:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   1bac2:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   1bac6:	f104 0920 	add.w	r9, r4, #32
   1baca:	2b00      	cmp	r3, #0
   1bacc:	d060      	beq.n	1bb90 <rpc_transport_ipc_init+0x134>
   1bace:	f104 0840 	add.w	r8, r4, #64	; 0x40
   1bad2:	4933      	ldr	r1, [pc, #204]	; (1bba0 <rpc_transport_ipc_init+0x144>)
   1bad4:	f8c1 9000 	str.w	r9, [r1]
   1bad8:	b13b      	cbz	r3, 1baea <rpc_transport_ipc_init+0x8e>
   1bada:	6992      	ldr	r2, [r2, #24]
   1badc:	4640      	mov	r0, r8
   1bade:	f8c8 2004 	str.w	r2, [r8, #4]
   1bae2:	f8c8 3000 	str.w	r3, [r8]
   1bae6:	f7ff fdb9 	bl	1b65c <ipc_trace_init>
   1baea:	6828      	ldr	r0, [r5, #0]
   1baec:	2300      	movs	r3, #0
   1baee:	6902      	ldr	r2, [r0, #16]
   1baf0:	2101      	movs	r1, #1
   1baf2:	6062      	str	r2, [r4, #4]
   1baf4:	6942      	ldr	r2, [r0, #20]
   1baf6:	70a1      	strb	r1, [r4, #2]
   1baf8:	60a2      	str	r2, [r4, #8]
   1bafa:	4a2a      	ldr	r2, [pc, #168]	; (1bba4 <rpc_transport_ipc_init+0x148>)
   1bafc:	7023      	strb	r3, [r4, #0]
   1bafe:	6017      	str	r7, [r2, #0]
   1bb00:	4a29      	ldr	r2, [pc, #164]	; (1bba8 <rpc_transport_ipc_init+0x14c>)
   1bb02:	7063      	strb	r3, [r4, #1]
   1bb04:	6016      	str	r6, [r2, #0]
   1bb06:	2208      	movs	r2, #8
   1bb08:	70e3      	strb	r3, [r4, #3]
   1bb0a:	60e6      	str	r6, [r4, #12]
   1bb0c:	6127      	str	r7, [r4, #16]
   1bb0e:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   1bb12:	f8c4 9014 	str.w	r9, [r4, #20]
   1bb16:	f8c4 8018 	str.w	r8, [r4, #24]
   1bb1a:	707b      	strb	r3, [r7, #1]
   1bb1c:	70bb      	strb	r3, [r7, #2]
   1bb1e:	70fb      	strb	r3, [r7, #3]
   1bb20:	2714      	movs	r7, #20
   1bb22:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   1bb26:	4a21      	ldr	r2, [pc, #132]	; (1bbac <rpc_transport_ipc_init+0x150>)
   1bb28:	4d21      	ldr	r5, [pc, #132]	; (1bbb0 <rpc_transport_ipc_init+0x154>)
   1bb2a:	f8c2 b000 	str.w	fp, [r2]
   1bb2e:	4a21      	ldr	r2, [pc, #132]	; (1bbb4 <rpc_transport_ipc_init+0x158>)
   1bb30:	7073      	strb	r3, [r6, #1]
   1bb32:	f8c2 a000 	str.w	sl, [r2]
   1bb36:	4a20      	ldr	r2, [pc, #128]	; (1bbb8 <rpc_transport_ipc_init+0x15c>)
   1bb38:	70b3      	strb	r3, [r6, #2]
   1bb3a:	70f3      	strb	r3, [r6, #3]
   1bb3c:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   1bb40:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   1bb44:	4c1d      	ldr	r4, [pc, #116]	; (1bbbc <rpc_transport_ipc_init+0x160>)
   1bb46:	7029      	strb	r1, [r5, #0]
   1bb48:	491d      	ldr	r1, [pc, #116]	; (1bbc0 <rpc_transport_ipc_init+0x164>)
   1bb4a:	6023      	str	r3, [r4, #0]
   1bb4c:	9302      	str	r3, [sp, #8]
   1bb4e:	600b      	str	r3, [r1, #0]
   1bb50:	680b      	ldr	r3, [r1, #0]
   1bb52:	4e1c      	ldr	r6, [pc, #112]	; (1bbc4 <rpc_transport_ipc_init+0x168>)
   1bb54:	9302      	str	r3, [sp, #8]
   1bb56:	9b02      	ldr	r3, [sp, #8]
   1bb58:	2000      	movs	r0, #0
   1bb5a:	a901      	add	r1, sp, #4
   1bb5c:	9701      	str	r7, [sp, #4]
   1bb5e:	f007 fece 	bl	238fe <nrf_modem_os_timedwait>
   1bb62:	9b01      	ldr	r3, [sp, #4]
   1bb64:	3b14      	subs	r3, #20
   1bb66:	441e      	add	r6, r3
   1bb68:	782b      	ldrb	r3, [r5, #0]
   1bb6a:	2b01      	cmp	r3, #1
   1bb6c:	d104      	bne.n	1bb78 <rpc_transport_ipc_init+0x11c>
   1bb6e:	2e00      	cmp	r6, #0
   1bb70:	d1f2      	bne.n	1bb58 <rpc_transport_ipc_init+0xfc>
   1bb72:	f06f 0373 	mvn.w	r3, #115	; 0x73
   1bb76:	6023      	str	r3, [r4, #0]
   1bb78:	6824      	ldr	r4, [r4, #0]
   1bb7a:	b95c      	cbnz	r4, 1bb94 <rpc_transport_ipc_init+0x138>
   1bb7c:	4b12      	ldr	r3, [pc, #72]	; (1bbc8 <rpc_transport_ipc_init+0x16c>)
   1bb7e:	701c      	strb	r4, [r3, #0]
   1bb80:	4b12      	ldr	r3, [pc, #72]	; (1bbcc <rpc_transport_ipc_init+0x170>)
   1bb82:	801c      	strh	r4, [r3, #0]
   1bb84:	4b12      	ldr	r3, [pc, #72]	; (1bbd0 <rpc_transport_ipc_init+0x174>)
   1bb86:	801c      	strh	r4, [r3, #0]
   1bb88:	4620      	mov	r0, r4
   1bb8a:	b015      	add	sp, #84	; 0x54
   1bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb90:	4698      	mov	r8, r3
   1bb92:	e79e      	b.n	1bad2 <rpc_transport_ipc_init+0x76>
   1bb94:	f7ff fc38 	bl	1b408 <nrfx_ipc_uninit>
   1bb98:	e7f6      	b.n	1bb88 <rpc_transport_ipc_init+0x12c>
   1bb9a:	bf00      	nop
   1bb9c:	0001bbd5 	.word	0x0001bbd5
   1bba0:	2000f674 	.word	0x2000f674
   1bba4:	2000f684 	.word	0x2000f684
   1bba8:	2000f67c 	.word	0x2000f67c
   1bbac:	2000f680 	.word	0x2000f680
   1bbb0:	2000f910 	.word	0x2000f910
   1bbb4:	2000f678 	.word	0x2000f678
   1bbb8:	4002a000 	.word	0x4002a000
   1bbbc:	2000f668 	.word	0x2000f668
   1bbc0:	40005610 	.word	0x40005610
   1bbc4:	000249f0 	.word	0x000249f0
   1bbc8:	2000f911 	.word	0x2000f911
   1bbcc:	2000f8f8 	.word	0x2000f8f8
   1bbd0:	2000f8f6 	.word	0x2000f8f6

0001bbd4 <ipc_irq_handler>:
   1bbd4:	b570      	push	{r4, r5, r6, lr}
   1bbd6:	4604      	mov	r4, r0
   1bbd8:	0620      	lsls	r0, r4, #24
   1bbda:	d50c      	bpl.n	1bbf6 <ipc_irq_handler+0x22>
   1bbdc:	f7ff fd84 	bl	1b6e8 <ipc_trace_handle>
   1bbe0:	f7ff fe16 	bl	1b810 <rpc_trace_coredump_in_progress>
   1bbe4:	b138      	cbz	r0, 1bbf6 <ipc_irq_handler+0x22>
   1bbe6:	22e0      	movs	r2, #224	; 0xe0
   1bbe8:	4b3e      	ldr	r3, [pc, #248]	; (1bce4 <ipc_irq_handler+0x110>)
   1bbea:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   1bbee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1bbf2:	605a      	str	r2, [r3, #4]
   1bbf4:	bd70      	pop	{r4, r5, r6, pc}
   1bbf6:	07e1      	lsls	r1, r4, #31
   1bbf8:	d548      	bpl.n	1bc8c <ipc_irq_handler+0xb8>
   1bbfa:	f248 0202 	movw	r2, #32770	; 0x8002
   1bbfe:	4b3a      	ldr	r3, [pc, #232]	; (1bce8 <ipc_irq_handler+0x114>)
   1bc00:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1bc04:	4293      	cmp	r3, r2
   1bc06:	d035      	beq.n	1bc74 <ipc_irq_handler+0xa0>
   1bc08:	d81b      	bhi.n	1bc42 <ipc_irq_handler+0x6e>
   1bc0a:	f243 0232 	movw	r2, #12338	; 0x3032
   1bc0e:	4293      	cmp	r3, r2
   1bc10:	d036      	beq.n	1bc80 <ipc_irq_handler+0xac>
   1bc12:	d80b      	bhi.n	1bc2c <ipc_irq_handler+0x58>
   1bc14:	3b01      	subs	r3, #1
   1bc16:	2b01      	cmp	r3, #1
   1bc18:	d8ec      	bhi.n	1bbf4 <ipc_irq_handler+0x20>
   1bc1a:	2203      	movs	r2, #3
   1bc1c:	200e      	movs	r0, #14
   1bc1e:	4b33      	ldr	r3, [pc, #204]	; (1bcec <ipc_irq_handler+0x118>)
   1bc20:	701a      	strb	r2, [r3, #0]
   1bc22:	4b33      	ldr	r3, [pc, #204]	; (1bcf0 <ipc_irq_handler+0x11c>)
   1bc24:	6018      	str	r0, [r3, #0]
   1bc26:	f009 fe25 	bl	25874 <rpc_transport_ipc_fault_handler>
   1bc2a:	e7e3      	b.n	1bbf4 <ipc_irq_handler+0x20>
   1bc2c:	f248 0201 	movw	r2, #32769	; 0x8001
   1bc30:	4293      	cmp	r3, r2
   1bc32:	d1df      	bne.n	1bbf4 <ipc_irq_handler+0x20>
   1bc34:	2203      	movs	r2, #3
   1bc36:	4b2d      	ldr	r3, [pc, #180]	; (1bcec <ipc_irq_handler+0x118>)
   1bc38:	701a      	strb	r2, [r3, #0]
   1bc3a:	2216      	movs	r2, #22
   1bc3c:	4b2c      	ldr	r3, [pc, #176]	; (1bcf0 <ipc_irq_handler+0x11c>)
   1bc3e:	601a      	str	r2, [r3, #0]
   1bc40:	e7d8      	b.n	1bbf4 <ipc_irq_handler+0x20>
   1bc42:	4a2c      	ldr	r2, [pc, #176]	; (1bcf4 <ipc_irq_handler+0x120>)
   1bc44:	4293      	cmp	r3, r2
   1bc46:	d80c      	bhi.n	1bc62 <ipc_irq_handler+0x8e>
   1bc48:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1bc4c:	d80c      	bhi.n	1bc68 <ipc_irq_handler+0x94>
   1bc4e:	f248 0203 	movw	r2, #32771	; 0x8003
   1bc52:	4293      	cmp	r3, r2
   1bc54:	d1ce      	bne.n	1bbf4 <ipc_irq_handler+0x20>
   1bc56:	2203      	movs	r2, #3
   1bc58:	4b24      	ldr	r3, [pc, #144]	; (1bcec <ipc_irq_handler+0x118>)
   1bc5a:	701a      	strb	r2, [r3, #0]
   1bc5c:	220c      	movs	r2, #12
   1bc5e:	4b24      	ldr	r3, [pc, #144]	; (1bcf0 <ipc_irq_handler+0x11c>)
   1bc60:	e7ed      	b.n	1bc3e <ipc_irq_handler+0x6a>
   1bc62:	4a25      	ldr	r2, [pc, #148]	; (1bcf8 <ipc_irq_handler+0x124>)
   1bc64:	4293      	cmp	r3, r2
   1bc66:	d1c5      	bne.n	1bbf4 <ipc_irq_handler+0x20>
   1bc68:	2103      	movs	r1, #3
   1bc6a:	4a20      	ldr	r2, [pc, #128]	; (1bcec <ipc_irq_handler+0x118>)
   1bc6c:	7011      	strb	r1, [r2, #0]
   1bc6e:	4a20      	ldr	r2, [pc, #128]	; (1bcf0 <ipc_irq_handler+0x11c>)
   1bc70:	6013      	str	r3, [r2, #0]
   1bc72:	e7bf      	b.n	1bbf4 <ipc_irq_handler+0x20>
   1bc74:	2203      	movs	r2, #3
   1bc76:	4b1d      	ldr	r3, [pc, #116]	; (1bcec <ipc_irq_handler+0x118>)
   1bc78:	701a      	strb	r2, [r3, #0]
   1bc7a:	225f      	movs	r2, #95	; 0x5f
   1bc7c:	4b1c      	ldr	r3, [pc, #112]	; (1bcf0 <ipc_irq_handler+0x11c>)
   1bc7e:	e7de      	b.n	1bc3e <ipc_irq_handler+0x6a>
   1bc80:	2203      	movs	r2, #3
   1bc82:	4b1a      	ldr	r3, [pc, #104]	; (1bcec <ipc_irq_handler+0x118>)
   1bc84:	701a      	strb	r2, [r3, #0]
   1bc86:	2205      	movs	r2, #5
   1bc88:	4b19      	ldr	r3, [pc, #100]	; (1bcf0 <ipc_irq_handler+0x11c>)
   1bc8a:	e7d8      	b.n	1bc3e <ipc_irq_handler+0x6a>
   1bc8c:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   1bc90:	d003      	beq.n	1bc9a <ipc_irq_handler+0xc6>
   1bc92:	2202      	movs	r2, #2
   1bc94:	4b15      	ldr	r3, [pc, #84]	; (1bcec <ipc_irq_handler+0x118>)
   1bc96:	701a      	strb	r2, [r3, #0]
   1bc98:	e7ac      	b.n	1bbf4 <ipc_irq_handler+0x20>
   1bc9a:	0762      	lsls	r2, r4, #29
   1bc9c:	d505      	bpl.n	1bcaa <ipc_irq_handler+0xd6>
   1bc9e:	4b13      	ldr	r3, [pc, #76]	; (1bcec <ipc_irq_handler+0x118>)
   1bca0:	781a      	ldrb	r2, [r3, #0]
   1bca2:	461e      	mov	r6, r3
   1bca4:	b93a      	cbnz	r2, 1bcb6 <ipc_irq_handler+0xe2>
   1bca6:	f7fa fcdd 	bl	16664 <nrf_modem_os_application_irq_set>
   1bcaa:	06e3      	lsls	r3, r4, #27
   1bcac:	d5a2      	bpl.n	1bbf4 <ipc_irq_handler+0x20>
   1bcae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bcb2:	f7fa bcd7 	b.w	16664 <nrf_modem_os_application_irq_set>
   1bcb6:	2a01      	cmp	r2, #1
   1bcb8:	d1f7      	bne.n	1bcaa <ipc_irq_handler+0xd6>
   1bcba:	4a10      	ldr	r2, [pc, #64]	; (1bcfc <ipc_irq_handler+0x128>)
   1bcbc:	4810      	ldr	r0, [pc, #64]	; (1bd00 <ipc_irq_handler+0x12c>)
   1bcbe:	6812      	ldr	r2, [r2, #0]
   1bcc0:	6891      	ldr	r1, [r2, #8]
   1bcc2:	6041      	str	r1, [r0, #4]
   1bcc4:	6852      	ldr	r2, [r2, #4]
   1bcc6:	6002      	str	r2, [r0, #0]
   1bcc8:	b121      	cbz	r1, 1bcd4 <ipc_irq_handler+0x100>
   1bcca:	b11a      	cbz	r2, 1bcd4 <ipc_irq_handler+0x100>
   1bccc:	6809      	ldr	r1, [r1, #0]
   1bcce:	b109      	cbz	r1, 1bcd4 <ipc_irq_handler+0x100>
   1bcd0:	6812      	ldr	r2, [r2, #0]
   1bcd2:	b92a      	cbnz	r2, 1bce0 <ipc_irq_handler+0x10c>
   1bcd4:	2303      	movs	r3, #3
   1bcd6:	2205      	movs	r2, #5
   1bcd8:	7033      	strb	r3, [r6, #0]
   1bcda:	4b05      	ldr	r3, [pc, #20]	; (1bcf0 <ipc_irq_handler+0x11c>)
   1bcdc:	601a      	str	r2, [r3, #0]
   1bcde:	e7e4      	b.n	1bcaa <ipc_irq_handler+0xd6>
   1bce0:	701d      	strb	r5, [r3, #0]
   1bce2:	e7e2      	b.n	1bcaa <ipc_irq_handler+0xd6>
   1bce4:	e000e100 	.word	0xe000e100
   1bce8:	4002a000 	.word	0x4002a000
   1bcec:	2000f910 	.word	0x2000f910
   1bcf0:	2000f668 	.word	0x2000f668
   1bcf4:	04400004 	.word	0x04400004
   1bcf8:	05500001 	.word	0x05500001
   1bcfc:	2000f674 	.word	0x2000f674
   1bd00:	2000f66c 	.word	0x2000f66c

0001bd04 <interface_init>:
   1bd04:	b508      	push	{r3, lr}
   1bd06:	f44f 72b0 	mov.w	r2, #352	; 0x160
   1bd0a:	2100      	movs	r1, #0
   1bd0c:	4802      	ldr	r0, [pc, #8]	; (1bd18 <interface_init+0x14>)
   1bd0e:	f00a fdb8 	bl	26882 <memset>
   1bd12:	2000      	movs	r0, #0
   1bd14:	bd08      	pop	{r3, pc}
   1bd16:	bf00      	nop
   1bd18:	2000f688 	.word	0x2000f688

0001bd1c <interface_socket_allocate>:
   1bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd1e:	4606      	mov	r6, r0
   1bd20:	2400      	movs	r4, #0
   1bd22:	272c      	movs	r7, #44	; 0x2c
   1bd24:	4b0f      	ldr	r3, [pc, #60]	; (1bd64 <interface_socket_allocate+0x48>)
   1bd26:	fb07 f004 	mul.w	r0, r7, r4
   1bd2a:	181d      	adds	r5, r3, r0
   1bd2c:	5818      	ldr	r0, [r3, r0]
   1bd2e:	b988      	cbnz	r0, 1bd54 <interface_socket_allocate+0x38>
   1bd30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1bd34:	2301      	movs	r3, #1
   1bd36:	4628      	mov	r0, r5
   1bd38:	61af      	str	r7, [r5, #24]
   1bd3a:	602b      	str	r3, [r5, #0]
   1bd3c:	f009 f840 	bl	24dc0 <packet_handler_alloc_and_init>
   1bd40:	b168      	cbz	r0, 1bd5e <interface_socket_allocate+0x42>
   1bd42:	4628      	mov	r0, r5
   1bd44:	f009 f853 	bl	24dee <socket_free>
   1bd48:	200c      	movs	r0, #12
   1bd4a:	f007 fe70 	bl	23a2e <nrf_modem_os_errno_set>
   1bd4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1bd52:	e005      	b.n	1bd60 <interface_socket_allocate+0x44>
   1bd54:	3401      	adds	r4, #1
   1bd56:	2c08      	cmp	r4, #8
   1bd58:	d1e5      	bne.n	1bd26 <interface_socket_allocate+0xa>
   1bd5a:	2069      	movs	r0, #105	; 0x69
   1bd5c:	e7f5      	b.n	1bd4a <interface_socket_allocate+0x2e>
   1bd5e:	6035      	str	r5, [r6, #0]
   1bd60:	4620      	mov	r0, r4
   1bd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd64:	2000f688 	.word	0x2000f688

0001bd68 <interface_socket_free>:
   1bd68:	2807      	cmp	r0, #7
   1bd6a:	d805      	bhi.n	1bd78 <interface_socket_free+0x10>
   1bd6c:	222c      	movs	r2, #44	; 0x2c
   1bd6e:	4b03      	ldr	r3, [pc, #12]	; (1bd7c <interface_socket_free+0x14>)
   1bd70:	fb02 3000 	mla	r0, r2, r0, r3
   1bd74:	f009 b83b 	b.w	24dee <socket_free>
   1bd78:	4770      	bx	lr
   1bd7a:	bf00      	nop
   1bd7c:	2000f688 	.word	0x2000f688

0001bd80 <interface_socket_packet_handler_update>:
   1bd80:	2807      	cmp	r0, #7
   1bd82:	b570      	push	{r4, r5, r6, lr}
   1bd84:	d812      	bhi.n	1bdac <interface_socket_packet_handler_update+0x2c>
   1bd86:	232c      	movs	r3, #44	; 0x2c
   1bd88:	4358      	muls	r0, r3
   1bd8a:	4c09      	ldr	r4, [pc, #36]	; (1bdb0 <interface_socket_packet_handler_update+0x30>)
   1bd8c:	5823      	ldr	r3, [r4, r0]
   1bd8e:	1825      	adds	r5, r4, r0
   1bd90:	b163      	cbz	r3, 1bdac <interface_socket_packet_handler_update+0x2c>
   1bd92:	4628      	mov	r0, r5
   1bd94:	69ee      	ldr	r6, [r5, #28]
   1bd96:	f009 f813 	bl	24dc0 <packet_handler_alloc_and_init>
   1bd9a:	4604      	mov	r4, r0
   1bd9c:	b920      	cbnz	r0, 1bda8 <interface_socket_packet_handler_update+0x28>
   1bd9e:	4630      	mov	r0, r6
   1bda0:	f009 fd4a 	bl	25838 <packet_handler_delete>
   1bda4:	4620      	mov	r0, r4
   1bda6:	bd70      	pop	{r4, r5, r6, pc}
   1bda8:	61ee      	str	r6, [r5, #28]
   1bdaa:	e7fb      	b.n	1bda4 <interface_socket_packet_handler_update+0x24>
   1bdac:	2402      	movs	r4, #2
   1bdae:	e7f9      	b.n	1bda4 <interface_socket_packet_handler_update+0x24>
   1bdb0:	2000f688 	.word	0x2000f688

0001bdb4 <interface_socket_wait>:
   1bdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdb8:	4615      	mov	r5, r2
   1bdba:	222c      	movs	r2, #44	; 0x2c
   1bdbc:	4350      	muls	r0, r2
   1bdbe:	461e      	mov	r6, r3
   1bdc0:	4b0e      	ldr	r3, [pc, #56]	; (1bdfc <interface_socket_wait+0x48>)
   1bdc2:	460c      	mov	r4, r1
   1bdc4:	181f      	adds	r7, r3, r0
   1bdc6:	581b      	ldr	r3, [r3, r0]
   1bdc8:	402b      	ands	r3, r5
   1bdca:	428b      	cmp	r3, r1
   1bdcc:	d102      	bne.n	1bdd4 <interface_socket_wait+0x20>
   1bdce:	2000      	movs	r0, #0
   1bdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bdd4:	687b      	ldr	r3, [r7, #4]
   1bdd6:	2b00      	cmp	r3, #0
   1bdd8:	d1f9      	bne.n	1bdce <interface_socket_wait+0x1a>
   1bdda:	46b8      	mov	r8, r7
   1bddc:	f8d8 3000 	ldr.w	r3, [r8]
   1bde0:	402b      	ands	r3, r5
   1bde2:	42a3      	cmp	r3, r4
   1bde4:	d0f3      	beq.n	1bdce <interface_socket_wait+0x1a>
   1bde6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1bdea:	2b00      	cmp	r3, #0
   1bdec:	d1ef      	bne.n	1bdce <interface_socket_wait+0x1a>
   1bdee:	4631      	mov	r1, r6
   1bdf0:	4638      	mov	r0, r7
   1bdf2:	f007 fd84 	bl	238fe <nrf_modem_os_timedwait>
   1bdf6:	2800      	cmp	r0, #0
   1bdf8:	d0f0      	beq.n	1bddc <interface_socket_wait+0x28>
   1bdfa:	e7e9      	b.n	1bdd0 <interface_socket_wait+0x1c>
   1bdfc:	2000f688 	.word	0x2000f688

0001be00 <interface_sockets_aux_state_set>:
   1be00:	4a0d      	ldr	r2, [pc, #52]	; (1be38 <interface_sockets_aux_state_set+0x38>)
   1be02:	b570      	push	{r4, r5, r6, lr}
   1be04:	2300      	movs	r3, #0
   1be06:	4611      	mov	r1, r2
   1be08:	252c      	movs	r5, #44	; 0x2c
   1be0a:	fb05 f403 	mul.w	r4, r5, r3
   1be0e:	590c      	ldr	r4, [r1, r4]
   1be10:	b15c      	cbz	r4, 1be2a <interface_sockets_aux_state_set+0x2a>
   1be12:	68d4      	ldr	r4, [r2, #12]
   1be14:	f024 0608 	bic.w	r6, r4, #8
   1be18:	2e02      	cmp	r6, #2
   1be1a:	d001      	beq.n	1be20 <interface_sockets_aux_state_set+0x20>
   1be1c:	2c05      	cmp	r4, #5
   1be1e:	d104      	bne.n	1be2a <interface_sockets_aux_state_set+0x2a>
   1be20:	fb05 f603 	mul.w	r6, r5, r3
   1be24:	598c      	ldr	r4, [r1, r6]
   1be26:	4304      	orrs	r4, r0
   1be28:	518c      	str	r4, [r1, r6]
   1be2a:	3301      	adds	r3, #1
   1be2c:	2b08      	cmp	r3, #8
   1be2e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   1be32:	d1ea      	bne.n	1be0a <interface_sockets_aux_state_set+0xa>
   1be34:	bd70      	pop	{r4, r5, r6, pc}
   1be36:	bf00      	nop
   1be38:	2000f688 	.word	0x2000f688

0001be3c <interface_sockets_aux_state_clear>:
   1be3c:	4a0d      	ldr	r2, [pc, #52]	; (1be74 <interface_sockets_aux_state_clear+0x38>)
   1be3e:	b570      	push	{r4, r5, r6, lr}
   1be40:	2300      	movs	r3, #0
   1be42:	4611      	mov	r1, r2
   1be44:	252c      	movs	r5, #44	; 0x2c
   1be46:	43c0      	mvns	r0, r0
   1be48:	fb05 f403 	mul.w	r4, r5, r3
   1be4c:	590c      	ldr	r4, [r1, r4]
   1be4e:	b15c      	cbz	r4, 1be68 <interface_sockets_aux_state_clear+0x2c>
   1be50:	68d4      	ldr	r4, [r2, #12]
   1be52:	f024 0608 	bic.w	r6, r4, #8
   1be56:	2e02      	cmp	r6, #2
   1be58:	d001      	beq.n	1be5e <interface_sockets_aux_state_clear+0x22>
   1be5a:	2c05      	cmp	r4, #5
   1be5c:	d104      	bne.n	1be68 <interface_sockets_aux_state_clear+0x2c>
   1be5e:	fb05 f603 	mul.w	r6, r5, r3
   1be62:	598c      	ldr	r4, [r1, r6]
   1be64:	4004      	ands	r4, r0
   1be66:	518c      	str	r4, [r1, r6]
   1be68:	3301      	adds	r3, #1
   1be6a:	2b08      	cmp	r3, #8
   1be6c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   1be70:	d1ea      	bne.n	1be48 <interface_sockets_aux_state_clear+0xc>
   1be72:	bd70      	pop	{r4, r5, r6, pc}
   1be74:	2000f688 	.word	0x2000f688

0001be78 <interface_from_internal_id_search>:
   1be78:	4b0a      	ldr	r3, [pc, #40]	; (1bea4 <interface_from_internal_id_search+0x2c>)
   1be7a:	4602      	mov	r2, r0
   1be7c:	b530      	push	{r4, r5, lr}
   1be7e:	2000      	movs	r0, #0
   1be80:	461c      	mov	r4, r3
   1be82:	212c      	movs	r1, #44	; 0x2c
   1be84:	fb01 f500 	mul.w	r5, r1, r0
   1be88:	5965      	ldr	r5, [r4, r5]
   1be8a:	b115      	cbz	r5, 1be92 <interface_from_internal_id_search+0x1a>
   1be8c:	699d      	ldr	r5, [r3, #24]
   1be8e:	4295      	cmp	r5, r2
   1be90:	d006      	beq.n	1bea0 <interface_from_internal_id_search+0x28>
   1be92:	3001      	adds	r0, #1
   1be94:	2808      	cmp	r0, #8
   1be96:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   1be9a:	d1f3      	bne.n	1be84 <interface_from_internal_id_search+0xc>
   1be9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bea0:	bd30      	pop	{r4, r5, pc}
   1bea2:	bf00      	nop
   1bea4:	2000f688 	.word	0x2000f688

0001bea8 <interface_socket_from_handle_get>:
   1bea8:	2807      	cmp	r0, #7
   1beaa:	d809      	bhi.n	1bec0 <interface_socket_from_handle_get+0x18>
   1beac:	232c      	movs	r3, #44	; 0x2c
   1beae:	4358      	muls	r0, r3
   1beb0:	4a04      	ldr	r2, [pc, #16]	; (1bec4 <interface_socket_from_handle_get+0x1c>)
   1beb2:	1813      	adds	r3, r2, r0
   1beb4:	5812      	ldr	r2, [r2, r0]
   1beb6:	2a00      	cmp	r2, #0
   1beb8:	bf14      	ite	ne
   1beba:	4618      	movne	r0, r3
   1bebc:	2000      	moveq	r0, #0
   1bebe:	4770      	bx	lr
   1bec0:	2000      	movs	r0, #0
   1bec2:	4770      	bx	lr
   1bec4:	2000f688 	.word	0x2000f688

0001bec8 <interface_socket_setopt>:
   1bec8:	2807      	cmp	r0, #7
   1beca:	b538      	push	{r3, r4, r5, lr}
   1becc:	d82c      	bhi.n	1bf28 <interface_socket_setopt+0x60>
   1bece:	242c      	movs	r4, #44	; 0x2c
   1bed0:	4360      	muls	r0, r4
   1bed2:	4d16      	ldr	r5, [pc, #88]	; (1bf2c <interface_socket_setopt+0x64>)
   1bed4:	182c      	adds	r4, r5, r0
   1bed6:	5828      	ldr	r0, [r5, r0]
   1bed8:	b330      	cbz	r0, 1bf28 <interface_socket_setopt+0x60>
   1beda:	2901      	cmp	r1, #1
   1bedc:	d005      	beq.n	1beea <interface_socket_setopt+0x22>
   1bede:	206d      	movs	r0, #109	; 0x6d
   1bee0:	f007 fda5 	bl	23a2e <nrf_modem_os_errno_set>
   1bee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bee8:	e01b      	b.n	1bf22 <interface_socket_setopt+0x5a>
   1beea:	f1a2 0114 	sub.w	r1, r2, #20
   1beee:	2901      	cmp	r1, #1
   1bef0:	d8f5      	bhi.n	1bede <interface_socket_setopt+0x16>
   1bef2:	9904      	ldr	r1, [sp, #16]
   1bef4:	2908      	cmp	r1, #8
   1bef6:	d115      	bne.n	1bf24 <interface_socket_setopt+0x5c>
   1bef8:	b1a3      	cbz	r3, 1bf24 <interface_socket_setopt+0x5c>
   1befa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1befe:	6858      	ldr	r0, [r3, #4]
   1bf00:	2100      	movs	r1, #0
   1bf02:	fbb0 f0f5 	udiv	r0, r0, r5
   1bf06:	681b      	ldr	r3, [r3, #0]
   1bf08:	fbe5 0103 	umlal	r0, r1, r5, r3
   1bf0c:	2901      	cmp	r1, #1
   1bf0e:	bf08      	it	eq
   1bf10:	2800      	cmpeq	r0, #0
   1bf12:	d301      	bcc.n	1bf18 <interface_socket_setopt+0x50>
   1bf14:	2021      	movs	r0, #33	; 0x21
   1bf16:	e7e3      	b.n	1bee0 <interface_socket_setopt+0x18>
   1bf18:	2a14      	cmp	r2, #20
   1bf1a:	bf0c      	ite	eq
   1bf1c:	6220      	streq	r0, [r4, #32]
   1bf1e:	6260      	strne	r0, [r4, #36]	; 0x24
   1bf20:	2000      	movs	r0, #0
   1bf22:	bd38      	pop	{r3, r4, r5, pc}
   1bf24:	2016      	movs	r0, #22
   1bf26:	e7db      	b.n	1bee0 <interface_socket_setopt+0x18>
   1bf28:	2009      	movs	r0, #9
   1bf2a:	e7d9      	b.n	1bee0 <interface_socket_setopt+0x18>
   1bf2c:	2000f688 	.word	0x2000f688

0001bf30 <interface_socket_getopt>:
   1bf30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bf32:	4604      	mov	r4, r0
   1bf34:	2c07      	cmp	r4, #7
   1bf36:	4616      	mov	r6, r2
   1bf38:	4618      	mov	r0, r3
   1bf3a:	9f08      	ldr	r7, [sp, #32]
   1bf3c:	d841      	bhi.n	1bfc2 <interface_socket_getopt+0x92>
   1bf3e:	252c      	movs	r5, #44	; 0x2c
   1bf40:	436c      	muls	r4, r5
   1bf42:	4b21      	ldr	r3, [pc, #132]	; (1bfc8 <interface_socket_getopt+0x98>)
   1bf44:	591a      	ldr	r2, [r3, r4]
   1bf46:	191d      	adds	r5, r3, r4
   1bf48:	2a00      	cmp	r2, #0
   1bf4a:	d03a      	beq.n	1bfc2 <interface_socket_getopt+0x92>
   1bf4c:	2901      	cmp	r1, #1
   1bf4e:	d005      	beq.n	1bf5c <interface_socket_getopt+0x2c>
   1bf50:	206d      	movs	r0, #109	; 0x6d
   1bf52:	f007 fd6c 	bl	23a2e <nrf_modem_os_errno_set>
   1bf56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bf5a:	e012      	b.n	1bf82 <interface_socket_getopt+0x52>
   1bf5c:	b100      	cbz	r0, 1bf60 <interface_socket_getopt+0x30>
   1bf5e:	b90f      	cbnz	r7, 1bf64 <interface_socket_getopt+0x34>
   1bf60:	2016      	movs	r0, #22
   1bf62:	e7f6      	b.n	1bf52 <interface_socket_getopt+0x22>
   1bf64:	2e04      	cmp	r6, #4
   1bf66:	d10e      	bne.n	1bf86 <interface_socket_getopt+0x56>
   1bf68:	683a      	ldr	r2, [r7, #0]
   1bf6a:	2a00      	cmp	r2, #0
   1bf6c:	d0f8      	beq.n	1bf60 <interface_socket_getopt+0x30>
   1bf6e:	2a04      	cmp	r2, #4
   1bf70:	bf28      	it	cs
   1bf72:	2204      	movcs	r2, #4
   1bf74:	3404      	adds	r4, #4
   1bf76:	603a      	str	r2, [r7, #0]
   1bf78:	1919      	adds	r1, r3, r4
   1bf7a:	f00a fc62 	bl	26842 <memcpy>
   1bf7e:	2000      	movs	r0, #0
   1bf80:	6068      	str	r0, [r5, #4]
   1bf82:	b003      	add	sp, #12
   1bf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf86:	f1a6 0314 	sub.w	r3, r6, #20
   1bf8a:	2b01      	cmp	r3, #1
   1bf8c:	d8e0      	bhi.n	1bf50 <interface_socket_getopt+0x20>
   1bf8e:	683a      	ldr	r2, [r7, #0]
   1bf90:	2a00      	cmp	r2, #0
   1bf92:	d0e5      	beq.n	1bf60 <interface_socket_getopt+0x30>
   1bf94:	2a08      	cmp	r2, #8
   1bf96:	bf28      	it	cs
   1bf98:	2208      	movcs	r2, #8
   1bf9a:	603a      	str	r2, [r7, #0]
   1bf9c:	e9d5 4308 	ldrd	r4, r3, [r5, #32]
   1bfa0:	2e14      	cmp	r6, #20
   1bfa2:	bf18      	it	ne
   1bfa4:	461c      	movne	r4, r3
   1bfa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1bfaa:	fbb4 f1f3 	udiv	r1, r4, r3
   1bfae:	9100      	str	r1, [sp, #0]
   1bfb0:	fb03 4111 	mls	r1, r3, r1, r4
   1bfb4:	434b      	muls	r3, r1
   1bfb6:	4669      	mov	r1, sp
   1bfb8:	9301      	str	r3, [sp, #4]
   1bfba:	f00a fc42 	bl	26842 <memcpy>
   1bfbe:	2000      	movs	r0, #0
   1bfc0:	e7df      	b.n	1bf82 <interface_socket_getopt+0x52>
   1bfc2:	2009      	movs	r0, #9
   1bfc4:	e7c5      	b.n	1bf52 <interface_socket_getopt+0x22>
   1bfc6:	bf00      	nop
   1bfc8:	2000f688 	.word	0x2000f688

0001bfcc <interface_socket_fcntl>:
   1bfcc:	2807      	cmp	r0, #7
   1bfce:	b510      	push	{r4, lr}
   1bfd0:	d82c      	bhi.n	1c02c <interface_socket_fcntl+0x60>
   1bfd2:	232c      	movs	r3, #44	; 0x2c
   1bfd4:	4343      	muls	r3, r0
   1bfd6:	4c16      	ldr	r4, [pc, #88]	; (1c030 <interface_socket_fcntl+0x64>)
   1bfd8:	58e0      	ldr	r0, [r4, r3]
   1bfda:	b338      	cbz	r0, 1c02c <interface_socket_fcntl+0x60>
   1bfdc:	2901      	cmp	r1, #1
   1bfde:	d11d      	bne.n	1c01c <interface_socket_fcntl+0x50>
   1bfe0:	f012 0001 	ands.w	r0, r2, #1
   1bfe4:	58e2      	ldr	r2, [r4, r3]
   1bfe6:	d004      	beq.n	1bff2 <interface_socket_fcntl+0x26>
   1bfe8:	2000      	movs	r0, #0
   1bfea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1bfee:	50e2      	str	r2, [r4, r3]
   1bff0:	bd10      	pop	{r4, pc}
   1bff2:	0092      	lsls	r2, r2, #2
   1bff4:	d407      	bmi.n	1c006 <interface_socket_fcntl+0x3a>
   1bff6:	58e2      	ldr	r2, [r4, r3]
   1bff8:	b292      	uxth	r2, r2
   1bffa:	2a0a      	cmp	r2, #10
   1bffc:	d003      	beq.n	1c006 <interface_socket_fcntl+0x3a>
   1bffe:	58e2      	ldr	r2, [r4, r3]
   1c000:	b292      	uxth	r2, r2
   1c002:	2a0b      	cmp	r2, #11
   1c004:	d105      	bne.n	1c012 <interface_socket_fcntl+0x46>
   1c006:	200b      	movs	r0, #11
   1c008:	f007 fd11 	bl	23a2e <nrf_modem_os_errno_set>
   1c00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c010:	e7ee      	b.n	1bff0 <interface_socket_fcntl+0x24>
   1c012:	58e2      	ldr	r2, [r4, r3]
   1c014:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   1c018:	50e2      	str	r2, [r4, r3]
   1c01a:	e7e9      	b.n	1bff0 <interface_socket_fcntl+0x24>
   1c01c:	2902      	cmp	r1, #2
   1c01e:	d103      	bne.n	1c028 <interface_socket_fcntl+0x5c>
   1c020:	58e0      	ldr	r0, [r4, r3]
   1c022:	f3c0 7000 	ubfx	r0, r0, #28, #1
   1c026:	e7e3      	b.n	1bff0 <interface_socket_fcntl+0x24>
   1c028:	2016      	movs	r0, #22
   1c02a:	e7ed      	b.n	1c008 <interface_socket_fcntl+0x3c>
   1c02c:	2009      	movs	r0, #9
   1c02e:	e7eb      	b.n	1c008 <interface_socket_fcntl+0x3c>
   1c030:	2000f688 	.word	0x2000f688

0001c034 <rpc_error_to_nrf_errno>:
   1c034:	286a      	cmp	r0, #106	; 0x6a
   1c036:	bf9a      	itte	ls
   1c038:	4b01      	ldrls	r3, [pc, #4]	; (1c040 <rpc_error_to_nrf_errno+0xc>)
   1c03a:	5c18      	ldrbls	r0, [r3, r0]
   1c03c:	205f      	movhi	r0, #95	; 0x5f
   1c03e:	4770      	bx	lr
   1c040:	0002a2e2 	.word	0x0002a2e2

0001c044 <rpc_error_to_nrf_gai_errno>:
   1c044:	2805      	cmp	r0, #5
   1c046:	d013      	beq.n	1c070 <rpc_error_to_nrf_gai_errno+0x2c>
   1c048:	d807      	bhi.n	1c05a <rpc_error_to_nrf_gai_errno+0x16>
   1c04a:	b170      	cbz	r0, 1c06a <rpc_error_to_nrf_gai_errno+0x26>
   1c04c:	4b0b      	ldr	r3, [pc, #44]	; (1c07c <rpc_error_to_nrf_gai_errno+0x38>)
   1c04e:	5c1b      	ldrb	r3, [r3, r0]
   1c050:	4a0b      	ldr	r2, [pc, #44]	; (1c080 <rpc_error_to_nrf_gai_errno+0x3c>)
   1c052:	f240 1015 	movw	r0, #277	; 0x115
   1c056:	6013      	str	r3, [r2, #0]
   1c058:	4770      	bx	lr
   1c05a:	2806      	cmp	r0, #6
   1c05c:	d00b      	beq.n	1c076 <rpc_error_to_nrf_gai_errno+0x32>
   1c05e:	280d      	cmp	r0, #13
   1c060:	d009      	beq.n	1c076 <rpc_error_to_nrf_gai_errno+0x32>
   1c062:	286a      	cmp	r0, #106	; 0x6a
   1c064:	d9f2      	bls.n	1c04c <rpc_error_to_nrf_gai_errno+0x8>
   1c066:	235f      	movs	r3, #95	; 0x5f
   1c068:	e7f2      	b.n	1c050 <rpc_error_to_nrf_gai_errno+0xc>
   1c06a:	4b05      	ldr	r3, [pc, #20]	; (1c080 <rpc_error_to_nrf_gai_errno+0x3c>)
   1c06c:	6018      	str	r0, [r3, #0]
   1c06e:	4770      	bx	lr
   1c070:	f44f 708a 	mov.w	r0, #276	; 0x114
   1c074:	4770      	bx	lr
   1c076:	f240 1011 	movw	r0, #273	; 0x111
   1c07a:	4770      	bx	lr
   1c07c:	0002a2e2 	.word	0x0002a2e2
   1c080:	2000f7f0 	.word	0x2000f7f0

0001c084 <ip_interface_init>:
   1c084:	b510      	push	{r4, lr}
   1c086:	2400      	movs	r4, #0
   1c088:	4b06      	ldr	r3, [pc, #24]	; (1c0a4 <ip_interface_init+0x20>)
   1c08a:	2220      	movs	r2, #32
   1c08c:	601c      	str	r4, [r3, #0]
   1c08e:	4b06      	ldr	r3, [pc, #24]	; (1c0a8 <ip_interface_init+0x24>)
   1c090:	4621      	mov	r1, r4
   1c092:	4806      	ldr	r0, [pc, #24]	; (1c0ac <ip_interface_init+0x28>)
   1c094:	601c      	str	r4, [r3, #0]
   1c096:	f00a fbf4 	bl	26882 <memset>
   1c09a:	2201      	movs	r2, #1
   1c09c:	4b04      	ldr	r3, [pc, #16]	; (1c0b0 <ip_interface_init+0x2c>)
   1c09e:	4620      	mov	r0, r4
   1c0a0:	701a      	strb	r2, [r3, #0]
   1c0a2:	bd10      	pop	{r4, pc}
   1c0a4:	2000f7fc 	.word	0x2000f7fc
   1c0a8:	2000f7f8 	.word	0x2000f7f8
   1c0ac:	2000f800 	.word	0x2000f800
   1c0b0:	2000f913 	.word	0x2000f913

0001c0b4 <ip_interface_open>:
   1c0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c0b6:	2302      	movs	r3, #2
   1c0b8:	460d      	mov	r5, r1
   1c0ba:	4611      	mov	r1, r2
   1c0bc:	2200      	movs	r2, #0
   1c0be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c0c2:	b085      	sub	sp, #20
   1c0c4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c0c8:	4b35      	ldr	r3, [pc, #212]	; (1c1a0 <ip_interface_open+0xec>)
   1c0ca:	4606      	mov	r6, r0
   1c0cc:	781b      	ldrb	r3, [r3, #0]
   1c0ce:	9403      	str	r4, [sp, #12]
   1c0d0:	b92b      	cbnz	r3, 1c0de <ip_interface_open+0x2a>
   1c0d2:	2075      	movs	r0, #117	; 0x75
   1c0d4:	f007 fcab 	bl	23a2e <nrf_modem_os_errno_set>
   1c0d8:	4620      	mov	r0, r4
   1c0da:	b005      	add	sp, #20
   1c0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c0de:	f020 0308 	bic.w	r3, r0, #8
   1c0e2:	2b02      	cmp	r3, #2
   1c0e4:	d003      	beq.n	1c0ee <ip_interface_open+0x3a>
   1c0e6:	2805      	cmp	r0, #5
   1c0e8:	d001      	beq.n	1c0ee <ip_interface_open+0x3a>
   1c0ea:	206a      	movs	r0, #106	; 0x6a
   1c0ec:	e7f2      	b.n	1c0d4 <ip_interface_open+0x20>
   1c0ee:	1e6b      	subs	r3, r5, #1
   1c0f0:	2b02      	cmp	r3, #2
   1c0f2:	d814      	bhi.n	1c11e <ip_interface_open+0x6a>
   1c0f4:	4628      	mov	r0, r5
   1c0f6:	aa02      	add	r2, sp, #8
   1c0f8:	f008 feaa 	bl	24e50 <protocol_verify>
   1c0fc:	4607      	mov	r7, r0
   1c0fe:	2800      	cmp	r0, #0
   1c100:	d14b      	bne.n	1c19a <ip_interface_open+0xe6>
   1c102:	4629      	mov	r1, r5
   1c104:	4a27      	ldr	r2, [pc, #156]	; (1c1a4 <ip_interface_open+0xf0>)
   1c106:	a801      	add	r0, sp, #4
   1c108:	f7ff fe08 	bl	1bd1c <interface_socket_allocate>
   1c10c:	9b01      	ldr	r3, [sp, #4]
   1c10e:	4604      	mov	r4, r0
   1c110:	b95b      	cbnz	r3, 1c12a <ip_interface_open+0x76>
   1c112:	2669      	movs	r6, #105	; 0x69
   1c114:	4620      	mov	r0, r4
   1c116:	f7ff fe27 	bl	1bd68 <interface_socket_free>
   1c11a:	4630      	mov	r0, r6
   1c11c:	e000      	b.n	1c120 <ip_interface_open+0x6c>
   1c11e:	2016      	movs	r0, #22
   1c120:	f007 fc85 	bl	23a2e <nrf_modem_os_errno_set>
   1c124:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c128:	e7d6      	b.n	1c0d8 <ip_interface_open+0x24>
   1c12a:	9a02      	ldr	r2, [sp, #8]
   1c12c:	e9c3 6503 	strd	r6, r5, [r3, #12]
   1c130:	615a      	str	r2, [r3, #20]
   1c132:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c136:	f247 0201 	movw	r2, #28673	; 0x7001
   1c13a:	463b      	mov	r3, r7
   1c13c:	f008 fed0 	bl	24ee0 <ip_interface_request_create>
   1c140:	4602      	mov	r2, r0
   1c142:	2800      	cmp	r0, #0
   1c144:	d0e5      	beq.n	1c112 <ip_interface_open+0x5e>
   1c146:	6883      	ldr	r3, [r0, #8]
   1c148:	3e02      	subs	r6, #2
   1c14a:	2e08      	cmp	r6, #8
   1c14c:	f103 030c 	add.w	r3, r3, #12
   1c150:	6083      	str	r3, [r0, #8]
   1c152:	bf98      	it	ls
   1c154:	4b14      	ldrls	r3, [pc, #80]	; (1c1a8 <ip_interface_open+0xf4>)
   1c156:	f247 0101 	movw	r1, #28673	; 0x7001
   1c15a:	bf98      	it	ls
   1c15c:	579f      	ldrsbls	r7, [r3, r6]
   1c15e:	9b02      	ldr	r3, [sp, #8]
   1c160:	6147      	str	r7, [r0, #20]
   1c162:	61c3      	str	r3, [r0, #28]
   1c164:	6185      	str	r5, [r0, #24]
   1c166:	2004      	movs	r0, #4
   1c168:	f008 fd0c 	bl	24b84 <rpc_client_request_send>
   1c16c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c170:	2102      	movs	r1, #2
   1c172:	4620      	mov	r0, r4
   1c174:	ab03      	add	r3, sp, #12
   1c176:	f008 fec6 	bl	24f06 <ip_interface_wait>
   1c17a:	4606      	mov	r6, r0
   1c17c:	2800      	cmp	r0, #0
   1c17e:	d1c9      	bne.n	1c114 <ip_interface_open+0x60>
   1c180:	3d02      	subs	r5, #2
   1c182:	2d01      	cmp	r5, #1
   1c184:	d8a8      	bhi.n	1c0d8 <ip_interface_open+0x24>
   1c186:	9b01      	ldr	r3, [sp, #4]
   1c188:	681a      	ldr	r2, [r3, #0]
   1c18a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1c18e:	601a      	str	r2, [r3, #0]
   1c190:	681a      	ldr	r2, [r3, #0]
   1c192:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1c196:	601a      	str	r2, [r3, #0]
   1c198:	e79e      	b.n	1c0d8 <ip_interface_open+0x24>
   1c19a:	4604      	mov	r4, r0
   1c19c:	e79c      	b.n	1c0d8 <ip_interface_open+0x24>
   1c19e:	bf00      	nop
   1c1a0:	2000f913 	.word	0x2000f913
   1c1a4:	00024e39 	.word	0x00024e39
   1c1a8:	0002a2d4 	.word	0x0002a2d4

0001c1ac <ip_interface_close>:
   1c1ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c1b2:	4605      	mov	r5, r0
   1c1b4:	9301      	str	r3, [sp, #4]
   1c1b6:	f7ff fe77 	bl	1bea8 <interface_socket_from_handle_get>
   1c1ba:	4604      	mov	r4, r0
   1c1bc:	b388      	cbz	r0, 1c222 <ip_interface_close+0x76>
   1c1be:	f247 0209 	movw	r2, #28681	; 0x7009
   1c1c2:	6981      	ldr	r1, [r0, #24]
   1c1c4:	2300      	movs	r3, #0
   1c1c6:	4628      	mov	r0, r5
   1c1c8:	f008 fe8a 	bl	24ee0 <ip_interface_request_create>
   1c1cc:	4602      	mov	r2, r0
   1c1ce:	b370      	cbz	r0, 1c22e <ip_interface_close+0x82>
   1c1d0:	6823      	ldr	r3, [r4, #0]
   1c1d2:	f247 0109 	movw	r1, #28681	; 0x7009
   1c1d6:	0c1b      	lsrs	r3, r3, #16
   1c1d8:	041b      	lsls	r3, r3, #16
   1c1da:	f043 030d 	orr.w	r3, r3, #13
   1c1de:	6023      	str	r3, [r4, #0]
   1c1e0:	6823      	ldr	r3, [r4, #0]
   1c1e2:	2004      	movs	r0, #4
   1c1e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1c1e8:	6023      	str	r3, [r4, #0]
   1c1ea:	6823      	ldr	r3, [r4, #0]
   1c1ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1c1f0:	6023      	str	r3, [r4, #0]
   1c1f2:	4c10      	ldr	r4, [pc, #64]	; (1c234 <ip_interface_close+0x88>)
   1c1f4:	f008 fcc6 	bl	24b84 <rpc_client_request_send>
   1c1f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c1fc:	210e      	movs	r1, #14
   1c1fe:	4628      	mov	r0, r5
   1c200:	ab01      	add	r3, sp, #4
   1c202:	f008 fe80 	bl	24f06 <ip_interface_wait>
   1c206:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1c20a:	b120      	cbz	r0, 1c216 <ip_interface_close+0x6a>
   1c20c:	f008 fcc1 	bl	24b92 <rpc_client_message_free>
   1c210:	2300      	movs	r3, #0
   1c212:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1c216:	4628      	mov	r0, r5
   1c218:	f7ff fda6 	bl	1bd68 <interface_socket_free>
   1c21c:	2000      	movs	r0, #0
   1c21e:	b003      	add	sp, #12
   1c220:	bd30      	pop	{r4, r5, pc}
   1c222:	2009      	movs	r0, #9
   1c224:	f007 fc03 	bl	23a2e <nrf_modem_os_errno_set>
   1c228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c22c:	e7f7      	b.n	1c21e <ip_interface_close+0x72>
   1c22e:	200c      	movs	r0, #12
   1c230:	e7f8      	b.n	1c224 <ip_interface_close+0x78>
   1c232:	bf00      	nop
   1c234:	2000f800 	.word	0x2000f800

0001c238 <ip_interface_sendto>:
   1c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c23c:	2700      	movs	r7, #0
   1c23e:	469a      	mov	sl, r3
   1c240:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c244:	2364      	movs	r3, #100	; 0x64
   1c246:	b089      	sub	sp, #36	; 0x24
   1c248:	4681      	mov	r9, r0
   1c24a:	4615      	mov	r5, r2
   1c24c:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   1c250:	9102      	str	r1, [sp, #8]
   1c252:	f8ad 7010 	strh.w	r7, [sp, #16]
   1c256:	f8ad 7012 	strh.w	r7, [sp, #18]
   1c25a:	9605      	str	r6, [sp, #20]
   1c25c:	9307      	str	r3, [sp, #28]
   1c25e:	f7ff fe23 	bl	1bea8 <interface_socket_from_handle_get>
   1c262:	4604      	mov	r4, r0
   1c264:	b930      	cbnz	r0, 1c274 <ip_interface_sendto+0x3c>
   1c266:	2009      	movs	r0, #9
   1c268:	f007 fbe1 	bl	23a2e <nrf_modem_os_errno_set>
   1c26c:	4630      	mov	r0, r6
   1c26e:	b009      	add	sp, #36	; 0x24
   1c270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c274:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1c278:	dd01      	ble.n	1c27e <ip_interface_sendto+0x46>
   1c27a:	207a      	movs	r0, #122	; 0x7a
   1c27c:	e7f4      	b.n	1c268 <ip_interface_sendto+0x30>
   1c27e:	f1ba 0f00 	cmp.w	sl, #0
   1c282:	d004      	beq.n	1c28e <ip_interface_sendto+0x56>
   1c284:	f1ba 0f02 	cmp.w	sl, #2
   1c288:	d006      	beq.n	1c298 <ip_interface_sendto+0x60>
   1c28a:	205f      	movs	r0, #95	; 0x5f
   1c28c:	e7ec      	b.n	1c268 <ip_interface_sendto+0x30>
   1c28e:	6807      	ldr	r7, [r0, #0]
   1c290:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   1c294:	f3c7 7700 	ubfx	r7, r7, #28, #1
   1c298:	2d00      	cmp	r5, #0
   1c29a:	dd07      	ble.n	1c2ac <ip_interface_sendto+0x74>
   1c29c:	9b02      	ldr	r3, [sp, #8]
   1c29e:	b92b      	cbnz	r3, 1c2ac <ip_interface_sendto+0x74>
   1c2a0:	200e      	movs	r0, #14
   1c2a2:	f007 fbc4 	bl	23a2e <nrf_modem_os_errno_set>
   1c2a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c2aa:	e7df      	b.n	1c26c <ip_interface_sendto+0x34>
   1c2ac:	6923      	ldr	r3, [r4, #16]
   1c2ae:	f1bb 0f00 	cmp.w	fp, #0
   1c2b2:	d012      	beq.n	1c2da <ip_interface_sendto+0xa2>
   1c2b4:	2b01      	cmp	r3, #1
   1c2b6:	d101      	bne.n	1c2bc <ip_interface_sendto+0x84>
   1c2b8:	207f      	movs	r0, #127	; 0x7f
   1c2ba:	e7f2      	b.n	1c2a2 <ip_interface_sendto+0x6a>
   1c2bc:	68e2      	ldr	r2, [r4, #12]
   1c2be:	f8db 3004 	ldr.w	r3, [fp, #4]
   1c2c2:	429a      	cmp	r2, r3
   1c2c4:	d001      	beq.n	1c2ca <ip_interface_sendto+0x92>
   1c2c6:	206a      	movs	r0, #106	; 0x6a
   1c2c8:	e7eb      	b.n	1c2a2 <ip_interface_sendto+0x6a>
   1c2ca:	f89b 3000 	ldrb.w	r3, [fp]
   1c2ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1c2d0:	4293      	cmp	r3, r2
   1c2d2:	f000 80c5 	beq.w	1c460 <ip_interface_sendto+0x228>
   1c2d6:	2016      	movs	r0, #22
   1c2d8:	e7e3      	b.n	1c2a2 <ip_interface_sendto+0x6a>
   1c2da:	2b02      	cmp	r3, #2
   1c2dc:	d10f      	bne.n	1c2fe <ip_interface_sendto+0xc6>
   1c2de:	6963      	ldr	r3, [r4, #20]
   1c2e0:	2b02      	cmp	r3, #2
   1c2e2:	d103      	bne.n	1c2ec <ip_interface_sendto+0xb4>
   1c2e4:	6823      	ldr	r3, [r4, #0]
   1c2e6:	b29b      	uxth	r3, r3
   1c2e8:	2b05      	cmp	r3, #5
   1c2ea:	e005      	b.n	1c2f8 <ip_interface_sendto+0xc0>
   1c2ec:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1c2f0:	d10d      	bne.n	1c30e <ip_interface_sendto+0xd6>
   1c2f2:	6823      	ldr	r3, [r4, #0]
   1c2f4:	b29b      	uxth	r3, r3
   1c2f6:	2b0c      	cmp	r3, #12
   1c2f8:	d009      	beq.n	1c30e <ip_interface_sendto+0xd6>
   1c2fa:	2080      	movs	r0, #128	; 0x80
   1c2fc:	e7d1      	b.n	1c2a2 <ip_interface_sendto+0x6a>
   1c2fe:	2b01      	cmp	r3, #1
   1c300:	d105      	bne.n	1c30e <ip_interface_sendto+0xd6>
   1c302:	6963      	ldr	r3, [r4, #20]
   1c304:	2b01      	cmp	r3, #1
   1c306:	d0ed      	beq.n	1c2e4 <ip_interface_sendto+0xac>
   1c308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1c30c:	e7f0      	b.n	1c2f0 <ip_interface_sendto+0xb8>
   1c30e:	f247 0806 	movw	r8, #28678	; 0x7006
   1c312:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c314:	2b00      	cmp	r3, #0
   1c316:	bf08      	it	eq
   1c318:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1c31c:	9306      	str	r3, [sp, #24]
   1c31e:	ea48 4309 	orr.w	r3, r8, r9, lsl #16
   1c322:	9303      	str	r3, [sp, #12]
   1c324:	6823      	ldr	r3, [r4, #0]
   1c326:	0319      	lsls	r1, r3, #12
   1c328:	d501      	bpl.n	1c32e <ip_interface_sendto+0xf6>
   1c32a:	68a0      	ldr	r0, [r4, #8]
   1c32c:	e7b9      	b.n	1c2a2 <ip_interface_sendto+0x6a>
   1c32e:	6820      	ldr	r0, [r4, #0]
   1c330:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   1c334:	d107      	bne.n	1c346 <ip_interface_sendto+0x10e>
   1c336:	b90f      	cbnz	r7, 1c33c <ip_interface_sendto+0x104>
   1c338:	200b      	movs	r0, #11
   1c33a:	e7b2      	b.n	1c2a2 <ip_interface_sendto+0x6a>
   1c33c:	a906      	add	r1, sp, #24
   1c33e:	f007 fade 	bl	238fe <nrf_modem_os_timedwait>
   1c342:	2874      	cmp	r0, #116	; 0x74
   1c344:	d0f8      	beq.n	1c338 <ip_interface_sendto+0x100>
   1c346:	6823      	ldr	r3, [r4, #0]
   1c348:	039a      	lsls	r2, r3, #14
   1c34a:	d5eb      	bpl.n	1c324 <ip_interface_sendto+0xec>
   1c34c:	4628      	mov	r0, r5
   1c34e:	f008 fc13 	bl	24b78 <rpc_client_request_alloc>
   1c352:	4606      	mov	r6, r0
   1c354:	2800      	cmp	r0, #0
   1c356:	d133      	bne.n	1c3c0 <ip_interface_sendto+0x188>
   1c358:	b927      	cbnz	r7, 1c364 <ip_interface_sendto+0x12c>
   1c35a:	a907      	add	r1, sp, #28
   1c35c:	2000      	movs	r0, #0
   1c35e:	f007 face 	bl	238fe <nrf_modem_os_timedwait>
   1c362:	e7e9      	b.n	1c338 <ip_interface_sendto+0x100>
   1c364:	a906      	add	r1, sp, #24
   1c366:	f007 faca 	bl	238fe <nrf_modem_os_timedwait>
   1c36a:	2800      	cmp	r0, #0
   1c36c:	d0ee      	beq.n	1c34c <ip_interface_sendto+0x114>
   1c36e:	e7e3      	b.n	1c338 <ip_interface_sendto+0x100>
   1c370:	a905      	add	r1, sp, #20
   1c372:	f007 fac4 	bl	238fe <nrf_modem_os_timedwait>
   1c376:	e05b      	b.n	1c430 <ip_interface_sendto+0x1f8>
   1c378:	f008 fc0b 	bl	24b92 <rpc_client_message_free>
   1c37c:	2300      	movs	r3, #0
   1c37e:	4a3a      	ldr	r2, [pc, #232]	; (1c468 <ip_interface_sendto+0x230>)
   1c380:	2e01      	cmp	r6, #1
   1c382:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   1c386:	d001      	beq.n	1c38c <ip_interface_sendto+0x154>
   1c388:	2e12      	cmp	r6, #18
   1c38a:	d10e      	bne.n	1c3aa <ip_interface_sendto+0x172>
   1c38c:	4b37      	ldr	r3, [pc, #220]	; (1c46c <ip_interface_sendto+0x234>)
   1c38e:	781b      	ldrb	r3, [r3, #0]
   1c390:	b147      	cbz	r7, 1c3a4 <ip_interface_sendto+0x16c>
   1c392:	2b00      	cmp	r3, #0
   1c394:	d1c6      	bne.n	1c324 <ip_interface_sendto+0xec>
   1c396:	2000      	movs	r0, #0
   1c398:	a906      	add	r1, sp, #24
   1c39a:	f007 fab0 	bl	238fe <nrf_modem_os_timedwait>
   1c39e:	2800      	cmp	r0, #0
   1c3a0:	d0c0      	beq.n	1c324 <ip_interface_sendto+0xec>
   1c3a2:	e7c9      	b.n	1c338 <ip_interface_sendto+0x100>
   1c3a4:	2b00      	cmp	r3, #0
   1c3a6:	d1c7      	bne.n	1c338 <ip_interface_sendto+0x100>
   1c3a8:	e7d7      	b.n	1c35a <ip_interface_sendto+0x122>
   1c3aa:	2e03      	cmp	r6, #3
   1c3ac:	d102      	bne.n	1c3b4 <ip_interface_sendto+0x17c>
   1c3ae:	2f00      	cmp	r7, #0
   1c3b0:	d1f1      	bne.n	1c396 <ip_interface_sendto+0x15e>
   1c3b2:	e7d2      	b.n	1c35a <ip_interface_sendto+0x122>
   1c3b4:	2e6a      	cmp	r6, #106	; 0x6a
   1c3b6:	bf96      	itet	ls
   1c3b8:	4b2d      	ldrls	r3, [pc, #180]	; (1c470 <ip_interface_sendto+0x238>)
   1c3ba:	205f      	movhi	r0, #95	; 0x5f
   1c3bc:	5d98      	ldrbls	r0, [r3, r6]
   1c3be:	e770      	b.n	1c2a2 <ip_interface_sendto+0x6a>
   1c3c0:	230c      	movs	r3, #12
   1c3c2:	2200      	movs	r2, #0
   1c3c4:	7203      	strb	r3, [r0, #8]
   1c3c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c3c8:	7242      	strb	r2, [r0, #9]
   1c3ca:	7282      	strb	r2, [r0, #10]
   1c3cc:	72c2      	strb	r2, [r0, #11]
   1c3ce:	f8c0 a014 	str.w	sl, [r0, #20]
   1c3d2:	b11b      	cbz	r3, 1c3dc <ip_interface_sendto+0x1a4>
   1c3d4:	ea4a 0303 	orr.w	r3, sl, r3
   1c3d8:	6173      	str	r3, [r6, #20]
   1c3da:	62a2      	str	r2, [r4, #40]	; 0x28
   1c3dc:	f1bb 0f00 	cmp.w	fp, #0
   1c3e0:	d015      	beq.n	1c40e <ip_interface_sendto+0x1d6>
   1c3e2:	f106 031c 	add.w	r3, r6, #28
   1c3e6:	9301      	str	r3, [sp, #4]
   1c3e8:	f10d 0312 	add.w	r3, sp, #18
   1c3ec:	9300      	str	r3, [sp, #0]
   1c3ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1c3f0:	ab04      	add	r3, sp, #16
   1c3f2:	4659      	mov	r1, fp
   1c3f4:	68e0      	ldr	r0, [r4, #12]
   1c3f6:	f008 fd49 	bl	24e8c <ip_addr_parse>
   1c3fa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1c3fe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1c402:	8332      	strh	r2, [r6, #24]
   1c404:	68b2      	ldr	r2, [r6, #8]
   1c406:	8373      	strh	r3, [r6, #26]
   1c408:	3304      	adds	r3, #4
   1c40a:	4413      	add	r3, r2
   1c40c:	60b3      	str	r3, [r6, #8]
   1c40e:	69a3      	ldr	r3, [r4, #24]
   1c410:	6075      	str	r5, [r6, #4]
   1c412:	6133      	str	r3, [r6, #16]
   1c414:	9b03      	ldr	r3, [sp, #12]
   1c416:	60f3      	str	r3, [r6, #12]
   1c418:	9b02      	ldr	r3, [sp, #8]
   1c41a:	b123      	cbz	r3, 1c426 <ip_interface_sendto+0x1ee>
   1c41c:	462a      	mov	r2, r5
   1c41e:	4619      	mov	r1, r3
   1c420:	6830      	ldr	r0, [r6, #0]
   1c422:	f00a fa0e 	bl	26842 <memcpy>
   1c426:	4632      	mov	r2, r6
   1c428:	4641      	mov	r1, r8
   1c42a:	2004      	movs	r0, #4
   1c42c:	f008 fbaa 	bl	24b84 <rpc_client_request_send>
   1c430:	4b0d      	ldr	r3, [pc, #52]	; (1c468 <ip_interface_sendto+0x230>)
   1c432:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   1c436:	2800      	cmp	r0, #0
   1c438:	d09a      	beq.n	1c370 <ip_interface_sendto+0x138>
   1c43a:	6946      	ldr	r6, [r0, #20]
   1c43c:	2e00      	cmp	r6, #0
   1c43e:	d19b      	bne.n	1c378 <ip_interface_sendto+0x140>
   1c440:	6823      	ldr	r3, [r4, #0]
   1c442:	011b      	lsls	r3, r3, #4
   1c444:	bf49      	itett	mi
   1c446:	6823      	ldrmi	r3, [r4, #0]
   1c448:	6985      	ldrpl	r5, [r0, #24]
   1c44a:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   1c44e:	6023      	strmi	r3, [r4, #0]
   1c450:	f008 fb9f 	bl	24b92 <rpc_client_message_free>
   1c454:	2300      	movs	r3, #0
   1c456:	4a04      	ldr	r2, [pc, #16]	; (1c468 <ip_interface_sendto+0x230>)
   1c458:	462e      	mov	r6, r5
   1c45a:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   1c45e:	e705      	b.n	1c26c <ip_interface_sendto+0x34>
   1c460:	f247 0807 	movw	r8, #28679	; 0x7007
   1c464:	e755      	b.n	1c312 <ip_interface_sendto+0xda>
   1c466:	bf00      	nop
   1c468:	2000f800 	.word	0x2000f800
   1c46c:	2000f912 	.word	0x2000f912
   1c470:	0002a2e2 	.word	0x0002a2e2

0001c474 <ip_interface_socketoption_get>:
   1c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c478:	461f      	mov	r7, r3
   1c47a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c47e:	b085      	sub	sp, #20
   1c480:	9303      	str	r3, [sp, #12]
   1c482:	680b      	ldr	r3, [r1, #0]
   1c484:	4606      	mov	r6, r0
   1c486:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   1c48a:	025d      	lsls	r5, r3, #9
   1c48c:	460c      	mov	r4, r1
   1c48e:	4691      	mov	r9, r2
   1c490:	d461      	bmi.n	1c556 <ip_interface_socketoption_get+0xe2>
   1c492:	680b      	ldr	r3, [r1, #0]
   1c494:	0219      	lsls	r1, r3, #8
   1c496:	d45e      	bmi.n	1c556 <ip_interface_socketoption_get+0xe2>
   1c498:	6823      	ldr	r3, [r4, #0]
   1c49a:	01da      	lsls	r2, r3, #7
   1c49c:	d45b      	bmi.n	1c556 <ip_interface_socketoption_get+0xe2>
   1c49e:	6823      	ldr	r3, [r4, #0]
   1c4a0:	019b      	lsls	r3, r3, #6
   1c4a2:	d458      	bmi.n	1c556 <ip_interface_socketoption_get+0xe2>
   1c4a4:	6823      	ldr	r3, [r4, #0]
   1c4a6:	f247 0204 	movw	r2, #28676	; 0x7004
   1c4aa:	9301      	str	r3, [sp, #4]
   1c4ac:	6823      	ldr	r3, [r4, #0]
   1c4ae:	69a1      	ldr	r1, [r4, #24]
   1c4b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c4b4:	6023      	str	r3, [r4, #0]
   1c4b6:	f8d8 3000 	ldr.w	r3, [r8]
   1c4ba:	f008 fd11 	bl	24ee0 <ip_interface_request_create>
   1c4be:	4605      	mov	r5, r0
   1c4c0:	2800      	cmp	r0, #0
   1c4c2:	d045      	beq.n	1c550 <ip_interface_socketoption_get+0xdc>
   1c4c4:	6883      	ldr	r3, [r0, #8]
   1c4c6:	4602      	mov	r2, r0
   1c4c8:	3308      	adds	r3, #8
   1c4ca:	6083      	str	r3, [r0, #8]
   1c4cc:	f8c0 9014 	str.w	r9, [r0, #20]
   1c4d0:	f247 0104 	movw	r1, #28676	; 0x7004
   1c4d4:	f8d0 9000 	ldr.w	r9, [r0]
   1c4d8:	6187      	str	r7, [r0, #24]
   1c4da:	2004      	movs	r0, #4
   1c4dc:	f008 fb52 	bl	24b84 <rpc_client_request_send>
   1c4e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1c4e4:	4630      	mov	r0, r6
   1c4e6:	4611      	mov	r1, r2
   1c4e8:	ab03      	add	r3, sp, #12
   1c4ea:	f008 fd0c 	bl	24f06 <ip_interface_wait>
   1c4ee:	4683      	mov	fp, r0
   1c4f0:	b9b8      	cbnz	r0, 1c522 <ip_interface_socketoption_get+0xae>
   1c4f2:	4f1a      	ldr	r7, [pc, #104]	; (1c55c <ip_interface_socketoption_get+0xe8>)
   1c4f4:	f8d8 0000 	ldr.w	r0, [r8]
   1c4f8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   1c4fc:	b1e9      	cbz	r1, 1c53a <ip_interface_socketoption_get+0xc6>
   1c4fe:	684a      	ldr	r2, [r1, #4]
   1c500:	4282      	cmp	r2, r0
   1c502:	bf28      	it	cs
   1c504:	4602      	movcs	r2, r0
   1c506:	f8c8 2000 	str.w	r2, [r8]
   1c50a:	6809      	ldr	r1, [r1, #0]
   1c50c:	b191      	cbz	r1, 1c534 <ip_interface_socketoption_get+0xc0>
   1c50e:	4650      	mov	r0, sl
   1c510:	f00a f997 	bl	26842 <memcpy>
   1c514:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   1c518:	f008 fb3b 	bl	24b92 <rpc_client_message_free>
   1c51c:	2200      	movs	r2, #0
   1c51e:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
   1c522:	4648      	mov	r0, r9
   1c524:	f008 fb38 	bl	24b98 <rpc_client_data_free>
   1c528:	9b01      	ldr	r3, [sp, #4]
   1c52a:	6023      	str	r3, [r4, #0]
   1c52c:	4658      	mov	r0, fp
   1c52e:	b005      	add	sp, #20
   1c530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c534:	f04f 0b16 	mov.w	fp, #22
   1c538:	e7ec      	b.n	1c514 <ip_interface_socketoption_get+0xa0>
   1c53a:	686a      	ldr	r2, [r5, #4]
   1c53c:	4649      	mov	r1, r9
   1c53e:	4282      	cmp	r2, r0
   1c540:	bf28      	it	cs
   1c542:	4602      	movcs	r2, r0
   1c544:	4650      	mov	r0, sl
   1c546:	f8c8 2000 	str.w	r2, [r8]
   1c54a:	f00a f97a 	bl	26842 <memcpy>
   1c54e:	e7e8      	b.n	1c522 <ip_interface_socketoption_get+0xae>
   1c550:	f04f 0b0c 	mov.w	fp, #12
   1c554:	e7e8      	b.n	1c528 <ip_interface_socketoption_get+0xb4>
   1c556:	f04f 0b0b 	mov.w	fp, #11
   1c55a:	e7e7      	b.n	1c52c <ip_interface_socketoption_get+0xb8>
   1c55c:	2000f800 	.word	0x2000f800

0001c560 <ip_interface_bind>:
   1c560:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1c564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c568:	4607      	mov	r7, r0
   1c56a:	4690      	mov	r8, r2
   1c56c:	460e      	mov	r6, r1
   1c56e:	9303      	str	r3, [sp, #12]
   1c570:	2900      	cmp	r1, #0
   1c572:	d04d      	beq.n	1c610 <ip_interface_bind+0xb0>
   1c574:	2a00      	cmp	r2, #0
   1c576:	d04b      	beq.n	1c610 <ip_interface_bind+0xb0>
   1c578:	f7ff fc96 	bl	1bea8 <interface_socket_from_handle_get>
   1c57c:	4605      	mov	r5, r0
   1c57e:	2800      	cmp	r0, #0
   1c580:	d048      	beq.n	1c614 <ip_interface_bind+0xb4>
   1c582:	6803      	ldr	r3, [r0, #0]
   1c584:	b29b      	uxth	r3, r3
   1c586:	2b02      	cmp	r3, #2
   1c588:	d144      	bne.n	1c614 <ip_interface_bind+0xb4>
   1c58a:	6981      	ldr	r1, [r0, #24]
   1c58c:	2300      	movs	r3, #0
   1c58e:	f247 0205 	movw	r2, #28677	; 0x7005
   1c592:	4638      	mov	r0, r7
   1c594:	f008 fca4 	bl	24ee0 <ip_interface_request_create>
   1c598:	4604      	mov	r4, r0
   1c59a:	2800      	cmp	r0, #0
   1c59c:	d03c      	beq.n	1c618 <ip_interface_bind+0xb8>
   1c59e:	6883      	ldr	r3, [r0, #8]
   1c5a0:	4642      	mov	r2, r8
   1c5a2:	3304      	adds	r3, #4
   1c5a4:	6083      	str	r3, [r0, #8]
   1c5a6:	f100 0318 	add.w	r3, r0, #24
   1c5aa:	9301      	str	r3, [sp, #4]
   1c5ac:	f10d 030a 	add.w	r3, sp, #10
   1c5b0:	9300      	str	r3, [sp, #0]
   1c5b2:	4631      	mov	r1, r6
   1c5b4:	68e8      	ldr	r0, [r5, #12]
   1c5b6:	ab02      	add	r3, sp, #8
   1c5b8:	f008 fc68 	bl	24e8c <ip_addr_parse>
   1c5bc:	bb08      	cbnz	r0, 1c602 <ip_interface_bind+0xa2>
   1c5be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1c5c2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1c5c6:	82a3      	strh	r3, [r4, #20]
   1c5c8:	68a3      	ldr	r3, [r4, #8]
   1c5ca:	4e14      	ldr	r6, [pc, #80]	; (1c61c <ip_interface_bind+0xbc>)
   1c5cc:	4413      	add	r3, r2
   1c5ce:	60a3      	str	r3, [r4, #8]
   1c5d0:	682b      	ldr	r3, [r5, #0]
   1c5d2:	82e2      	strh	r2, [r4, #22]
   1c5d4:	4033      	ands	r3, r6
   1c5d6:	f043 0303 	orr.w	r3, r3, #3
   1c5da:	4622      	mov	r2, r4
   1c5dc:	f247 0105 	movw	r1, #28677	; 0x7005
   1c5e0:	2004      	movs	r0, #4
   1c5e2:	602b      	str	r3, [r5, #0]
   1c5e4:	f008 face 	bl	24b84 <rpc_client_request_send>
   1c5e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c5ec:	2104      	movs	r1, #4
   1c5ee:	4638      	mov	r0, r7
   1c5f0:	ab03      	add	r3, sp, #12
   1c5f2:	f008 fc88 	bl	24f06 <ip_interface_wait>
   1c5f6:	b140      	cbz	r0, 1c60a <ip_interface_bind+0xaa>
   1c5f8:	682b      	ldr	r3, [r5, #0]
   1c5fa:	4033      	ands	r3, r6
   1c5fc:	f043 0302 	orr.w	r3, r3, #2
   1c600:	602b      	str	r3, [r5, #0]
   1c602:	f007 fa14 	bl	23a2e <nrf_modem_os_errno_set>
   1c606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c60a:	b004      	add	sp, #16
   1c60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c610:	2016      	movs	r0, #22
   1c612:	e7f6      	b.n	1c602 <ip_interface_bind+0xa2>
   1c614:	2009      	movs	r0, #9
   1c616:	e7f4      	b.n	1c602 <ip_interface_bind+0xa2>
   1c618:	200c      	movs	r0, #12
   1c61a:	e7f2      	b.n	1c602 <ip_interface_bind+0xa2>
   1c61c:	ffff0000 	.word	0xffff0000

0001c620 <ip_interface_listen>:
   1c620:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c622:	4605      	mov	r5, r0
   1c624:	f7ff fc40 	bl	1bea8 <interface_socket_from_handle_get>
   1c628:	4604      	mov	r4, r0
   1c62a:	2800      	cmp	r0, #0
   1c62c:	d03a      	beq.n	1c6a4 <ip_interface_listen+0x84>
   1c62e:	6803      	ldr	r3, [r0, #0]
   1c630:	b29b      	uxth	r3, r3
   1c632:	2b04      	cmp	r3, #4
   1c634:	d003      	beq.n	1c63e <ip_interface_listen+0x1e>
   1c636:	6803      	ldr	r3, [r0, #0]
   1c638:	b29b      	uxth	r3, r3
   1c63a:	2b0b      	cmp	r3, #11
   1c63c:	d134      	bne.n	1c6a8 <ip_interface_listen+0x88>
   1c63e:	2100      	movs	r1, #0
   1c640:	4628      	mov	r0, r5
   1c642:	4a1c      	ldr	r2, [pc, #112]	; (1c6b4 <ip_interface_listen+0x94>)
   1c644:	f7ff fb9c 	bl	1bd80 <interface_socket_packet_handler_update>
   1c648:	4603      	mov	r3, r0
   1c64a:	bb78      	cbnz	r0, 1c6ac <ip_interface_listen+0x8c>
   1c64c:	f247 0208 	movw	r2, #28680	; 0x7008
   1c650:	4628      	mov	r0, r5
   1c652:	69a1      	ldr	r1, [r4, #24]
   1c654:	f008 fc44 	bl	24ee0 <ip_interface_request_create>
   1c658:	4602      	mov	r2, r0
   1c65a:	b348      	cbz	r0, 1c6b0 <ip_interface_listen+0x90>
   1c65c:	6883      	ldr	r3, [r0, #8]
   1c65e:	4e16      	ldr	r6, [pc, #88]	; (1c6b8 <ip_interface_listen+0x98>)
   1c660:	3304      	adds	r3, #4
   1c662:	6083      	str	r3, [r0, #8]
   1c664:	6823      	ldr	r3, [r4, #0]
   1c666:	f247 0108 	movw	r1, #28680	; 0x7008
   1c66a:	4033      	ands	r3, r6
   1c66c:	f043 0306 	orr.w	r3, r3, #6
   1c670:	2004      	movs	r0, #4
   1c672:	6023      	str	r3, [r4, #0]
   1c674:	f008 fa86 	bl	24b84 <rpc_client_request_send>
   1c678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c67c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c680:	9301      	str	r3, [sp, #4]
   1c682:	2107      	movs	r1, #7
   1c684:	4628      	mov	r0, r5
   1c686:	ab01      	add	r3, sp, #4
   1c688:	f008 fc3d 	bl	24f06 <ip_interface_wait>
   1c68c:	b140      	cbz	r0, 1c6a0 <ip_interface_listen+0x80>
   1c68e:	6823      	ldr	r3, [r4, #0]
   1c690:	4033      	ands	r3, r6
   1c692:	f043 0304 	orr.w	r3, r3, #4
   1c696:	6023      	str	r3, [r4, #0]
   1c698:	f007 f9c9 	bl	23a2e <nrf_modem_os_errno_set>
   1c69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c6a0:	b002      	add	sp, #8
   1c6a2:	bd70      	pop	{r4, r5, r6, pc}
   1c6a4:	2009      	movs	r0, #9
   1c6a6:	e7f7      	b.n	1c698 <ip_interface_listen+0x78>
   1c6a8:	2016      	movs	r0, #22
   1c6aa:	e7f5      	b.n	1c698 <ip_interface_listen+0x78>
   1c6ac:	200b      	movs	r0, #11
   1c6ae:	e7f3      	b.n	1c698 <ip_interface_listen+0x78>
   1c6b0:	200c      	movs	r0, #12
   1c6b2:	e7f1      	b.n	1c698 <ip_interface_listen+0x78>
   1c6b4:	00024e39 	.word	0x00024e39
   1c6b8:	ffff0000 	.word	0xffff0000

0001c6bc <ip_interface_accept>:
   1c6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6c0:	2500      	movs	r5, #0
   1c6c2:	4680      	mov	r8, r0
   1c6c4:	460f      	mov	r7, r1
   1c6c6:	4691      	mov	r9, r2
   1c6c8:	9500      	str	r5, [sp, #0]
   1c6ca:	f7ff fbed 	bl	1bea8 <interface_socket_from_handle_get>
   1c6ce:	4604      	mov	r4, r0
   1c6d0:	2800      	cmp	r0, #0
   1c6d2:	f000 80c7 	beq.w	1c864 <ip_interface_accept+0x1a8>
   1c6d6:	6903      	ldr	r3, [r0, #16]
   1c6d8:	2b01      	cmp	r3, #1
   1c6da:	f040 80c6 	bne.w	1c86a <ip_interface_accept+0x1ae>
   1c6de:	6803      	ldr	r3, [r0, #0]
   1c6e0:	b29b      	uxth	r3, r3
   1c6e2:	2b07      	cmp	r3, #7
   1c6e4:	f040 80c3 	bne.w	1c86e <ip_interface_accept+0x1b2>
   1c6e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c6ec:	9301      	str	r3, [sp, #4]
   1c6ee:	6803      	ldr	r3, [r0, #0]
   1c6f0:	f013 5a80 	ands.w	sl, r3, #268435456	; 0x10000000
   1c6f4:	d15c      	bne.n	1c7b0 <ip_interface_accept+0xf4>
   1c6f6:	6803      	ldr	r3, [r0, #0]
   1c6f8:	03db      	lsls	r3, r3, #15
   1c6fa:	d45d      	bmi.n	1c7b8 <ip_interface_accept+0xfc>
   1c6fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c700:	4640      	mov	r0, r8
   1c702:	4611      	mov	r1, r2
   1c704:	ab01      	add	r3, sp, #4
   1c706:	f008 fbfe 	bl	24f06 <ip_interface_wait>
   1c70a:	4606      	mov	r6, r0
   1c70c:	6825      	ldr	r5, [r4, #0]
   1c70e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c712:	d053      	beq.n	1c7bc <ip_interface_accept+0x100>
   1c714:	4668      	mov	r0, sp
   1c716:	4a58      	ldr	r2, [pc, #352]	; (1c878 <ip_interface_accept+0x1bc>)
   1c718:	6921      	ldr	r1, [r4, #16]
   1c71a:	f7ff faff 	bl	1bd1c <interface_socket_allocate>
   1c71e:	9b00      	ldr	r3, [sp, #0]
   1c720:	4605      	mov	r5, r0
   1c722:	2b00      	cmp	r3, #0
   1c724:	f000 80a5 	beq.w	1c872 <ip_interface_accept+0x1b6>
   1c728:	6962      	ldr	r2, [r4, #20]
   1c72a:	4640      	mov	r0, r8
   1c72c:	615a      	str	r2, [r3, #20]
   1c72e:	68e2      	ldr	r2, [r4, #12]
   1c730:	69a1      	ldr	r1, [r4, #24]
   1c732:	60da      	str	r2, [r3, #12]
   1c734:	6922      	ldr	r2, [r4, #16]
   1c736:	611a      	str	r2, [r3, #16]
   1c738:	f247 020c 	movw	r2, #28684	; 0x700c
   1c73c:	2300      	movs	r3, #0
   1c73e:	f008 fbcf 	bl	24ee0 <ip_interface_request_create>
   1c742:	4602      	mov	r2, r0
   1c744:	2800      	cmp	r0, #0
   1c746:	f000 8094 	beq.w	1c872 <ip_interface_accept+0x1b6>
   1c74a:	6823      	ldr	r3, [r4, #0]
   1c74c:	f8df b130 	ldr.w	fp, [pc, #304]	; 1c880 <ip_interface_accept+0x1c4>
   1c750:	f247 010c 	movw	r1, #28684	; 0x700c
   1c754:	ea03 030b 	and.w	r3, r3, fp
   1c758:	f043 0308 	orr.w	r3, r3, #8
   1c75c:	2004      	movs	r0, #4
   1c75e:	6023      	str	r3, [r4, #0]
   1c760:	f008 fa10 	bl	24b84 <rpc_client_request_send>
   1c764:	6823      	ldr	r3, [r4, #0]
   1c766:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c76a:	ea23 030a 	bic.w	r3, r3, sl
   1c76e:	6023      	str	r3, [r4, #0]
   1c770:	2109      	movs	r1, #9
   1c772:	ab01      	add	r3, sp, #4
   1c774:	4640      	mov	r0, r8
   1c776:	f008 fbc6 	bl	24f06 <ip_interface_wait>
   1c77a:	6823      	ldr	r3, [r4, #0]
   1c77c:	4606      	mov	r6, r0
   1c77e:	ea43 030a 	orr.w	r3, r3, sl
   1c782:	6023      	str	r3, [r4, #0]
   1c784:	b1e0      	cbz	r0, 1c7c0 <ip_interface_accept+0x104>
   1c786:	6823      	ldr	r3, [r4, #0]
   1c788:	ea03 030b 	and.w	r3, r3, fp
   1c78c:	f043 0307 	orr.w	r3, r3, #7
   1c790:	6023      	str	r3, [r4, #0]
   1c792:	6823      	ldr	r3, [r4, #0]
   1c794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1c798:	6023      	str	r3, [r4, #0]
   1c79a:	9b00      	ldr	r3, [sp, #0]
   1c79c:	b113      	cbz	r3, 1c7a4 <ip_interface_accept+0xe8>
   1c79e:	4628      	mov	r0, r5
   1c7a0:	f7ff fae2 	bl	1bd68 <interface_socket_free>
   1c7a4:	4630      	mov	r0, r6
   1c7a6:	f007 f942 	bl	23a2e <nrf_modem_os_errno_set>
   1c7aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c7ae:	e046      	b.n	1c83e <ip_interface_accept+0x182>
   1c7b0:	260b      	movs	r6, #11
   1c7b2:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
   1c7b6:	e7a9      	b.n	1c70c <ip_interface_accept+0x50>
   1c7b8:	2616      	movs	r6, #22
   1c7ba:	e7a7      	b.n	1c70c <ip_interface_accept+0x50>
   1c7bc:	2e00      	cmp	r6, #0
   1c7be:	d1ec      	bne.n	1c79a <ip_interface_accept+0xde>
   1c7c0:	4e2e      	ldr	r6, [pc, #184]	; (1c87c <ip_interface_accept+0x1c0>)
   1c7c2:	9800      	ldr	r0, [sp, #0]
   1c7c4:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
   1c7c8:	699a      	ldr	r2, [r3, #24]
   1c7ca:	6182      	str	r2, [r0, #24]
   1c7cc:	b1c7      	cbz	r7, 1c800 <ip_interface_accept+0x144>
   1c7ce:	68c2      	ldr	r2, [r0, #12]
   1c7d0:	2a0a      	cmp	r2, #10
   1c7d2:	d137      	bne.n	1c844 <ip_interface_accept+0x188>
   1c7d4:	f8d9 1000 	ldr.w	r1, [r9]
   1c7d8:	2924      	cmp	r1, #36	; 0x24
   1c7da:	d111      	bne.n	1c800 <ip_interface_accept+0x144>
   1c7dc:	7039      	strb	r1, [r7, #0]
   1c7de:	607a      	str	r2, [r7, #4]
   1c7e0:	7f1a      	ldrb	r2, [r3, #28]
   1c7e2:	7f59      	ldrb	r1, [r3, #29]
   1c7e4:	3710      	adds	r7, #16
   1c7e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1c7ea:	f827 2c08 	strh.w	r2, [r7, #-8]
   1c7ee:	f103 0220 	add.w	r2, r3, #32
   1c7f2:	3330      	adds	r3, #48	; 0x30
   1c7f4:	f852 1b04 	ldr.w	r1, [r2], #4
   1c7f8:	429a      	cmp	r2, r3
   1c7fa:	f847 1b04 	str.w	r1, [r7], #4
   1c7fe:	d1f9      	bne.n	1c7f4 <ip_interface_accept+0x138>
   1c800:	6802      	ldr	r2, [r0, #0]
   1c802:	491f      	ldr	r1, [pc, #124]	; (1c880 <ip_interface_accept+0x1c4>)
   1c804:	400a      	ands	r2, r1
   1c806:	f042 0205 	orr.w	r2, r2, #5
   1c80a:	6002      	str	r2, [r0, #0]
   1c80c:	6802      	ldr	r2, [r0, #0]
   1c80e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1c812:	6002      	str	r2, [r0, #0]
   1c814:	6802      	ldr	r2, [r0, #0]
   1c816:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1c81a:	6002      	str	r2, [r0, #0]
   1c81c:	6823      	ldr	r3, [r4, #0]
   1c81e:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
   1c822:	400b      	ands	r3, r1
   1c824:	f043 0307 	orr.w	r3, r3, #7
   1c828:	6023      	str	r3, [r4, #0]
   1c82a:	6823      	ldr	r3, [r4, #0]
   1c82c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1c830:	6023      	str	r3, [r4, #0]
   1c832:	f008 f9ae 	bl	24b92 <rpc_client_message_free>
   1c836:	2300      	movs	r3, #0
   1c838:	4628      	mov	r0, r5
   1c83a:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
   1c83e:	b003      	add	sp, #12
   1c840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c844:	2a02      	cmp	r2, #2
   1c846:	d1db      	bne.n	1c800 <ip_interface_accept+0x144>
   1c848:	f8d9 1000 	ldr.w	r1, [r9]
   1c84c:	2910      	cmp	r1, #16
   1c84e:	d1d7      	bne.n	1c800 <ip_interface_accept+0x144>
   1c850:	7039      	strb	r1, [r7, #0]
   1c852:	607a      	str	r2, [r7, #4]
   1c854:	7f1a      	ldrb	r2, [r3, #28]
   1c856:	7f59      	ldrb	r1, [r3, #29]
   1c858:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1c85c:	813a      	strh	r2, [r7, #8]
   1c85e:	6a1b      	ldr	r3, [r3, #32]
   1c860:	60fb      	str	r3, [r7, #12]
   1c862:	e7cd      	b.n	1c800 <ip_interface_accept+0x144>
   1c864:	2609      	movs	r6, #9
   1c866:	4605      	mov	r5, r0
   1c868:	e797      	b.n	1c79a <ip_interface_accept+0xde>
   1c86a:	265f      	movs	r6, #95	; 0x5f
   1c86c:	e795      	b.n	1c79a <ip_interface_accept+0xde>
   1c86e:	2616      	movs	r6, #22
   1c870:	e793      	b.n	1c79a <ip_interface_accept+0xde>
   1c872:	260c      	movs	r6, #12
   1c874:	e791      	b.n	1c79a <ip_interface_accept+0xde>
   1c876:	bf00      	nop
   1c878:	00024e39 	.word	0x00024e39
   1c87c:	2000f800 	.word	0x2000f800
   1c880:	ffff0000 	.word	0xffff0000

0001c884 <ip_interface_setopt>:
   1c884:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1c888:	2901      	cmp	r1, #1
   1c88a:	4606      	mov	r6, r0
   1c88c:	4690      	mov	r8, r2
   1c88e:	461d      	mov	r5, r3
   1c890:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1c892:	d008      	beq.n	1c8a6 <ip_interface_setopt+0x22>
   1c894:	206d      	movs	r0, #109	; 0x6d
   1c896:	f007 f8ca 	bl	23a2e <nrf_modem_os_errno_set>
   1c89a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c89e:	4620      	mov	r0, r4
   1c8a0:	b004      	add	sp, #16
   1c8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c8a6:	f7ff faff 	bl	1bea8 <interface_socket_from_handle_get>
   1c8aa:	4604      	mov	r4, r0
   1c8ac:	b908      	cbnz	r0, 1c8b2 <ip_interface_setopt+0x2e>
   1c8ae:	2009      	movs	r0, #9
   1c8b0:	e7f1      	b.n	1c896 <ip_interface_setopt+0x12>
   1c8b2:	f1a8 0319 	sub.w	r3, r8, #25
   1c8b6:	2b1e      	cmp	r3, #30
   1c8b8:	f200 8086 	bhi.w	1c9c8 <ip_interface_setopt+0x144>
   1c8bc:	e8df f003 	tbb	[pc, r3]
   1c8c0:	84848410 	.word	0x84848410
   1c8c4:	51493d84 	.word	0x51493d84
   1c8c8:	84848484 	.word	0x84848484
   1c8cc:	59848484 	.word	0x59848484
   1c8d0:	84848484 	.word	0x84848484
   1c8d4:	84848484 	.word	0x84848484
   1c8d8:	73666184 	.word	0x73666184
   1c8dc:	7976      	.short	0x7976
   1c8de:	7c          	.byte	0x7c
   1c8df:	00          	.byte	0x00
   1c8e0:	b90d      	cbnz	r5, 1c8e6 <ip_interface_setopt+0x62>
   1c8e2:	200e      	movs	r0, #14
   1c8e4:	e7d7      	b.n	1c896 <ip_interface_setopt+0x12>
   1c8e6:	4628      	mov	r0, r5
   1c8e8:	f7f4 fa9c 	bl	10e24 <strlen>
   1c8ec:	42b8      	cmp	r0, r7
   1c8ee:	d1f8      	bne.n	1c8e2 <ip_interface_setopt+0x5e>
   1c8f0:	6823      	ldr	r3, [r4, #0]
   1c8f2:	b29b      	uxth	r3, r3
   1c8f4:	2b02      	cmp	r3, #2
   1c8f6:	d1da      	bne.n	1c8ae <ip_interface_setopt+0x2a>
   1c8f8:	4628      	mov	r0, r5
   1c8fa:	4937      	ldr	r1, [pc, #220]	; (1c9d8 <ip_interface_setopt+0x154>)
   1c8fc:	f00a f82c 	bl	26958 <strstr>
   1c900:	b108      	cbz	r0, 1c906 <ip_interface_setopt+0x82>
   1c902:	4285      	cmp	r5, r0
   1c904:	d001      	beq.n	1c90a <ip_interface_setopt+0x86>
   1c906:	2016      	movs	r0, #22
   1c908:	e7c5      	b.n	1c896 <ip_interface_setopt+0x12>
   1c90a:	4833      	ldr	r0, [pc, #204]	; (1c9d8 <ip_interface_setopt+0x154>)
   1c90c:	f7f4 fa8a 	bl	10e24 <strlen>
   1c910:	220a      	movs	r2, #10
   1c912:	2100      	movs	r1, #0
   1c914:	4428      	add	r0, r5
   1c916:	f004 fb1d 	bl	20f54 <strtoul>
   1c91a:	2304      	movs	r3, #4
   1c91c:	9301      	str	r3, [sp, #4]
   1c91e:	ab03      	add	r3, sp, #12
   1c920:	4621      	mov	r1, r4
   1c922:	9003      	str	r0, [sp, #12]
   1c924:	9300      	str	r3, [sp, #0]
   1c926:	2208      	movs	r2, #8
   1c928:	f243 0310 	movw	r3, #12304	; 0x3010
   1c92c:	4630      	mov	r0, r6
   1c92e:	f008 fc92 	bl	25256 <ip_interface_socketoption_send>
   1c932:	4604      	mov	r4, r0
   1c934:	2800      	cmp	r0, #0
   1c936:	d0b2      	beq.n	1c89e <ip_interface_setopt+0x1a>
   1c938:	e7ad      	b.n	1c896 <ip_interface_setopt+0x12>
   1c93a:	4602      	mov	r2, r0
   1c93c:	4633      	mov	r3, r6
   1c93e:	f248 0101 	movw	r1, #32769	; 0x8001
   1c942:	f44f 7000 	mov.w	r0, #512	; 0x200
   1c946:	e9cd 5700 	strd	r5, r7, [sp]
   1c94a:	f008 fccf 	bl	252ec <setopt_check_and_send_int>
   1c94e:	4604      	mov	r4, r0
   1c950:	e7a5      	b.n	1c89e <ip_interface_setopt+0x1a>
   1c952:	4602      	mov	r2, r0
   1c954:	4633      	mov	r3, r6
   1c956:	f244 0110 	movw	r1, #16400	; 0x4010
   1c95a:	2004      	movs	r0, #4
   1c95c:	e9cd 5700 	strd	r5, r7, [sp]
   1c960:	e7f3      	b.n	1c94a <ip_interface_setopt+0xc6>
   1c962:	4602      	mov	r2, r0
   1c964:	4633      	mov	r3, r6
   1c966:	f246 0110 	movw	r1, #24592	; 0x6010
   1c96a:	2006      	movs	r0, #6
   1c96c:	e9cd 5700 	strd	r5, r7, [sp]
   1c970:	e7eb      	b.n	1c94a <ip_interface_setopt+0xc6>
   1c972:	4602      	mov	r2, r0
   1c974:	4633      	mov	r3, r6
   1c976:	f241 0104 	movw	r1, #4100	; 0x1004
   1c97a:	2008      	movs	r0, #8
   1c97c:	e9cd 5700 	strd	r5, r7, [sp]
   1c980:	e7e3      	b.n	1c94a <ip_interface_setopt+0xc6>
   1c982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1c986:	62a3      	str	r3, [r4, #40]	; 0x28
   1c988:	2400      	movs	r4, #0
   1c98a:	e788      	b.n	1c89e <ip_interface_setopt+0x1a>
   1c98c:	2400      	movs	r4, #0
   1c98e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1c992:	4622      	mov	r2, r4
   1c994:	6283      	str	r3, [r0, #40]	; 0x28
   1c996:	4621      	mov	r1, r4
   1c998:	4623      	mov	r3, r4
   1c99a:	4630      	mov	r0, r6
   1c99c:	e9cd 4400 	strd	r4, r4, [sp]
   1c9a0:	f7ff fc4a 	bl	1c238 <ip_interface_sendto>
   1c9a4:	e77b      	b.n	1c89e <ip_interface_setopt+0x1a>
   1c9a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c9aa:	e7ec      	b.n	1c986 <ip_interface_setopt+0x102>
   1c9ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1c9b0:	e7e9      	b.n	1c986 <ip_interface_setopt+0x102>
   1c9b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c9b6:	e7e6      	b.n	1c986 <ip_interface_setopt+0x102>
   1c9b8:	4602      	mov	r2, r0
   1c9ba:	4633      	mov	r3, r6
   1c9bc:	f245 0106 	movw	r1, #20486	; 0x5006
   1c9c0:	2001      	movs	r0, #1
   1c9c2:	e9cd 5700 	strd	r5, r7, [sp]
   1c9c6:	e7c0      	b.n	1c94a <ip_interface_setopt+0xc6>
   1c9c8:	462b      	mov	r3, r5
   1c9ca:	4642      	mov	r2, r8
   1c9cc:	2101      	movs	r1, #1
   1c9ce:	4630      	mov	r0, r6
   1c9d0:	9700      	str	r7, [sp, #0]
   1c9d2:	f7ff fa79 	bl	1bec8 <interface_socket_setopt>
   1c9d6:	e7ba      	b.n	1c94e <ip_interface_setopt+0xca>
   1c9d8:	0002a2d0 	.word	0x0002a2d0

0001c9dc <ip_interface_getaddrinfo>:
   1c9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9e0:	b087      	sub	sp, #28
   1c9e2:	9301      	str	r3, [sp, #4]
   1c9e4:	4b72      	ldr	r3, [pc, #456]	; (1cbb0 <ip_interface_getaddrinfo+0x1d4>)
   1c9e6:	4680      	mov	r8, r0
   1c9e8:	781b      	ldrb	r3, [r3, #0]
   1c9ea:	460f      	mov	r7, r1
   1c9ec:	4614      	mov	r4, r2
   1c9ee:	b93b      	cbnz	r3, 1ca00 <ip_interface_getaddrinfo+0x24>
   1c9f0:	2075      	movs	r0, #117	; 0x75
   1c9f2:	f007 f81c 	bl	23a2e <nrf_modem_os_errno_set>
   1c9f6:	f240 1015 	movw	r0, #277	; 0x115
   1c9fa:	b007      	add	sp, #28
   1c9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca00:	4d6c      	ldr	r5, [pc, #432]	; (1cbb4 <ip_interface_getaddrinfo+0x1d8>)
   1ca02:	682e      	ldr	r6, [r5, #0]
   1ca04:	2e00      	cmp	r6, #0
   1ca06:	f040 80cf 	bne.w	1cba8 <ip_interface_getaddrinfo+0x1cc>
   1ca0a:	2301      	movs	r3, #1
   1ca0c:	486a      	ldr	r0, [pc, #424]	; (1cbb8 <ip_interface_getaddrinfo+0x1dc>)
   1ca0e:	496b      	ldr	r1, [pc, #428]	; (1cbbc <ip_interface_getaddrinfo+0x1e0>)
   1ca10:	4a6b      	ldr	r2, [pc, #428]	; (1cbc0 <ip_interface_getaddrinfo+0x1e4>)
   1ca12:	602b      	str	r3, [r5, #0]
   1ca14:	6003      	str	r3, [r0, #0]
   1ca16:	4b6b      	ldr	r3, [pc, #428]	; (1cbc4 <ip_interface_getaddrinfo+0x1e8>)
   1ca18:	468a      	mov	sl, r1
   1ca1a:	4691      	mov	r9, r2
   1ca1c:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 1cbd4 <ip_interface_getaddrinfo+0x1f8>
   1ca20:	600e      	str	r6, [r1, #0]
   1ca22:	6016      	str	r6, [r2, #0]
   1ca24:	801e      	strh	r6, [r3, #0]
   1ca26:	9002      	str	r0, [sp, #8]
   1ca28:	b194      	cbz	r4, 1ca50 <ip_interface_getaddrinfo+0x74>
   1ca2a:	68e2      	ldr	r2, [r4, #12]
   1ca2c:	b182      	cbz	r2, 1ca50 <ip_interface_getaddrinfo+0x74>
   1ca2e:	f8cb 2000 	str.w	r2, [fp]
   1ca32:	b93f      	cbnz	r7, 1ca44 <ip_interface_getaddrinfo+0x68>
   1ca34:	68a0      	ldr	r0, [r4, #8]
   1ca36:	2803      	cmp	r0, #3
   1ca38:	d145      	bne.n	1cac6 <ip_interface_getaddrinfo+0xea>
   1ca3a:	2300      	movs	r3, #0
   1ca3c:	f44f 7089 	mov.w	r0, #274	; 0x112
   1ca40:	602b      	str	r3, [r5, #0]
   1ca42:	e7da      	b.n	1c9fa <ip_interface_getaddrinfo+0x1e>
   1ca44:	6822      	ldr	r2, [r4, #0]
   1ca46:	04d1      	lsls	r1, r2, #19
   1ca48:	d508      	bpl.n	1ca5c <ip_interface_getaddrinfo+0x80>
   1ca4a:	0552      	lsls	r2, r2, #21
   1ca4c:	d406      	bmi.n	1ca5c <ip_interface_getaddrinfo+0x80>
   1ca4e:	e7f1      	b.n	1ca34 <ip_interface_getaddrinfo+0x58>
   1ca50:	2201      	movs	r2, #1
   1ca52:	f8cb 2000 	str.w	r2, [fp]
   1ca56:	b187      	cbz	r7, 1ca7a <ip_interface_getaddrinfo+0x9e>
   1ca58:	2c00      	cmp	r4, #0
   1ca5a:	d1f3      	bne.n	1ca44 <ip_interface_getaddrinfo+0x68>
   1ca5c:	220a      	movs	r2, #10
   1ca5e:	2100      	movs	r1, #0
   1ca60:	4638      	mov	r0, r7
   1ca62:	f004 f953 	bl	20d0c <strtol>
   1ca66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1ca6a:	1e41      	subs	r1, r0, #1
   1ca6c:	4291      	cmp	r1, r2
   1ca6e:	4b55      	ldr	r3, [pc, #340]	; (1cbc4 <ip_interface_getaddrinfo+0x1e8>)
   1ca70:	d8e3      	bhi.n	1ca3a <ip_interface_getaddrinfo+0x5e>
   1ca72:	0202      	lsls	r2, r0, #8
   1ca74:	ea42 2020 	orr.w	r0, r2, r0, asr #8
   1ca78:	8018      	strh	r0, [r3, #0]
   1ca7a:	2c00      	cmp	r4, #0
   1ca7c:	d1da      	bne.n	1ca34 <ip_interface_getaddrinfo+0x58>
   1ca7e:	f1b8 0f00 	cmp.w	r8, #0
   1ca82:	d003      	beq.n	1ca8c <ip_interface_getaddrinfo+0xb0>
   1ca84:	4640      	mov	r0, r8
   1ca86:	f7f4 f9cd 	bl	10e24 <strlen>
   1ca8a:	4606      	mov	r6, r0
   1ca8c:	2f00      	cmp	r7, #0
   1ca8e:	d03b      	beq.n	1cb08 <ip_interface_getaddrinfo+0x12c>
   1ca90:	2c00      	cmp	r4, #0
   1ca92:	d039      	beq.n	1cb08 <ip_interface_getaddrinfo+0x12c>
   1ca94:	6823      	ldr	r3, [r4, #0]
   1ca96:	04db      	lsls	r3, r3, #19
   1ca98:	d536      	bpl.n	1cb08 <ip_interface_getaddrinfo+0x12c>
   1ca9a:	213a      	movs	r1, #58	; 0x3a
   1ca9c:	4638      	mov	r0, r7
   1ca9e:	f009 ff14 	bl	268ca <strchr>
   1caa2:	bb40      	cbnz	r0, 1caf6 <ip_interface_getaddrinfo+0x11a>
   1caa4:	4601      	mov	r1, r0
   1caa6:	220a      	movs	r2, #10
   1caa8:	4638      	mov	r0, r7
   1caaa:	f004 fa53 	bl	20f54 <strtoul>
   1caae:	4633      	mov	r3, r6
   1cab0:	f247 020d 	movw	r2, #28685	; 0x700d
   1cab4:	4601      	mov	r1, r0
   1cab6:	f008 fa13 	bl	24ee0 <ip_interface_request_create>
   1caba:	4607      	mov	r7, r0
   1cabc:	bb38      	cbnz	r0, 1cb0e <ip_interface_getaddrinfo+0x132>
   1cabe:	6028      	str	r0, [r5, #0]
   1cac0:	f240 100f 	movw	r0, #271	; 0x10f
   1cac4:	e799      	b.n	1c9fa <ip_interface_getaddrinfo+0x1e>
   1cac6:	6863      	ldr	r3, [r4, #4]
   1cac8:	2b0a      	cmp	r3, #10
   1caca:	d007      	beq.n	1cadc <ip_interface_getaddrinfo+0x100>
   1cacc:	f033 0302 	bics.w	r3, r3, #2
   1cad0:	d004      	beq.n	1cadc <ip_interface_getaddrinfo+0x100>
   1cad2:	2300      	movs	r3, #0
   1cad4:	f44f 7087 	mov.w	r0, #270	; 0x10e
   1cad8:	602b      	str	r3, [r5, #0]
   1cada:	e78e      	b.n	1c9fa <ip_interface_getaddrinfo+0x1e>
   1cadc:	2301      	movs	r3, #1
   1cade:	68e1      	ldr	r1, [r4, #12]
   1cae0:	aa05      	add	r2, sp, #20
   1cae2:	9305      	str	r3, [sp, #20]
   1cae4:	f008 f9b4 	bl	24e50 <protocol_verify>
   1cae8:	2800      	cmp	r0, #0
   1caea:	d0c8      	beq.n	1ca7e <ip_interface_getaddrinfo+0xa2>
   1caec:	2300      	movs	r3, #0
   1caee:	f240 1013 	movw	r0, #275	; 0x113
   1caf2:	602b      	str	r3, [r5, #0]
   1caf4:	e781      	b.n	1c9fa <ip_interface_getaddrinfo+0x1e>
   1caf6:	9003      	str	r0, [sp, #12]
   1caf8:	4833      	ldr	r0, [pc, #204]	; (1cbc8 <ip_interface_getaddrinfo+0x1ec>)
   1cafa:	f7f4 f993 	bl	10e24 <strlen>
   1cafe:	9b03      	ldr	r3, [sp, #12]
   1cb00:	220a      	movs	r2, #10
   1cb02:	2100      	movs	r1, #0
   1cb04:	4418      	add	r0, r3
   1cb06:	e7d0      	b.n	1caaa <ip_interface_getaddrinfo+0xce>
   1cb08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cb0c:	e7cf      	b.n	1caae <ip_interface_getaddrinfo+0xd2>
   1cb0e:	2c00      	cmp	r4, #0
   1cb10:	d03a      	beq.n	1cb88 <ip_interface_getaddrinfo+0x1ac>
   1cb12:	68a3      	ldr	r3, [r4, #8]
   1cb14:	9a02      	ldr	r2, [sp, #8]
   1cb16:	2b02      	cmp	r3, #2
   1cb18:	6013      	str	r3, [r2, #0]
   1cb1a:	6862      	ldr	r2, [r4, #4]
   1cb1c:	bf08      	it	eq
   1cb1e:	f8cb 3000 	streq.w	r3, [fp]
   1cb22:	3a02      	subs	r2, #2
   1cb24:	2a08      	cmp	r2, #8
   1cb26:	bf8e      	itee	hi
   1cb28:	2200      	movhi	r2, #0
   1cb2a:	4928      	ldrls	r1, [pc, #160]	; (1cbcc <ip_interface_getaddrinfo+0x1f0>)
   1cb2c:	568a      	ldrsbls	r2, [r1, r2]
   1cb2e:	6182      	str	r2, [r0, #24]
   1cb30:	68e2      	ldr	r2, [r4, #12]
   1cb32:	61c3      	str	r3, [r0, #28]
   1cb34:	2300      	movs	r3, #0
   1cb36:	6202      	str	r2, [r0, #32]
   1cb38:	7503      	strb	r3, [r0, #20]
   1cb3a:	7543      	strb	r3, [r0, #21]
   1cb3c:	7583      	strb	r3, [r0, #22]
   1cb3e:	75c3      	strb	r3, [r0, #23]
   1cb40:	68bb      	ldr	r3, [r7, #8]
   1cb42:	3310      	adds	r3, #16
   1cb44:	60bb      	str	r3, [r7, #8]
   1cb46:	f1b8 0f00 	cmp.w	r8, #0
   1cb4a:	d005      	beq.n	1cb58 <ip_interface_getaddrinfo+0x17c>
   1cb4c:	6838      	ldr	r0, [r7, #0]
   1cb4e:	b118      	cbz	r0, 1cb58 <ip_interface_getaddrinfo+0x17c>
   1cb50:	4632      	mov	r2, r6
   1cb52:	4641      	mov	r1, r8
   1cb54:	f009 fe75 	bl	26842 <memcpy>
   1cb58:	463a      	mov	r2, r7
   1cb5a:	f247 010d 	movw	r1, #28685	; 0x700d
   1cb5e:	2004      	movs	r0, #4
   1cb60:	f008 f810 	bl	24b84 <rpc_client_request_send>
   1cb64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cb68:	9305      	str	r3, [sp, #20]
   1cb6a:	4638      	mov	r0, r7
   1cb6c:	a905      	add	r1, sp, #20
   1cb6e:	f006 fec6 	bl	238fe <nrf_modem_os_timedwait>
   1cb72:	682b      	ldr	r3, [r5, #0]
   1cb74:	2b01      	cmp	r3, #1
   1cb76:	d0f8      	beq.n	1cb6a <ip_interface_getaddrinfo+0x18e>
   1cb78:	f8d9 0000 	ldr.w	r0, [r9]
   1cb7c:	b950      	cbnz	r0, 1cb94 <ip_interface_getaddrinfo+0x1b8>
   1cb7e:	f8da 3000 	ldr.w	r3, [sl]
   1cb82:	9a01      	ldr	r2, [sp, #4]
   1cb84:	6013      	str	r3, [r2, #0]
   1cb86:	e738      	b.n	1c9fa <ip_interface_getaddrinfo+0x1e>
   1cb88:	2210      	movs	r2, #16
   1cb8a:	4621      	mov	r1, r4
   1cb8c:	3014      	adds	r0, #20
   1cb8e:	f009 fe78 	bl	26882 <memset>
   1cb92:	e7d5      	b.n	1cb40 <ip_interface_getaddrinfo+0x164>
   1cb94:	2300      	movs	r3, #0
   1cb96:	602b      	str	r3, [r5, #0]
   1cb98:	4b0d      	ldr	r3, [pc, #52]	; (1cbd0 <ip_interface_getaddrinfo+0x1f4>)
   1cb9a:	6818      	ldr	r0, [r3, #0]
   1cb9c:	b108      	cbz	r0, 1cba2 <ip_interface_getaddrinfo+0x1c6>
   1cb9e:	f006 ff46 	bl	23a2e <nrf_modem_os_errno_set>
   1cba2:	f8d9 0000 	ldr.w	r0, [r9]
   1cba6:	e728      	b.n	1c9fa <ip_interface_getaddrinfo+0x1e>
   1cba8:	f44f 708a 	mov.w	r0, #276	; 0x114
   1cbac:	e725      	b.n	1c9fa <ip_interface_getaddrinfo+0x1e>
   1cbae:	bf00      	nop
   1cbb0:	2000f913 	.word	0x2000f913
   1cbb4:	2000f7f8 	.word	0x2000f7f8
   1cbb8:	2000f7ec 	.word	0x2000f7ec
   1cbbc:	2000f7fc 	.word	0x2000f7fc
   1cbc0:	2000f7f4 	.word	0x2000f7f4
   1cbc4:	2000f8fa 	.word	0x2000f8fa
   1cbc8:	0002a388 	.word	0x0002a388
   1cbcc:	0002a2d4 	.word	0x0002a2d4
   1cbd0:	2000f7f0 	.word	0x2000f7f0
   1cbd4:	2000f7e8 	.word	0x2000f7e8

0001cbd8 <ip_interface_freeaddrinfo>:
   1cbd8:	b538      	push	{r3, r4, r5, lr}
   1cbda:	4d0a      	ldr	r5, [pc, #40]	; (1cc04 <ip_interface_freeaddrinfo+0x2c>)
   1cbdc:	4604      	mov	r4, r0
   1cbde:	682a      	ldr	r2, [r5, #0]
   1cbe0:	2a02      	cmp	r2, #2
   1cbe2:	d10e      	bne.n	1cc02 <ip_interface_freeaddrinfo+0x2a>
   1cbe4:	b148      	cbz	r0, 1cbfa <ip_interface_freeaddrinfo+0x22>
   1cbe6:	6940      	ldr	r0, [r0, #20]
   1cbe8:	f7f9 fd66 	bl	166b8 <nrf_modem_os_free>
   1cbec:	69a0      	ldr	r0, [r4, #24]
   1cbee:	b108      	cbz	r0, 1cbf4 <ip_interface_freeaddrinfo+0x1c>
   1cbf0:	f7f9 fd62 	bl	166b8 <nrf_modem_os_free>
   1cbf4:	4620      	mov	r0, r4
   1cbf6:	f7f9 fd5f 	bl	166b8 <nrf_modem_os_free>
   1cbfa:	2300      	movs	r3, #0
   1cbfc:	4a02      	ldr	r2, [pc, #8]	; (1cc08 <ip_interface_freeaddrinfo+0x30>)
   1cbfe:	602b      	str	r3, [r5, #0]
   1cc00:	6013      	str	r3, [r2, #0]
   1cc02:	bd38      	pop	{r3, r4, r5, pc}
   1cc04:	2000f7f8 	.word	0x2000f7f8
   1cc08:	2000f7f4 	.word	0x2000f7f4

0001cc0c <rpc_ip_event_handler>:
   1cc0c:	f248 030f 	movw	r3, #32783	; 0x800f
   1cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc14:	4299      	cmp	r1, r3
   1cc16:	4604      	mov	r4, r0
   1cc18:	460e      	mov	r6, r1
   1cc1a:	b089      	sub	sp, #36	; 0x24
   1cc1c:	f000 80a4 	beq.w	1cd68 <rpc_ip_event_handler+0x15c>
   1cc20:	f249 0304 	movw	r3, #36868	; 0x9004
   1cc24:	4299      	cmp	r1, r3
   1cc26:	f000 80ab 	beq.w	1cd80 <rpc_ip_event_handler+0x174>
   1cc2a:	f248 030d 	movw	r3, #32781	; 0x800d
   1cc2e:	4299      	cmp	r1, r3
   1cc30:	f040 80b8 	bne.w	1cda4 <rpc_ip_event_handler+0x198>
   1cc34:	4bbc      	ldr	r3, [pc, #752]	; (1cf28 <rpc_ip_event_handler+0x31c>)
   1cc36:	681a      	ldr	r2, [r3, #0]
   1cc38:	9303      	str	r3, [sp, #12]
   1cc3a:	2a01      	cmp	r2, #1
   1cc3c:	d12d      	bne.n	1cc9a <rpc_ip_event_handler+0x8e>
   1cc3e:	6940      	ldr	r0, [r0, #20]
   1cc40:	2800      	cmp	r0, #0
   1cc42:	f040 808c 	bne.w	1cd5e <rpc_ip_event_handler+0x152>
   1cc46:	f8d4 a018 	ldr.w	sl, [r4, #24]
   1cc4a:	f8d4 8000 	ldr.w	r8, [r4]
   1cc4e:	ea4f 134a 	mov.w	r3, sl, lsl #5
   1cc52:	4618      	mov	r0, r3
   1cc54:	9301      	str	r3, [sp, #4]
   1cc56:	f7f9 fd25 	bl	166a4 <nrf_modem_os_alloc>
   1cc5a:	4607      	mov	r7, r0
   1cc5c:	b310      	cbz	r0, 1cca4 <rpc_ip_event_handler+0x98>
   1cc5e:	2024      	movs	r0, #36	; 0x24
   1cc60:	fb00 f00a 	mul.w	r0, r0, sl
   1cc64:	f7f9 fd1e 	bl	166a4 <nrf_modem_os_alloc>
   1cc68:	b1f0      	cbz	r0, 1cca8 <rpc_ip_event_handler+0x9c>
   1cc6a:	4605      	mov	r5, r0
   1cc6c:	2604      	movs	r6, #4
   1cc6e:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   1cc72:	f107 0920 	add.w	r9, r7, #32
   1cc76:	9302      	str	r3, [sp, #8]
   1cc78:	9b02      	ldr	r3, [sp, #8]
   1cc7a:	42ab      	cmp	r3, r5
   1cc7c:	d118      	bne.n	1ccb0 <rpc_ip_event_handler+0xa4>
   1cc7e:	f1ba 0f00 	cmp.w	sl, #0
   1cc82:	d005      	beq.n	1cc90 <rpc_ip_event_handler+0x84>
   1cc84:	9b01      	ldr	r3, [sp, #4]
   1cc86:	443b      	add	r3, r7
   1cc88:	4699      	mov	r9, r3
   1cc8a:	2300      	movs	r3, #0
   1cc8c:	f849 3c04 	str.w	r3, [r9, #-4]
   1cc90:	4ba6      	ldr	r3, [pc, #664]	; (1cf2c <rpc_ip_event_handler+0x320>)
   1cc92:	601f      	str	r7, [r3, #0]
   1cc94:	2302      	movs	r3, #2
   1cc96:	9a03      	ldr	r2, [sp, #12]
   1cc98:	6013      	str	r3, [r2, #0]
   1cc9a:	6820      	ldr	r0, [r4, #0]
   1cc9c:	2800      	cmp	r0, #0
   1cc9e:	f040 81cd 	bne.w	1d03c <rpc_ip_event_handler+0x430>
   1cca2:	e1cd      	b.n	1d040 <rpc_ip_event_handler+0x434>
   1cca4:	f7f9 fd08 	bl	166b8 <nrf_modem_os_free>
   1cca8:	220c      	movs	r2, #12
   1ccaa:	4ba1      	ldr	r3, [pc, #644]	; (1cf30 <rpc_ip_event_handler+0x324>)
   1ccac:	601a      	str	r2, [r3, #0]
   1ccae:	e7ef      	b.n	1cc90 <rpc_ip_event_handler+0x84>
   1ccb0:	f858 2006 	ldr.w	r2, [r8, r6]
   1ccb4:	eb08 0106 	add.w	r1, r8, r6
   1ccb8:	f849 2c20 	str.w	r2, [r9, #-32]
   1ccbc:	eb08 0206 	add.w	r2, r8, r6
   1ccc0:	6852      	ldr	r2, [r2, #4]
   1ccc2:	f8b1 b012 	ldrh.w	fp, [r1, #18]
   1ccc6:	3a01      	subs	r2, #1
   1ccc8:	2a04      	cmp	r2, #4
   1ccca:	bf8c      	ite	hi
   1cccc:	2200      	movhi	r2, #0
   1ccce:	4b99      	ldrls	r3, [pc, #612]	; (1cf34 <rpc_ip_event_handler+0x328>)
   1ccd0:	f106 0614 	add.w	r6, r6, #20
   1ccd4:	bf98      	it	ls
   1ccd6:	569a      	ldrsbls	r2, [r3, r2]
   1ccd8:	4b97      	ldr	r3, [pc, #604]	; (1cf38 <rpc_ip_event_handler+0x32c>)
   1ccda:	f849 2c1c 	str.w	r2, [r9, #-28]
   1ccde:	681a      	ldr	r2, [r3, #0]
   1cce0:	4b96      	ldr	r3, [pc, #600]	; (1cf3c <rpc_ip_event_handler+0x330>)
   1cce2:	f849 2c18 	str.w	r2, [r9, #-24]
   1cce6:	681a      	ldr	r2, [r3, #0]
   1cce8:	f849 2c14 	str.w	r2, [r9, #-20]
   1ccec:	8a0a      	ldrh	r2, [r1, #16]
   1ccee:	4994      	ldr	r1, [pc, #592]	; (1cf40 <rpc_ip_event_handler+0x334>)
   1ccf0:	2a04      	cmp	r2, #4
   1ccf2:	8808      	ldrh	r0, [r1, #0]
   1ccf4:	f849 2c10 	str.w	r2, [r9, #-16]
   1ccf8:	f849 5c0c 	str.w	r5, [r9, #-12]
   1ccfc:	eb08 0106 	add.w	r1, r8, r6
   1cd00:	d121      	bne.n	1cd46 <rpc_ip_event_handler+0x13a>
   1cd02:	2202      	movs	r2, #2
   1cd04:	606a      	str	r2, [r5, #4]
   1cd06:	2210      	movs	r2, #16
   1cd08:	8128      	strh	r0, [r5, #8]
   1cd0a:	702a      	strb	r2, [r5, #0]
   1cd0c:	680a      	ldr	r2, [r1, #0]
   1cd0e:	60ea      	str	r2, [r5, #12]
   1cd10:	f859 2c10 	ldr.w	r2, [r9, #-16]
   1cd14:	f10b 0001 	add.w	r0, fp, #1
   1cd18:	4416      	add	r6, r2
   1cd1a:	f7f9 fcc3 	bl	166a4 <nrf_modem_os_alloc>
   1cd1e:	f849 0c08 	str.w	r0, [r9, #-8]
   1cd22:	b148      	cbz	r0, 1cd38 <rpc_ip_event_handler+0x12c>
   1cd24:	465a      	mov	r2, fp
   1cd26:	eb08 0106 	add.w	r1, r8, r6
   1cd2a:	f009 fd8a 	bl	26842 <memcpy>
   1cd2e:	2100      	movs	r1, #0
   1cd30:	f859 2c08 	ldr.w	r2, [r9, #-8]
   1cd34:	f802 100b 	strb.w	r1, [r2, fp]
   1cd38:	f849 9c04 	str.w	r9, [r9, #-4]
   1cd3c:	445e      	add	r6, fp
   1cd3e:	f109 0920 	add.w	r9, r9, #32
   1cd42:	3508      	adds	r5, #8
   1cd44:	e798      	b.n	1cc78 <rpc_ip_event_handler+0x6c>
   1cd46:	230a      	movs	r3, #10
   1cd48:	f04f 0c24 	mov.w	ip, #36	; 0x24
   1cd4c:	8128      	strh	r0, [r5, #8]
   1cd4e:	606b      	str	r3, [r5, #4]
   1cd50:	f885 c000 	strb.w	ip, [r5]
   1cd54:	f105 0010 	add.w	r0, r5, #16
   1cd58:	f009 fd73 	bl	26842 <memcpy>
   1cd5c:	e7d8      	b.n	1cd10 <rpc_ip_event_handler+0x104>
   1cd5e:	f7ff f971 	bl	1c044 <rpc_error_to_nrf_gai_errno>
   1cd62:	4b73      	ldr	r3, [pc, #460]	; (1cf30 <rpc_ip_event_handler+0x324>)
   1cd64:	6018      	str	r0, [r3, #0]
   1cd66:	e795      	b.n	1cc94 <rpc_ip_event_handler+0x88>
   1cd68:	6943      	ldr	r3, [r0, #20]
   1cd6a:	2b6a      	cmp	r3, #106	; 0x6a
   1cd6c:	bf8e      	itee	hi
   1cd6e:	235f      	movhi	r3, #95	; 0x5f
   1cd70:	4a74      	ldrls	r2, [pc, #464]	; (1cf44 <rpc_ip_event_handler+0x338>)
   1cd72:	5cd3      	ldrbls	r3, [r2, r3]
   1cd74:	4a74      	ldr	r2, [pc, #464]	; (1cf48 <rpc_ip_event_handler+0x33c>)
   1cd76:	6013      	str	r3, [r2, #0]
   1cd78:	4b74      	ldr	r3, [pc, #464]	; (1cf4c <rpc_ip_event_handler+0x340>)
   1cd7a:	2201      	movs	r2, #1
   1cd7c:	701a      	strb	r2, [r3, #0]
   1cd7e:	e15f      	b.n	1d040 <rpc_ip_event_handler+0x434>
   1cd80:	6903      	ldr	r3, [r0, #16]
   1cd82:	2b03      	cmp	r3, #3
   1cd84:	d807      	bhi.n	1cd96 <rpc_ip_event_handler+0x18a>
   1cd86:	e8df f003 	tbb	[pc, r3]
   1cd8a:	0802      	.short	0x0802
   1cd8c:	0802      	.short	0x0802
   1cd8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1cd92:	f7ff f835 	bl	1be00 <interface_sockets_aux_state_set>
   1cd96:	4b6e      	ldr	r3, [pc, #440]	; (1cf50 <rpc_ip_event_handler+0x344>)
   1cd98:	e7ef      	b.n	1cd7a <rpc_ip_event_handler+0x16e>
   1cd9a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1cd9e:	f7ff f84d 	bl	1be3c <interface_sockets_aux_state_clear>
   1cda2:	e7f8      	b.n	1cd96 <rpc_ip_event_handler+0x18a>
   1cda4:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1cda8:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1cdac:	68c0      	ldr	r0, [r0, #12]
   1cdae:	d13b      	bne.n	1ce28 <rpc_ip_event_handler+0x21c>
   1cdb0:	f7ff f862 	bl	1be78 <interface_from_internal_id_search>
   1cdb4:	4607      	mov	r7, r0
   1cdb6:	4638      	mov	r0, r7
   1cdb8:	f7ff f876 	bl	1bea8 <interface_socket_from_handle_get>
   1cdbc:	4605      	mov	r5, r0
   1cdbe:	2800      	cmp	r0, #0
   1cdc0:	f43f af6b 	beq.w	1cc9a <rpc_ip_event_handler+0x8e>
   1cdc4:	4601      	mov	r1, r0
   1cdc6:	4633      	mov	r3, r6
   1cdc8:	4622      	mov	r2, r4
   1cdca:	4638      	mov	r0, r7
   1cdcc:	f000 fd6a 	bl	1d8a4 <tls_rpc_ip_event_handler>
   1cdd0:	2800      	cmp	r0, #0
   1cdd2:	f000 8135 	beq.w	1d040 <rpc_ip_event_handler+0x434>
   1cdd6:	f248 030c 	movw	r3, #32780	; 0x800c
   1cdda:	429e      	cmp	r6, r3
   1cddc:	d826      	bhi.n	1ce2c <rpc_ip_event_handler+0x220>
   1cdde:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1cde2:	f67f af5a 	bls.w	1cc9a <rpc_ip_event_handler+0x8e>
   1cde6:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   1cdea:	3e01      	subs	r6, #1
   1cdec:	2e0b      	cmp	r6, #11
   1cdee:	f63f af54 	bhi.w	1cc9a <rpc_ip_event_handler+0x8e>
   1cdf2:	a301      	add	r3, pc, #4	; (adr r3, 1cdf8 <rpc_ip_event_handler+0x1ec>)
   1cdf4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1cdf8:	0001cebd 	.word	0x0001cebd
   1cdfc:	0001cf7d 	.word	0x0001cf7d
   1ce00:	0001d099 	.word	0x0001d099
   1ce04:	0001d0b5 	.word	0x0001d0b5
   1ce08:	0001cf61 	.word	0x0001cf61
   1ce0c:	0001d049 	.word	0x0001d049
   1ce10:	0001d049 	.word	0x0001d049
   1ce14:	0001cfc1 	.word	0x0001cfc1
   1ce18:	0001cee1 	.word	0x0001cee1
   1ce1c:	0001cc9b 	.word	0x0001cc9b
   1ce20:	0001cc9b 	.word	0x0001cc9b
   1ce24:	0001cfeb 	.word	0x0001cfeb
   1ce28:	0c07      	lsrs	r7, r0, #16
   1ce2a:	e7c4      	b.n	1cdb6 <rpc_ip_event_handler+0x1aa>
   1ce2c:	f249 0302 	movw	r3, #36866	; 0x9002
   1ce30:	429e      	cmp	r6, r3
   1ce32:	f000 80d2 	beq.w	1cfda <rpc_ip_event_handler+0x3ce>
   1ce36:	f249 0303 	movw	r3, #36867	; 0x9003
   1ce3a:	429e      	cmp	r6, r3
   1ce3c:	d060      	beq.n	1cf00 <rpc_ip_event_handler+0x2f4>
   1ce3e:	f249 0301 	movw	r3, #36865	; 0x9001
   1ce42:	429e      	cmp	r6, r3
   1ce44:	f47f af29 	bne.w	1cc9a <rpc_ip_event_handler+0x8e>
   1ce48:	682e      	ldr	r6, [r5, #0]
   1ce4a:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   1ce4e:	f000 80f4 	beq.w	1d03a <rpc_ip_event_handler+0x42e>
   1ce52:	68a3      	ldr	r3, [r4, #8]
   1ce54:	2b04      	cmp	r3, #4
   1ce56:	f240 80ed 	bls.w	1d034 <rpc_ip_event_handler+0x428>
   1ce5a:	8a63      	ldrh	r3, [r4, #18]
   1ce5c:	2b00      	cmp	r3, #0
   1ce5e:	f000 80ea 	beq.w	1d036 <rpc_ip_event_handler+0x42a>
   1ce62:	2b10      	cmp	r3, #16
   1ce64:	f040 80d2 	bne.w	1d00c <rpc_ip_event_handler+0x400>
   1ce68:	2024      	movs	r0, #36	; 0x24
   1ce6a:	f7f9 fc1b 	bl	166a4 <nrf_modem_os_alloc>
   1ce6e:	b318      	cbz	r0, 1ceb8 <rpc_ip_event_handler+0x2ac>
   1ce70:	230a      	movs	r3, #10
   1ce72:	6043      	str	r3, [r0, #4]
   1ce74:	2324      	movs	r3, #36	; 0x24
   1ce76:	7003      	strb	r3, [r0, #0]
   1ce78:	7c62      	ldrb	r2, [r4, #17]
   1ce7a:	7c23      	ldrb	r3, [r4, #16]
   1ce7c:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1ce80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ce84:	8103      	strh	r3, [r0, #8]
   1ce86:	f100 0210 	add.w	r2, r0, #16
   1ce8a:	f104 0314 	add.w	r3, r4, #20
   1ce8e:	f853 6b04 	ldr.w	r6, [r3], #4
   1ce92:	428b      	cmp	r3, r1
   1ce94:	f842 6b04 	str.w	r6, [r2], #4
   1ce98:	d1f9      	bne.n	1ce8e <rpc_ip_event_handler+0x282>
   1ce9a:	2324      	movs	r3, #36	; 0x24
   1ce9c:	6822      	ldr	r2, [r4, #0]
   1ce9e:	9307      	str	r3, [sp, #28]
   1cea0:	9204      	str	r2, [sp, #16]
   1cea2:	6862      	ldr	r2, [r4, #4]
   1cea4:	a904      	add	r1, sp, #16
   1cea6:	e9cd 2005 	strd	r2, r0, [sp, #20]
   1ceaa:	69e8      	ldr	r0, [r5, #28]
   1ceac:	6803      	ldr	r3, [r0, #0]
   1ceae:	685b      	ldr	r3, [r3, #4]
   1ceb0:	4798      	blx	r3
   1ceb2:	3001      	adds	r0, #1
   1ceb4:	f040 8095 	bne.w	1cfe2 <rpc_ip_event_handler+0x3d6>
   1ceb8:	2002      	movs	r0, #2
   1ceba:	e0c2      	b.n	1d042 <rpc_ip_event_handler+0x436>
   1cebc:	682b      	ldr	r3, [r5, #0]
   1cebe:	2b01      	cmp	r3, #1
   1cec0:	f040 80be 	bne.w	1d040 <rpc_ip_event_handler+0x434>
   1cec4:	6960      	ldr	r0, [r4, #20]
   1cec6:	b920      	cbnz	r0, 1ced2 <rpc_ip_event_handler+0x2c6>
   1cec8:	2302      	movs	r3, #2
   1ceca:	602b      	str	r3, [r5, #0]
   1cecc:	69a3      	ldr	r3, [r4, #24]
   1cece:	61ab      	str	r3, [r5, #24]
   1ced0:	e0b7      	b.n	1d042 <rpc_ip_event_handler+0x436>
   1ced2:	286a      	cmp	r0, #106	; 0x6a
   1ced4:	f200 8103 	bhi.w	1d0de <rpc_ip_event_handler+0x4d2>
   1ced8:	4b1a      	ldr	r3, [pc, #104]	; (1cf44 <rpc_ip_event_handler+0x338>)
   1ceda:	5c1b      	ldrb	r3, [r3, r0]
   1cedc:	606b      	str	r3, [r5, #4]
   1cede:	e0af      	b.n	1d040 <rpc_ip_event_handler+0x434>
   1cee0:	682b      	ldr	r3, [r5, #0]
   1cee2:	b29b      	uxth	r3, r3
   1cee4:	2b0d      	cmp	r3, #13
   1cee6:	f040 80ab 	bne.w	1d040 <rpc_ip_event_handler+0x434>
   1ceea:	6960      	ldr	r0, [r4, #20]
   1ceec:	2800      	cmp	r0, #0
   1ceee:	f040 80dc 	bne.w	1d0aa <rpc_ip_event_handler+0x49e>
   1cef2:	682a      	ldr	r2, [r5, #0]
   1cef4:	0c12      	lsrs	r2, r2, #16
   1cef6:	0412      	lsls	r2, r2, #16
   1cef8:	f042 020e 	orr.w	r2, r2, #14
   1cefc:	602a      	str	r2, [r5, #0]
   1cefe:	e0a0      	b.n	1d042 <rpc_ip_event_handler+0x436>
   1cf00:	682b      	ldr	r3, [r5, #0]
   1cf02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1cf06:	602b      	str	r3, [r5, #0]
   1cf08:	682b      	ldr	r3, [r5, #0]
   1cf0a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1cf0e:	602b      	str	r3, [r5, #0]
   1cf10:	6923      	ldr	r3, [r4, #16]
   1cf12:	2b6c      	cmp	r3, #108	; 0x6c
   1cf14:	d11e      	bne.n	1cf54 <rpc_ip_event_handler+0x348>
   1cf16:	682b      	ldr	r3, [r5, #0]
   1cf18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1cf1c:	602b      	str	r3, [r5, #0]
   1cf1e:	2380      	movs	r3, #128	; 0x80
   1cf20:	606b      	str	r3, [r5, #4]
   1cf22:	60ab      	str	r3, [r5, #8]
   1cf24:	e08c      	b.n	1d040 <rpc_ip_event_handler+0x434>
   1cf26:	bf00      	nop
   1cf28:	2000f7f8 	.word	0x2000f7f8
   1cf2c:	2000f7fc 	.word	0x2000f7fc
   1cf30:	2000f7f4 	.word	0x2000f7f4
   1cf34:	0002a2dd 	.word	0x0002a2dd
   1cf38:	2000f7ec 	.word	0x2000f7ec
   1cf3c:	2000f7e8 	.word	0x2000f7e8
   1cf40:	2000f8fa 	.word	0x2000f8fa
   1cf44:	0002a2e2 	.word	0x0002a2e2
   1cf48:	2000f820 	.word	0x2000f820
   1cf4c:	2000f914 	.word	0x2000f914
   1cf50:	2000f912 	.word	0x2000f912
   1cf54:	2b6a      	cmp	r3, #106	; 0x6a
   1cf56:	bf96      	itet	ls
   1cf58:	4a62      	ldrls	r2, [pc, #392]	; (1d0e4 <rpc_ip_event_handler+0x4d8>)
   1cf5a:	235f      	movhi	r3, #95	; 0x5f
   1cf5c:	5cd3      	ldrbls	r3, [r2, r3]
   1cf5e:	e7df      	b.n	1cf20 <rpc_ip_event_handler+0x314>
   1cf60:	682b      	ldr	r3, [r5, #0]
   1cf62:	b29b      	uxth	r3, r3
   1cf64:	2b03      	cmp	r3, #3
   1cf66:	d16b      	bne.n	1d040 <rpc_ip_event_handler+0x434>
   1cf68:	6960      	ldr	r0, [r4, #20]
   1cf6a:	2800      	cmp	r0, #0
   1cf6c:	f040 809d 	bne.w	1d0aa <rpc_ip_event_handler+0x49e>
   1cf70:	682a      	ldr	r2, [r5, #0]
   1cf72:	0c12      	lsrs	r2, r2, #16
   1cf74:	0412      	lsls	r2, r2, #16
   1cf76:	f042 0204 	orr.w	r2, r2, #4
   1cf7a:	e7bf      	b.n	1cefc <rpc_ip_event_handler+0x2f0>
   1cf7c:	682b      	ldr	r3, [r5, #0]
   1cf7e:	0099      	lsls	r1, r3, #2
   1cf80:	d55e      	bpl.n	1d040 <rpc_ip_event_handler+0x434>
   1cf82:	682b      	ldr	r3, [r5, #0]
   1cf84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1cf88:	602b      	str	r3, [r5, #0]
   1cf8a:	6960      	ldr	r0, [r4, #20]
   1cf8c:	b968      	cbnz	r0, 1cfaa <rpc_ip_event_handler+0x39e>
   1cf8e:	682a      	ldr	r2, [r5, #0]
   1cf90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1cf94:	602a      	str	r2, [r5, #0]
   1cf96:	682a      	ldr	r2, [r5, #0]
   1cf98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1cf9c:	602a      	str	r2, [r5, #0]
   1cf9e:	682a      	ldr	r2, [r5, #0]
   1cfa0:	0c12      	lsrs	r2, r2, #16
   1cfa2:	0412      	lsls	r2, r2, #16
   1cfa4:	f042 0205 	orr.w	r2, r2, #5
   1cfa8:	e7a8      	b.n	1cefc <rpc_ip_event_handler+0x2f0>
   1cfaa:	286a      	cmp	r0, #106	; 0x6a
   1cfac:	bf8e      	itee	hi
   1cfae:	235f      	movhi	r3, #95	; 0x5f
   1cfb0:	4a4c      	ldrls	r2, [pc, #304]	; (1d0e4 <rpc_ip_event_handler+0x4d8>)
   1cfb2:	5c13      	ldrbls	r3, [r2, r0]
   1cfb4:	606b      	str	r3, [r5, #4]
   1cfb6:	682b      	ldr	r3, [r5, #0]
   1cfb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1cfbc:	602b      	str	r3, [r5, #0]
   1cfbe:	e03f      	b.n	1d040 <rpc_ip_event_handler+0x434>
   1cfc0:	682b      	ldr	r3, [r5, #0]
   1cfc2:	b29b      	uxth	r3, r3
   1cfc4:	2b06      	cmp	r3, #6
   1cfc6:	d13b      	bne.n	1d040 <rpc_ip_event_handler+0x434>
   1cfc8:	6960      	ldr	r0, [r4, #20]
   1cfca:	2800      	cmp	r0, #0
   1cfcc:	d16d      	bne.n	1d0aa <rpc_ip_event_handler+0x49e>
   1cfce:	682a      	ldr	r2, [r5, #0]
   1cfd0:	0c12      	lsrs	r2, r2, #16
   1cfd2:	0412      	lsls	r2, r2, #16
   1cfd4:	f042 0207 	orr.w	r2, r2, #7
   1cfd8:	e790      	b.n	1cefc <rpc_ip_event_handler+0x2f0>
   1cfda:	682b      	ldr	r3, [r5, #0]
   1cfdc:	b29b      	uxth	r3, r3
   1cfde:	2b07      	cmp	r3, #7
   1cfe0:	d12e      	bne.n	1d040 <rpc_ip_event_handler+0x434>
   1cfe2:	682b      	ldr	r3, [r5, #0]
   1cfe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1cfe8:	e7e8      	b.n	1cfbc <rpc_ip_event_handler+0x3b0>
   1cfea:	682b      	ldr	r3, [r5, #0]
   1cfec:	b29b      	uxth	r3, r3
   1cfee:	2b08      	cmp	r3, #8
   1cff0:	d126      	bne.n	1d040 <rpc_ip_event_handler+0x434>
   1cff2:	6963      	ldr	r3, [r4, #20]
   1cff4:	2b00      	cmp	r3, #0
   1cff6:	d16d      	bne.n	1d0d4 <rpc_ip_event_handler+0x4c8>
   1cff8:	4b3b      	ldr	r3, [pc, #236]	; (1d0e8 <rpc_ip_event_handler+0x4dc>)
   1cffa:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1cffe:	682b      	ldr	r3, [r5, #0]
   1d000:	0c1b      	lsrs	r3, r3, #16
   1d002:	041b      	lsls	r3, r3, #16
   1d004:	f043 0309 	orr.w	r3, r3, #9
   1d008:	602b      	str	r3, [r5, #0]
   1d00a:	e032      	b.n	1d072 <rpc_ip_event_handler+0x466>
   1d00c:	2b04      	cmp	r3, #4
   1d00e:	d114      	bne.n	1d03a <rpc_ip_event_handler+0x42e>
   1d010:	2010      	movs	r0, #16
   1d012:	f7f9 fb47 	bl	166a4 <nrf_modem_os_alloc>
   1d016:	2800      	cmp	r0, #0
   1d018:	f43f af4e 	beq.w	1ceb8 <rpc_ip_event_handler+0x2ac>
   1d01c:	2302      	movs	r3, #2
   1d01e:	6043      	str	r3, [r0, #4]
   1d020:	2310      	movs	r3, #16
   1d022:	7003      	strb	r3, [r0, #0]
   1d024:	7c22      	ldrb	r2, [r4, #16]
   1d026:	7c61      	ldrb	r1, [r4, #17]
   1d028:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d02c:	8102      	strh	r2, [r0, #8]
   1d02e:	6962      	ldr	r2, [r4, #20]
   1d030:	60c2      	str	r2, [r0, #12]
   1d032:	e733      	b.n	1ce9c <rpc_ip_event_handler+0x290>
   1d034:	2300      	movs	r3, #0
   1d036:	4618      	mov	r0, r3
   1d038:	e730      	b.n	1ce9c <rpc_ip_event_handler+0x290>
   1d03a:	6820      	ldr	r0, [r4, #0]
   1d03c:	f007 fdac 	bl	24b98 <rpc_client_data_free>
   1d040:	2000      	movs	r0, #0
   1d042:	b009      	add	sp, #36	; 0x24
   1d044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d048:	4b27      	ldr	r3, [pc, #156]	; (1d0e8 <rpc_ip_event_handler+0x4dc>)
   1d04a:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1d04e:	6963      	ldr	r3, [r4, #20]
   1d050:	b17b      	cbz	r3, 1d072 <rpc_ip_event_handler+0x466>
   1d052:	2b6b      	cmp	r3, #107	; 0x6b
   1d054:	d10f      	bne.n	1d076 <rpc_ip_event_handler+0x46a>
   1d056:	6928      	ldr	r0, [r5, #16]
   1d058:	220c      	movs	r2, #12
   1d05a:	2801      	cmp	r0, #1
   1d05c:	682b      	ldr	r3, [r5, #0]
   1d05e:	d104      	bne.n	1d06a <rpc_ip_event_handler+0x45e>
   1d060:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1d064:	602b      	str	r3, [r5, #0]
   1d066:	606a      	str	r2, [r5, #4]
   1d068:	e7eb      	b.n	1d042 <rpc_ip_event_handler+0x436>
   1d06a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1d06e:	602b      	str	r3, [r5, #0]
   1d070:	606a      	str	r2, [r5, #4]
   1d072:	2001      	movs	r0, #1
   1d074:	e7e5      	b.n	1d042 <rpc_ip_event_handler+0x436>
   1d076:	f023 0002 	bic.w	r0, r3, #2
   1d07a:	2801      	cmp	r0, #1
   1d07c:	d102      	bne.n	1d084 <rpc_ip_event_handler+0x478>
   1d07e:	230c      	movs	r3, #12
   1d080:	606b      	str	r3, [r5, #4]
   1d082:	e7de      	b.n	1d042 <rpc_ip_event_handler+0x436>
   1d084:	2b6a      	cmp	r3, #106	; 0x6a
   1d086:	bf8e      	itee	hi
   1d088:	235f      	movhi	r3, #95	; 0x5f
   1d08a:	4a16      	ldrls	r2, [pc, #88]	; (1d0e4 <rpc_ip_event_handler+0x4d8>)
   1d08c:	5cd3      	ldrbls	r3, [r2, r3]
   1d08e:	606b      	str	r3, [r5, #4]
   1d090:	682b      	ldr	r3, [r5, #0]
   1d092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1d096:	e7b7      	b.n	1d008 <rpc_ip_event_handler+0x3fc>
   1d098:	682b      	ldr	r3, [r5, #0]
   1d09a:	025a      	lsls	r2, r3, #9
   1d09c:	d5d0      	bpl.n	1d040 <rpc_ip_event_handler+0x434>
   1d09e:	6960      	ldr	r0, [r4, #20]
   1d0a0:	b918      	cbnz	r0, 1d0aa <rpc_ip_event_handler+0x49e>
   1d0a2:	682a      	ldr	r2, [r5, #0]
   1d0a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   1d0a8:	e728      	b.n	1cefc <rpc_ip_event_handler+0x2f0>
   1d0aa:	286a      	cmp	r0, #106	; 0x6a
   1d0ac:	d817      	bhi.n	1d0de <rpc_ip_event_handler+0x4d2>
   1d0ae:	4a0d      	ldr	r2, [pc, #52]	; (1d0e4 <rpc_ip_event_handler+0x4d8>)
   1d0b0:	5c13      	ldrb	r3, [r2, r0]
   1d0b2:	e713      	b.n	1cedc <rpc_ip_event_handler+0x2d0>
   1d0b4:	682b      	ldr	r3, [r5, #0]
   1d0b6:	01db      	lsls	r3, r3, #7
   1d0b8:	d5c2      	bpl.n	1d040 <rpc_ip_event_handler+0x434>
   1d0ba:	6963      	ldr	r3, [r4, #20]
   1d0bc:	b953      	cbnz	r3, 1d0d4 <rpc_ip_event_handler+0x4c8>
   1d0be:	6820      	ldr	r0, [r4, #0]
   1d0c0:	b118      	cbz	r0, 1d0ca <rpc_ip_event_handler+0x4be>
   1d0c2:	2001      	movs	r0, #1
   1d0c4:	4b08      	ldr	r3, [pc, #32]	; (1d0e8 <rpc_ip_event_handler+0x4dc>)
   1d0c6:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1d0ca:	682b      	ldr	r3, [r5, #0]
   1d0cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1d0d0:	602b      	str	r3, [r5, #0]
   1d0d2:	e7b6      	b.n	1d042 <rpc_ip_event_handler+0x436>
   1d0d4:	2b6a      	cmp	r3, #106	; 0x6a
   1d0d6:	d802      	bhi.n	1d0de <rpc_ip_event_handler+0x4d2>
   1d0d8:	4a02      	ldr	r2, [pc, #8]	; (1d0e4 <rpc_ip_event_handler+0x4d8>)
   1d0da:	5cd3      	ldrb	r3, [r2, r3]
   1d0dc:	e6fe      	b.n	1cedc <rpc_ip_event_handler+0x2d0>
   1d0de:	235f      	movs	r3, #95	; 0x5f
   1d0e0:	e6fc      	b.n	1cedc <rpc_ip_event_handler+0x2d0>
   1d0e2:	bf00      	nop
   1d0e4:	0002a2e2 	.word	0x0002a2e2
   1d0e8:	2000f800 	.word	0x2000f800

0001d0ec <secure_socket_dtls_timeout_check>:
   1d0ec:	281f      	cmp	r0, #31
   1d0ee:	dc0b      	bgt.n	1d108 <secure_socket_dtls_timeout_check+0x1c>
   1d0f0:	2800      	cmp	r0, #0
   1d0f2:	dd10      	ble.n	1d116 <secure_socket_dtls_timeout_check+0x2a>
   1d0f4:	2301      	movs	r3, #1
   1d0f6:	fa03 f000 	lsl.w	r0, r3, r0
   1d0fa:	4b09      	ldr	r3, [pc, #36]	; (1d120 <secure_socket_dtls_timeout_check+0x34>)
   1d0fc:	4003      	ands	r3, r0
   1d0fe:	2b00      	cmp	r3, #0
   1d100:	bf0c      	ite	eq
   1d102:	2016      	moveq	r0, #22
   1d104:	2000      	movne	r0, #0
   1d106:	4770      	bx	lr
   1d108:	283f      	cmp	r0, #63	; 0x3f
   1d10a:	d006      	beq.n	1d11a <secure_socket_dtls_timeout_check+0x2e>
   1d10c:	287b      	cmp	r0, #123	; 0x7b
   1d10e:	bf14      	ite	ne
   1d110:	2016      	movne	r0, #22
   1d112:	2000      	moveq	r0, #0
   1d114:	4770      	bx	lr
   1d116:	2016      	movs	r0, #22
   1d118:	4770      	bx	lr
   1d11a:	2000      	movs	r0, #0
   1d11c:	4770      	bx	lr
   1d11e:	bf00      	nop
   1d120:	8000808a 	.word	0x8000808a

0001d124 <hostname_free>:
   1d124:	b538      	push	{r3, r4, r5, lr}
   1d126:	4c07      	ldr	r4, [pc, #28]	; (1d144 <hostname_free+0x20>)
   1d128:	4605      	mov	r5, r0
   1d12a:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   1d12e:	b138      	cbz	r0, 1d140 <hostname_free+0x1c>
   1d130:	f7f9 fac2 	bl	166b8 <nrf_modem_os_free>
   1d134:	2300      	movs	r3, #0
   1d136:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   1d13a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1d13e:	6063      	str	r3, [r4, #4]
   1d140:	bd38      	pop	{r3, r4, r5, pc}
   1d142:	bf00      	nop
   1d144:	2000f824 	.word	0x2000f824

0001d148 <secure_socket_attach_initiate>:
   1d148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d14c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d150:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1d1e8 <secure_socket_attach_initiate+0xa0>
   1d154:	9301      	str	r3, [sp, #4]
   1d156:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   1d15a:	460d      	mov	r5, r1
   1d15c:	4616      	mov	r6, r2
   1d15e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d162:	f247 0281 	movw	r2, #28801	; 0x7081
   1d166:	6989      	ldr	r1, [r1, #24]
   1d168:	4607      	mov	r7, r0
   1d16a:	f007 feb9 	bl	24ee0 <ip_interface_request_create>
   1d16e:	4604      	mov	r4, r0
   1d170:	b398      	cbz	r0, 1d1da <secure_socket_attach_initiate+0x92>
   1d172:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1d176:	b122      	cbz	r2, 1d182 <secure_socket_attach_initiate+0x3a>
   1d178:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   1d17c:	6800      	ldr	r0, [r0, #0]
   1d17e:	f009 fb60 	bl	26842 <memcpy>
   1d182:	2324      	movs	r3, #36	; 0x24
   1d184:	4a17      	ldr	r2, [pc, #92]	; (1d1e4 <secure_socket_attach_initiate+0x9c>)
   1d186:	fb03 2307 	mla	r3, r3, r7, r2
   1d18a:	f104 0214 	add.w	r2, r4, #20
   1d18e:	f103 0124 	add.w	r1, r3, #36	; 0x24
   1d192:	f853 0b04 	ldr.w	r0, [r3], #4
   1d196:	428b      	cmp	r3, r1
   1d198:	f842 0b04 	str.w	r0, [r2], #4
   1d19c:	d1f9      	bne.n	1d192 <secure_socket_attach_initiate+0x4a>
   1d19e:	68a3      	ldr	r3, [r4, #8]
   1d1a0:	4622      	mov	r2, r4
   1d1a2:	3324      	adds	r3, #36	; 0x24
   1d1a4:	60a3      	str	r3, [r4, #8]
   1d1a6:	682b      	ldr	r3, [r5, #0]
   1d1a8:	f247 0181 	movw	r1, #28801	; 0x7081
   1d1ac:	0c1b      	lsrs	r3, r3, #16
   1d1ae:	041b      	lsls	r3, r3, #16
   1d1b0:	f043 030a 	orr.w	r3, r3, #10
   1d1b4:	602b      	str	r3, [r5, #0]
   1d1b6:	2004      	movs	r0, #4
   1d1b8:	f007 fce4 	bl	24b84 <rpc_client_request_send>
   1d1bc:	682b      	ldr	r3, [r5, #0]
   1d1be:	00db      	lsls	r3, r3, #3
   1d1c0:	d40d      	bmi.n	1d1de <secure_socket_attach_initiate+0x96>
   1d1c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d1c6:	210b      	movs	r1, #11
   1d1c8:	4638      	mov	r0, r7
   1d1ca:	ab01      	add	r3, sp, #4
   1d1cc:	f007 fe9b 	bl	24f06 <ip_interface_wait>
   1d1d0:	b100      	cbz	r0, 1d1d4 <secure_socket_attach_initiate+0x8c>
   1d1d2:	602e      	str	r6, [r5, #0]
   1d1d4:	b003      	add	sp, #12
   1d1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d1da:	200c      	movs	r0, #12
   1d1dc:	e7fa      	b.n	1d1d4 <secure_socket_attach_initiate+0x8c>
   1d1de:	2077      	movs	r0, #119	; 0x77
   1d1e0:	e7f8      	b.n	1d1d4 <secure_socket_attach_initiate+0x8c>
   1d1e2:	bf00      	nop
   1d1e4:	2000f916 	.word	0x2000f916
   1d1e8:	2000f824 	.word	0x2000f824

0001d1ec <tls_interface_init>:
   1d1ec:	2201      	movs	r2, #1
   1d1ee:	4b02      	ldr	r3, [pc, #8]	; (1d1f8 <tls_interface_init+0xc>)
   1d1f0:	2000      	movs	r0, #0
   1d1f2:	701a      	strb	r2, [r3, #0]
   1d1f4:	4770      	bx	lr
   1d1f6:	bf00      	nop
   1d1f8:	2000f915 	.word	0x2000f915

0001d1fc <tls_interface_open>:
   1d1fc:	b538      	push	{r3, r4, r5, lr}
   1d1fe:	4b21      	ldr	r3, [pc, #132]	; (1d284 <tls_interface_open+0x88>)
   1d200:	4615      	mov	r5, r2
   1d202:	781b      	ldrb	r3, [r3, #0]
   1d204:	b92b      	cbnz	r3, 1d212 <tls_interface_open+0x16>
   1d206:	2075      	movs	r0, #117	; 0x75
   1d208:	f006 fc11 	bl	23a2e <nrf_modem_os_errno_set>
   1d20c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d210:	e031      	b.n	1d276 <tls_interface_open+0x7a>
   1d212:	1e4b      	subs	r3, r1, #1
   1d214:	2b01      	cmp	r3, #1
   1d216:	d809      	bhi.n	1d22c <tls_interface_open+0x30>
   1d218:	b952      	cbnz	r2, 1d230 <tls_interface_open+0x34>
   1d21a:	2901      	cmp	r1, #1
   1d21c:	bf0b      	itete	eq
   1d21e:	2201      	moveq	r2, #1
   1d220:	2202      	movne	r2, #2
   1d222:	f44f 7582 	moveq.w	r5, #260	; 0x104
   1d226:	f44f 7587 	movne.w	r5, #270	; 0x10e
   1d22a:	e007      	b.n	1d23c <tls_interface_open+0x40>
   1d22c:	206b      	movs	r0, #107	; 0x6b
   1d22e:	e7eb      	b.n	1d208 <tls_interface_open+0xc>
   1d230:	2901      	cmp	r1, #1
   1d232:	d122      	bne.n	1d27a <tls_interface_open+0x7e>
   1d234:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1d238:	d1f8      	bne.n	1d22c <tls_interface_open+0x30>
   1d23a:	460a      	mov	r2, r1
   1d23c:	f7fe ff3a 	bl	1c0b4 <ip_interface_open>
   1d240:	1e04      	subs	r4, r0, #0
   1d242:	dbe3      	blt.n	1d20c <tls_interface_open+0x10>
   1d244:	2224      	movs	r2, #36	; 0x24
   1d246:	4910      	ldr	r1, [pc, #64]	; (1d288 <tls_interface_open+0x8c>)
   1d248:	4b10      	ldr	r3, [pc, #64]	; (1d28c <tls_interface_open+0x90>)
   1d24a:	fb02 1204 	mla	r2, r2, r4, r1
   1d24e:	f103 0124 	add.w	r1, r3, #36	; 0x24
   1d252:	f853 0b04 	ldr.w	r0, [r3], #4
   1d256:	428b      	cmp	r3, r1
   1d258:	f842 0b04 	str.w	r0, [r2], #4
   1d25c:	d1f9      	bne.n	1d252 <tls_interface_open+0x56>
   1d25e:	4620      	mov	r0, r4
   1d260:	f7fe fe22 	bl	1bea8 <interface_socket_from_handle_get>
   1d264:	6803      	ldr	r3, [r0, #0]
   1d266:	6145      	str	r5, [r0, #20]
   1d268:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1d26c:	6003      	str	r3, [r0, #0]
   1d26e:	6803      	ldr	r3, [r0, #0]
   1d270:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1d274:	6003      	str	r3, [r0, #0]
   1d276:	4620      	mov	r0, r4
   1d278:	bd38      	pop	{r3, r4, r5, pc}
   1d27a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1d27e:	d1d5      	bne.n	1d22c <tls_interface_open+0x30>
   1d280:	2202      	movs	r2, #2
   1d282:	e7db      	b.n	1d23c <tls_interface_open+0x40>
   1d284:	2000f915 	.word	0x2000f915
   1d288:	2000f916 	.word	0x2000f916
   1d28c:	0002a34d 	.word	0x0002a34d

0001d290 <tls_interface_sendto>:
   1d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d294:	b085      	sub	sp, #20
   1d296:	4606      	mov	r6, r0
   1d298:	4691      	mov	r9, r2
   1d29a:	461f      	mov	r7, r3
   1d29c:	9103      	str	r1, [sp, #12]
   1d29e:	f7fe fe03 	bl	1bea8 <interface_socket_from_handle_get>
   1d2a2:	4605      	mov	r5, r0
   1d2a4:	2800      	cmp	r0, #0
   1d2a6:	d06c      	beq.n	1d382 <tls_interface_sendto+0xf2>
   1d2a8:	f04f 0a24 	mov.w	sl, #36	; 0x24
   1d2ac:	07bb      	lsls	r3, r7, #30
   1d2ae:	bf48      	it	mi
   1d2b0:	2300      	movmi	r3, #0
   1d2b2:	f04f 0400 	mov.w	r4, #0
   1d2b6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1d2ba:	bf58      	it	pl
   1d2bc:	6803      	ldrpl	r3, [r0, #0]
   1d2be:	fb0a fa06 	mul.w	sl, sl, r6
   1d2c2:	bf5c      	itt	pl
   1d2c4:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   1d2c8:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   1d2cc:	9302      	str	r3, [sp, #8]
   1d2ce:	6829      	ldr	r1, [r5, #0]
   1d2d0:	eba9 0804 	sub.w	r8, r9, r4
   1d2d4:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   1d2d8:	b289      	uxth	r1, r1
   1d2da:	bfa8      	it	ge
   1d2dc:	f44f 6800 	movge.w	r8, #2048	; 0x800
   1d2e0:	290c      	cmp	r1, #12
   1d2e2:	d110      	bne.n	1d306 <tls_interface_sendto+0x76>
   1d2e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d2e6:	9903      	ldr	r1, [sp, #12]
   1d2e8:	9301      	str	r3, [sp, #4]
   1d2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d2ec:	4642      	mov	r2, r8
   1d2ee:	9300      	str	r3, [sp, #0]
   1d2f0:	4630      	mov	r0, r6
   1d2f2:	463b      	mov	r3, r7
   1d2f4:	4421      	add	r1, r4
   1d2f6:	f7fe ff9f 	bl	1c238 <ip_interface_sendto>
   1d2fa:	f1b0 0b00 	subs.w	fp, r0, #0
   1d2fe:	da32      	bge.n	1d366 <tls_interface_sendto+0xd6>
   1d300:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d304:	e034      	b.n	1d370 <tls_interface_sendto+0xe0>
   1d306:	6828      	ldr	r0, [r5, #0]
   1d308:	b280      	uxth	r0, r0
   1d30a:	280b      	cmp	r0, #11
   1d30c:	d109      	bne.n	1d322 <tls_interface_sendto+0x92>
   1d30e:	4b21      	ldr	r3, [pc, #132]	; (1d394 <tls_interface_sendto+0x104>)
   1d310:	f813 200a 	ldrb.w	r2, [r3, sl]
   1d314:	2a02      	cmp	r2, #2
   1d316:	d031      	beq.n	1d37c <tls_interface_sendto+0xec>
   1d318:	692a      	ldr	r2, [r5, #16]
   1d31a:	2a01      	cmp	r2, #1
   1d31c:	d133      	bne.n	1d386 <tls_interface_sendto+0xf6>
   1d31e:	206d      	movs	r0, #109	; 0x6d
   1d320:	e02c      	b.n	1d37c <tls_interface_sendto+0xec>
   1d322:	4628      	mov	r0, r5
   1d324:	f008 f858 	bl	253d8 <attach_trigger_condition_verify>
   1d328:	b388      	cbz	r0, 1d38e <tls_interface_sendto+0xfe>
   1d32a:	4b1a      	ldr	r3, [pc, #104]	; (1d394 <tls_interface_sendto+0x104>)
   1d32c:	f813 100a 	ldrb.w	r1, [r3, sl]
   1d330:	2902      	cmp	r1, #2
   1d332:	d110      	bne.n	1d356 <tls_interface_sendto+0xc6>
   1d334:	4629      	mov	r1, r5
   1d336:	4630      	mov	r0, r6
   1d338:	f008 f865 	bl	25406 <secure_client_socket>
   1d33c:	b970      	cbnz	r0, 1d35c <tls_interface_sendto+0xcc>
   1d33e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d340:	9903      	ldr	r1, [sp, #12]
   1d342:	9301      	str	r3, [sp, #4]
   1d344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d346:	4642      	mov	r2, r8
   1d348:	9300      	str	r3, [sp, #0]
   1d34a:	4630      	mov	r0, r6
   1d34c:	463b      	mov	r3, r7
   1d34e:	4421      	add	r1, r4
   1d350:	f7fe ff72 	bl	1c238 <ip_interface_sendto>
   1d354:	4683      	mov	fp, r0
   1d356:	f1bb 0f00 	cmp.w	fp, #0
   1d35a:	e7d0      	b.n	1d2fe <tls_interface_sendto+0x6e>
   1d35c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1d360:	d00a      	beq.n	1d378 <tls_interface_sendto+0xe8>
   1d362:	2800      	cmp	r0, #0
   1d364:	dc0a      	bgt.n	1d37c <tls_interface_sendto+0xec>
   1d366:	9b02      	ldr	r3, [sp, #8]
   1d368:	445c      	add	r4, fp
   1d36a:	b10b      	cbz	r3, 1d370 <tls_interface_sendto+0xe0>
   1d36c:	45a1      	cmp	r9, r4
   1d36e:	dcae      	bgt.n	1d2ce <tls_interface_sendto+0x3e>
   1d370:	4620      	mov	r0, r4
   1d372:	b005      	add	sp, #20
   1d374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d378:	2800      	cmp	r0, #0
   1d37a:	ddc1      	ble.n	1d300 <tls_interface_sendto+0x70>
   1d37c:	f006 fb57 	bl	23a2e <nrf_modem_os_errno_set>
   1d380:	e7be      	b.n	1d300 <tls_interface_sendto+0x70>
   1d382:	2009      	movs	r0, #9
   1d384:	e7fa      	b.n	1d37c <tls_interface_sendto+0xec>
   1d386:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1d38a:	d1ec      	bne.n	1d366 <tls_interface_sendto+0xd6>
   1d38c:	e7b8      	b.n	1d300 <tls_interface_sendto+0x70>
   1d38e:	2080      	movs	r0, #128	; 0x80
   1d390:	e7f4      	b.n	1d37c <tls_interface_sendto+0xec>
   1d392:	bf00      	nop
   1d394:	2000f916 	.word	0x2000f916

0001d398 <tls_interface_recvfrom>:
   1d398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d39a:	460d      	mov	r5, r1
   1d39c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   1d3a0:	4604      	mov	r4, r0
   1d3a2:	e9cd 3200 	strd	r3, r2, [sp]
   1d3a6:	f7fe fd7f 	bl	1bea8 <interface_socket_from_handle_get>
   1d3aa:	4601      	mov	r1, r0
   1d3ac:	b388      	cbz	r0, 1d412 <tls_interface_recvfrom+0x7a>
   1d3ae:	e9dd 3200 	ldrd	r3, r2, [sp]
   1d3b2:	f8d0 c000 	ldr.w	ip, [r0]
   1d3b6:	fa1f fc8c 	uxth.w	ip, ip
   1d3ba:	f1bc 0f0c 	cmp.w	ip, #12
   1d3be:	d006      	beq.n	1d3ce <tls_interface_recvfrom+0x36>
   1d3c0:	f8d0 c000 	ldr.w	ip, [r0]
   1d3c4:	fa1f fc8c 	uxth.w	ip, ip
   1d3c8:	f1bc 0f0d 	cmp.w	ip, #13
   1d3cc:	d108      	bne.n	1d3e0 <tls_interface_recvfrom+0x48>
   1d3ce:	4629      	mov	r1, r5
   1d3d0:	4620      	mov	r0, r4
   1d3d2:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1d3d6:	b003      	add	sp, #12
   1d3d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d3dc:	f007 bda3 	b.w	24f26 <ip_interface_recvfrom>
   1d3e0:	e9cd 2300 	strd	r2, r3, [sp]
   1d3e4:	f007 fff8 	bl	253d8 <attach_trigger_condition_verify>
   1d3e8:	b1b8      	cbz	r0, 1d41a <tls_interface_recvfrom+0x82>
   1d3ea:	2024      	movs	r0, #36	; 0x24
   1d3ec:	4360      	muls	r0, r4
   1d3ee:	f8df c030 	ldr.w	ip, [pc, #48]	; 1d420 <tls_interface_recvfrom+0x88>
   1d3f2:	f81c 0000 	ldrb.w	r0, [ip, r0]
   1d3f6:	2802      	cmp	r0, #2
   1d3f8:	d10f      	bne.n	1d41a <tls_interface_recvfrom+0x82>
   1d3fa:	4620      	mov	r0, r4
   1d3fc:	f008 f803 	bl	25406 <secure_client_socket>
   1d400:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d404:	2800      	cmp	r0, #0
   1d406:	d0e2      	beq.n	1d3ce <tls_interface_recvfrom+0x36>
   1d408:	dc04      	bgt.n	1d414 <tls_interface_recvfrom+0x7c>
   1d40a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d40e:	b003      	add	sp, #12
   1d410:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d412:	2009      	movs	r0, #9
   1d414:	f006 fb0b 	bl	23a2e <nrf_modem_os_errno_set>
   1d418:	e7f7      	b.n	1d40a <tls_interface_recvfrom+0x72>
   1d41a:	200b      	movs	r0, #11
   1d41c:	e7fa      	b.n	1d414 <tls_interface_recvfrom+0x7c>
   1d41e:	bf00      	nop
   1d420:	2000f916 	.word	0x2000f916

0001d424 <tls_interface_bind>:
   1d424:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d426:	4604      	mov	r4, r0
   1d428:	e9cd 2100 	strd	r2, r1, [sp]
   1d42c:	f7fe fd3c 	bl	1bea8 <interface_socket_from_handle_get>
   1d430:	4605      	mov	r5, r0
   1d432:	b1e0      	cbz	r0, 1d46e <tls_interface_bind+0x4a>
   1d434:	6803      	ldr	r3, [r0, #0]
   1d436:	b29b      	uxth	r3, r3
   1d438:	2b02      	cmp	r3, #2
   1d43a:	d11a      	bne.n	1d472 <tls_interface_bind+0x4e>
   1d43c:	e9dd 2100 	ldrd	r2, r1, [sp]
   1d440:	4620      	mov	r0, r4
   1d442:	f7ff f88d 	bl	1c560 <ip_interface_bind>
   1d446:	b950      	cbnz	r0, 1d45e <tls_interface_bind+0x3a>
   1d448:	2324      	movs	r3, #36	; 0x24
   1d44a:	4363      	muls	r3, r4
   1d44c:	4a0a      	ldr	r2, [pc, #40]	; (1d478 <tls_interface_bind+0x54>)
   1d44e:	5cd3      	ldrb	r3, [r2, r3]
   1d450:	2b01      	cmp	r3, #1
   1d452:	d10a      	bne.n	1d46a <tls_interface_bind+0x46>
   1d454:	2204      	movs	r2, #4
   1d456:	4629      	mov	r1, r5
   1d458:	4620      	mov	r0, r4
   1d45a:	f7ff fe75 	bl	1d148 <secure_socket_attach_initiate>
   1d45e:	2800      	cmp	r0, #0
   1d460:	dd03      	ble.n	1d46a <tls_interface_bind+0x46>
   1d462:	f006 fae4 	bl	23a2e <nrf_modem_os_errno_set>
   1d466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d46a:	b003      	add	sp, #12
   1d46c:	bd30      	pop	{r4, r5, pc}
   1d46e:	2009      	movs	r0, #9
   1d470:	e7f7      	b.n	1d462 <tls_interface_bind+0x3e>
   1d472:	205f      	movs	r0, #95	; 0x5f
   1d474:	e7f5      	b.n	1d462 <tls_interface_bind+0x3e>
   1d476:	bf00      	nop
   1d478:	2000f916 	.word	0x2000f916

0001d47c <tls_interface_connect>:
   1d47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d47e:	4605      	mov	r5, r0
   1d480:	e9cd 2100 	strd	r2, r1, [sp]
   1d484:	f7fe fd10 	bl	1bea8 <interface_socket_from_handle_get>
   1d488:	4604      	mov	r4, r0
   1d48a:	b1f8      	cbz	r0, 1d4cc <tls_interface_connect+0x50>
   1d48c:	2324      	movs	r3, #36	; 0x24
   1d48e:	436b      	muls	r3, r5
   1d490:	4810      	ldr	r0, [pc, #64]	; (1d4d4 <tls_interface_connect+0x58>)
   1d492:	5cc3      	ldrb	r3, [r0, r3]
   1d494:	2b02      	cmp	r3, #2
   1d496:	d11b      	bne.n	1d4d0 <tls_interface_connect+0x54>
   1d498:	e9dd 2100 	ldrd	r2, r1, [sp]
   1d49c:	6823      	ldr	r3, [r4, #0]
   1d49e:	b29b      	uxth	r3, r3
   1d4a0:	2b02      	cmp	r3, #2
   1d4a2:	d003      	beq.n	1d4ac <tls_interface_connect+0x30>
   1d4a4:	6823      	ldr	r3, [r4, #0]
   1d4a6:	b29b      	uxth	r3, r3
   1d4a8:	2b04      	cmp	r3, #4
   1d4aa:	d111      	bne.n	1d4d0 <tls_interface_connect+0x54>
   1d4ac:	4628      	mov	r0, r5
   1d4ae:	f007 fe3c 	bl	2512a <ip_interface_connect>
   1d4b2:	b918      	cbnz	r0, 1d4bc <tls_interface_connect+0x40>
   1d4b4:	4621      	mov	r1, r4
   1d4b6:	4628      	mov	r0, r5
   1d4b8:	f007 ffa5 	bl	25406 <secure_client_socket>
   1d4bc:	2800      	cmp	r0, #0
   1d4be:	dd03      	ble.n	1d4c8 <tls_interface_connect+0x4c>
   1d4c0:	f006 fab5 	bl	23a2e <nrf_modem_os_errno_set>
   1d4c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d4c8:	b003      	add	sp, #12
   1d4ca:	bd30      	pop	{r4, r5, pc}
   1d4cc:	2009      	movs	r0, #9
   1d4ce:	e7f7      	b.n	1d4c0 <tls_interface_connect+0x44>
   1d4d0:	205f      	movs	r0, #95	; 0x5f
   1d4d2:	e7f5      	b.n	1d4c0 <tls_interface_connect+0x44>
   1d4d4:	2000f916 	.word	0x2000f916

0001d4d8 <tls_interface_listen>:
   1d4d8:	b538      	push	{r3, r4, r5, lr}
   1d4da:	4604      	mov	r4, r0
   1d4dc:	460d      	mov	r5, r1
   1d4de:	f7fe fce3 	bl	1bea8 <interface_socket_from_handle_get>
   1d4e2:	2800      	cmp	r0, #0
   1d4e4:	d034      	beq.n	1d550 <tls_interface_listen+0x78>
   1d4e6:	6803      	ldr	r3, [r0, #0]
   1d4e8:	00db      	lsls	r3, r3, #3
   1d4ea:	d433      	bmi.n	1d554 <tls_interface_listen+0x7c>
   1d4ec:	6903      	ldr	r3, [r0, #16]
   1d4ee:	2b01      	cmp	r3, #1
   1d4f0:	d130      	bne.n	1d554 <tls_interface_listen+0x7c>
   1d4f2:	6803      	ldr	r3, [r0, #0]
   1d4f4:	b29b      	uxth	r3, r3
   1d4f6:	2b04      	cmp	r3, #4
   1d4f8:	d105      	bne.n	1d506 <tls_interface_listen+0x2e>
   1d4fa:	2324      	movs	r3, #36	; 0x24
   1d4fc:	4363      	muls	r3, r4
   1d4fe:	4a16      	ldr	r2, [pc, #88]	; (1d558 <tls_interface_listen+0x80>)
   1d500:	5cd3      	ldrb	r3, [r2, r3]
   1d502:	2b02      	cmp	r3, #2
   1d504:	d009      	beq.n	1d51a <tls_interface_listen+0x42>
   1d506:	6803      	ldr	r3, [r0, #0]
   1d508:	b29b      	uxth	r3, r3
   1d50a:	2b0b      	cmp	r3, #11
   1d50c:	d122      	bne.n	1d554 <tls_interface_listen+0x7c>
   1d50e:	2324      	movs	r3, #36	; 0x24
   1d510:	4363      	muls	r3, r4
   1d512:	4a11      	ldr	r2, [pc, #68]	; (1d558 <tls_interface_listen+0x80>)
   1d514:	5cd3      	ldrb	r3, [r2, r3]
   1d516:	2b01      	cmp	r3, #1
   1d518:	d11c      	bne.n	1d554 <tls_interface_listen+0x7c>
   1d51a:	2324      	movs	r3, #36	; 0x24
   1d51c:	2101      	movs	r1, #1
   1d51e:	4363      	muls	r3, r4
   1d520:	4a0d      	ldr	r2, [pc, #52]	; (1d558 <tls_interface_listen+0x80>)
   1d522:	54d1      	strb	r1, [r2, r3]
   1d524:	6803      	ldr	r3, [r0, #0]
   1d526:	2b0b      	cmp	r3, #11
   1d528:	d10a      	bne.n	1d540 <tls_interface_listen+0x68>
   1d52a:	4629      	mov	r1, r5
   1d52c:	4620      	mov	r0, r4
   1d52e:	f7ff f877 	bl	1c620 <ip_interface_listen>
   1d532:	2800      	cmp	r0, #0
   1d534:	dd03      	ble.n	1d53e <tls_interface_listen+0x66>
   1d536:	f006 fa7a 	bl	23a2e <nrf_modem_os_errno_set>
   1d53a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d53e:	bd38      	pop	{r3, r4, r5, pc}
   1d540:	4601      	mov	r1, r0
   1d542:	6802      	ldr	r2, [r0, #0]
   1d544:	4620      	mov	r0, r4
   1d546:	f7ff fdff 	bl	1d148 <secure_socket_attach_initiate>
   1d54a:	2800      	cmp	r0, #0
   1d54c:	d0ed      	beq.n	1d52a <tls_interface_listen+0x52>
   1d54e:	e7f0      	b.n	1d532 <tls_interface_listen+0x5a>
   1d550:	2009      	movs	r0, #9
   1d552:	e7f0      	b.n	1d536 <tls_interface_listen+0x5e>
   1d554:	205f      	movs	r0, #95	; 0x5f
   1d556:	e7ee      	b.n	1d536 <tls_interface_listen+0x5e>
   1d558:	2000f916 	.word	0x2000f916

0001d55c <tls_interface_accept>:
   1d55c:	b570      	push	{r4, r5, r6, lr}
   1d55e:	b086      	sub	sp, #24
   1d560:	4605      	mov	r5, r0
   1d562:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d566:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1d56a:	9301      	str	r3, [sp, #4]
   1d56c:	f7fe fc9c 	bl	1bea8 <interface_socket_from_handle_get>
   1d570:	9405      	str	r4, [sp, #20]
   1d572:	2800      	cmp	r0, #0
   1d574:	d04b      	beq.n	1d60e <tls_interface_accept+0xb2>
   1d576:	6806      	ldr	r6, [r0, #0]
   1d578:	b2b6      	uxth	r6, r6
   1d57a:	2e07      	cmp	r6, #7
   1d57c:	d147      	bne.n	1d60e <tls_interface_accept+0xb2>
   1d57e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1d582:	6800      	ldr	r0, [r0, #0]
   1d584:	9903      	ldr	r1, [sp, #12]
   1d586:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   1d58a:	d005      	beq.n	1d598 <tls_interface_accept+0x3c>
   1d58c:	205f      	movs	r0, #95	; 0x5f
   1d58e:	f006 fa4e 	bl	23a2e <nrf_modem_os_errno_set>
   1d592:	4620      	mov	r0, r4
   1d594:	b006      	add	sp, #24
   1d596:	bd70      	pop	{r4, r5, r6, pc}
   1d598:	4628      	mov	r0, r5
   1d59a:	f7ff f88f 	bl	1c6bc <ip_interface_accept>
   1d59e:	1e04      	subs	r4, r0, #0
   1d5a0:	db2f      	blt.n	1d602 <tls_interface_accept+0xa6>
   1d5a2:	f7fe fc81 	bl	1bea8 <interface_socket_from_handle_get>
   1d5a6:	2124      	movs	r1, #36	; 0x24
   1d5a8:	6803      	ldr	r3, [r0, #0]
   1d5aa:	4a1a      	ldr	r2, [pc, #104]	; (1d614 <tls_interface_accept+0xb8>)
   1d5ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1d5b0:	6003      	str	r3, [r0, #0]
   1d5b2:	6803      	ldr	r3, [r0, #0]
   1d5b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1d5b8:	6003      	str	r3, [r0, #0]
   1d5ba:	fb01 2305 	mla	r3, r1, r5, r2
   1d5be:	fb01 2104 	mla	r1, r1, r4, r2
   1d5c2:	f103 0524 	add.w	r5, r3, #36	; 0x24
   1d5c6:	f853 6b04 	ldr.w	r6, [r3], #4
   1d5ca:	42ab      	cmp	r3, r5
   1d5cc:	f841 6b04 	str.w	r6, [r1], #4
   1d5d0:	d1f9      	bne.n	1d5c6 <tls_interface_accept+0x6a>
   1d5d2:	2324      	movs	r3, #36	; 0x24
   1d5d4:	2102      	movs	r1, #2
   1d5d6:	4363      	muls	r3, r4
   1d5d8:	54d1      	strb	r1, [r2, r3]
   1d5da:	6803      	ldr	r3, [r0, #0]
   1d5dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d5e0:	0c1b      	lsrs	r3, r3, #16
   1d5e2:	041b      	lsls	r3, r3, #16
   1d5e4:	f043 030b 	orr.w	r3, r3, #11
   1d5e8:	6003      	str	r3, [r0, #0]
   1d5ea:	210c      	movs	r1, #12
   1d5ec:	4620      	mov	r0, r4
   1d5ee:	ab05      	add	r3, sp, #20
   1d5f0:	f007 fc89 	bl	24f06 <ip_interface_wait>
   1d5f4:	4605      	mov	r5, r0
   1d5f6:	2800      	cmp	r0, #0
   1d5f8:	d0cb      	beq.n	1d592 <tls_interface_accept+0x36>
   1d5fa:	4620      	mov	r0, r4
   1d5fc:	f7fe fdd6 	bl	1c1ac <ip_interface_close>
   1d600:	462c      	mov	r4, r5
   1d602:	4620      	mov	r0, r4
   1d604:	f006 fa13 	bl	23a2e <nrf_modem_os_errno_set>
   1d608:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d60c:	e7c1      	b.n	1d592 <tls_interface_accept+0x36>
   1d60e:	2409      	movs	r4, #9
   1d610:	e7f7      	b.n	1d602 <tls_interface_accept+0xa6>
   1d612:	bf00      	nop
   1d614:	2000f916 	.word	0x2000f916

0001d618 <tls_interface_setopt>:
   1d618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d61a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1d61e:	4606      	mov	r6, r0
   1d620:	4615      	mov	r5, r2
   1d622:	461f      	mov	r7, r3
   1d624:	9c08      	ldr	r4, [sp, #32]
   1d626:	d004      	beq.n	1d632 <tls_interface_setopt+0x1a>
   1d628:	b003      	add	sp, #12
   1d62a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d62e:	f7ff b929 	b.w	1c884 <ip_interface_setopt>
   1d632:	b923      	cbnz	r3, 1d63e <tls_interface_setopt+0x26>
   1d634:	2a05      	cmp	r2, #5
   1d636:	d100      	bne.n	1d63a <tls_interface_setopt+0x22>
   1d638:	b10c      	cbz	r4, 1d63e <tls_interface_setopt+0x26>
   1d63a:	200e      	movs	r0, #14
   1d63c:	e077      	b.n	1d72e <tls_interface_setopt+0x116>
   1d63e:	4630      	mov	r0, r6
   1d640:	f7fe fc32 	bl	1bea8 <interface_socket_from_handle_get>
   1d644:	4601      	mov	r1, r0
   1d646:	2800      	cmp	r0, #0
   1d648:	f000 8087 	beq.w	1d75a <tls_interface_setopt+0x142>
   1d64c:	6803      	ldr	r3, [r0, #0]
   1d64e:	b29b      	uxth	r3, r3
   1d650:	2b02      	cmp	r3, #2
   1d652:	d007      	beq.n	1d664 <tls_interface_setopt+0x4c>
   1d654:	6803      	ldr	r3, [r0, #0]
   1d656:	b29b      	uxth	r3, r3
   1d658:	2b04      	cmp	r3, #4
   1d65a:	d003      	beq.n	1d664 <tls_interface_setopt+0x4c>
   1d65c:	6803      	ldr	r3, [r0, #0]
   1d65e:	b29b      	uxth	r3, r3
   1d660:	2b05      	cmp	r3, #5
   1d662:	d17a      	bne.n	1d75a <tls_interface_setopt+0x142>
   1d664:	3d01      	subs	r5, #1
   1d666:	2d08      	cmp	r5, #8
   1d668:	d879      	bhi.n	1d75e <tls_interface_setopt+0x146>
   1d66a:	e8df f005 	tbb	[pc, r5]
   1d66e:	2605      	.short	0x2605
   1d670:	55433818 	.word	0x55433818
   1d674:	6578      	.short	0x6578
   1d676:	71          	.byte	0x71
   1d677:	00          	.byte	0x00
   1d678:	2c04      	cmp	r4, #4
   1d67a:	d174      	bne.n	1d766 <tls_interface_setopt+0x14e>
   1d67c:	6838      	ldr	r0, [r7, #0]
   1d67e:	b930      	cbnz	r0, 1d68e <tls_interface_setopt+0x76>
   1d680:	2324      	movs	r3, #36	; 0x24
   1d682:	2202      	movs	r2, #2
   1d684:	435e      	muls	r6, r3
   1d686:	4b39      	ldr	r3, [pc, #228]	; (1d76c <tls_interface_setopt+0x154>)
   1d688:	559a      	strb	r2, [r3, r6]
   1d68a:	b003      	add	sp, #12
   1d68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d68e:	2801      	cmp	r0, #1
   1d690:	d169      	bne.n	1d766 <tls_interface_setopt+0x14e>
   1d692:	2324      	movs	r3, #36	; 0x24
   1d694:	435e      	muls	r6, r3
   1d696:	4b35      	ldr	r3, [pc, #212]	; (1d76c <tls_interface_setopt+0x154>)
   1d698:	5598      	strb	r0, [r3, r6]
   1d69a:	2000      	movs	r0, #0
   1d69c:	e7f5      	b.n	1d68a <tls_interface_setopt+0x72>
   1d69e:	2c01      	cmp	r4, #1
   1d6a0:	d161      	bne.n	1d766 <tls_interface_setopt+0x14e>
   1d6a2:	2f00      	cmp	r7, #0
   1d6a4:	d0c9      	beq.n	1d63a <tls_interface_setopt+0x22>
   1d6a6:	2024      	movs	r0, #36	; 0x24
   1d6a8:	783b      	ldrb	r3, [r7, #0]
   1d6aa:	4a30      	ldr	r2, [pc, #192]	; (1d76c <tls_interface_setopt+0x154>)
   1d6ac:	3b00      	subs	r3, #0
   1d6ae:	bf18      	it	ne
   1d6b0:	2301      	movne	r3, #1
   1d6b2:	fb00 2606 	mla	r6, r0, r6, r2
   1d6b6:	7073      	strb	r3, [r6, #1]
   1d6b8:	e7ef      	b.n	1d69a <tls_interface_setopt+0x82>
   1d6ba:	2c03      	cmp	r4, #3
   1d6bc:	d953      	bls.n	1d766 <tls_interface_setopt+0x14e>
   1d6be:	f014 0503 	ands.w	r5, r4, #3
   1d6c2:	d150      	bne.n	1d766 <tls_interface_setopt+0x14e>
   1d6c4:	2324      	movs	r3, #36	; 0x24
   1d6c6:	435e      	muls	r6, r3
   1d6c8:	4828      	ldr	r0, [pc, #160]	; (1d76c <tls_interface_setopt+0x154>)
   1d6ca:	08a2      	lsrs	r2, r4, #2
   1d6cc:	1983      	adds	r3, r0, r6
   1d6ce:	70da      	strb	r2, [r3, #3]
   1d6d0:	4639      	mov	r1, r7
   1d6d2:	4622      	mov	r2, r4
   1d6d4:	3604      	adds	r6, #4
   1d6d6:	4430      	add	r0, r6
   1d6d8:	f009 f8b3 	bl	26842 <memcpy>
   1d6dc:	e7dd      	b.n	1d69a <tls_interface_setopt+0x82>
   1d6de:	2c04      	cmp	r4, #4
   1d6e0:	d141      	bne.n	1d766 <tls_interface_setopt+0x14e>
   1d6e2:	683b      	ldr	r3, [r7, #0]
   1d6e4:	2b02      	cmp	r3, #2
   1d6e6:	d83e      	bhi.n	1d766 <tls_interface_setopt+0x14e>
   1d6e8:	2024      	movs	r0, #36	; 0x24
   1d6ea:	4a20      	ldr	r2, [pc, #128]	; (1d76c <tls_interface_setopt+0x154>)
   1d6ec:	fb00 2606 	mla	r6, r0, r6, r2
   1d6f0:	70b3      	strb	r3, [r6, #2]
   1d6f2:	e7d2      	b.n	1d69a <tls_interface_setopt+0x82>
   1d6f4:	4630      	mov	r0, r6
   1d6f6:	f7ff fd15 	bl	1d124 <hostname_free>
   1d6fa:	2c00      	cmp	r4, #0
   1d6fc:	d0cd      	beq.n	1d69a <tls_interface_setopt+0x82>
   1d6fe:	4620      	mov	r0, r4
   1d700:	f7f8 ffd0 	bl	166a4 <nrf_modem_os_alloc>
   1d704:	4b1a      	ldr	r3, [pc, #104]	; (1d770 <tls_interface_setopt+0x158>)
   1d706:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   1d70a:	b350      	cbz	r0, 1d762 <tls_interface_setopt+0x14a>
   1d70c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   1d710:	4622      	mov	r2, r4
   1d712:	4639      	mov	r1, r7
   1d714:	6074      	str	r4, [r6, #4]
   1d716:	e7df      	b.n	1d6d8 <tls_interface_setopt+0xc0>
   1d718:	f247 0301 	movw	r3, #28673	; 0x7001
   1d71c:	e9cd 7400 	strd	r7, r4, [sp]
   1d720:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d724:	4630      	mov	r0, r6
   1d726:	f007 fd96 	bl	25256 <ip_interface_socketoption_send>
   1d72a:	2800      	cmp	r0, #0
   1d72c:	d0b5      	beq.n	1d69a <tls_interface_setopt+0x82>
   1d72e:	f006 f97e 	bl	23a2e <nrf_modem_os_errno_set>
   1d732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d736:	e7a8      	b.n	1d68a <tls_interface_setopt+0x72>
   1d738:	2c04      	cmp	r4, #4
   1d73a:	d114      	bne.n	1d766 <tls_interface_setopt+0x14e>
   1d73c:	6838      	ldr	r0, [r7, #0]
   1d73e:	f7ff fcd5 	bl	1d0ec <secure_socket_dtls_timeout_check>
   1d742:	2800      	cmp	r0, #0
   1d744:	d1f3      	bne.n	1d72e <tls_interface_setopt+0x116>
   1d746:	f247 0302 	movw	r3, #28674	; 0x7002
   1d74a:	e9cd 7400 	strd	r7, r4, [sp]
   1d74e:	e7e7      	b.n	1d720 <tls_interface_setopt+0x108>
   1d750:	f247 0303 	movw	r3, #28675	; 0x7003
   1d754:	e9cd 7400 	strd	r7, r4, [sp]
   1d758:	e7e2      	b.n	1d720 <tls_interface_setopt+0x108>
   1d75a:	2009      	movs	r0, #9
   1d75c:	e7e7      	b.n	1d72e <tls_interface_setopt+0x116>
   1d75e:	206d      	movs	r0, #109	; 0x6d
   1d760:	e7e5      	b.n	1d72e <tls_interface_setopt+0x116>
   1d762:	200c      	movs	r0, #12
   1d764:	e7e3      	b.n	1d72e <tls_interface_setopt+0x116>
   1d766:	2016      	movs	r0, #22
   1d768:	e7e1      	b.n	1d72e <tls_interface_setopt+0x116>
   1d76a:	bf00      	nop
   1d76c:	2000f916 	.word	0x2000f916
   1d770:	2000f824 	.word	0x2000f824

0001d774 <tls_interface_getopt>:
   1d774:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d776:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1d77a:	b085      	sub	sp, #20
   1d77c:	4606      	mov	r6, r0
   1d77e:	4617      	mov	r7, r2
   1d780:	461d      	mov	r5, r3
   1d782:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1d784:	d004      	beq.n	1d790 <tls_interface_getopt+0x1c>
   1d786:	b005      	add	sp, #20
   1d788:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d78c:	f007 bdc9 	b.w	25322 <ip_interface_getopt>
   1d790:	b103      	cbz	r3, 1d794 <tls_interface_getopt+0x20>
   1d792:	b92c      	cbnz	r4, 1d7a0 <tls_interface_getopt+0x2c>
   1d794:	200e      	movs	r0, #14
   1d796:	f006 f94a 	bl	23a2e <nrf_modem_os_errno_set>
   1d79a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d79e:	e051      	b.n	1d844 <tls_interface_getopt+0xd0>
   1d7a0:	6823      	ldr	r3, [r4, #0]
   1d7a2:	b90b      	cbnz	r3, 1d7a8 <tls_interface_getopt+0x34>
   1d7a4:	2016      	movs	r0, #22
   1d7a6:	e7f6      	b.n	1d796 <tls_interface_getopt+0x22>
   1d7a8:	f7fe fb7e 	bl	1bea8 <interface_socket_from_handle_get>
   1d7ac:	4601      	mov	r1, r0
   1d7ae:	2800      	cmp	r0, #0
   1d7b0:	d068      	beq.n	1d884 <tls_interface_getopt+0x110>
   1d7b2:	1e7a      	subs	r2, r7, #1
   1d7b4:	2a07      	cmp	r2, #7
   1d7b6:	d871      	bhi.n	1d89c <tls_interface_getopt+0x128>
   1d7b8:	e8df f002 	tbb	[pc, r2]
   1d7bc:	461a2904 	.word	0x461a2904
   1d7c0:	5f705370 	.word	0x5f705370
   1d7c4:	6823      	ldr	r3, [r4, #0]
   1d7c6:	2124      	movs	r1, #36	; 0x24
   1d7c8:	2b04      	cmp	r3, #4
   1d7ca:	bf88      	it	hi
   1d7cc:	2304      	movhi	r3, #4
   1d7ce:	fb01 f606 	mul.w	r6, r1, r6
   1d7d2:	bf88      	it	hi
   1d7d4:	6023      	strhi	r3, [r4, #0]
   1d7d6:	4b32      	ldr	r3, [pc, #200]	; (1d8a0 <tls_interface_getopt+0x12c>)
   1d7d8:	a903      	add	r1, sp, #12
   1d7da:	5d9b      	ldrb	r3, [r3, r6]
   1d7dc:	1e5a      	subs	r2, r3, #1
   1d7de:	4253      	negs	r3, r2
   1d7e0:	4153      	adcs	r3, r2
   1d7e2:	6822      	ldr	r2, [r4, #0]
   1d7e4:	9303      	str	r3, [sp, #12]
   1d7e6:	4628      	mov	r0, r5
   1d7e8:	f009 f82b 	bl	26842 <memcpy>
   1d7ec:	2000      	movs	r0, #0
   1d7ee:	e029      	b.n	1d844 <tls_interface_getopt+0xd0>
   1d7f0:	6823      	ldr	r3, [r4, #0]
   1d7f2:	2b00      	cmp	r3, #0
   1d7f4:	d0d6      	beq.n	1d7a4 <tls_interface_getopt+0x30>
   1d7f6:	2124      	movs	r1, #36	; 0x24
   1d7f8:	2b01      	cmp	r3, #1
   1d7fa:	bf88      	it	hi
   1d7fc:	2301      	movhi	r3, #1
   1d7fe:	4828      	ldr	r0, [pc, #160]	; (1d8a0 <tls_interface_getopt+0x12c>)
   1d800:	bf88      	it	hi
   1d802:	6023      	strhi	r3, [r4, #0]
   1d804:	fb01 0106 	mla	r1, r1, r6, r0
   1d808:	6822      	ldr	r2, [r4, #0]
   1d80a:	3101      	adds	r1, #1
   1d80c:	e7eb      	b.n	1d7e6 <tls_interface_getopt+0x72>
   1d80e:	2324      	movs	r3, #36	; 0x24
   1d810:	4923      	ldr	r1, [pc, #140]	; (1d8a0 <tls_interface_getopt+0x12c>)
   1d812:	6822      	ldr	r2, [r4, #0]
   1d814:	fb03 1306 	mla	r3, r3, r6, r1
   1d818:	78d8      	ldrb	r0, [r3, #3]
   1d81a:	0793      	lsls	r3, r2, #30
   1d81c:	bf14      	ite	ne
   1d81e:	2300      	movne	r3, #0
   1d820:	0893      	lsreq	r3, r2, #2
   1d822:	4283      	cmp	r3, r0
   1d824:	bf28      	it	cs
   1d826:	4603      	movcs	r3, r0
   1d828:	009f      	lsls	r7, r3, #2
   1d82a:	b143      	cbz	r3, 1d83e <tls_interface_getopt+0xca>
   1d82c:	2024      	movs	r0, #36	; 0x24
   1d82e:	fb00 1106 	mla	r1, r0, r6, r1
   1d832:	42ba      	cmp	r2, r7
   1d834:	bf88      	it	hi
   1d836:	6027      	strhi	r7, [r4, #0]
   1d838:	6822      	ldr	r2, [r4, #0]
   1d83a:	3104      	adds	r1, #4
   1d83c:	e7d3      	b.n	1d7e6 <tls_interface_getopt+0x72>
   1d83e:	2800      	cmp	r0, #0
   1d840:	d1b0      	bne.n	1d7a4 <tls_interface_getopt+0x30>
   1d842:	6020      	str	r0, [r4, #0]
   1d844:	b005      	add	sp, #20
   1d846:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d848:	6823      	ldr	r3, [r4, #0]
   1d84a:	2124      	movs	r1, #36	; 0x24
   1d84c:	2b04      	cmp	r3, #4
   1d84e:	bf88      	it	hi
   1d850:	2304      	movhi	r3, #4
   1d852:	4813      	ldr	r0, [pc, #76]	; (1d8a0 <tls_interface_getopt+0x12c>)
   1d854:	bf88      	it	hi
   1d856:	6023      	strhi	r3, [r4, #0]
   1d858:	fb01 0106 	mla	r1, r1, r6, r0
   1d85c:	6822      	ldr	r2, [r4, #0]
   1d85e:	3102      	adds	r1, #2
   1d860:	e7c1      	b.n	1d7e6 <tls_interface_getopt+0x72>
   1d862:	f247 0301 	movw	r3, #28673	; 0x7001
   1d866:	e9cd 5400 	strd	r5, r4, [sp]
   1d86a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d86e:	4630      	mov	r0, r6
   1d870:	f7fe fe00 	bl	1c474 <ip_interface_socketoption_get>
   1d874:	2800      	cmp	r0, #0
   1d876:	d0e5      	beq.n	1d844 <tls_interface_getopt+0xd0>
   1d878:	e78d      	b.n	1d796 <tls_interface_getopt+0x22>
   1d87a:	6823      	ldr	r3, [r4, #0]
   1d87c:	2b04      	cmp	r3, #4
   1d87e:	d903      	bls.n	1d888 <tls_interface_getopt+0x114>
   1d880:	2304      	movs	r3, #4
   1d882:	6023      	str	r3, [r4, #0]
   1d884:	2009      	movs	r0, #9
   1d886:	e786      	b.n	1d796 <tls_interface_getopt+0x22>
   1d888:	6828      	ldr	r0, [r5, #0]
   1d88a:	f7ff fc2f 	bl	1d0ec <secure_socket_dtls_timeout_check>
   1d88e:	2800      	cmp	r0, #0
   1d890:	d181      	bne.n	1d796 <tls_interface_getopt+0x22>
   1d892:	f247 0302 	movw	r3, #28674	; 0x7002
   1d896:	e9cd 5400 	strd	r5, r4, [sp]
   1d89a:	e7e6      	b.n	1d86a <tls_interface_getopt+0xf6>
   1d89c:	206d      	movs	r0, #109	; 0x6d
   1d89e:	e77a      	b.n	1d796 <tls_interface_getopt+0x22>
   1d8a0:	2000f916 	.word	0x2000f916

0001d8a4 <tls_rpc_ip_event_handler>:
   1d8a4:	b570      	push	{r4, r5, r6, lr}
   1d8a6:	460c      	mov	r4, r1
   1d8a8:	f248 0181 	movw	r1, #32897	; 0x8081
   1d8ac:	428b      	cmp	r3, r1
   1d8ae:	4606      	mov	r6, r0
   1d8b0:	d035      	beq.n	1d91e <tls_rpc_ip_event_handler+0x7a>
   1d8b2:	f249 0182 	movw	r1, #36994	; 0x9082
   1d8b6:	428b      	cmp	r3, r1
   1d8b8:	d040      	beq.n	1d93c <tls_rpc_ip_event_handler+0x98>
   1d8ba:	f248 0102 	movw	r1, #32770	; 0x8002
   1d8be:	428b      	cmp	r3, r1
   1d8c0:	d161      	bne.n	1d986 <tls_rpc_ip_event_handler+0xe2>
   1d8c2:	2c00      	cmp	r4, #0
   1d8c4:	d05f      	beq.n	1d986 <tls_rpc_ip_event_handler+0xe2>
   1d8c6:	6963      	ldr	r3, [r4, #20]
   1d8c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1d8cc:	d002      	beq.n	1d8d4 <tls_rpc_ip_event_handler+0x30>
   1d8ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1d8d2:	d158      	bne.n	1d986 <tls_rpc_ip_event_handler+0xe2>
   1d8d4:	6823      	ldr	r3, [r4, #0]
   1d8d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1d8da:	6023      	str	r3, [r4, #0]
   1d8dc:	6955      	ldr	r5, [r2, #20]
   1d8de:	2d00      	cmp	r5, #0
   1d8e0:	d14d      	bne.n	1d97e <tls_rpc_ip_event_handler+0xda>
   1d8e2:	6823      	ldr	r3, [r4, #0]
   1d8e4:	0c1b      	lsrs	r3, r3, #16
   1d8e6:	041b      	lsls	r3, r3, #16
   1d8e8:	f043 0305 	orr.w	r3, r3, #5
   1d8ec:	6023      	str	r3, [r4, #0]
   1d8ee:	6823      	ldr	r3, [r4, #0]
   1d8f0:	00db      	lsls	r3, r3, #3
   1d8f2:	d401      	bmi.n	1d8f8 <tls_rpc_ip_event_handler+0x54>
   1d8f4:	2000      	movs	r0, #0
   1d8f6:	e020      	b.n	1d93a <tls_rpc_ip_event_handler+0x96>
   1d8f8:	2324      	movs	r3, #36	; 0x24
   1d8fa:	4373      	muls	r3, r6
   1d8fc:	4a23      	ldr	r2, [pc, #140]	; (1d98c <tls_rpc_ip_event_handler+0xe8>)
   1d8fe:	5cd3      	ldrb	r3, [r2, r3]
   1d900:	2b02      	cmp	r3, #2
   1d902:	d1f7      	bne.n	1d8f4 <tls_rpc_ip_event_handler+0x50>
   1d904:	4621      	mov	r1, r4
   1d906:	4630      	mov	r0, r6
   1d908:	f007 fd7d 	bl	25406 <secure_client_socket>
   1d90c:	2800      	cmp	r0, #0
   1d90e:	d0f1      	beq.n	1d8f4 <tls_rpc_ip_event_handler+0x50>
   1d910:	2877      	cmp	r0, #119	; 0x77
   1d912:	d0ef      	beq.n	1d8f4 <tls_rpc_ip_event_handler+0x50>
   1d914:	6060      	str	r0, [r4, #4]
   1d916:	6823      	ldr	r3, [r4, #0]
   1d918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1d91c:	e02d      	b.n	1d97a <tls_rpc_ip_event_handler+0xd6>
   1d91e:	2c00      	cmp	r4, #0
   1d920:	d0e8      	beq.n	1d8f4 <tls_rpc_ip_event_handler+0x50>
   1d922:	6823      	ldr	r3, [r4, #0]
   1d924:	b29b      	uxth	r3, r3
   1d926:	2b0a      	cmp	r3, #10
   1d928:	d1e4      	bne.n	1d8f4 <tls_rpc_ip_event_handler+0x50>
   1d92a:	6950      	ldr	r0, [r2, #20]
   1d92c:	bb40      	cbnz	r0, 1d980 <tls_rpc_ip_event_handler+0xdc>
   1d92e:	6823      	ldr	r3, [r4, #0]
   1d930:	0c1b      	lsrs	r3, r3, #16
   1d932:	041b      	lsls	r3, r3, #16
   1d934:	f043 030b 	orr.w	r3, r3, #11
   1d938:	6023      	str	r3, [r4, #0]
   1d93a:	bd70      	pop	{r4, r5, r6, pc}
   1d93c:	2c00      	cmp	r4, #0
   1d93e:	d0d9      	beq.n	1d8f4 <tls_rpc_ip_event_handler+0x50>
   1d940:	6823      	ldr	r3, [r4, #0]
   1d942:	b29b      	uxth	r3, r3
   1d944:	2b0b      	cmp	r3, #11
   1d946:	d1d5      	bne.n	1d8f4 <tls_rpc_ip_event_handler+0x50>
   1d948:	6915      	ldr	r5, [r2, #16]
   1d94a:	b9c5      	cbnz	r5, 1d97e <tls_rpc_ip_event_handler+0xda>
   1d94c:	6823      	ldr	r3, [r4, #0]
   1d94e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1d952:	6023      	str	r3, [r4, #0]
   1d954:	f7ff fbe6 	bl	1d124 <hostname_free>
   1d958:	6823      	ldr	r3, [r4, #0]
   1d95a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1d95e:	6023      	str	r3, [r4, #0]
   1d960:	6823      	ldr	r3, [r4, #0]
   1d962:	0c1b      	lsrs	r3, r3, #16
   1d964:	041b      	lsls	r3, r3, #16
   1d966:	f043 030c 	orr.w	r3, r3, #12
   1d96a:	6023      	str	r3, [r4, #0]
   1d96c:	6823      	ldr	r3, [r4, #0]
   1d96e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d972:	6023      	str	r3, [r4, #0]
   1d974:	6823      	ldr	r3, [r4, #0]
   1d976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1d97a:	6023      	str	r3, [r4, #0]
   1d97c:	e7ba      	b.n	1d8f4 <tls_rpc_ip_event_handler+0x50>
   1d97e:	4628      	mov	r0, r5
   1d980:	f7fe fb58 	bl	1c034 <rpc_error_to_nrf_errno>
   1d984:	e7c6      	b.n	1d914 <tls_rpc_ip_event_handler+0x70>
   1d986:	2001      	movs	r0, #1
   1d988:	e7d7      	b.n	1d93a <tls_rpc_ip_event_handler+0x96>
   1d98a:	bf00      	nop
   1d98c:	2000f916 	.word	0x2000f916

0001d990 <at_cmd_send>:
   1d990:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d992:	4615      	mov	r5, r2
   1d994:	f06f 0258 	mvn.w	r2, #88	; 0x58
   1d998:	2300      	movs	r3, #0
   1d99a:	7302      	strb	r2, [r0, #12]
   1d99c:	2204      	movs	r2, #4
   1d99e:	4c0d      	ldr	r4, [pc, #52]	; (1d9d4 <at_cmd_send+0x44>)
   1d9a0:	7343      	strb	r3, [r0, #13]
   1d9a2:	7383      	strb	r3, [r0, #14]
   1d9a4:	73c3      	strb	r3, [r0, #15]
   1d9a6:	7202      	strb	r2, [r0, #8]
   1d9a8:	7243      	strb	r3, [r0, #9]
   1d9aa:	7283      	strb	r3, [r0, #10]
   1d9ac:	72c3      	strb	r3, [r0, #11]
   1d9ae:	4602      	mov	r2, r0
   1d9b0:	b289      	uxth	r1, r1
   1d9b2:	2003      	movs	r0, #3
   1d9b4:	7023      	strb	r3, [r4, #0]
   1d9b6:	f007 f8e5 	bl	24b84 <rpc_client_request_send>
   1d9ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d9be:	9301      	str	r3, [sp, #4]
   1d9c0:	7823      	ldrb	r3, [r4, #0]
   1d9c2:	42ab      	cmp	r3, r5
   1d9c4:	d101      	bne.n	1d9ca <at_cmd_send+0x3a>
   1d9c6:	b003      	add	sp, #12
   1d9c8:	bd30      	pop	{r4, r5, pc}
   1d9ca:	a901      	add	r1, sp, #4
   1d9cc:	2000      	movs	r0, #0
   1d9ce:	f005 ff96 	bl	238fe <nrf_modem_os_timedwait>
   1d9d2:	e7f5      	b.n	1d9c0 <at_cmd_send+0x30>
   1d9d4:	2000fa36 	.word	0x2000fa36

0001d9d8 <at_response_match>:
   1d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d9da:	4605      	mov	r5, r0
   1d9dc:	2400      	movs	r4, #0
   1d9de:	4f10      	ldr	r7, [pc, #64]	; (1da20 <at_response_match+0x48>)
   1d9e0:	f857 6b04 	ldr.w	r6, [r7], #4
   1d9e4:	4628      	mov	r0, r5
   1d9e6:	4631      	mov	r1, r6
   1d9e8:	f008 ffb6 	bl	26958 <strstr>
   1d9ec:	b928      	cbnz	r0, 1d9fa <at_response_match+0x22>
   1d9ee:	3401      	adds	r4, #1
   1d9f0:	2c04      	cmp	r4, #4
   1d9f2:	d1f5      	bne.n	1d9e0 <at_response_match+0x8>
   1d9f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1d9f8:	e00e      	b.n	1da18 <at_response_match+0x40>
   1d9fa:	2c01      	cmp	r4, #1
   1d9fc:	d0fa      	beq.n	1d9f4 <at_response_match+0x1c>
   1d9fe:	1ea3      	subs	r3, r4, #2
   1da00:	2b01      	cmp	r3, #1
   1da02:	d80a      	bhi.n	1da1a <at_response_match+0x42>
   1da04:	4630      	mov	r0, r6
   1da06:	f7f3 fa0d 	bl	10e24 <strlen>
   1da0a:	220a      	movs	r2, #10
   1da0c:	2100      	movs	r1, #0
   1da0e:	4428      	add	r0, r5
   1da10:	f003 f97c 	bl	20d0c <strtol>
   1da14:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   1da18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da1a:	2000      	movs	r0, #0
   1da1c:	e7fc      	b.n	1da18 <at_response_match+0x40>
   1da1e:	bf00      	nop
   1da20:	0002a060 	.word	0x0002a060

0001da24 <at_vprintf>:
   1da24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1da28:	4607      	mov	r7, r0
   1da2a:	460e      	mov	r6, r1
   1da2c:	481d      	ldr	r0, [pc, #116]	; (1daa4 <at_vprintf+0x80>)
   1da2e:	2100      	movs	r1, #0
   1da30:	4690      	mov	r8, r2
   1da32:	461d      	mov	r5, r3
   1da34:	9301      	str	r3, [sp, #4]
   1da36:	f003 fa97 	bl	20f68 <vsniprintf>
   1da3a:	3001      	adds	r0, #1
   1da3c:	f007 f89c 	bl	24b78 <rpc_client_request_alloc>
   1da40:	4604      	mov	r4, r0
   1da42:	b360      	cbz	r0, 1da9e <at_vprintf+0x7a>
   1da44:	9501      	str	r5, [sp, #4]
   1da46:	462b      	mov	r3, r5
   1da48:	6841      	ldr	r1, [r0, #4]
   1da4a:	4642      	mov	r2, r8
   1da4c:	6800      	ldr	r0, [r0, #0]
   1da4e:	f003 fa8b 	bl	20f68 <vsniprintf>
   1da52:	2202      	movs	r2, #2
   1da54:	2101      	movs	r1, #1
   1da56:	4620      	mov	r0, r4
   1da58:	f7ff ff9a 	bl	1d990 <at_cmd_send>
   1da5c:	4d12      	ldr	r5, [pc, #72]	; (1daa8 <at_vprintf+0x84>)
   1da5e:	b97f      	cbnz	r7, 1da80 <at_vprintf+0x5c>
   1da60:	682b      	ldr	r3, [r5, #0]
   1da62:	6818      	ldr	r0, [r3, #0]
   1da64:	f7ff ffb8 	bl	1d9d8 <at_response_match>
   1da68:	4604      	mov	r4, r0
   1da6a:	682b      	ldr	r3, [r5, #0]
   1da6c:	6818      	ldr	r0, [r3, #0]
   1da6e:	f007 f893 	bl	24b98 <rpc_client_data_free>
   1da72:	6828      	ldr	r0, [r5, #0]
   1da74:	f007 f88d 	bl	24b92 <rpc_client_message_free>
   1da78:	4620      	mov	r0, r4
   1da7a:	b002      	add	sp, #8
   1da7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1da80:	682c      	ldr	r4, [r5, #0]
   1da82:	4638      	mov	r0, r7
   1da84:	6862      	ldr	r2, [r4, #4]
   1da86:	6821      	ldr	r1, [r4, #0]
   1da88:	42b2      	cmp	r2, r6
   1da8a:	bf28      	it	cs
   1da8c:	4632      	movcs	r2, r6
   1da8e:	f008 fed8 	bl	26842 <memcpy>
   1da92:	6863      	ldr	r3, [r4, #4]
   1da94:	42b3      	cmp	r3, r6
   1da96:	d9e3      	bls.n	1da60 <at_vprintf+0x3c>
   1da98:	f06f 0406 	mvn.w	r4, #6
   1da9c:	e7e5      	b.n	1da6a <at_vprintf+0x46>
   1da9e:	f06f 040b 	mvn.w	r4, #11
   1daa2:	e7e9      	b.n	1da78 <at_vprintf+0x54>
   1daa4:	00027234 	.word	0x00027234
   1daa8:	2000f874 	.word	0x2000f874

0001daac <nrf_modem_at_init>:
   1daac:	2201      	movs	r2, #1
   1daae:	b508      	push	{r3, lr}
   1dab0:	4611      	mov	r1, r2
   1dab2:	4808      	ldr	r0, [pc, #32]	; (1dad4 <nrf_modem_at_init+0x28>)
   1dab4:	f7f8 fdba 	bl	1662c <nrf_modem_os_sem_init>
   1dab8:	2000      	movs	r0, #0
   1daba:	f007 f85d 	bl	24b78 <rpc_client_request_alloc>
   1dabe:	b128      	cbz	r0, 1dacc <nrf_modem_at_init+0x20>
   1dac0:	2201      	movs	r2, #1
   1dac2:	2105      	movs	r1, #5
   1dac4:	f7ff ff64 	bl	1d990 <at_cmd_send>
   1dac8:	2000      	movs	r0, #0
   1daca:	bd08      	pop	{r3, pc}
   1dacc:	f06f 000b 	mvn.w	r0, #11
   1dad0:	e7fb      	b.n	1daca <nrf_modem_at_init+0x1e>
   1dad2:	bf00      	nop
   1dad4:	2000f864 	.word	0x2000f864

0001dad8 <nrf_modem_at_notif_handler_set>:
   1dad8:	4b01      	ldr	r3, [pc, #4]	; (1dae0 <nrf_modem_at_notif_handler_set+0x8>)
   1dada:	6018      	str	r0, [r3, #0]
   1dadc:	2000      	movs	r0, #0
   1dade:	4770      	bx	lr
   1dae0:	2000f870 	.word	0x2000f870

0001dae4 <nrf_modem_at_printf>:
   1dae4:	b40f      	push	{r0, r1, r2, r3}
   1dae6:	4b11      	ldr	r3, [pc, #68]	; (1db2c <nrf_modem_at_printf+0x48>)
   1dae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1daea:	781b      	ldrb	r3, [r3, #0]
   1daec:	9c06      	ldr	r4, [sp, #24]
   1daee:	b1bb      	cbz	r3, 1db20 <nrf_modem_at_printf+0x3c>
   1daf0:	b1cc      	cbz	r4, 1db26 <nrf_modem_at_printf+0x42>
   1daf2:	4d0f      	ldr	r5, [pc, #60]	; (1db30 <nrf_modem_at_printf+0x4c>)
   1daf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1daf8:	6828      	ldr	r0, [r5, #0]
   1dafa:	f005 ffa6 	bl	23a4a <nrf_modem_os_sem_take>
   1dafe:	2100      	movs	r1, #0
   1db00:	4622      	mov	r2, r4
   1db02:	ab07      	add	r3, sp, #28
   1db04:	4608      	mov	r0, r1
   1db06:	9301      	str	r3, [sp, #4]
   1db08:	f7ff ff8c 	bl	1da24 <at_vprintf>
   1db0c:	4604      	mov	r4, r0
   1db0e:	6828      	ldr	r0, [r5, #0]
   1db10:	f005 ff97 	bl	23a42 <nrf_modem_os_sem_give>
   1db14:	4620      	mov	r0, r4
   1db16:	b003      	add	sp, #12
   1db18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1db1c:	b004      	add	sp, #16
   1db1e:	4770      	bx	lr
   1db20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1db24:	e7f6      	b.n	1db14 <nrf_modem_at_printf+0x30>
   1db26:	f06f 040d 	mvn.w	r4, #13
   1db2a:	e7f3      	b.n	1db14 <nrf_modem_at_printf+0x30>
   1db2c:	2000fa3e 	.word	0x2000fa3e
   1db30:	2000f864 	.word	0x2000f864

0001db34 <nrf_modem_at_cmd>:
   1db34:	b40c      	push	{r2, r3}
   1db36:	4b2e      	ldr	r3, [pc, #184]	; (1dbf0 <nrf_modem_at_cmd+0xbc>)
   1db38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1db3c:	781b      	ldrb	r3, [r3, #0]
   1db3e:	4605      	mov	r5, r0
   1db40:	460f      	mov	r7, r1
   1db42:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1db46:	2b00      	cmp	r3, #0
   1db48:	d049      	beq.n	1dbde <nrf_modem_at_cmd+0xaa>
   1db4a:	2800      	cmp	r0, #0
   1db4c:	d04a      	beq.n	1dbe4 <nrf_modem_at_cmd+0xb0>
   1db4e:	f1b8 0f00 	cmp.w	r8, #0
   1db52:	d047      	beq.n	1dbe4 <nrf_modem_at_cmd+0xb0>
   1db54:	2900      	cmp	r1, #0
   1db56:	d048      	beq.n	1dbea <nrf_modem_at_cmd+0xb6>
   1db58:	4b26      	ldr	r3, [pc, #152]	; (1dbf4 <nrf_modem_at_cmd+0xc0>)
   1db5a:	681a      	ldr	r2, [r3, #0]
   1db5c:	4699      	mov	r9, r3
   1db5e:	b1d2      	cbz	r2, 1db96 <nrf_modem_at_cmd+0x62>
   1db60:	4e25      	ldr	r6, [pc, #148]	; (1dbf8 <nrf_modem_at_cmd+0xc4>)
   1db62:	6833      	ldr	r3, [r6, #0]
   1db64:	b1bb      	cbz	r3, 1db96 <nrf_modem_at_cmd+0x62>
   1db66:	2400      	movs	r4, #0
   1db68:	f8d9 3000 	ldr.w	r3, [r9]
   1db6c:	429c      	cmp	r4, r3
   1db6e:	d212      	bcs.n	1db96 <nrf_modem_at_cmd+0x62>
   1db70:	6833      	ldr	r3, [r6, #0]
   1db72:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   1db76:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1db7a:	f7f3 f953 	bl	10e24 <strlen>
   1db7e:	6833      	ldr	r3, [r6, #0]
   1db80:	4602      	mov	r2, r0
   1db82:	4641      	mov	r1, r8
   1db84:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1db88:	f008 feb4 	bl	268f4 <strncmp>
   1db8c:	b9a8      	cbnz	r0, 1dbba <nrf_modem_at_cmd+0x86>
   1db8e:	6833      	ldr	r3, [r6, #0]
   1db90:	4453      	add	r3, sl
   1db92:	685b      	ldr	r3, [r3, #4]
   1db94:	b99b      	cbnz	r3, 1dbbe <nrf_modem_at_cmd+0x8a>
   1db96:	4e19      	ldr	r6, [pc, #100]	; (1dbfc <nrf_modem_at_cmd+0xc8>)
   1db98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1db9c:	6830      	ldr	r0, [r6, #0]
   1db9e:	f005 ff54 	bl	23a4a <nrf_modem_os_sem_take>
   1dba2:	ab0b      	add	r3, sp, #44	; 0x2c
   1dba4:	4642      	mov	r2, r8
   1dba6:	4639      	mov	r1, r7
   1dba8:	4628      	mov	r0, r5
   1dbaa:	9301      	str	r3, [sp, #4]
   1dbac:	f7ff ff3a 	bl	1da24 <at_vprintf>
   1dbb0:	4604      	mov	r4, r0
   1dbb2:	6830      	ldr	r0, [r6, #0]
   1dbb4:	f005 ff45 	bl	23a42 <nrf_modem_os_sem_give>
   1dbb8:	e00b      	b.n	1dbd2 <nrf_modem_at_cmd+0x9e>
   1dbba:	3401      	adds	r4, #1
   1dbbc:	e7d4      	b.n	1db68 <nrf_modem_at_cmd+0x34>
   1dbbe:	4642      	mov	r2, r8
   1dbc0:	4639      	mov	r1, r7
   1dbc2:	4628      	mov	r0, r5
   1dbc4:	4798      	blx	r3
   1dbc6:	1e04      	subs	r4, r0, #0
   1dbc8:	db03      	blt.n	1dbd2 <nrf_modem_at_cmd+0x9e>
   1dbca:	4628      	mov	r0, r5
   1dbcc:	f7ff ff04 	bl	1d9d8 <at_response_match>
   1dbd0:	4604      	mov	r4, r0
   1dbd2:	4620      	mov	r0, r4
   1dbd4:	b002      	add	sp, #8
   1dbd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dbda:	b002      	add	sp, #8
   1dbdc:	4770      	bx	lr
   1dbde:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1dbe2:	e7f6      	b.n	1dbd2 <nrf_modem_at_cmd+0x9e>
   1dbe4:	f06f 040d 	mvn.w	r4, #13
   1dbe8:	e7f3      	b.n	1dbd2 <nrf_modem_at_cmd+0x9e>
   1dbea:	f06f 0415 	mvn.w	r4, #21
   1dbee:	e7f0      	b.n	1dbd2 <nrf_modem_at_cmd+0x9e>
   1dbf0:	2000fa3e 	.word	0x2000fa3e
   1dbf4:	2000f86c 	.word	0x2000f86c
   1dbf8:	2000f868 	.word	0x2000f868
   1dbfc:	2000f864 	.word	0x2000f864

0001dc00 <nrf_modem_at_scanf>:
   1dc00:	b40e      	push	{r1, r2, r3}
   1dc02:	4b23      	ldr	r3, [pc, #140]	; (1dc90 <nrf_modem_at_scanf+0x90>)
   1dc04:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   1dc06:	781b      	ldrb	r3, [r3, #0]
   1dc08:	4605      	mov	r5, r0
   1dc0a:	9f07      	ldr	r7, [sp, #28]
   1dc0c:	2b00      	cmp	r3, #0
   1dc0e:	d039      	beq.n	1dc84 <nrf_modem_at_scanf+0x84>
   1dc10:	2800      	cmp	r0, #0
   1dc12:	d03a      	beq.n	1dc8a <nrf_modem_at_scanf+0x8a>
   1dc14:	2f00      	cmp	r7, #0
   1dc16:	d038      	beq.n	1dc8a <nrf_modem_at_scanf+0x8a>
   1dc18:	4e1e      	ldr	r6, [pc, #120]	; (1dc94 <nrf_modem_at_scanf+0x94>)
   1dc1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dc1e:	6830      	ldr	r0, [r6, #0]
   1dc20:	f005 ff13 	bl	23a4a <nrf_modem_os_sem_take>
   1dc24:	4628      	mov	r0, r5
   1dc26:	f7f3 f8fd 	bl	10e24 <strlen>
   1dc2a:	3001      	adds	r0, #1
   1dc2c:	f006 ffa4 	bl	24b78 <rpc_client_request_alloc>
   1dc30:	4604      	mov	r4, r0
   1dc32:	b320      	cbz	r0, 1dc7e <nrf_modem_at_scanf+0x7e>
   1dc34:	4629      	mov	r1, r5
   1dc36:	6800      	ldr	r0, [r0, #0]
   1dc38:	4d17      	ldr	r5, [pc, #92]	; (1dc98 <nrf_modem_at_scanf+0x98>)
   1dc3a:	f008 fe53 	bl	268e4 <strcpy>
   1dc3e:	4620      	mov	r0, r4
   1dc40:	2202      	movs	r2, #2
   1dc42:	2101      	movs	r1, #1
   1dc44:	f7ff fea4 	bl	1d990 <at_cmd_send>
   1dc48:	682b      	ldr	r3, [r5, #0]
   1dc4a:	aa08      	add	r2, sp, #32
   1dc4c:	4639      	mov	r1, r7
   1dc4e:	6818      	ldr	r0, [r3, #0]
   1dc50:	9201      	str	r2, [sp, #4]
   1dc52:	f003 f9db 	bl	2100c <vsiscanf>
   1dc56:	682b      	ldr	r3, [r5, #0]
   1dc58:	1e04      	subs	r4, r0, #0
   1dc5a:	6818      	ldr	r0, [r3, #0]
   1dc5c:	bf08      	it	eq
   1dc5e:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   1dc62:	f006 ff99 	bl	24b98 <rpc_client_data_free>
   1dc66:	6828      	ldr	r0, [r5, #0]
   1dc68:	f006 ff93 	bl	24b92 <rpc_client_message_free>
   1dc6c:	6830      	ldr	r0, [r6, #0]
   1dc6e:	f005 fee8 	bl	23a42 <nrf_modem_os_sem_give>
   1dc72:	4620      	mov	r0, r4
   1dc74:	b002      	add	sp, #8
   1dc76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1dc7a:	b003      	add	sp, #12
   1dc7c:	4770      	bx	lr
   1dc7e:	f06f 040b 	mvn.w	r4, #11
   1dc82:	e7f3      	b.n	1dc6c <nrf_modem_at_scanf+0x6c>
   1dc84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1dc88:	e7f3      	b.n	1dc72 <nrf_modem_at_scanf+0x72>
   1dc8a:	f06f 040d 	mvn.w	r4, #13
   1dc8e:	e7f0      	b.n	1dc72 <nrf_modem_at_scanf+0x72>
   1dc90:	2000fa3e 	.word	0x2000fa3e
   1dc94:	2000f864 	.word	0x2000f864
   1dc98:	2000f874 	.word	0x2000f874

0001dc9c <rpc_at_event_handler>:
   1dc9c:	b570      	push	{r4, r5, r6, lr}
   1dc9e:	68c3      	ldr	r3, [r0, #12]
   1dca0:	4605      	mov	r5, r0
   1dca2:	2ba7      	cmp	r3, #167	; 0xa7
   1dca4:	d003      	beq.n	1dcae <rpc_at_event_handler+0x12>
   1dca6:	6828      	ldr	r0, [r5, #0]
   1dca8:	f006 ff76 	bl	24b98 <rpc_client_data_free>
   1dcac:	e008      	b.n	1dcc0 <rpc_at_event_handler+0x24>
   1dcae:	2903      	cmp	r1, #3
   1dcb0:	d008      	beq.n	1dcc4 <rpc_at_event_handler+0x28>
   1dcb2:	2904      	cmp	r1, #4
   1dcb4:	d019      	beq.n	1dcea <rpc_at_event_handler+0x4e>
   1dcb6:	2902      	cmp	r1, #2
   1dcb8:	d102      	bne.n	1dcc0 <rpc_at_event_handler+0x24>
   1dcba:	2201      	movs	r2, #1
   1dcbc:	4b0e      	ldr	r3, [pc, #56]	; (1dcf8 <rpc_at_event_handler+0x5c>)
   1dcbe:	701a      	strb	r2, [r3, #0]
   1dcc0:	2000      	movs	r0, #0
   1dcc2:	e00a      	b.n	1dcda <rpc_at_event_handler+0x3e>
   1dcc4:	4e0d      	ldr	r6, [pc, #52]	; (1dcfc <rpc_at_event_handler+0x60>)
   1dcc6:	6833      	ldr	r3, [r6, #0]
   1dcc8:	b143      	cbz	r3, 1dcdc <rpc_at_event_handler+0x40>
   1dcca:	2400      	movs	r4, #0
   1dccc:	6800      	ldr	r0, [r0, #0]
   1dcce:	4798      	blx	r3
   1dcd0:	6828      	ldr	r0, [r5, #0]
   1dcd2:	6034      	str	r4, [r6, #0]
   1dcd4:	f006 ff60 	bl	24b98 <rpc_client_data_free>
   1dcd8:	b2e0      	uxtb	r0, r4
   1dcda:	bd70      	pop	{r4, r5, r6, pc}
   1dcdc:	2202      	movs	r2, #2
   1dcde:	4b08      	ldr	r3, [pc, #32]	; (1dd00 <rpc_at_event_handler+0x64>)
   1dce0:	2401      	movs	r4, #1
   1dce2:	6018      	str	r0, [r3, #0]
   1dce4:	4b04      	ldr	r3, [pc, #16]	; (1dcf8 <rpc_at_event_handler+0x5c>)
   1dce6:	701a      	strb	r2, [r3, #0]
   1dce8:	e7f6      	b.n	1dcd8 <rpc_at_event_handler+0x3c>
   1dcea:	4b06      	ldr	r3, [pc, #24]	; (1dd04 <rpc_at_event_handler+0x68>)
   1dcec:	681b      	ldr	r3, [r3, #0]
   1dcee:	2b00      	cmp	r3, #0
   1dcf0:	d0d9      	beq.n	1dca6 <rpc_at_event_handler+0xa>
   1dcf2:	6800      	ldr	r0, [r0, #0]
   1dcf4:	4798      	blx	r3
   1dcf6:	e7d6      	b.n	1dca6 <rpc_at_event_handler+0xa>
   1dcf8:	2000fa36 	.word	0x2000fa36
   1dcfc:	2000f878 	.word	0x2000f878
   1dd00:	2000f874 	.word	0x2000f874
   1dd04:	2000f870 	.word	0x2000f870

0001dd08 <rpc_dfu_event_handler>:
   1dd08:	b510      	push	{r4, lr}
   1dd0a:	4604      	mov	r4, r0
   1dd0c:	6800      	ldr	r0, [r0, #0]
   1dd0e:	b108      	cbz	r0, 1dd14 <rpc_dfu_event_handler+0xc>
   1dd10:	f006 ff42 	bl	24b98 <rpc_client_data_free>
   1dd14:	68e2      	ldr	r2, [r4, #12]
   1dd16:	4b06      	ldr	r3, [pc, #24]	; (1dd30 <rpc_dfu_event_handler+0x28>)
   1dd18:	429a      	cmp	r2, r3
   1dd1a:	bf01      	itttt	eq
   1dd1c:	2301      	moveq	r3, #1
   1dd1e:	4a05      	ldreq	r2, [pc, #20]	; (1dd34 <rpc_dfu_event_handler+0x2c>)
   1dd20:	4618      	moveq	r0, r3
   1dd22:	7013      	strbeq	r3, [r2, #0]
   1dd24:	bf0a      	itet	eq
   1dd26:	4a04      	ldreq	r2, [pc, #16]	; (1dd38 <rpc_dfu_event_handler+0x30>)
   1dd28:	2000      	movne	r0, #0
   1dd2a:	6014      	streq	r4, [r2, #0]
   1dd2c:	bd10      	pop	{r4, pc}
   1dd2e:	bf00      	nop
   1dd30:	15abe11a 	.word	0x15abe11a
   1dd34:	2000fa37 	.word	0x2000fa37
   1dd38:	2000f87c 	.word	0x2000f87c

0001dd3c <send_message>:
   1dd3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dd40:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1de04 <send_message+0xc8>
   1dd44:	4606      	mov	r6, r0
   1dd46:	f899 3000 	ldrb.w	r3, [r9]
   1dd4a:	460f      	mov	r7, r1
   1dd4c:	464d      	mov	r5, r9
   1dd4e:	b085      	sub	sp, #20
   1dd50:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   1dd54:	2b00      	cmp	r3, #0
   1dd56:	d14d      	bne.n	1ddf4 <send_message+0xb8>
   1dd58:	2301      	movs	r3, #1
   1dd5a:	4610      	mov	r0, r2
   1dd5c:	f889 3000 	strb.w	r3, [r9]
   1dd60:	9201      	str	r2, [sp, #4]
   1dd62:	f006 ff09 	bl	24b78 <rpc_client_request_alloc>
   1dd66:	4604      	mov	r4, r0
   1dd68:	2800      	cmp	r0, #0
   1dd6a:	d039      	beq.n	1dde0 <send_message+0xa4>
   1dd6c:	4923      	ldr	r1, [pc, #140]	; (1ddfc <send_message+0xc0>)
   1dd6e:	9a01      	ldr	r2, [sp, #4]
   1dd70:	880b      	ldrh	r3, [r1, #0]
   1dd72:	3301      	adds	r3, #1
   1dd74:	b29b      	uxth	r3, r3
   1dd76:	800b      	strh	r3, [r1, #0]
   1dd78:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
   1dd7c:	603b      	str	r3, [r7, #0]
   1dd7e:	2343      	movs	r3, #67	; 0x43
   1dd80:	7303      	strb	r3, [r0, #12]
   1dd82:	2354      	movs	r3, #84	; 0x54
   1dd84:	7343      	strb	r3, [r0, #13]
   1dd86:	2376      	movs	r3, #118	; 0x76
   1dd88:	7383      	strb	r3, [r0, #14]
   1dd8a:	2349      	movs	r3, #73	; 0x49
   1dd8c:	6042      	str	r2, [r0, #4]
   1dd8e:	73c3      	strb	r3, [r0, #15]
   1dd90:	4639      	mov	r1, r7
   1dd92:	f880 8008 	strb.w	r8, [r0, #8]
   1dd96:	f880 8009 	strb.w	r8, [r0, #9]
   1dd9a:	f880 800a 	strb.w	r8, [r0, #10]
   1dd9e:	f880 800b 	strb.w	r8, [r0, #11]
   1dda2:	6800      	ldr	r0, [r0, #0]
   1dda4:	f008 fd4d 	bl	26842 <memcpy>
   1dda8:	4622      	mov	r2, r4
   1ddaa:	4631      	mov	r1, r6
   1ddac:	2007      	movs	r0, #7
   1ddae:	f006 fee9 	bl	24b84 <rpc_client_request_send>
   1ddb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ddb6:	4c12      	ldr	r4, [pc, #72]	; (1de00 <send_message+0xc4>)
   1ddb8:	9303      	str	r3, [sp, #12]
   1ddba:	4620      	mov	r0, r4
   1ddbc:	a903      	add	r1, sp, #12
   1ddbe:	f005 fd9e 	bl	238fe <nrf_modem_os_timedwait>
   1ddc2:	782b      	ldrb	r3, [r5, #0]
   1ddc4:	2b01      	cmp	r3, #1
   1ddc6:	d0f8      	beq.n	1ddba <send_message+0x7e>
   1ddc8:	782b      	ldrb	r3, [r5, #0]
   1ddca:	2b02      	cmp	r3, #2
   1ddcc:	d00f      	beq.n	1ddee <send_message+0xb2>
   1ddce:	782b      	ldrb	r3, [r5, #0]
   1ddd0:	2b03      	cmp	r3, #3
   1ddd2:	bf14      	ite	ne
   1ddd4:	2000      	movne	r0, #0
   1ddd6:	f06f 005e 	mvneq.w	r0, #94	; 0x5e
   1ddda:	2300      	movs	r3, #0
   1dddc:	702b      	strb	r3, [r5, #0]
   1ddde:	e003      	b.n	1dde8 <send_message+0xac>
   1dde0:	f889 0000 	strb.w	r0, [r9]
   1dde4:	f06f 000a 	mvn.w	r0, #10
   1dde8:	b005      	add	sp, #20
   1ddea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ddee:	f06f 0015 	mvn.w	r0, #21
   1ddf2:	e7f2      	b.n	1ddda <send_message+0x9e>
   1ddf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ddf8:	e7f6      	b.n	1dde8 <send_message+0xac>
   1ddfa:	bf00      	nop
   1ddfc:	2000f8fc 	.word	0x2000f8fc
   1de00:	49765443 	.word	0x49765443
   1de04:	2000fa3a 	.word	0x2000fa3a

0001de08 <rpc_gnss_event_handler>:
   1de08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de0c:	6804      	ldr	r4, [r0, #0]
   1de0e:	4607      	mov	r7, r0
   1de10:	460d      	mov	r5, r1
   1de12:	2c00      	cmp	r4, #0
   1de14:	f000 8086 	beq.w	1df24 <rpc_gnss_event_handler+0x11c>
   1de18:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1de1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1de20:	d142      	bne.n	1dea8 <rpc_gnss_event_handler+0xa0>
   1de22:	4b5f      	ldr	r3, [pc, #380]	; (1dfa0 <rpc_gnss_event_handler+0x198>)
   1de24:	781a      	ldrb	r2, [r3, #0]
   1de26:	4698      	mov	r8, r3
   1de28:	2a01      	cmp	r2, #1
   1de2a:	d131      	bne.n	1de90 <rpc_gnss_event_handler+0x88>
   1de2c:	4a5d      	ldr	r2, [pc, #372]	; (1dfa4 <rpc_gnss_event_handler+0x19c>)
   1de2e:	6821      	ldr	r1, [r4, #0]
   1de30:	8812      	ldrh	r2, [r2, #0]
   1de32:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1de36:	d12b      	bne.n	1de90 <rpc_gnss_event_handler+0x88>
   1de38:	6862      	ldr	r2, [r4, #4]
   1de3a:	bb6a      	cbnz	r2, 1de98 <rpc_gnss_event_handler+0x90>
   1de3c:	4b5a      	ldr	r3, [pc, #360]	; (1dfa8 <rpc_gnss_event_handler+0x1a0>)
   1de3e:	681e      	ldr	r6, [r3, #0]
   1de40:	b31e      	cbz	r6, 1de8a <rpc_gnss_event_handler+0x82>
   1de42:	f242 0309 	movw	r3, #8201	; 0x2009
   1de46:	429d      	cmp	r5, r3
   1de48:	d11f      	bne.n	1de8a <rpc_gnss_event_handler+0x82>
   1de4a:	4630      	mov	r0, r6
   1de4c:	8923      	ldrh	r3, [r4, #8]
   1de4e:	2280      	movs	r2, #128	; 0x80
   1de50:	f840 3b04 	str.w	r3, [r0], #4
   1de54:	f104 010a 	add.w	r1, r4, #10
   1de58:	f008 fcf3 	bl	26842 <memcpy>
   1de5c:	2280      	movs	r2, #128	; 0x80
   1de5e:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   1de62:	f106 0084 	add.w	r0, r6, #132	; 0x84
   1de66:	f008 fcec 	bl	26842 <memcpy>
   1de6a:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   1de6e:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   1de72:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   1de76:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   1de7a:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   1de7e:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   1de82:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   1de86:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   1de8a:	2300      	movs	r3, #0
   1de8c:	f888 3000 	strb.w	r3, [r8]
   1de90:	6838      	ldr	r0, [r7, #0]
   1de92:	f006 fe81 	bl	24b98 <rpc_client_data_free>
   1de96:	e045      	b.n	1df24 <rpc_gnss_event_handler+0x11c>
   1de98:	f647 71ff 	movw	r1, #32767	; 0x7fff
   1de9c:	428a      	cmp	r2, r1
   1de9e:	bf0c      	ite	eq
   1dea0:	2203      	moveq	r2, #3
   1dea2:	2202      	movne	r2, #2
   1dea4:	701a      	strb	r2, [r3, #0]
   1dea6:	e7f3      	b.n	1de90 <rpc_gnss_event_handler+0x88>
   1dea8:	4e40      	ldr	r6, [pc, #256]	; (1dfac <rpc_gnss_event_handler+0x1a4>)
   1deaa:	6833      	ldr	r3, [r6, #0]
   1deac:	2b00      	cmp	r3, #0
   1deae:	d0ef      	beq.n	1de90 <rpc_gnss_event_handler+0x88>
   1deb0:	f244 0204 	movw	r2, #16388	; 0x4004
   1deb4:	4291      	cmp	r1, r2
   1deb6:	d80b      	bhi.n	1ded0 <rpc_gnss_event_handler+0xc8>
   1deb8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1debc:	d9e8      	bls.n	1de90 <rpc_gnss_event_handler+0x88>
   1debe:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   1dec2:	3a02      	subs	r2, #2
   1dec4:	2a02      	cmp	r2, #2
   1dec6:	d80b      	bhi.n	1dee0 <rpc_gnss_event_handler+0xd8>
   1dec8:	e8df f002 	tbb	[pc, r2]
   1decc:	4f45      	.short	0x4f45
   1dece:	59          	.byte	0x59
   1decf:	00          	.byte	0x00
   1ded0:	f244 1301 	movw	r3, #16641	; 0x4101
   1ded4:	4299      	cmp	r1, r3
   1ded6:	d003      	beq.n	1dee0 <rpc_gnss_event_handler+0xd8>
   1ded8:	f244 2301 	movw	r3, #16897	; 0x4201
   1dedc:	4299      	cmp	r1, r3
   1dede:	d1d7      	bne.n	1de90 <rpc_gnss_event_handler+0x88>
   1dee0:	4f33      	ldr	r7, [pc, #204]	; (1dfb0 <rpc_gnss_event_handler+0x1a8>)
   1dee2:	6838      	ldr	r0, [r7, #0]
   1dee4:	b108      	cbz	r0, 1deea <rpc_gnss_event_handler+0xe2>
   1dee6:	f006 fe57 	bl	24b98 <rpc_client_data_free>
   1deea:	f244 2301 	movw	r3, #16897	; 0x4201
   1deee:	429d      	cmp	r5, r3
   1def0:	4b30      	ldr	r3, [pc, #192]	; (1dfb4 <rpc_gnss_event_handler+0x1ac>)
   1def2:	d11a      	bne.n	1df2a <rpc_gnss_event_handler+0x122>
   1def4:	2202      	movs	r2, #2
   1def6:	603c      	str	r4, [r7, #0]
   1def8:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   1defc:	701a      	strb	r2, [r3, #0]
   1defe:	07e3      	lsls	r3, r4, #31
   1df00:	d502      	bpl.n	1df08 <rpc_gnss_event_handler+0x100>
   1df02:	2002      	movs	r0, #2
   1df04:	6833      	ldr	r3, [r6, #0]
   1df06:	4798      	blx	r3
   1df08:	4d2b      	ldr	r5, [pc, #172]	; (1dfb8 <rpc_gnss_event_handler+0x1b0>)
   1df0a:	f014 0418 	ands.w	r4, r4, #24
   1df0e:	6833      	ldr	r3, [r6, #0]
   1df10:	782a      	ldrb	r2, [r5, #0]
   1df12:	d01a      	beq.n	1df4a <rpc_gnss_event_handler+0x142>
   1df14:	b91a      	cbnz	r2, 1df1e <rpc_gnss_event_handler+0x116>
   1df16:	2005      	movs	r0, #5
   1df18:	4798      	blx	r3
   1df1a:	2301      	movs	r3, #1
   1df1c:	702b      	strb	r3, [r5, #0]
   1df1e:	2001      	movs	r0, #1
   1df20:	6833      	ldr	r3, [r6, #0]
   1df22:	4798      	blx	r3
   1df24:	2000      	movs	r0, #0
   1df26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1df2a:	f244 1201 	movw	r2, #16641	; 0x4101
   1df2e:	4295      	cmp	r5, r2
   1df30:	bf0b      	itete	eq
   1df32:	2201      	moveq	r2, #1
   1df34:	2200      	movne	r2, #0
   1df36:	603c      	streq	r4, [r7, #0]
   1df38:	603c      	strne	r4, [r7, #0]
   1df3a:	bf0b      	itete	eq
   1df3c:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   1df40:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   1df44:	701a      	strbeq	r2, [r3, #0]
   1df46:	701a      	strbne	r2, [r3, #0]
   1df48:	e7d9      	b.n	1defe <rpc_gnss_event_handler+0xf6>
   1df4a:	2a00      	cmp	r2, #0
   1df4c:	d0e7      	beq.n	1df1e <rpc_gnss_event_handler+0x116>
   1df4e:	2006      	movs	r0, #6
   1df50:	4798      	blx	r3
   1df52:	702c      	strb	r4, [r5, #0]
   1df54:	e7e3      	b.n	1df1e <rpc_gnss_event_handler+0x116>
   1df56:	4c19      	ldr	r4, [pc, #100]	; (1dfbc <rpc_gnss_event_handler+0x1b4>)
   1df58:	6820      	ldr	r0, [r4, #0]
   1df5a:	b108      	cbz	r0, 1df60 <rpc_gnss_event_handler+0x158>
   1df5c:	f006 fe1c 	bl	24b98 <rpc_client_data_free>
   1df60:	683b      	ldr	r3, [r7, #0]
   1df62:	2003      	movs	r0, #3
   1df64:	6023      	str	r3, [r4, #0]
   1df66:	6833      	ldr	r3, [r6, #0]
   1df68:	e7db      	b.n	1df22 <rpc_gnss_event_handler+0x11a>
   1df6a:	4c15      	ldr	r4, [pc, #84]	; (1dfc0 <rpc_gnss_event_handler+0x1b8>)
   1df6c:	6820      	ldr	r0, [r4, #0]
   1df6e:	b108      	cbz	r0, 1df74 <rpc_gnss_event_handler+0x16c>
   1df70:	f006 fe12 	bl	24b98 <rpc_client_data_free>
   1df74:	683b      	ldr	r3, [r7, #0]
   1df76:	2004      	movs	r0, #4
   1df78:	6023      	str	r3, [r4, #0]
   1df7a:	6833      	ldr	r3, [r6, #0]
   1df7c:	e7d1      	b.n	1df22 <rpc_gnss_event_handler+0x11a>
   1df7e:	7822      	ldrb	r2, [r4, #0]
   1df80:	2a03      	cmp	r2, #3
   1df82:	d885      	bhi.n	1de90 <rpc_gnss_event_handler+0x88>
   1df84:	e8df f002 	tbb	[pc, r2]
   1df88:	09070502 	.word	0x09070502
   1df8c:	2007      	movs	r0, #7
   1df8e:	4798      	blx	r3
   1df90:	e77e      	b.n	1de90 <rpc_gnss_event_handler+0x88>
   1df92:	2008      	movs	r0, #8
   1df94:	e7fb      	b.n	1df8e <rpc_gnss_event_handler+0x186>
   1df96:	2009      	movs	r0, #9
   1df98:	e7f9      	b.n	1df8e <rpc_gnss_event_handler+0x186>
   1df9a:	200a      	movs	r0, #10
   1df9c:	e7f7      	b.n	1df8e <rpc_gnss_event_handler+0x186>
   1df9e:	bf00      	nop
   1dfa0:	2000fa3a 	.word	0x2000fa3a
   1dfa4:	2000f8fc 	.word	0x2000f8fc
   1dfa8:	2000f890 	.word	0x2000f890
   1dfac:	2000f880 	.word	0x2000f880
   1dfb0:	2000f884 	.word	0x2000f884
   1dfb4:	2000fa39 	.word	0x2000fa39
   1dfb8:	2000fa38 	.word	0x2000fa38
   1dfbc:	2000f88c 	.word	0x2000f88c
   1dfc0:	2000f888 	.word	0x2000f888

0001dfc4 <nrf_modem_gnss_read>:
   1dfc4:	b570      	push	{r4, r5, r6, lr}
   1dfc6:	4604      	mov	r4, r0
   1dfc8:	2800      	cmp	r0, #0
   1dfca:	f000 817c 	beq.w	1e2c6 <nrf_modem_gnss_read+0x302>
   1dfce:	2a02      	cmp	r2, #2
   1dfd0:	f000 8159 	beq.w	1e286 <nrf_modem_gnss_read+0x2c2>
   1dfd4:	2a03      	cmp	r2, #3
   1dfd6:	f000 8165 	beq.w	1e2a4 <nrf_modem_gnss_read+0x2e0>
   1dfda:	2a01      	cmp	r2, #1
   1dfdc:	f040 8173 	bne.w	1e2c6 <nrf_modem_gnss_read+0x302>
   1dfe0:	29e7      	cmp	r1, #231	; 0xe7
   1dfe2:	f240 8173 	bls.w	1e2cc <nrf_modem_gnss_read+0x308>
   1dfe6:	f006 fda4 	bl	24b32 <rpc_transport_rx_data_suspend>
   1dfea:	4bba      	ldr	r3, [pc, #744]	; (1e2d4 <nrf_modem_gnss_read+0x310>)
   1dfec:	681d      	ldr	r5, [r3, #0]
   1dfee:	b925      	cbnz	r5, 1dffa <nrf_modem_gnss_read+0x36>
   1dff0:	f006 fda1 	bl	24b36 <rpc_transport_rx_data_resume>
   1dff4:	f06f 0004 	mvn.w	r0, #4
   1dff8:	e082      	b.n	1e100 <nrf_modem_gnss_read+0x13c>
   1dffa:	22e8      	movs	r2, #232	; 0xe8
   1dffc:	2100      	movs	r1, #0
   1dffe:	4620      	mov	r0, r4
   1e000:	f008 fc3f 	bl	26882 <memset>
   1e004:	4bb4      	ldr	r3, [pc, #720]	; (1e2d8 <nrf_modem_gnss_read+0x314>)
   1e006:	781b      	ldrb	r3, [r3, #0]
   1e008:	2b01      	cmp	r3, #1
   1e00a:	d07a      	beq.n	1e102 <nrf_modem_gnss_read+0x13e>
   1e00c:	686a      	ldr	r2, [r5, #4]
   1e00e:	2b02      	cmp	r3, #2
   1e010:	68ab      	ldr	r3, [r5, #8]
   1e012:	e9c4 2300 	strd	r2, r3, [r4]
   1e016:	692b      	ldr	r3, [r5, #16]
   1e018:	68ea      	ldr	r2, [r5, #12]
   1e01a:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1e01e:	696b      	ldr	r3, [r5, #20]
   1e020:	6123      	str	r3, [r4, #16]
   1e022:	69ab      	ldr	r3, [r5, #24]
   1e024:	6163      	str	r3, [r4, #20]
   1e026:	69eb      	ldr	r3, [r5, #28]
   1e028:	f040 80d4 	bne.w	1e1d4 <nrf_modem_gnss_read+0x210>
   1e02c:	61a3      	str	r3, [r4, #24]
   1e02e:	6a2b      	ldr	r3, [r5, #32]
   1e030:	260a      	movs	r6, #10
   1e032:	61e3      	str	r3, [r4, #28]
   1e034:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e036:	6223      	str	r3, [r4, #32]
   1e038:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e03a:	6263      	str	r3, [r4, #36]	; 0x24
   1e03c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e03e:	62a3      	str	r3, [r4, #40]	; 0x28
   1e040:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1e042:	62e3      	str	r3, [r4, #44]	; 0x2c
   1e044:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e046:	6323      	str	r3, [r4, #48]	; 0x30
   1e048:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
   1e04c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   1e050:	f8d5 3041 	ldr.w	r3, [r5, #65]	; 0x41
   1e054:	6423      	str	r3, [r4, #64]	; 0x40
   1e056:	f8d5 3045 	ldr.w	r3, [r5, #69]	; 0x45
   1e05a:	6463      	str	r3, [r4, #68]	; 0x44
   1e05c:	f8d5 3049 	ldr.w	r3, [r5, #73]	; 0x49
   1e060:	64a3      	str	r3, [r4, #72]	; 0x48
   1e062:	f8d5 304d 	ldr.w	r3, [r5, #77]	; 0x4d
   1e066:	64e3      	str	r3, [r4, #76]	; 0x4c
   1e068:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1e06c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1e070:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e074:	86a3      	strh	r3, [r4, #52]	; 0x34
   1e076:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1e07a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   1e07e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1e082:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   1e086:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1e08a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   1e08e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1e092:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   1e096:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   1e09a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   1e09e:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   1e0a2:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   1e0a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e0aa:	87a3      	strh	r3, [r4, #60]	; 0x3c
   1e0ac:	f8d5 30ca 	ldr.w	r3, [r5, #202]	; 0xca
   1e0b0:	462a      	mov	r2, r5
   1e0b2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   1e0b6:	2300      	movs	r3, #0
   1e0b8:	fb06 5103 	mla	r1, r6, r3, r5
   1e0bc:	f8b1 0052 	ldrh.w	r0, [r1, #82]	; 0x52
   1e0c0:	3301      	adds	r3, #1
   1e0c2:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   1e0c6:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
   1e0ca:	2b0c      	cmp	r3, #12
   1e0cc:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   1e0d0:	f8b1 0055 	ldrh.w	r0, [r1, #85]	; 0x55
   1e0d4:	f104 040c 	add.w	r4, r4, #12
   1e0d8:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   1e0dc:	f9b1 0057 	ldrsh.w	r0, [r1, #87]	; 0x57
   1e0e0:	f102 020a 	add.w	r2, r2, #10
   1e0e4:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   1e0e8:	f9b1 1059 	ldrsh.w	r1, [r1, #89]	; 0x59
   1e0ec:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   1e0f0:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
   1e0f4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   1e0f8:	d1de      	bne.n	1e0b8 <nrf_modem_gnss_read+0xf4>
   1e0fa:	f006 fd1c 	bl	24b36 <rpc_transport_rx_data_resume>
   1e0fe:	2000      	movs	r0, #0
   1e100:	bd70      	pop	{r4, r5, r6, pc}
   1e102:	686a      	ldr	r2, [r5, #4]
   1e104:	68ab      	ldr	r3, [r5, #8]
   1e106:	260a      	movs	r6, #10
   1e108:	e9c4 2300 	strd	r2, r3, [r4]
   1e10c:	68ea      	ldr	r2, [r5, #12]
   1e10e:	692b      	ldr	r3, [r5, #16]
   1e110:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1e114:	696b      	ldr	r3, [r5, #20]
   1e116:	6123      	str	r3, [r4, #16]
   1e118:	69ab      	ldr	r3, [r5, #24]
   1e11a:	6163      	str	r3, [r4, #20]
   1e11c:	69eb      	ldr	r3, [r5, #28]
   1e11e:	61e3      	str	r3, [r4, #28]
   1e120:	6a2b      	ldr	r3, [r5, #32]
   1e122:	6223      	str	r3, [r4, #32]
   1e124:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e126:	62e3      	str	r3, [r4, #44]	; 0x2c
   1e128:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
   1e12c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   1e130:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   1e134:	6423      	str	r3, [r4, #64]	; 0x40
   1e136:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   1e13a:	6463      	str	r3, [r4, #68]	; 0x44
   1e13c:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   1e140:	64a3      	str	r3, [r4, #72]	; 0x48
   1e142:	f8d5 303d 	ldr.w	r3, [r5, #61]	; 0x3d
   1e146:	64e3      	str	r3, [r4, #76]	; 0x4c
   1e148:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   1e14c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1e150:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e154:	86a3      	strh	r3, [r4, #52]	; 0x34
   1e156:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   1e15a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   1e15e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1e162:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   1e166:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1e16a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   1e16e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1e172:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   1e176:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1e17a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   1e17e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   1e182:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1e186:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e18a:	87a3      	strh	r3, [r4, #60]	; 0x3c
   1e18c:	462a      	mov	r2, r5
   1e18e:	2300      	movs	r3, #0
   1e190:	fb06 5103 	mla	r1, r6, r3, r5
   1e194:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
   1e198:	3301      	adds	r3, #1
   1e19a:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   1e19e:	f892 0044 	ldrb.w	r0, [r2, #68]	; 0x44
   1e1a2:	2b0c      	cmp	r3, #12
   1e1a4:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   1e1a8:	f8b1 0045 	ldrh.w	r0, [r1, #69]	; 0x45
   1e1ac:	f104 040c 	add.w	r4, r4, #12
   1e1b0:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   1e1b4:	f9b1 0047 	ldrsh.w	r0, [r1, #71]	; 0x47
   1e1b8:	f102 020a 	add.w	r2, r2, #10
   1e1bc:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   1e1c0:	f9b1 1049 	ldrsh.w	r1, [r1, #73]	; 0x49
   1e1c4:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   1e1c8:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
   1e1cc:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   1e1d0:	d1de      	bne.n	1e190 <nrf_modem_gnss_read+0x1cc>
   1e1d2:	e792      	b.n	1e0fa <nrf_modem_gnss_read+0x136>
   1e1d4:	61e3      	str	r3, [r4, #28]
   1e1d6:	6a2b      	ldr	r3, [r5, #32]
   1e1d8:	260a      	movs	r6, #10
   1e1da:	62e3      	str	r3, [r4, #44]	; 0x2c
   1e1dc:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1e1e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   1e1e4:	f8d5 302d 	ldr.w	r3, [r5, #45]	; 0x2d
   1e1e8:	6423      	str	r3, [r4, #64]	; 0x40
   1e1ea:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   1e1ee:	6463      	str	r3, [r4, #68]	; 0x44
   1e1f0:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   1e1f4:	64a3      	str	r3, [r4, #72]	; 0x48
   1e1f6:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   1e1fa:	64e3      	str	r3, [r4, #76]	; 0x4c
   1e1fc:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   1e200:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1e204:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e208:	86a3      	strh	r3, [r4, #52]	; 0x34
   1e20a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1e20e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   1e212:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1e216:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   1e21a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1e21e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   1e222:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1e226:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   1e22a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   1e22e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   1e232:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   1e236:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1e23a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e23e:	87a3      	strh	r3, [r4, #60]	; 0x3c
   1e240:	462a      	mov	r2, r5
   1e242:	2300      	movs	r3, #0
   1e244:	fb06 5103 	mla	r1, r6, r3, r5
   1e248:	8fc8      	ldrh	r0, [r1, #62]	; 0x3e
   1e24a:	3301      	adds	r3, #1
   1e24c:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   1e250:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
   1e254:	2b0c      	cmp	r3, #12
   1e256:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   1e25a:	f8b1 0041 	ldrh.w	r0, [r1, #65]	; 0x41
   1e25e:	f104 040c 	add.w	r4, r4, #12
   1e262:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   1e266:	f9b1 0043 	ldrsh.w	r0, [r1, #67]	; 0x43
   1e26a:	f102 020a 	add.w	r2, r2, #10
   1e26e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   1e272:	f9b1 1045 	ldrsh.w	r1, [r1, #69]	; 0x45
   1e276:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   1e27a:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
   1e27e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   1e282:	d1df      	bne.n	1e244 <nrf_modem_gnss_read+0x280>
   1e284:	e739      	b.n	1e0fa <nrf_modem_gnss_read+0x136>
   1e286:	2952      	cmp	r1, #82	; 0x52
   1e288:	d920      	bls.n	1e2cc <nrf_modem_gnss_read+0x308>
   1e28a:	4d14      	ldr	r5, [pc, #80]	; (1e2dc <nrf_modem_gnss_read+0x318>)
   1e28c:	682b      	ldr	r3, [r5, #0]
   1e28e:	2b00      	cmp	r3, #0
   1e290:	f43f aeb0 	beq.w	1dff4 <nrf_modem_gnss_read+0x30>
   1e294:	f006 fc4d 	bl	24b32 <rpc_transport_rx_data_suspend>
   1e298:	2253      	movs	r2, #83	; 0x53
   1e29a:	4620      	mov	r0, r4
   1e29c:	6829      	ldr	r1, [r5, #0]
   1e29e:	f008 fad0 	bl	26842 <memcpy>
   1e2a2:	e72a      	b.n	1e0fa <nrf_modem_gnss_read+0x136>
   1e2a4:	290b      	cmp	r1, #11
   1e2a6:	d911      	bls.n	1e2cc <nrf_modem_gnss_read+0x308>
   1e2a8:	4d0d      	ldr	r5, [pc, #52]	; (1e2e0 <nrf_modem_gnss_read+0x31c>)
   1e2aa:	682b      	ldr	r3, [r5, #0]
   1e2ac:	2b00      	cmp	r3, #0
   1e2ae:	f43f aea1 	beq.w	1dff4 <nrf_modem_gnss_read+0x30>
   1e2b2:	f006 fc3e 	bl	24b32 <rpc_transport_rx_data_suspend>
   1e2b6:	682b      	ldr	r3, [r5, #0]
   1e2b8:	681a      	ldr	r2, [r3, #0]
   1e2ba:	6022      	str	r2, [r4, #0]
   1e2bc:	685a      	ldr	r2, [r3, #4]
   1e2be:	6062      	str	r2, [r4, #4]
   1e2c0:	891b      	ldrh	r3, [r3, #8]
   1e2c2:	60a3      	str	r3, [r4, #8]
   1e2c4:	e719      	b.n	1e0fa <nrf_modem_gnss_read+0x136>
   1e2c6:	f06f 0015 	mvn.w	r0, #21
   1e2ca:	e719      	b.n	1e100 <nrf_modem_gnss_read+0x13c>
   1e2cc:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e2d0:	e716      	b.n	1e100 <nrf_modem_gnss_read+0x13c>
   1e2d2:	bf00      	nop
   1e2d4:	2000f884 	.word	0x2000f884
   1e2d8:	2000fa39 	.word	0x2000fa39
   1e2dc:	2000f88c 	.word	0x2000f88c
   1e2e0:	2000f888 	.word	0x2000f888

0001e2e4 <nrf_modem_gnss_start>:
   1e2e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e2e8:	4c26      	ldr	r4, [pc, #152]	; (1e384 <nrf_modem_gnss_start+0xa0>)
   1e2ea:	b087      	sub	sp, #28
   1e2ec:	7823      	ldrb	r3, [r4, #0]
   1e2ee:	2b00      	cmp	r3, #0
   1e2f0:	d145      	bne.n	1e37e <nrf_modem_gnss_start+0x9a>
   1e2f2:	4b25      	ldr	r3, [pc, #148]	; (1e388 <nrf_modem_gnss_start+0xa4>)
   1e2f4:	781a      	ldrb	r2, [r3, #0]
   1e2f6:	4698      	mov	r8, r3
   1e2f8:	bb62      	cbnz	r2, 1e354 <nrf_modem_gnss_start+0x70>
   1e2fa:	2602      	movs	r6, #2
   1e2fc:	f04f 0905 	mov.w	r9, #5
   1e300:	4637      	mov	r7, r6
   1e302:	2214      	movs	r2, #20
   1e304:	2100      	movs	r1, #0
   1e306:	a801      	add	r0, sp, #4
   1e308:	f008 fabb 	bl	26882 <memset>
   1e30c:	2214      	movs	r2, #20
   1e30e:	f241 0004 	movw	r0, #4100	; 0x1004
   1e312:	a901      	add	r1, sp, #4
   1e314:	f88d 9008 	strb.w	r9, [sp, #8]
   1e318:	f8cd 7009 	str.w	r7, [sp, #9]
   1e31c:	f7ff fd0e 	bl	1dd3c <send_message>
   1e320:	4605      	mov	r5, r0
   1e322:	b110      	cbz	r0, 1e32a <nrf_modem_gnss_start+0x46>
   1e324:	2701      	movs	r7, #1
   1e326:	42be      	cmp	r6, r7
   1e328:	d127      	bne.n	1e37a <nrf_modem_gnss_start+0x96>
   1e32a:	2214      	movs	r2, #20
   1e32c:	2100      	movs	r1, #0
   1e32e:	a801      	add	r0, sp, #4
   1e330:	f008 faa7 	bl	26882 <memset>
   1e334:	2601      	movs	r6, #1
   1e336:	2380      	movs	r3, #128	; 0x80
   1e338:	2214      	movs	r2, #20
   1e33a:	f241 2003 	movw	r0, #4611	; 0x1203
   1e33e:	a901      	add	r1, sp, #4
   1e340:	9302      	str	r3, [sp, #8]
   1e342:	f88d 6016 	strb.w	r6, [sp, #22]
   1e346:	f7ff fcf9 	bl	1dd3c <send_message>
   1e34a:	ea55 0300 	orrs.w	r3, r5, r0
   1e34e:	bf08      	it	eq
   1e350:	f888 6000 	strbeq.w	r6, [r8]
   1e354:	2501      	movs	r5, #1
   1e356:	2214      	movs	r2, #20
   1e358:	2100      	movs	r1, #0
   1e35a:	a801      	add	r0, sp, #4
   1e35c:	f008 fa91 	bl	26882 <memset>
   1e360:	2214      	movs	r2, #20
   1e362:	f241 0004 	movw	r0, #4100	; 0x1004
   1e366:	a901      	add	r1, sp, #4
   1e368:	f88d 5008 	strb.w	r5, [sp, #8]
   1e36c:	f7ff fce6 	bl	1dd3c <send_message>
   1e370:	b900      	cbnz	r0, 1e374 <nrf_modem_gnss_start+0x90>
   1e372:	7025      	strb	r5, [r4, #0]
   1e374:	b007      	add	sp, #28
   1e376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e37a:	463e      	mov	r6, r7
   1e37c:	e7c1      	b.n	1e302 <nrf_modem_gnss_start+0x1e>
   1e37e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e382:	e7f7      	b.n	1e374 <nrf_modem_gnss_start+0x90>
   1e384:	2000fa3c 	.word	0x2000fa3c
   1e388:	2000fa3b 	.word	0x2000fa3b

0001e38c <nrf_modem_gnss_stop>:
   1e38c:	b510      	push	{r4, lr}
   1e38e:	4c0d      	ldr	r4, [pc, #52]	; (1e3c4 <nrf_modem_gnss_stop+0x38>)
   1e390:	b086      	sub	sp, #24
   1e392:	7823      	ldrb	r3, [r4, #0]
   1e394:	2b01      	cmp	r3, #1
   1e396:	d111      	bne.n	1e3bc <nrf_modem_gnss_stop+0x30>
   1e398:	2214      	movs	r2, #20
   1e39a:	2100      	movs	r1, #0
   1e39c:	a801      	add	r0, sp, #4
   1e39e:	f008 fa70 	bl	26882 <memset>
   1e3a2:	2300      	movs	r3, #0
   1e3a4:	2214      	movs	r2, #20
   1e3a6:	f241 0004 	movw	r0, #4100	; 0x1004
   1e3aa:	a901      	add	r1, sp, #4
   1e3ac:	f88d 3008 	strb.w	r3, [sp, #8]
   1e3b0:	f7ff fcc4 	bl	1dd3c <send_message>
   1e3b4:	b900      	cbnz	r0, 1e3b8 <nrf_modem_gnss_stop+0x2c>
   1e3b6:	7020      	strb	r0, [r4, #0]
   1e3b8:	b006      	add	sp, #24
   1e3ba:	bd10      	pop	{r4, pc}
   1e3bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e3c0:	e7fa      	b.n	1e3b8 <nrf_modem_gnss_stop+0x2c>
   1e3c2:	bf00      	nop
   1e3c4:	2000fa3c 	.word	0x2000fa3c

0001e3c8 <nrf_modem_gnss_nv_data_delete>:
   1e3c8:	b530      	push	{r4, r5, lr}
   1e3ca:	4b0d      	ldr	r3, [pc, #52]	; (1e400 <nrf_modem_gnss_nv_data_delete+0x38>)
   1e3cc:	4604      	mov	r4, r0
   1e3ce:	781b      	ldrb	r3, [r3, #0]
   1e3d0:	b087      	sub	sp, #28
   1e3d2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   1e3d6:	b983      	cbnz	r3, 1e3fa <nrf_modem_gnss_nv_data_delete+0x32>
   1e3d8:	2214      	movs	r2, #20
   1e3da:	4629      	mov	r1, r5
   1e3dc:	a801      	add	r0, sp, #4
   1e3de:	f008 fa50 	bl	26882 <memset>
   1e3e2:	2214      	movs	r2, #20
   1e3e4:	f241 0004 	movw	r0, #4100	; 0x1004
   1e3e8:	a901      	add	r1, sp, #4
   1e3ea:	f88d 5008 	strb.w	r5, [sp, #8]
   1e3ee:	f8cd 4009 	str.w	r4, [sp, #9]
   1e3f2:	f7ff fca3 	bl	1dd3c <send_message>
   1e3f6:	b007      	add	sp, #28
   1e3f8:	bd30      	pop	{r4, r5, pc}
   1e3fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e3fe:	e7fa      	b.n	1e3f6 <nrf_modem_gnss_nv_data_delete+0x2e>
   1e400:	2000fa3c 	.word	0x2000fa3c

0001e404 <nrf_modem_gnss_prio_mode_enable>:
   1e404:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1e406:	4b0c      	ldr	r3, [pc, #48]	; (1e438 <nrf_modem_gnss_prio_mode_enable+0x34>)
   1e408:	781b      	ldrb	r3, [r3, #0]
   1e40a:	2b01      	cmp	r3, #1
   1e40c:	d110      	bne.n	1e430 <nrf_modem_gnss_prio_mode_enable+0x2c>
   1e40e:	2214      	movs	r2, #20
   1e410:	2100      	movs	r1, #0
   1e412:	a801      	add	r0, sp, #4
   1e414:	f008 fa35 	bl	26882 <memset>
   1e418:	2302      	movs	r3, #2
   1e41a:	2214      	movs	r2, #20
   1e41c:	f241 0004 	movw	r0, #4100	; 0x1004
   1e420:	a901      	add	r1, sp, #4
   1e422:	f88d 3008 	strb.w	r3, [sp, #8]
   1e426:	f7ff fc89 	bl	1dd3c <send_message>
   1e42a:	b007      	add	sp, #28
   1e42c:	f85d fb04 	ldr.w	pc, [sp], #4
   1e430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e434:	e7f9      	b.n	1e42a <nrf_modem_gnss_prio_mode_enable+0x26>
   1e436:	bf00      	nop
   1e438:	2000fa3c 	.word	0x2000fa3c

0001e43c <nrf_modem_gnss_use_case_set>:
   1e43c:	b510      	push	{r4, lr}
   1e43e:	4b0d      	ldr	r3, [pc, #52]	; (1e474 <nrf_modem_gnss_use_case_set+0x38>)
   1e440:	4604      	mov	r4, r0
   1e442:	781b      	ldrb	r3, [r3, #0]
   1e444:	b086      	sub	sp, #24
   1e446:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   1e44a:	b97b      	cbnz	r3, 1e46c <nrf_modem_gnss_use_case_set+0x30>
   1e44c:	2214      	movs	r2, #20
   1e44e:	a801      	add	r0, sp, #4
   1e450:	f008 fa17 	bl	26882 <memset>
   1e454:	2302      	movs	r3, #2
   1e456:	2214      	movs	r2, #20
   1e458:	f241 1003 	movw	r0, #4355	; 0x1103
   1e45c:	a901      	add	r1, sp, #4
   1e45e:	9302      	str	r3, [sp, #8]
   1e460:	f88d 400d 	strb.w	r4, [sp, #13]
   1e464:	f7ff fc6a 	bl	1dd3c <send_message>
   1e468:	b006      	add	sp, #24
   1e46a:	bd10      	pop	{r4, pc}
   1e46c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e470:	e7fa      	b.n	1e468 <nrf_modem_gnss_use_case_set+0x2c>
   1e472:	bf00      	nop
   1e474:	2000fa3c 	.word	0x2000fa3c

0001e478 <nrf_modem_gnss_fix_interval_set>:
   1e478:	b510      	push	{r4, lr}
   1e47a:	4b0d      	ldr	r3, [pc, #52]	; (1e4b0 <nrf_modem_gnss_fix_interval_set+0x38>)
   1e47c:	4604      	mov	r4, r0
   1e47e:	781b      	ldrb	r3, [r3, #0]
   1e480:	b086      	sub	sp, #24
   1e482:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   1e486:	b97b      	cbnz	r3, 1e4a8 <nrf_modem_gnss_fix_interval_set+0x30>
   1e488:	2214      	movs	r2, #20
   1e48a:	a801      	add	r0, sp, #4
   1e48c:	f008 f9f9 	bl	26882 <memset>
   1e490:	2308      	movs	r3, #8
   1e492:	2214      	movs	r2, #20
   1e494:	f241 1003 	movw	r0, #4355	; 0x1103
   1e498:	a901      	add	r1, sp, #4
   1e49a:	9302      	str	r3, [sp, #8]
   1e49c:	f8ad 400f 	strh.w	r4, [sp, #15]
   1e4a0:	f7ff fc4c 	bl	1dd3c <send_message>
   1e4a4:	b006      	add	sp, #24
   1e4a6:	bd10      	pop	{r4, pc}
   1e4a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4ac:	e7fa      	b.n	1e4a4 <nrf_modem_gnss_fix_interval_set+0x2c>
   1e4ae:	bf00      	nop
   1e4b0:	2000fa3c 	.word	0x2000fa3c

0001e4b4 <nrf_modem_gnss_fix_retry_set>:
   1e4b4:	b510      	push	{r4, lr}
   1e4b6:	4b0d      	ldr	r3, [pc, #52]	; (1e4ec <nrf_modem_gnss_fix_retry_set+0x38>)
   1e4b8:	4604      	mov	r4, r0
   1e4ba:	781b      	ldrb	r3, [r3, #0]
   1e4bc:	b086      	sub	sp, #24
   1e4be:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   1e4c2:	b97b      	cbnz	r3, 1e4e4 <nrf_modem_gnss_fix_retry_set+0x30>
   1e4c4:	2214      	movs	r2, #20
   1e4c6:	a801      	add	r0, sp, #4
   1e4c8:	f008 f9db 	bl	26882 <memset>
   1e4cc:	2310      	movs	r3, #16
   1e4ce:	2214      	movs	r2, #20
   1e4d0:	f241 1003 	movw	r0, #4355	; 0x1103
   1e4d4:	a901      	add	r1, sp, #4
   1e4d6:	9302      	str	r3, [sp, #8]
   1e4d8:	f8ad 4011 	strh.w	r4, [sp, #17]
   1e4dc:	f7ff fc2e 	bl	1dd3c <send_message>
   1e4e0:	b006      	add	sp, #24
   1e4e2:	bd10      	pop	{r4, pc}
   1e4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4e8:	e7fa      	b.n	1e4e0 <nrf_modem_gnss_fix_retry_set+0x2c>
   1e4ea:	bf00      	nop
   1e4ec:	2000fa3c 	.word	0x2000fa3c

0001e4f0 <nrf_modem_gnss_nmea_mask_set>:
   1e4f0:	b510      	push	{r4, lr}
   1e4f2:	4b0d      	ldr	r3, [pc, #52]	; (1e528 <nrf_modem_gnss_nmea_mask_set+0x38>)
   1e4f4:	4604      	mov	r4, r0
   1e4f6:	781b      	ldrb	r3, [r3, #0]
   1e4f8:	b086      	sub	sp, #24
   1e4fa:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   1e4fe:	b97b      	cbnz	r3, 1e520 <nrf_modem_gnss_nmea_mask_set+0x30>
   1e500:	2214      	movs	r2, #20
   1e502:	a801      	add	r0, sp, #4
   1e504:	f008 f9bd 	bl	26882 <memset>
   1e508:	2320      	movs	r3, #32
   1e50a:	2214      	movs	r2, #20
   1e50c:	f241 1003 	movw	r0, #4355	; 0x1103
   1e510:	a901      	add	r1, sp, #4
   1e512:	9302      	str	r3, [sp, #8]
   1e514:	f8ad 4013 	strh.w	r4, [sp, #19]
   1e518:	f7ff fc10 	bl	1dd3c <send_message>
   1e51c:	b006      	add	sp, #24
   1e51e:	bd10      	pop	{r4, pc}
   1e520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e524:	e7fa      	b.n	1e51c <nrf_modem_gnss_nmea_mask_set+0x2c>
   1e526:	bf00      	nop
   1e528:	2000fa3c 	.word	0x2000fa3c

0001e52c <nrf_modem_gnss_power_mode_set>:
   1e52c:	b510      	push	{r4, lr}
   1e52e:	4b0d      	ldr	r3, [pc, #52]	; (1e564 <nrf_modem_gnss_power_mode_set+0x38>)
   1e530:	4604      	mov	r4, r0
   1e532:	781b      	ldrb	r3, [r3, #0]
   1e534:	b086      	sub	sp, #24
   1e536:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   1e53a:	b97b      	cbnz	r3, 1e55c <nrf_modem_gnss_power_mode_set+0x30>
   1e53c:	2214      	movs	r2, #20
   1e53e:	a801      	add	r0, sp, #4
   1e540:	f008 f99f 	bl	26882 <memset>
   1e544:	2340      	movs	r3, #64	; 0x40
   1e546:	2214      	movs	r2, #20
   1e548:	f241 1003 	movw	r0, #4355	; 0x1103
   1e54c:	a901      	add	r1, sp, #4
   1e54e:	9302      	str	r3, [sp, #8]
   1e550:	f88d 4015 	strb.w	r4, [sp, #21]
   1e554:	f7ff fbf2 	bl	1dd3c <send_message>
   1e558:	b006      	add	sp, #24
   1e55a:	bd10      	pop	{r4, pc}
   1e55c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e560:	e7fa      	b.n	1e558 <nrf_modem_gnss_power_mode_set+0x2c>
   1e562:	bf00      	nop
   1e564:	2000fa3c 	.word	0x2000fa3c

0001e568 <nrf_modem_gnss_event_handler_set>:
   1e568:	4b05      	ldr	r3, [pc, #20]	; (1e580 <nrf_modem_gnss_event_handler_set+0x18>)
   1e56a:	781a      	ldrb	r2, [r3, #0]
   1e56c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   1e570:	b91a      	cbnz	r2, 1e57a <nrf_modem_gnss_event_handler_set+0x12>
   1e572:	4a04      	ldr	r2, [pc, #16]	; (1e584 <nrf_modem_gnss_event_handler_set+0x1c>)
   1e574:	6010      	str	r0, [r2, #0]
   1e576:	4618      	mov	r0, r3
   1e578:	4770      	bx	lr
   1e57a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e57e:	4770      	bx	lr
   1e580:	2000fa3c 	.word	0x2000fa3c
   1e584:	2000f880 	.word	0x2000f880

0001e588 <full_dfu_ipc_irq_handler>:
   1e588:	2301      	movs	r3, #1
   1e58a:	4a03      	ldr	r2, [pc, #12]	; (1e598 <full_dfu_ipc_irq_handler+0x10>)
   1e58c:	6013      	str	r3, [r2, #0]
   1e58e:	07c2      	lsls	r2, r0, #31
   1e590:	bf44      	itt	mi
   1e592:	4a02      	ldrmi	r2, [pc, #8]	; (1e59c <full_dfu_ipc_irq_handler+0x14>)
   1e594:	7013      	strbmi	r3, [r2, #0]
   1e596:	4770      	bx	lr
   1e598:	2000f894 	.word	0x2000f894
   1e59c:	2000fa3d 	.word	0x2000fa3d

0001e5a0 <modem_ipc_wait_for_event>:
   1e5a0:	b538      	push	{r3, r4, r5, lr}
   1e5a2:	2300      	movs	r3, #0
   1e5a4:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   1e5a8:	4c0b      	ldr	r4, [pc, #44]	; (1e5d8 <modem_ipc_wait_for_event+0x38>)
   1e5aa:	6023      	str	r3, [r4, #0]
   1e5ac:	6823      	ldr	r3, [r4, #0]
   1e5ae:	b92b      	cbnz	r3, 1e5bc <modem_ipc_wait_for_event+0x1c>
   1e5b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1e5b4:	f005 f99f 	bl	238f6 <nrf_modem_os_busywait>
   1e5b8:	3d01      	subs	r5, #1
   1e5ba:	d1f7      	bne.n	1e5ac <modem_ipc_wait_for_event+0xc>
   1e5bc:	6823      	ldr	r3, [r4, #0]
   1e5be:	b913      	cbnz	r3, 1e5c6 <modem_ipc_wait_for_event+0x26>
   1e5c0:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1e5c4:	e006      	b.n	1e5d4 <modem_ipc_wait_for_event+0x34>
   1e5c6:	4b05      	ldr	r3, [pc, #20]	; (1e5dc <modem_ipc_wait_for_event+0x3c>)
   1e5c8:	781b      	ldrb	r3, [r3, #0]
   1e5ca:	2b01      	cmp	r3, #1
   1e5cc:	bf14      	ite	ne
   1e5ce:	2000      	movne	r0, #0
   1e5d0:	f06f 0004 	mvneq.w	r0, #4
   1e5d4:	bd38      	pop	{r3, r4, r5, pc}
   1e5d6:	bf00      	nop
   1e5d8:	2000f894 	.word	0x2000f894
   1e5dc:	2000fa3d 	.word	0x2000fa3d

0001e5e0 <nrf_modem_full_dfu_setup>:
   1e5e0:	2200      	movs	r2, #0
   1e5e2:	2300      	movs	r3, #0
   1e5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5e6:	4d2b      	ldr	r5, [pc, #172]	; (1e694 <nrf_modem_full_dfu_setup+0xb4>)
   1e5e8:	4e2b      	ldr	r6, [pc, #172]	; (1e698 <nrf_modem_full_dfu_setup+0xb8>)
   1e5ea:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1e5ee:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1e5f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e5f6:	4b29      	ldr	r3, [pc, #164]	; (1e69c <nrf_modem_full_dfu_setup+0xbc>)
   1e5f8:	2400      	movs	r4, #0
   1e5fa:	601a      	str	r2, [r3, #0]
   1e5fc:	f100 031c 	add.w	r3, r0, #28
   1e600:	6033      	str	r3, [r6, #0]
   1e602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e606:	6043      	str	r3, [r0, #4]
   1e608:	231c      	movs	r3, #28
   1e60a:	7203      	strb	r3, [r0, #8]
   1e60c:	2320      	movs	r3, #32
   1e60e:	2701      	movs	r7, #1
   1e610:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1e614:	7243      	strb	r3, [r0, #9]
   1e616:	4b22      	ldr	r3, [pc, #136]	; (1e6a0 <nrf_modem_full_dfu_setup+0xc0>)
   1e618:	7004      	strb	r4, [r0, #0]
   1e61a:	7044      	strb	r4, [r0, #1]
   1e61c:	70c2      	strb	r2, [r0, #3]
   1e61e:	7284      	strb	r4, [r0, #10]
   1e620:	72c4      	strb	r4, [r0, #11]
   1e622:	7087      	strb	r7, [r0, #2]
   1e624:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1e628:	702c      	strb	r4, [r5, #0]
   1e62a:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   1e62e:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   1e632:	4b1c      	ldr	r3, [pc, #112]	; (1e6a4 <nrf_modem_full_dfu_setup+0xc4>)
   1e634:	b093      	sub	sp, #76	; 0x4c
   1e636:	4622      	mov	r2, r4
   1e638:	4620      	mov	r0, r4
   1e63a:	491b      	ldr	r1, [pc, #108]	; (1e6a8 <nrf_modem_full_dfu_setup+0xc8>)
   1e63c:	701c      	strb	r4, [r3, #0]
   1e63e:	f7fc fea5 	bl	1b38c <nrfx_ipc_init>
   1e642:	4621      	mov	r1, r4
   1e644:	2240      	movs	r2, #64	; 0x40
   1e646:	a801      	add	r0, sp, #4
   1e648:	f008 f91b 	bl	26882 <memset>
   1e64c:	2302      	movs	r3, #2
   1e64e:	9302      	str	r3, [sp, #8]
   1e650:	2304      	movs	r3, #4
   1e652:	930b      	str	r3, [sp, #44]	; 0x2c
   1e654:	2305      	movs	r3, #5
   1e656:	a801      	add	r0, sp, #4
   1e658:	9311      	str	r3, [sp, #68]	; 0x44
   1e65a:	9709      	str	r7, [sp, #36]	; 0x24
   1e65c:	f7fc feae 	bl	1b3bc <nrfx_ipc_config_load>
   1e660:	4b12      	ldr	r3, [pc, #72]	; (1e6ac <nrf_modem_full_dfu_setup+0xcc>)
   1e662:	9400      	str	r4, [sp, #0]
   1e664:	6836      	ldr	r6, [r6, #0]
   1e666:	601c      	str	r4, [r3, #0]
   1e668:	681b      	ldr	r3, [r3, #0]
   1e66a:	9300      	str	r3, [sp, #0]
   1e66c:	9b00      	ldr	r3, [sp, #0]
   1e66e:	f7ff ff97 	bl	1e5a0 <modem_ipc_wait_for_event>
   1e672:	4604      	mov	r4, r0
   1e674:	b130      	cbz	r0, 1e684 <nrf_modem_full_dfu_setup+0xa4>
   1e676:	2303      	movs	r3, #3
   1e678:	702b      	strb	r3, [r5, #0]
   1e67a:	f7fc fec5 	bl	1b408 <nrfx_ipc_uninit>
   1e67e:	4620      	mov	r0, r4
   1e680:	b013      	add	sp, #76	; 0x4c
   1e682:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e684:	6832      	ldr	r2, [r6, #0]
   1e686:	4b0a      	ldr	r3, [pc, #40]	; (1e6b0 <nrf_modem_full_dfu_setup+0xd0>)
   1e688:	429a      	cmp	r2, r3
   1e68a:	d0f8      	beq.n	1e67e <nrf_modem_full_dfu_setup+0x9e>
   1e68c:	f06f 0404 	mvn.w	r4, #4
   1e690:	e7f3      	b.n	1e67a <nrf_modem_full_dfu_setup+0x9a>
   1e692:	bf00      	nop
   1e694:	2000d588 	.word	0x2000d588
   1e698:	2000f898 	.word	0x2000f898
   1e69c:	2000f89c 	.word	0x2000f89c
   1e6a0:	4002a000 	.word	0x4002a000
   1e6a4:	2000fa3d 	.word	0x2000fa3d
   1e6a8:	0001e589 	.word	0x0001e589
   1e6ac:	40005610 	.word	0x40005610
   1e6b0:	a5000001 	.word	0xa5000001

0001e6b4 <packet_handler_create>:
   1e6b4:	2801      	cmp	r0, #1
   1e6b6:	b570      	push	{r4, r5, r6, lr}
   1e6b8:	4604      	mov	r4, r0
   1e6ba:	460e      	mov	r6, r1
   1e6bc:	4615      	mov	r5, r2
   1e6be:	d00f      	beq.n	1e6e0 <packet_handler_create+0x2c>
   1e6c0:	1e84      	subs	r4, r0, #2
   1e6c2:	2c01      	cmp	r4, #1
   1e6c4:	d810      	bhi.n	1e6e8 <packet_handler_create+0x34>
   1e6c6:	2010      	movs	r0, #16
   1e6c8:	f7f7 ffec 	bl	166a4 <nrf_modem_os_alloc>
   1e6cc:	2400      	movs	r4, #0
   1e6ce:	b130      	cbz	r0, 1e6de <packet_handler_create+0x2a>
   1e6d0:	2218      	movs	r2, #24
   1e6d2:	4b08      	ldr	r3, [pc, #32]	; (1e6f4 <packet_handler_create+0x40>)
   1e6d4:	6085      	str	r5, [r0, #8]
   1e6d6:	fb02 3404 	mla	r4, r2, r4, r3
   1e6da:	e9c0 4600 	strd	r4, r6, [r0]
   1e6de:	bd70      	pop	{r4, r5, r6, pc}
   1e6e0:	2014      	movs	r0, #20
   1e6e2:	f7f7 ffdf 	bl	166a4 <nrf_modem_os_alloc>
   1e6e6:	e7f2      	b.n	1e6ce <packet_handler_create+0x1a>
   1e6e8:	200c      	movs	r0, #12
   1e6ea:	f7f7 ffdb 	bl	166a4 <nrf_modem_os_alloc>
   1e6ee:	2402      	movs	r4, #2
   1e6f0:	e7ed      	b.n	1e6ce <packet_handler_create+0x1a>
   1e6f2:	bf00      	nop
   1e6f4:	0002a070 	.word	0x0002a070

0001e6f8 <modem_off>:
   1e6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e6fa:	2501      	movs	r5, #1
   1e6fc:	4c07      	ldr	r4, [pc, #28]	; (1e71c <modem_off+0x24>)
   1e6fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1e702:	6065      	str	r5, [r4, #4]
   1e704:	f005 f8f7 	bl	238f6 <nrf_modem_os_busywait>
   1e708:	2300      	movs	r3, #0
   1e70a:	6063      	str	r3, [r4, #4]
   1e70c:	9301      	str	r3, [sp, #4]
   1e70e:	6025      	str	r5, [r4, #0]
   1e710:	6823      	ldr	r3, [r4, #0]
   1e712:	9301      	str	r3, [sp, #4]
   1e714:	9b01      	ldr	r3, [sp, #4]
   1e716:	b003      	add	sp, #12
   1e718:	bd30      	pop	{r4, r5, pc}
   1e71a:	bf00      	nop
   1e71c:	40005610 	.word	0x40005610

0001e720 <nrf_modem_init>:
   1e720:	b570      	push	{r4, r5, r6, lr}
   1e722:	460d      	mov	r5, r1
   1e724:	b300      	cbz	r0, 1e768 <nrf_modem_init+0x48>
   1e726:	4e15      	ldr	r6, [pc, #84]	; (1e77c <nrf_modem_init+0x5c>)
   1e728:	7832      	ldrb	r2, [r6, #0]
   1e72a:	bb02      	cbnz	r2, 1e76e <nrf_modem_init+0x4e>
   1e72c:	2901      	cmp	r1, #1
   1e72e:	d113      	bne.n	1e758 <nrf_modem_init+0x38>
   1e730:	68c1      	ldr	r1, [r0, #12]
   1e732:	6842      	ldr	r2, [r0, #4]
   1e734:	440a      	add	r2, r1
   1e736:	6941      	ldr	r1, [r0, #20]
   1e738:	440a      	add	r2, r1
   1e73a:	69c1      	ldr	r1, [r0, #28]
   1e73c:	440a      	add	r2, r1
   1e73e:	f242 011b 	movw	r1, #8219	; 0x201b
   1e742:	428a      	cmp	r2, r1
   1e744:	d916      	bls.n	1e774 <nrf_modem_init+0x54>
   1e746:	6800      	ldr	r0, [r0, #0]
   1e748:	f7ff ff4a 	bl	1e5e0 <nrf_modem_full_dfu_setup>
   1e74c:	4604      	mov	r4, r0
   1e74e:	b130      	cbz	r0, 1e75e <nrf_modem_init+0x3e>
   1e750:	f7ff ffd2 	bl	1e6f8 <modem_off>
   1e754:	4620      	mov	r0, r4
   1e756:	bd70      	pop	{r4, r5, r6, pc}
   1e758:	f007 f88e 	bl	25878 <nrf_modem_platform_init>
   1e75c:	e7f6      	b.n	1e74c <nrf_modem_init+0x2c>
   1e75e:	4b08      	ldr	r3, [pc, #32]	; (1e780 <nrf_modem_init+0x60>)
   1e760:	701d      	strb	r5, [r3, #0]
   1e762:	2301      	movs	r3, #1
   1e764:	7033      	strb	r3, [r6, #0]
   1e766:	e7f5      	b.n	1e754 <nrf_modem_init+0x34>
   1e768:	f06f 040d 	mvn.w	r4, #13
   1e76c:	e7f2      	b.n	1e754 <nrf_modem_init+0x34>
   1e76e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1e772:	e7ef      	b.n	1e754 <nrf_modem_init+0x34>
   1e774:	f06f 040b 	mvn.w	r4, #11
   1e778:	e7ec      	b.n	1e754 <nrf_modem_init+0x34>
   1e77a:	bf00      	nop
   1e77c:	2000fa3e 	.word	0x2000fa3e
   1e780:	2000fa3f 	.word	0x2000fa3f

0001e784 <nrf_modem_platform_af_method_table_get>:
   1e784:	2805      	cmp	r0, #5
   1e786:	b508      	push	{r3, lr}
   1e788:	d016      	beq.n	1e7b8 <nrf_modem_platform_af_method_table_get+0x34>
   1e78a:	f020 0008 	bic.w	r0, r0, #8
   1e78e:	2802      	cmp	r0, #2
   1e790:	d117      	bne.n	1e7c2 <nrf_modem_platform_af_method_table_get+0x3e>
   1e792:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1e796:	d207      	bcs.n	1e7a8 <nrf_modem_platform_af_method_table_get+0x24>
   1e798:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1e79c:	d213      	bcs.n	1e7c6 <nrf_modem_platform_af_method_table_get+0x42>
   1e79e:	3a01      	subs	r2, #1
   1e7a0:	2a01      	cmp	r2, #1
   1e7a2:	d804      	bhi.n	1e7ae <nrf_modem_platform_af_method_table_get+0x2a>
   1e7a4:	4809      	ldr	r0, [pc, #36]	; (1e7cc <nrf_modem_platform_af_method_table_get+0x48>)
   1e7a6:	bd08      	pop	{r3, pc}
   1e7a8:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1e7ac:	d00b      	beq.n	1e7c6 <nrf_modem_platform_af_method_table_get+0x42>
   1e7ae:	207b      	movs	r0, #123	; 0x7b
   1e7b0:	f005 f93d 	bl	23a2e <nrf_modem_os_errno_set>
   1e7b4:	2000      	movs	r0, #0
   1e7b6:	e7f6      	b.n	1e7a6 <nrf_modem_platform_af_method_table_get+0x22>
   1e7b8:	2903      	cmp	r1, #3
   1e7ba:	4805      	ldr	r0, [pc, #20]	; (1e7d0 <nrf_modem_platform_af_method_table_get+0x4c>)
   1e7bc:	bf18      	it	ne
   1e7be:	2000      	movne	r0, #0
   1e7c0:	e7f1      	b.n	1e7a6 <nrf_modem_platform_af_method_table_get+0x22>
   1e7c2:	2016      	movs	r0, #22
   1e7c4:	e7f4      	b.n	1e7b0 <nrf_modem_platform_af_method_table_get+0x2c>
   1e7c6:	4803      	ldr	r0, [pc, #12]	; (1e7d4 <nrf_modem_platform_af_method_table_get+0x50>)
   1e7c8:	e7ed      	b.n	1e7a6 <nrf_modem_platform_af_method_table_get+0x22>
   1e7ca:	bf00      	nop
   1e7cc:	0002a0b8 	.word	0x0002a0b8
   1e7d0:	0002a108 	.word	0x0002a108
   1e7d4:	0002a0e0 	.word	0x0002a0e0

0001e7d8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1e7d8:	4b03      	ldr	r3, [pc, #12]	; (1e7e8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1e7da:	4a04      	ldr	r2, [pc, #16]	; (1e7ec <z_device_state_init+0x14>)
   1e7dc:	4293      	cmp	r3, r2
   1e7de:	d201      	bcs.n	1e7e4 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1e7e0:	3318      	adds	r3, #24
   1e7e2:	e7fa      	b.n	1e7da <z_device_state_init+0x2>
	}
}
   1e7e4:	4770      	bx	lr
   1e7e6:	bf00      	nop
   1e7e8:	00026e4c 	.word	0x00026e4c
   1e7ec:	00026ef4 	.word	0x00026ef4

0001e7f0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1e7f0:	b570      	push	{r4, r5, r6, lr}
   1e7f2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e7f4:	4b11      	ldr	r3, [pc, #68]	; (1e83c <z_sys_init_run_level+0x4c>)
   1e7f6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1e7fa:	e009      	b.n	1e810 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1e7fc:	4240      	negs	r0, r0
   1e7fe:	e017      	b.n	1e830 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1e800:	68eb      	ldr	r3, [r5, #12]
   1e802:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1e804:	68ea      	ldr	r2, [r5, #12]
   1e806:	7853      	ldrb	r3, [r2, #1]
   1e808:	f043 0301 	orr.w	r3, r3, #1
   1e80c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e80e:	3408      	adds	r4, #8
   1e810:	1c73      	adds	r3, r6, #1
   1e812:	4a0a      	ldr	r2, [pc, #40]	; (1e83c <z_sys_init_run_level+0x4c>)
   1e814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1e818:	42a3      	cmp	r3, r4
   1e81a:	d90d      	bls.n	1e838 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1e81c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1e81e:	6823      	ldr	r3, [r4, #0]
   1e820:	4628      	mov	r0, r5
   1e822:	4798      	blx	r3
		if (dev != NULL) {
   1e824:	2d00      	cmp	r5, #0
   1e826:	d0f2      	beq.n	1e80e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1e828:	2800      	cmp	r0, #0
   1e82a:	d0eb      	beq.n	1e804 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1e82c:	2800      	cmp	r0, #0
   1e82e:	dbe5      	blt.n	1e7fc <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1e830:	28ff      	cmp	r0, #255	; 0xff
   1e832:	dde5      	ble.n	1e800 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1e834:	20ff      	movs	r0, #255	; 0xff
   1e836:	e7e3      	b.n	1e800 <z_sys_init_run_level+0x10>
		}
	}
}
   1e838:	bd70      	pop	{r4, r5, r6, pc}
   1e83a:	bf00      	nop
   1e83c:	0002a130 	.word	0x0002a130

0001e840 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1e840:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1e842:	4605      	mov	r5, r0
   1e844:	b328      	cbz	r0, 1e892 <z_impl_device_get_binding+0x52>
   1e846:	7803      	ldrb	r3, [r0, #0]
   1e848:	b32b      	cbz	r3, 1e896 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1e84a:	4c14      	ldr	r4, [pc, #80]	; (1e89c <z_impl_device_get_binding+0x5c>)
   1e84c:	e000      	b.n	1e850 <z_impl_device_get_binding+0x10>
   1e84e:	3418      	adds	r4, #24
   1e850:	4b13      	ldr	r3, [pc, #76]	; (1e8a0 <z_impl_device_get_binding+0x60>)
   1e852:	429c      	cmp	r4, r3
   1e854:	d008      	beq.n	1e868 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1e856:	4620      	mov	r0, r4
   1e858:	f007 f9a3 	bl	25ba2 <z_device_ready>
   1e85c:	2800      	cmp	r0, #0
   1e85e:	d0f6      	beq.n	1e84e <z_impl_device_get_binding+0xe>
   1e860:	6823      	ldr	r3, [r4, #0]
   1e862:	42ab      	cmp	r3, r5
   1e864:	d1f3      	bne.n	1e84e <z_impl_device_get_binding+0xe>
   1e866:	e012      	b.n	1e88e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1e868:	4c0c      	ldr	r4, [pc, #48]	; (1e89c <z_impl_device_get_binding+0x5c>)
   1e86a:	e000      	b.n	1e86e <z_impl_device_get_binding+0x2e>
   1e86c:	3418      	adds	r4, #24
   1e86e:	4b0c      	ldr	r3, [pc, #48]	; (1e8a0 <z_impl_device_get_binding+0x60>)
   1e870:	429c      	cmp	r4, r3
   1e872:	d00b      	beq.n	1e88c <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1e874:	4620      	mov	r0, r4
   1e876:	f007 f994 	bl	25ba2 <z_device_ready>
   1e87a:	2800      	cmp	r0, #0
   1e87c:	d0f6      	beq.n	1e86c <z_impl_device_get_binding+0x2c>
   1e87e:	6821      	ldr	r1, [r4, #0]
   1e880:	4628      	mov	r0, r5
   1e882:	f7f2 fac5 	bl	10e10 <strcmp>
   1e886:	2800      	cmp	r0, #0
   1e888:	d1f0      	bne.n	1e86c <z_impl_device_get_binding+0x2c>
   1e88a:	e000      	b.n	1e88e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1e88c:	2400      	movs	r4, #0
}
   1e88e:	4620      	mov	r0, r4
   1e890:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1e892:	4604      	mov	r4, r0
   1e894:	e7fb      	b.n	1e88e <z_impl_device_get_binding+0x4e>
   1e896:	2400      	movs	r4, #0
   1e898:	e7f9      	b.n	1e88e <z_impl_device_get_binding+0x4e>
   1e89a:	bf00      	nop
   1e89c:	00026e4c 	.word	0x00026e4c
   1e8a0:	00026ef4 	.word	0x00026ef4

0001e8a4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1e8a4:	4b01      	ldr	r3, [pc, #4]	; (1e8ac <z_impl_z_errno+0x8>)
   1e8a6:	6898      	ldr	r0, [r3, #8]
}
   1e8a8:	3098      	adds	r0, #152	; 0x98
   1e8aa:	4770      	bx	lr
   1e8ac:	2000f8a0 	.word	0x2000f8a0

0001e8b0 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   1e8b0:	2804      	cmp	r0, #4
   1e8b2:	d80c      	bhi.n	1e8ce <reason_to_str+0x1e>
   1e8b4:	e8df f000 	tbb	[pc, r0]
   1e8b8:	07050d03 	.word	0x07050d03
   1e8bc:	09          	.byte	0x09
   1e8bd:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1e8be:	4806      	ldr	r0, [pc, #24]	; (1e8d8 <reason_to_str+0x28>)
   1e8c0:	4770      	bx	lr
		return "Stack overflow";
   1e8c2:	4806      	ldr	r0, [pc, #24]	; (1e8dc <reason_to_str+0x2c>)
   1e8c4:	4770      	bx	lr
		return "Kernel oops";
   1e8c6:	4806      	ldr	r0, [pc, #24]	; (1e8e0 <reason_to_str+0x30>)
   1e8c8:	4770      	bx	lr
		return "Kernel panic";
   1e8ca:	4806      	ldr	r0, [pc, #24]	; (1e8e4 <reason_to_str+0x34>)
   1e8cc:	4770      	bx	lr
	default:
		return "Unknown error";
   1e8ce:	4806      	ldr	r0, [pc, #24]	; (1e8e8 <reason_to_str+0x38>)
   1e8d0:	4770      	bx	lr
		return "Unhandled interrupt";
   1e8d2:	4806      	ldr	r0, [pc, #24]	; (1e8ec <reason_to_str+0x3c>)
	}
}
   1e8d4:	4770      	bx	lr
   1e8d6:	bf00      	nop
   1e8d8:	0002a198 	.word	0x0002a198
   1e8dc:	0002a16c 	.word	0x0002a16c
   1e8e0:	0002a17c 	.word	0x0002a17c
   1e8e4:	0002a188 	.word	0x0002a188
   1e8e8:	0002a148 	.word	0x0002a148
   1e8ec:	0002a158 	.word	0x0002a158

0001e8f0 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1e8f0:	b130      	cbz	r0, 1e900 <thread_name_get+0x10>
{
   1e8f2:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1e8f4:	f007 fa40 	bl	25d78 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1e8f8:	b120      	cbz	r0, 1e904 <thread_name_get+0x14>
   1e8fa:	7803      	ldrb	r3, [r0, #0]
   1e8fc:	b123      	cbz	r3, 1e908 <thread_name_get+0x18>
}
   1e8fe:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   1e900:	4802      	ldr	r0, [pc, #8]	; (1e90c <thread_name_get+0x1c>)
}
   1e902:	4770      	bx	lr
		thread_name = "unknown";
   1e904:	4801      	ldr	r0, [pc, #4]	; (1e90c <thread_name_get+0x1c>)
   1e906:	e7fa      	b.n	1e8fe <thread_name_get+0xe>
   1e908:	4800      	ldr	r0, [pc, #0]	; (1e90c <thread_name_get+0x1c>)
	return thread_name;
   1e90a:	e7f8      	b.n	1e8fe <thread_name_get+0xe>
   1e90c:	0002a1a8 	.word	0x0002a1a8

0001e910 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e914:	b082      	sub	sp, #8
   1e916:	4605      	mov	r5, r0
   1e918:	460e      	mov	r6, r1
	__asm__ volatile(
   1e91a:	f04f 0320 	mov.w	r3, #32
   1e91e:	f3ef 8711 	mrs	r7, BASEPRI
   1e922:	f383 8812 	msr	BASEPRI_MAX, r3
   1e926:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1e92a:	f001 fa2f 	bl	1fd8c <z_impl_z_current_get>
   1e92e:	4604      	mov	r4, r0
   1e930:	4b29      	ldr	r3, [pc, #164]	; (1e9d8 <z_fatal_error+0xc8>)
   1e932:	4a2a      	ldr	r2, [pc, #168]	; (1e9dc <z_fatal_error+0xcc>)
   1e934:	1a9b      	subs	r3, r3, r2
   1e936:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1e938:	f04f 0800 	mov.w	r8, #0
   1e93c:	2201      	movs	r2, #1
   1e93e:	f362 0802 	bfi	r8, r2, #0, #3
   1e942:	f36f 08c5 	bfc	r8, #3, #3
   1e946:	f363 188f 	bfi	r8, r3, #6, #10
   1e94a:	4628      	mov	r0, r5
   1e94c:	f7ff ffb0 	bl	1e8b0 <reason_to_str>
   1e950:	4602      	mov	r2, r0
   1e952:	f8ad 8000 	strh.w	r8, [sp]
   1e956:	2300      	movs	r3, #0
   1e958:	4629      	mov	r1, r5
   1e95a:	4821      	ldr	r0, [pc, #132]	; (1e9e0 <z_fatal_error+0xd0>)
   1e95c:	f7f4 faa4 	bl	12ea8 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1e960:	b11e      	cbz	r6, 1e96a <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1e962:	69f3      	ldr	r3, [r6, #28]
   1e964:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1e968:	bb2b      	cbnz	r3, 1e9b6 <z_fatal_error+0xa6>
   1e96a:	4b1b      	ldr	r3, [pc, #108]	; (1e9d8 <z_fatal_error+0xc8>)
   1e96c:	4a1b      	ldr	r2, [pc, #108]	; (1e9dc <z_fatal_error+0xcc>)
   1e96e:	1a9b      	subs	r3, r3, r2
   1e970:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1e972:	f04f 0800 	mov.w	r8, #0
   1e976:	2201      	movs	r2, #1
   1e978:	f362 0802 	bfi	r8, r2, #0, #3
   1e97c:	f36f 08c5 	bfc	r8, #3, #3
   1e980:	f363 188f 	bfi	r8, r3, #6, #10
   1e984:	4620      	mov	r0, r4
   1e986:	f7ff ffb3 	bl	1e8f0 <thread_name_get>
   1e98a:	f7f4 f95f 	bl	12c4c <z_log_strdup>
   1e98e:	4602      	mov	r2, r0
   1e990:	4643      	mov	r3, r8
   1e992:	4621      	mov	r1, r4
   1e994:	4813      	ldr	r0, [pc, #76]	; (1e9e4 <z_fatal_error+0xd4>)
   1e996:	f7f4 fafb 	bl	12f90 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1e99a:	4631      	mov	r1, r6
   1e99c:	4628      	mov	r0, r5
   1e99e:	f7fa fc17 	bl	191d0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1e9a2:	f387 8811 	msr	BASEPRI, r7
   1e9a6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1e9aa:	4620      	mov	r0, r4
   1e9ac:	f7f5 ffd2 	bl	14954 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1e9b0:	b002      	add	sp, #8
   1e9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e9b6:	4b08      	ldr	r3, [pc, #32]	; (1e9d8 <z_fatal_error+0xc8>)
   1e9b8:	4a08      	ldr	r2, [pc, #32]	; (1e9dc <z_fatal_error+0xcc>)
   1e9ba:	1a9b      	subs	r3, r3, r2
   1e9bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   1e9be:	f04f 0100 	mov.w	r1, #0
   1e9c2:	2201      	movs	r2, #1
   1e9c4:	f362 0102 	bfi	r1, r2, #0, #3
   1e9c8:	f36f 01c5 	bfc	r1, #3, #3
   1e9cc:	f363 118f 	bfi	r1, r3, #6, #10
   1e9d0:	4805      	ldr	r0, [pc, #20]	; (1e9e8 <z_fatal_error+0xd8>)
   1e9d2:	f7f4 fb3b 	bl	1304c <log_0>
   1e9d6:	e7c8      	b.n	1e96a <z_fatal_error+0x5a>
   1e9d8:	00027178 	.word	0x00027178
   1e9dc:	00027108 	.word	0x00027108
   1e9e0:	0002a1b0 	.word	0x0002a1b0
   1e9e4:	0002a1fc 	.word	0x0002a1fc
   1e9e8:	0002a1d8 	.word	0x0002a1d8

0001e9ec <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1e9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e9f0:	b089      	sub	sp, #36	; 0x24
   1e9f2:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1e9f4:	4e17      	ldr	r6, [pc, #92]	; (1ea54 <init_idle_thread+0x68>)
   1e9f6:	ebc0 1540 	rsb	r5, r0, r0, lsl #5
   1e9fa:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1e9fe:	eb00 0880 	add.w	r8, r0, r0, lsl #2
   1ea02:	4b15      	ldr	r3, [pc, #84]	; (1ea58 <init_idle_thread+0x6c>)
   1ea04:	eb03 1888 	add.w	r8, r3, r8, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1ea08:	f10d 0918 	add.w	r9, sp, #24
   1ea0c:	4603      	mov	r3, r0
   1ea0e:	4a13      	ldr	r2, [pc, #76]	; (1ea5c <init_idle_thread+0x70>)
   1ea10:	2108      	movs	r1, #8
   1ea12:	4648      	mov	r0, r9
   1ea14:	f003 f8d8 	bl	21bc8 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ea18:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ea1c:	4b10      	ldr	r3, [pc, #64]	; (1ea60 <init_idle_thread+0x74>)
   1ea1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
   1ea22:	f8cd 9014 	str.w	r9, [sp, #20]
   1ea26:	2201      	movs	r2, #1
   1ea28:	9204      	str	r2, [sp, #16]
   1ea2a:	220f      	movs	r2, #15
   1ea2c:	9203      	str	r2, [sp, #12]
   1ea2e:	2200      	movs	r2, #0
   1ea30:	9202      	str	r2, [sp, #8]
   1ea32:	9201      	str	r2, [sp, #4]
   1ea34:	9300      	str	r3, [sp, #0]
   1ea36:	4b0b      	ldr	r3, [pc, #44]	; (1ea64 <init_idle_thread+0x78>)
   1ea38:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ea3c:	4641      	mov	r1, r8
   1ea3e:	4628      	mov	r0, r5
   1ea40:	f000 f96e 	bl	1ed20 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ea44:	7b6b      	ldrb	r3, [r5, #13]
   1ea46:	f023 0304 	bic.w	r3, r3, #4
   1ea4a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1ea4c:	b009      	add	sp, #36	; 0x24
   1ea4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ea52:	bf00      	nop
   1ea54:	2000d5a0 	.word	0x2000d5a0
   1ea58:	200116c8 	.word	0x200116c8
   1ea5c:	0002a214 	.word	0x0002a214
   1ea60:	2000f8a0 	.word	0x2000f8a0
   1ea64:	0001ee85 	.word	0x0001ee85

0001ea68 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1ea68:	b570      	push	{r4, r5, r6, lr}
   1ea6a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1ea6c:	f001 f8c2 	bl	1fbf4 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1ea70:	4d1b      	ldr	r5, [pc, #108]	; (1eae0 <prepare_multithreading+0x78>)
   1ea72:	4b1c      	ldr	r3, [pc, #112]	; (1eae4 <prepare_multithreading+0x7c>)
   1ea74:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ea76:	4b1c      	ldr	r3, [pc, #112]	; (1eae8 <prepare_multithreading+0x80>)
   1ea78:	9305      	str	r3, [sp, #20]
   1ea7a:	2301      	movs	r3, #1
   1ea7c:	9304      	str	r3, [sp, #16]
   1ea7e:	2400      	movs	r4, #0
   1ea80:	9403      	str	r4, [sp, #12]
   1ea82:	9402      	str	r4, [sp, #8]
   1ea84:	9401      	str	r4, [sp, #4]
   1ea86:	9400      	str	r4, [sp, #0]
   1ea88:	4b18      	ldr	r3, [pc, #96]	; (1eaec <prepare_multithreading+0x84>)
   1ea8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1ea8e:	4918      	ldr	r1, [pc, #96]	; (1eaf0 <prepare_multithreading+0x88>)
   1ea90:	4628      	mov	r0, r5
   1ea92:	f000 f945 	bl	1ed20 <z_setup_new_thread>
   1ea96:	4606      	mov	r6, r0
   1ea98:	7b6b      	ldrb	r3, [r5, #13]
   1ea9a:	f023 0304 	bic.w	r3, r3, #4
   1ea9e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1eaa0:	4628      	mov	r0, r5
   1eaa2:	f007 fbde 	bl	26262 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1eaa6:	2c00      	cmp	r4, #0
   1eaa8:	dd02      	ble.n	1eab0 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1eaaa:	4630      	mov	r0, r6
   1eaac:	b006      	add	sp, #24
   1eaae:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1eab0:	4620      	mov	r0, r4
   1eab2:	f7ff ff9b 	bl	1e9ec <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1eab6:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
   1eaba:	4a0e      	ldr	r2, [pc, #56]	; (1eaf4 <prepare_multithreading+0x8c>)
   1eabc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1eac0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1eac4:	4b07      	ldr	r3, [pc, #28]	; (1eae4 <prepare_multithreading+0x7c>)
   1eac6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1eaca:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1eacc:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1eace:	4a0a      	ldr	r2, [pc, #40]	; (1eaf8 <prepare_multithreading+0x90>)
   1ead0:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
   1ead4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
   1ead8:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1eada:	3401      	adds	r4, #1
   1eadc:	e7e3      	b.n	1eaa6 <prepare_multithreading+0x3e>
   1eade:	bf00      	nop
   1eae0:	2000d698 	.word	0x2000d698
   1eae4:	2000f8a0 	.word	0x2000f8a0
   1eae8:	0002a220 	.word	0x0002a220
   1eaec:	0001eafd 	.word	0x0001eafd
   1eaf0:	200106c8 	.word	0x200106c8
   1eaf4:	2000d5a0 	.word	0x2000d5a0
   1eaf8:	20011808 	.word	0x20011808

0001eafc <bg_thread_main>:
{
   1eafc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1eafe:	4b0a      	ldr	r3, [pc, #40]	; (1eb28 <bg_thread_main+0x2c>)
   1eb00:	2201      	movs	r2, #1
   1eb02:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1eb04:	2002      	movs	r0, #2
   1eb06:	f7ff fe73 	bl	1e7f0 <z_sys_init_run_level>
	boot_banner();
   1eb0a:	f001 fec3 	bl	20894 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1eb0e:	2003      	movs	r0, #3
   1eb10:	f7ff fe6e 	bl	1e7f0 <z_sys_init_run_level>
	z_init_static_threads();
   1eb14:	f000 f968 	bl	1ede8 <z_init_static_threads>
	main();
   1eb18:	f7f2 fba8 	bl	1126c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1eb1c:	4a03      	ldr	r2, [pc, #12]	; (1eb2c <bg_thread_main+0x30>)
   1eb1e:	7b13      	ldrb	r3, [r2, #12]
   1eb20:	f023 0301 	bic.w	r3, r3, #1
   1eb24:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1eb26:	bd08      	pop	{r3, pc}
   1eb28:	2000fa40 	.word	0x2000fa40
   1eb2c:	2000d698 	.word	0x2000d698

0001eb30 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1eb30:	b508      	push	{r3, lr}
   1eb32:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1eb34:	4a01      	ldr	r2, [pc, #4]	; (1eb3c <switch_to_main_thread+0xc>)
   1eb36:	4802      	ldr	r0, [pc, #8]	; (1eb40 <switch_to_main_thread+0x10>)
   1eb38:	f7f5 faa4 	bl	14084 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1eb3c:	0001eafd 	.word	0x0001eafd
   1eb40:	2000d698 	.word	0x2000d698

0001eb44 <z_bss_zero>:
{
   1eb44:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1eb46:	4803      	ldr	r0, [pc, #12]	; (1eb54 <z_bss_zero+0x10>)
   1eb48:	4a03      	ldr	r2, [pc, #12]	; (1eb58 <z_bss_zero+0x14>)
   1eb4a:	1a12      	subs	r2, r2, r0
   1eb4c:	2100      	movs	r1, #0
   1eb4e:	f007 fe98 	bl	26882 <memset>
}
   1eb52:	bd08      	pop	{r3, pc}
   1eb54:	2000c918 	.word	0x2000c918
   1eb58:	2000fa48 	.word	0x2000fa48

0001eb5c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1eb5c:	b500      	push	{lr}
   1eb5e:	b0bf      	sub	sp, #252	; 0xfc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1eb60:	f7f3 ffde 	bl	12b20 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1eb64:	4b1c      	ldr	r3, [pc, #112]	; (1ebd8 <z_cstart+0x7c>)
	uint32_t msp =
   1eb66:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1eb6a:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1eb6e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1eb72:	4c1a      	ldr	r4, [pc, #104]	; (1ebdc <z_cstart+0x80>)
   1eb74:	23e0      	movs	r3, #224	; 0xe0
   1eb76:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1eb7a:	2500      	movs	r5, #0
   1eb7c:	77e5      	strb	r5, [r4, #31]
   1eb7e:	7625      	strb	r5, [r4, #24]
   1eb80:	7665      	strb	r5, [r4, #25]
   1eb82:	76a5      	strb	r5, [r4, #26]
   1eb84:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1eb88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1eb8a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1eb8e:	6263      	str	r3, [r4, #36]	; 0x24
   1eb90:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1eb94:	f7f5 fe84 	bl	148a0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1eb98:	f7f5 f898 	bl	13ccc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1eb9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eba0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1eba2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1eba4:	f7f6 f8ac 	bl	14d00 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1eba8:	f7f5 feea 	bl	14980 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1ebac:	2401      	movs	r4, #1
   1ebae:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ebb2:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1ebb6:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1ebb8:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1ebba:	4b09      	ldr	r3, [pc, #36]	; (1ebe0 <z_cstart+0x84>)
   1ebbc:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1ebc0:	f7ff fe0a 	bl	1e7d8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ebc4:	4628      	mov	r0, r5
   1ebc6:	f7ff fe13 	bl	1e7f0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ebca:	4620      	mov	r0, r4
   1ebcc:	f7ff fe10 	bl	1e7f0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1ebd0:	f7ff ff4a 	bl	1ea68 <prepare_multithreading>
   1ebd4:	f7ff ffac 	bl	1eb30 <switch_to_main_thread>
   1ebd8:	20011808 	.word	0x20011808
   1ebdc:	e000ed00 	.word	0xe000ed00
   1ebe0:	2000f8a0 	.word	0x2000f8a0

0001ebe4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1ebe4:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ebe6:	4c06      	ldr	r4, [pc, #24]	; (1ec00 <statics_init+0x1c>)
   1ebe8:	4b06      	ldr	r3, [pc, #24]	; (1ec04 <statics_init+0x20>)
   1ebea:	429c      	cmp	r4, r3
   1ebec:	d206      	bcs.n	1ebfc <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1ebee:	68a2      	ldr	r2, [r4, #8]
   1ebf0:	6861      	ldr	r1, [r4, #4]
   1ebf2:	4620      	mov	r0, r4
   1ebf4:	f006 ffe2 	bl	25bbc <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ebf8:	3414      	adds	r4, #20
   1ebfa:	e7f5      	b.n	1ebe8 <statics_init+0x4>
		}
	}
	return 0;
}
   1ebfc:	2000      	movs	r0, #0
   1ebfe:	bd10      	pop	{r4, pc}
   1ec00:	2000c7b4 	.word	0x2000c7b4
   1ec04:	2000c7f0 	.word	0x2000c7f0

0001ec08 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1ec08:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ec0a:	4c06      	ldr	r4, [pc, #24]	; (1ec24 <init_mem_slab_module+0x1c>)
	int rc = 0;
   1ec0c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ec0e:	4b06      	ldr	r3, [pc, #24]	; (1ec28 <init_mem_slab_module+0x20>)
   1ec10:	429c      	cmp	r4, r3
   1ec12:	d206      	bcs.n	1ec22 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1ec14:	4620      	mov	r0, r4
   1ec16:	f007 f84c 	bl	25cb2 <create_free_list>
		if (rc < 0) {
   1ec1a:	2800      	cmp	r0, #0
   1ec1c:	db01      	blt.n	1ec22 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ec1e:	341c      	adds	r4, #28
   1ec20:	e7f5      	b.n	1ec0e <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   1ec22:	bd10      	pop	{r4, pc}
   1ec24:	2000c7b4 	.word	0x2000c7b4
   1ec28:	2000c7b4 	.word	0x2000c7b4

0001ec2c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1ec2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec2e:	b083      	sub	sp, #12
   1ec30:	460c      	mov	r4, r1
   1ec32:	461f      	mov	r7, r3
	__asm__ volatile(
   1ec34:	f04f 0320 	mov.w	r3, #32
   1ec38:	f3ef 8111 	mrs	r1, BASEPRI
   1ec3c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1ec44:	6943      	ldr	r3, [r0, #20]
   1ec46:	b16b      	cbz	r3, 1ec64 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   1ec48:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ec4a:	6943      	ldr	r3, [r0, #20]
   1ec4c:	681b      	ldr	r3, [r3, #0]
   1ec4e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ec50:	6983      	ldr	r3, [r0, #24]
   1ec52:	3301      	adds	r3, #1
   1ec54:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1ec56:	2000      	movs	r0, #0
	__asm__ volatile(
   1ec58:	f381 8811 	msr	BASEPRI, r1
   1ec5c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1ec60:	b003      	add	sp, #12
   1ec62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ec64:	4616      	mov	r6, r2
   1ec66:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1ec6a:	ea56 0307 	orrs.w	r3, r6, r7
   1ec6e:	d104      	bne.n	1ec7a <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   1ec70:	2300      	movs	r3, #0
   1ec72:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1ec74:	f06f 000b 	mvn.w	r0, #11
   1ec78:	e7ee      	b.n	1ec58 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ec7a:	e9cd 6700 	strd	r6, r7, [sp]
   1ec7e:	4602      	mov	r2, r0
   1ec80:	4628      	mov	r0, r5
   1ec82:	f000 fe8d 	bl	1f9a0 <z_pend_curr>
		if (result == 0) {
   1ec86:	2800      	cmp	r0, #0
   1ec88:	d1ea      	bne.n	1ec60 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   1ec8a:	4b02      	ldr	r3, [pc, #8]	; (1ec94 <k_mem_slab_alloc+0x68>)
   1ec8c:	689b      	ldr	r3, [r3, #8]
   1ec8e:	695b      	ldr	r3, [r3, #20]
   1ec90:	6023      	str	r3, [r4, #0]
		return result;
   1ec92:	e7e5      	b.n	1ec60 <k_mem_slab_alloc+0x34>
   1ec94:	2000f8a0 	.word	0x2000f8a0

0001ec98 <z_thread_monitor_exit>:
	__asm__ volatile(
   1ec98:	f04f 0320 	mov.w	r3, #32
   1ec9c:	f3ef 8111 	mrs	r1, BASEPRI
   1eca0:	f383 8812 	msr	BASEPRI_MAX, r3
   1eca4:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1eca8:	4b0a      	ldr	r3, [pc, #40]	; (1ecd4 <z_thread_monitor_exit+0x3c>)
   1ecaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ecac:	4283      	cmp	r3, r0
   1ecae:	d104      	bne.n	1ecba <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1ecb0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1ecb2:	4b08      	ldr	r3, [pc, #32]	; (1ecd4 <z_thread_monitor_exit+0x3c>)
   1ecb4:	62da      	str	r2, [r3, #44]	; 0x2c
   1ecb6:	e007      	b.n	1ecc8 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1ecb8:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1ecba:	b113      	cbz	r3, 1ecc2 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1ecbc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1ecbe:	4282      	cmp	r2, r0
   1ecc0:	d1fa      	bne.n	1ecb8 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1ecc2:	b10b      	cbz	r3, 1ecc8 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1ecc4:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1ecc6:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1ecc8:	f381 8811 	msr	BASEPRI, r1
   1eccc:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1ecd0:	4770      	bx	lr
   1ecd2:	bf00      	nop
   1ecd4:	2000f8a0 	.word	0x2000f8a0

0001ecd8 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1ecd8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1ecda:	4604      	mov	r4, r0
   1ecdc:	b140      	cbz	r0, 1ecf0 <z_impl_k_thread_name_set+0x18>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1ecde:	2220      	movs	r2, #32
   1ece0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1ece4:	f007 fe18 	bl	26918 <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1ece8:	2000      	movs	r0, #0
   1ecea:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1ecee:	bd10      	pop	{r4, pc}
		thread = _current;
   1ecf0:	4b01      	ldr	r3, [pc, #4]	; (1ecf8 <z_impl_k_thread_name_set+0x20>)
   1ecf2:	689c      	ldr	r4, [r3, #8]
   1ecf4:	e7f3      	b.n	1ecde <z_impl_k_thread_name_set+0x6>
   1ecf6:	bf00      	nop
   1ecf8:	2000f8a0 	.word	0x2000f8a0

0001ecfc <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1ecfc:	b538      	push	{r3, r4, r5, lr}
   1ecfe:	4614      	mov	r4, r2
   1ed00:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ed02:	ea54 0305 	orrs.w	r3, r4, r5
   1ed06:	d102      	bne.n	1ed0e <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1ed08:	f007 f838 	bl	25d7c <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1ed0c:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1ed0e:	462b      	mov	r3, r5
   1ed10:	4902      	ldr	r1, [pc, #8]	; (1ed1c <schedule_new_thread+0x20>)
   1ed12:	3018      	adds	r0, #24
   1ed14:	f001 f8ec 	bl	1fef0 <z_add_timeout>
   1ed18:	e7f8      	b.n	1ed0c <schedule_new_thread+0x10>
   1ed1a:	bf00      	nop
   1ed1c:	0002629b 	.word	0x0002629b

0001ed20 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1ed20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed24:	b085      	sub	sp, #20
   1ed26:	4604      	mov	r4, r0
   1ed28:	460f      	mov	r7, r1
   1ed2a:	4615      	mov	r5, r2
   1ed2c:	461e      	mov	r6, r3
   1ed2e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1ed32:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1ed36:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1ed3a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1ed3e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1ed42:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1ed44:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1ed46:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ed48:	2204      	movs	r2, #4
   1ed4a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ed4c:	f007 f81a 	bl	25d84 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1ed50:	462a      	mov	r2, r5
   1ed52:	4639      	mov	r1, r7
   1ed54:	4620      	mov	r0, r4
   1ed56:	f006 fffd 	bl	25d54 <setup_thread_stack>
   1ed5a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ed5c:	f8cd 8008 	str.w	r8, [sp, #8]
   1ed60:	f8cd 9004 	str.w	r9, [sp, #4]
   1ed64:	f8cd a000 	str.w	sl, [sp]
   1ed68:	4633      	mov	r3, r6
   1ed6a:	4602      	mov	r2, r0
   1ed6c:	4639      	mov	r1, r7
   1ed6e:	4620      	mov	r0, r4
   1ed70:	f7f5 f962 	bl	14038 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1ed74:	2300      	movs	r3, #0
   1ed76:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1ed78:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1ed7a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1ed7e:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1ed82:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1ed86:	f04f 0320 	mov.w	r3, #32
   1ed8a:	f3ef 8211 	mrs	r2, BASEPRI
   1ed8e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed92:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1ed96:	4b13      	ldr	r3, [pc, #76]	; (1ede4 <z_setup_new_thread+0xc4>)
   1ed98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1ed9a:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1ed9c:	62dc      	str	r4, [r3, #44]	; 0x2c
	__asm__ volatile(
   1ed9e:	f382 8811 	msr	BASEPRI, r2
   1eda2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1eda6:	f1bb 0f00 	cmp.w	fp, #0
   1edaa:	d013      	beq.n	1edd4 <z_setup_new_thread+0xb4>
   1edac:	221f      	movs	r2, #31
   1edae:	4659      	mov	r1, fp
   1edb0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1edb4:	f007 fdb0 	bl	26918 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1edb8:	2300      	movs	r3, #0
   1edba:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1edbe:	4b09      	ldr	r3, [pc, #36]	; (1ede4 <z_setup_new_thread+0xc4>)
   1edc0:	689b      	ldr	r3, [r3, #8]
   1edc2:	b15b      	cbz	r3, 1eddc <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1edc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1edc8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   1edcc:	4628      	mov	r0, r5
   1edce:	b005      	add	sp, #20
   1edd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1edd4:	2300      	movs	r3, #0
   1edd6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1edda:	e7f0      	b.n	1edbe <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1eddc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1ede0:	e7f4      	b.n	1edcc <z_setup_new_thread+0xac>
   1ede2:	bf00      	nop
   1ede4:	2000f8a0 	.word	0x2000f8a0

0001ede8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1ede8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1edec:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1edee:	4c23      	ldr	r4, [pc, #140]	; (1ee7c <z_init_static_threads+0x94>)
   1edf0:	4b23      	ldr	r3, [pc, #140]	; (1ee80 <z_init_static_threads+0x98>)
   1edf2:	429c      	cmp	r4, r3
   1edf4:	d215      	bcs.n	1ee22 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1edf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1edf8:	9305      	str	r3, [sp, #20]
   1edfa:	6a23      	ldr	r3, [r4, #32]
   1edfc:	9304      	str	r3, [sp, #16]
   1edfe:	69e3      	ldr	r3, [r4, #28]
   1ee00:	9303      	str	r3, [sp, #12]
   1ee02:	69a3      	ldr	r3, [r4, #24]
   1ee04:	9302      	str	r3, [sp, #8]
   1ee06:	6963      	ldr	r3, [r4, #20]
   1ee08:	9301      	str	r3, [sp, #4]
   1ee0a:	6923      	ldr	r3, [r4, #16]
   1ee0c:	9300      	str	r3, [sp, #0]
   1ee0e:	68e3      	ldr	r3, [r4, #12]
   1ee10:	68a2      	ldr	r2, [r4, #8]
   1ee12:	6861      	ldr	r1, [r4, #4]
   1ee14:	6820      	ldr	r0, [r4, #0]
   1ee16:	f7ff ff83 	bl	1ed20 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1ee1a:	6823      	ldr	r3, [r4, #0]
   1ee1c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1ee1e:	3430      	adds	r4, #48	; 0x30
   1ee20:	e7e6      	b.n	1edf0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1ee22:	f000 fc75 	bl	1f710 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ee26:	4c15      	ldr	r4, [pc, #84]	; (1ee7c <z_init_static_threads+0x94>)
   1ee28:	e01b      	b.n	1ee62 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1ee2a:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1ee2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ee30:	ea4f 79e3 	mov.w	r9, r3, asr #31
   1ee34:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1ee38:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1ee3c:	03d8      	lsls	r0, r3, #15
   1ee3e:	f240 35e7 	movw	r5, #999	; 0x3e7
   1ee42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ee46:	2300      	movs	r3, #0
   1ee48:	1940      	adds	r0, r0, r5
   1ee4a:	f04f 0500 	mov.w	r5, #0
   1ee4e:	eb45 0101 	adc.w	r1, r5, r1
   1ee52:	f7f1 fe63 	bl	10b1c <__aeabi_uldivmod>
   1ee56:	4602      	mov	r2, r0
   1ee58:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1ee5a:	4630      	mov	r0, r6
   1ee5c:	f7ff ff4e 	bl	1ecfc <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ee60:	3430      	adds	r4, #48	; 0x30
   1ee62:	4b07      	ldr	r3, [pc, #28]	; (1ee80 <z_init_static_threads+0x98>)
   1ee64:	429c      	cmp	r4, r3
   1ee66:	d204      	bcs.n	1ee72 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ee68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ee6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ee6e:	d0f7      	beq.n	1ee60 <z_init_static_threads+0x78>
   1ee70:	e7db      	b.n	1ee2a <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1ee72:	f000 fe4b 	bl	1fb0c <k_sched_unlock>
}
   1ee76:	b006      	add	sp, #24
   1ee78:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1ee7c:	2000c784 	.word	0x2000c784
   1ee80:	2000c7b4 	.word	0x2000c7b4

0001ee84 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1ee84:	b508      	push	{r3, lr}
   1ee86:	e001      	b.n	1ee8c <idle+0x8>
	arch_cpu_idle();
   1ee88:	f7f4 ff26 	bl	13cd8 <arch_cpu_idle>
	__asm__ volatile(
   1ee8c:	f04f 0220 	mov.w	r2, #32
   1ee90:	f3ef 8311 	mrs	r3, BASEPRI
   1ee94:	f382 8812 	msr	BASEPRI_MAX, r2
   1ee98:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1ee9c:	f007 fb4f 	bl	2653e <z_get_next_timeout_expiry>
   1eea0:	4b03      	ldr	r3, [pc, #12]	; (1eeb0 <idle+0x2c>)
   1eea2:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1eea4:	f7f4 fe4e 	bl	13b44 <pm_system_suspend>
   1eea8:	2800      	cmp	r0, #0
   1eeaa:	d1ef      	bne.n	1ee8c <idle+0x8>
   1eeac:	e7ec      	b.n	1ee88 <idle+0x4>
   1eeae:	bf00      	nop
   1eeb0:	2000f8a0 	.word	0x2000f8a0

0001eeb4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1eeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eeb8:	b082      	sub	sp, #8
   1eeba:	4604      	mov	r4, r0
   1eebc:	460d      	mov	r5, r1
   1eebe:	4610      	mov	r0, r2
   1eec0:	4619      	mov	r1, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1eec2:	f104 0708 	add.w	r7, r4, #8
   1eec6:	f04f 0320 	mov.w	r3, #32
   1eeca:	f3ef 8611 	mrs	r6, BASEPRI
   1eece:	f383 8812 	msr	BASEPRI_MAX, r3
   1eed2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   1eed6:	6a22      	ldr	r2, [r4, #32]
   1eed8:	68e3      	ldr	r3, [r4, #12]
   1eeda:	429a      	cmp	r2, r3
   1eedc:	d30b      	bcc.n	1eef6 <z_impl_k_msgq_put+0x42>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1eede:	ea50 0301 	orrs.w	r3, r0, r1
   1eee2:	d137      	bne.n	1ef54 <z_impl_k_msgq_put+0xa0>
		/* don't wait for message space to become available */
		result = -ENOMSG;
   1eee4:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1eee8:	f386 8811 	msr	BASEPRI, r6
   1eeec:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1eef0:	b002      	add	sp, #8
   1eef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1eef6:	4620      	mov	r0, r4
   1eef8:	f007 fa75 	bl	263e6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1eefc:	4680      	mov	r8, r0
   1eefe:	b180      	cbz	r0, 1ef22 <z_impl_k_msgq_put+0x6e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ef00:	68a2      	ldr	r2, [r4, #8]
   1ef02:	4629      	mov	r1, r5
   1ef04:	6940      	ldr	r0, [r0, #20]
   1ef06:	f007 fc9c 	bl	26842 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ef0a:	2400      	movs	r4, #0
   1ef0c:	f8c8 40b0 	str.w	r4, [r8, #176]	; 0xb0
			z_ready_thread(pending_thread);
   1ef10:	4640      	mov	r0, r8
   1ef12:	f007 f9a6 	bl	26262 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1ef16:	4631      	mov	r1, r6
   1ef18:	4638      	mov	r0, r7
   1ef1a:	f000 fbdd 	bl	1f6d8 <z_reschedule>
			return 0;
   1ef1e:	4620      	mov	r0, r4
   1ef20:	e7e6      	b.n	1eef0 <z_impl_k_msgq_put+0x3c>
   1ef22:	68a2      	ldr	r2, [r4, #8]
   1ef24:	4629      	mov	r1, r5
   1ef26:	69e0      	ldr	r0, [r4, #28]
   1ef28:	f007 fc8b 	bl	26842 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   1ef2c:	68a2      	ldr	r2, [r4, #8]
   1ef2e:	69e3      	ldr	r3, [r4, #28]
   1ef30:	4413      	add	r3, r2
   1ef32:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1ef34:	6962      	ldr	r2, [r4, #20]
   1ef36:	4293      	cmp	r3, r2
   1ef38:	d009      	beq.n	1ef4e <z_impl_k_msgq_put+0x9a>
			msgq->used_msgs++;
   1ef3a:	6a23      	ldr	r3, [r4, #32]
   1ef3c:	3301      	adds	r3, #1
   1ef3e:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1ef40:	2110      	movs	r1, #16
   1ef42:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1ef46:	f007 fc12 	bl	2676e <z_handle_obj_poll_events>
		result = 0;
   1ef4a:	2000      	movs	r0, #0
   1ef4c:	e7cc      	b.n	1eee8 <z_impl_k_msgq_put+0x34>
				msgq->write_ptr = msgq->buffer_start;
   1ef4e:	6923      	ldr	r3, [r4, #16]
   1ef50:	61e3      	str	r3, [r4, #28]
   1ef52:	e7f2      	b.n	1ef3a <z_impl_k_msgq_put+0x86>
		_current->base.swap_data = (void *) data;
   1ef54:	4b05      	ldr	r3, [pc, #20]	; (1ef6c <z_impl_k_msgq_put+0xb8>)
   1ef56:	689b      	ldr	r3, [r3, #8]
   1ef58:	615d      	str	r5, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1ef5a:	e9cd 0100 	strd	r0, r1, [sp]
   1ef5e:	4622      	mov	r2, r4
   1ef60:	4631      	mov	r1, r6
   1ef62:	4638      	mov	r0, r7
   1ef64:	f000 fd1c 	bl	1f9a0 <z_pend_curr>
		return result;
   1ef68:	e7c2      	b.n	1eef0 <z_impl_k_msgq_put+0x3c>
   1ef6a:	bf00      	nop
   1ef6c:	2000f8a0 	.word	0x2000f8a0

0001ef70 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1ef70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef74:	b082      	sub	sp, #8
   1ef76:	4604      	mov	r4, r0
   1ef78:	4608      	mov	r0, r1
   1ef7a:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1ef7c:	f104 0808 	add.w	r8, r4, #8
	__asm__ volatile(
   1ef80:	f04f 0320 	mov.w	r3, #32
   1ef84:	f3ef 8511 	mrs	r5, BASEPRI
   1ef88:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef8c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   1ef90:	6a23      	ldr	r3, [r4, #32]
   1ef92:	2b00      	cmp	r3, #0
   1ef94:	d034      	beq.n	1f000 <z_impl_k_msgq_get+0x90>
   1ef96:	68a2      	ldr	r2, [r4, #8]
   1ef98:	69a1      	ldr	r1, [r4, #24]
   1ef9a:	f007 fc52 	bl	26842 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   1ef9e:	68a2      	ldr	r2, [r4, #8]
   1efa0:	69a3      	ldr	r3, [r4, #24]
   1efa2:	4413      	add	r3, r2
   1efa4:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1efa6:	6962      	ldr	r2, [r4, #20]
   1efa8:	4293      	cmp	r3, r2
   1efaa:	d023      	beq.n	1eff4 <z_impl_k_msgq_get+0x84>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
   1efac:	6a23      	ldr	r3, [r4, #32]
   1efae:	3b01      	subs	r3, #1
   1efb0:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1efb2:	4620      	mov	r0, r4
   1efb4:	f007 fa17 	bl	263e6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1efb8:	4606      	mov	r6, r0
   1efba:	2800      	cmp	r0, #0
   1efbc:	d038      	beq.n	1f030 <z_impl_k_msgq_get+0xc0>
   1efbe:	68a2      	ldr	r2, [r4, #8]
   1efc0:	6941      	ldr	r1, [r0, #20]
   1efc2:	69e0      	ldr	r0, [r4, #28]
   1efc4:	f007 fc3d 	bl	26842 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1efc8:	68a2      	ldr	r2, [r4, #8]
   1efca:	69e3      	ldr	r3, [r4, #28]
   1efcc:	4413      	add	r3, r2
   1efce:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1efd0:	6962      	ldr	r2, [r4, #20]
   1efd2:	4293      	cmp	r3, r2
   1efd4:	d011      	beq.n	1effa <z_impl_k_msgq_get+0x8a>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
   1efd6:	6a23      	ldr	r3, [r4, #32]
   1efd8:	3301      	adds	r3, #1
   1efda:	6223      	str	r3, [r4, #32]
   1efdc:	2400      	movs	r4, #0
   1efde:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1efe2:	4630      	mov	r0, r6
   1efe4:	f007 f93d 	bl	26262 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1efe8:	4629      	mov	r1, r5
   1efea:	4640      	mov	r0, r8
   1efec:	f000 fb74 	bl	1f6d8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   1eff0:	4620      	mov	r0, r4
   1eff2:	e00f      	b.n	1f014 <z_impl_k_msgq_get+0xa4>
			msgq->read_ptr = msgq->buffer_start;
   1eff4:	6923      	ldr	r3, [r4, #16]
   1eff6:	61a3      	str	r3, [r4, #24]
   1eff8:	e7d8      	b.n	1efac <z_impl_k_msgq_get+0x3c>
				msgq->write_ptr = msgq->buffer_start;
   1effa:	6923      	ldr	r3, [r4, #16]
   1effc:	61e3      	str	r3, [r4, #28]
   1effe:	e7ea      	b.n	1efd6 <z_impl_k_msgq_get+0x66>
   1f000:	4616      	mov	r6, r2
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f002:	ea56 0307 	orrs.w	r3, r6, r7
   1f006:	d108      	bne.n	1f01a <z_impl_k_msgq_get+0xaa>
		/* don't wait for a message to become available */
		result = -ENOMSG;
   1f008:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1f00c:	f385 8811 	msr	BASEPRI, r5
   1f010:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1f014:	b002      	add	sp, #8
   1f016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_current->base.swap_data = data;
   1f01a:	4b06      	ldr	r3, [pc, #24]	; (1f034 <z_impl_k_msgq_get+0xc4>)
   1f01c:	689b      	ldr	r3, [r3, #8]
   1f01e:	6159      	str	r1, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f020:	e9cd 6700 	strd	r6, r7, [sp]
   1f024:	4622      	mov	r2, r4
   1f026:	4629      	mov	r1, r5
   1f028:	4640      	mov	r0, r8
   1f02a:	f000 fcb9 	bl	1f9a0 <z_pend_curr>
		return result;
   1f02e:	e7f1      	b.n	1f014 <z_impl_k_msgq_get+0xa4>
		result = 0;
   1f030:	2000      	movs	r0, #0
   1f032:	e7eb      	b.n	1f00c <z_impl_k_msgq_get+0x9c>
   1f034:	2000f8a0 	.word	0x2000f8a0

0001f038 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f03c:	b083      	sub	sp, #12
   1f03e:	4604      	mov	r4, r0
   1f040:	461d      	mov	r5, r3
	__asm__ volatile(
   1f042:	f04f 0320 	mov.w	r3, #32
   1f046:	f3ef 8711 	mrs	r7, BASEPRI
   1f04a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f04e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f052:	68c1      	ldr	r1, [r0, #12]
   1f054:	b999      	cbnz	r1, 1f07e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1f056:	2900      	cmp	r1, #0
   1f058:	d14f      	bne.n	1f0fa <z_impl_k_mutex_lock+0xc2>
   1f05a:	4b3a      	ldr	r3, [pc, #232]	; (1f144 <z_impl_k_mutex_lock+0x10c>)
   1f05c:	689b      	ldr	r3, [r3, #8]
   1f05e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f062:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1f064:	3101      	adds	r1, #1
   1f066:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1f068:	4b36      	ldr	r3, [pc, #216]	; (1f144 <z_impl_k_mutex_lock+0x10c>)
   1f06a:	689b      	ldr	r3, [r3, #8]
   1f06c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1f06e:	f387 8811 	msr	BASEPRI, r7
   1f072:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1f076:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1f078:	b003      	add	sp, #12
   1f07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f07e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f080:	6882      	ldr	r2, [r0, #8]
   1f082:	4b30      	ldr	r3, [pc, #192]	; (1f144 <z_impl_k_mutex_lock+0x10c>)
   1f084:	689b      	ldr	r3, [r3, #8]
   1f086:	429a      	cmp	r2, r3
   1f088:	d0e5      	beq.n	1f056 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f08a:	ea55 0106 	orrs.w	r1, r5, r6
   1f08e:	bf0c      	ite	eq
   1f090:	f04f 0801 	moveq.w	r8, #1
   1f094:	f04f 0800 	movne.w	r8, #0
   1f098:	d031      	beq.n	1f0fe <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1f09a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f09e:	4649      	mov	r1, r9
   1f0a0:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1f0a4:	f006 fea2 	bl	25dec <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f0a8:	4581      	cmp	r9, r0
   1f0aa:	dc2f      	bgt.n	1f10c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1f0ac:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f0b0:	9600      	str	r6, [sp, #0]
   1f0b2:	9501      	str	r5, [sp, #4]
   1f0b4:	4622      	mov	r2, r4
   1f0b6:	4639      	mov	r1, r7
   1f0b8:	4823      	ldr	r0, [pc, #140]	; (1f148 <z_impl_k_mutex_lock+0x110>)
   1f0ba:	f000 fc71 	bl	1f9a0 <z_pend_curr>
	if (got_mutex == 0) {
   1f0be:	2800      	cmp	r0, #0
   1f0c0:	d0da      	beq.n	1f078 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1f0c2:	f04f 0320 	mov.w	r3, #32
   1f0c6:	f3ef 8511 	mrs	r5, BASEPRI
   1f0ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0ce:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f0d2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f0d4:	42a3      	cmp	r3, r4
   1f0d6:	d01f      	beq.n	1f118 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f0d8:	b1f3      	cbz	r3, 1f118 <z_impl_k_mutex_lock+0xe0>
   1f0da:	6921      	ldr	r1, [r4, #16]
   1f0dc:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1f0e0:	f006 fe84 	bl	25dec <new_prio_for_inheritance>
   1f0e4:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f0e6:	4620      	mov	r0, r4
   1f0e8:	f006 fe8b 	bl	25e02 <adjust_owner_prio>
   1f0ec:	b9b0      	cbnz	r0, 1f11c <z_impl_k_mutex_lock+0xe4>
   1f0ee:	f1b9 0f00 	cmp.w	r9, #0
   1f0f2:	d015      	beq.n	1f120 <z_impl_k_mutex_lock+0xe8>
   1f0f4:	f04f 0801 	mov.w	r8, #1
   1f0f8:	e012      	b.n	1f120 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1f0fa:	6923      	ldr	r3, [r4, #16]
   1f0fc:	e7b1      	b.n	1f062 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1f0fe:	f387 8811 	msr	BASEPRI, r7
   1f102:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1f106:	f06f 000f 	mvn.w	r0, #15
   1f10a:	e7b5      	b.n	1f078 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1f10c:	4601      	mov	r1, r0
   1f10e:	4620      	mov	r0, r4
   1f110:	f006 fe77 	bl	25e02 <adjust_owner_prio>
   1f114:	4681      	mov	r9, r0
   1f116:	e7cb      	b.n	1f0b0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f118:	6921      	ldr	r1, [r4, #16]
   1f11a:	e7e4      	b.n	1f0e6 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f11c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1f120:	f1b8 0f00 	cmp.w	r8, #0
   1f124:	d106      	bne.n	1f134 <z_impl_k_mutex_lock+0xfc>
   1f126:	f385 8811 	msr	BASEPRI, r5
   1f12a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1f12e:	f06f 000a 	mvn.w	r0, #10
   1f132:	e7a1      	b.n	1f078 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1f134:	4629      	mov	r1, r5
   1f136:	4804      	ldr	r0, [pc, #16]	; (1f148 <z_impl_k_mutex_lock+0x110>)
   1f138:	f000 face 	bl	1f6d8 <z_reschedule>
	return -EAGAIN;
   1f13c:	f06f 000a 	mvn.w	r0, #10
   1f140:	e79a      	b.n	1f078 <z_impl_k_mutex_lock+0x40>
   1f142:	bf00      	nop
   1f144:	2000f8a0 	.word	0x2000f8a0
   1f148:	2000f8d0 	.word	0x2000f8d0

0001f14c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1f14c:	6882      	ldr	r2, [r0, #8]
   1f14e:	2a00      	cmp	r2, #0
   1f150:	d035      	beq.n	1f1be <z_impl_k_mutex_unlock+0x72>
{
   1f152:	b538      	push	{r3, r4, r5, lr}
   1f154:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1f156:	4b1d      	ldr	r3, [pc, #116]	; (1f1cc <z_impl_k_mutex_unlock+0x80>)
   1f158:	689b      	ldr	r3, [r3, #8]
   1f15a:	429a      	cmp	r2, r3
   1f15c:	d132      	bne.n	1f1c4 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1f15e:	7bda      	ldrb	r2, [r3, #15]
   1f160:	3a01      	subs	r2, #1
   1f162:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1f164:	68c3      	ldr	r3, [r0, #12]
   1f166:	2b01      	cmp	r3, #1
   1f168:	d905      	bls.n	1f176 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1f16a:	3b01      	subs	r3, #1
   1f16c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1f16e:	f000 fccd 	bl	1fb0c <k_sched_unlock>

	return 0;
   1f172:	2000      	movs	r0, #0
}
   1f174:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f176:	f04f 0320 	mov.w	r3, #32
   1f17a:	f3ef 8511 	mrs	r5, BASEPRI
   1f17e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f182:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f186:	6901      	ldr	r1, [r0, #16]
   1f188:	f006 fe3b 	bl	25e02 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f18c:	4620      	mov	r0, r4
   1f18e:	f007 f92a 	bl	263e6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f192:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f194:	b160      	cbz	r0, 1f1b0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f196:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f19a:	6123      	str	r3, [r4, #16]
   1f19c:	2300      	movs	r3, #0
   1f19e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1f1a2:	f007 f85e 	bl	26262 <z_ready_thread>
		z_reschedule(&lock, key);
   1f1a6:	4629      	mov	r1, r5
   1f1a8:	4809      	ldr	r0, [pc, #36]	; (1f1d0 <z_impl_k_mutex_unlock+0x84>)
   1f1aa:	f000 fa95 	bl	1f6d8 <z_reschedule>
   1f1ae:	e7de      	b.n	1f16e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1f1b0:	2300      	movs	r3, #0
   1f1b2:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1f1b4:	f385 8811 	msr	BASEPRI, r5
   1f1b8:	f3bf 8f6f 	isb	sy
   1f1bc:	e7d7      	b.n	1f16e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1f1be:	f06f 0015 	mvn.w	r0, #21
}
   1f1c2:	4770      	bx	lr
		return -EPERM;
   1f1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f1c8:	e7d4      	b.n	1f174 <z_impl_k_mutex_unlock+0x28>
   1f1ca:	bf00      	nop
   1f1cc:	2000f8a0 	.word	0x2000f8a0
   1f1d0:	2000f8d0 	.word	0x2000f8d0

0001f1d4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1f1d4:	b5d0      	push	{r4, r6, r7, lr}
   1f1d6:	b082      	sub	sp, #8
   1f1d8:	4601      	mov	r1, r0
   1f1da:	4616      	mov	r6, r2
   1f1dc:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f1de:	4602      	mov	r2, r0
	__asm__ volatile(
   1f1e0:	f04f 0320 	mov.w	r3, #32
   1f1e4:	f3ef 8411 	mrs	r4, BASEPRI
   1f1e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1ec:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1f1f0:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f1f4:	b188      	cbz	r0, 1f21a <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f1f6:	6803      	ldr	r3, [r0, #0]
   1f1f8:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1f1fc:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1f1fe:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f200:	4290      	cmp	r0, r2
   1f202:	d008      	beq.n	1f216 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f204:	2101      	movs	r1, #1
   1f206:	f006 fe81 	bl	25f0c <z_queue_node_peek>
	__asm__ volatile(
   1f20a:	f384 8811 	msr	BASEPRI, r4
   1f20e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1f212:	b002      	add	sp, #8
   1f214:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   1f216:	604b      	str	r3, [r1, #4]
}
   1f218:	e7f4      	b.n	1f204 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f21a:	ea56 0307 	orrs.w	r3, r6, r7
   1f21e:	d00a      	beq.n	1f236 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1f220:	e9cd 6700 	strd	r6, r7, [sp]
   1f224:	4621      	mov	r1, r4
   1f226:	4610      	mov	r0, r2
   1f228:	f000 fbba 	bl	1f9a0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f22c:	b948      	cbnz	r0, 1f242 <z_impl_k_queue_get+0x6e>
   1f22e:	4b06      	ldr	r3, [pc, #24]	; (1f248 <z_impl_k_queue_get+0x74>)
   1f230:	689b      	ldr	r3, [r3, #8]
   1f232:	6958      	ldr	r0, [r3, #20]
   1f234:	e7ed      	b.n	1f212 <z_impl_k_queue_get+0x3e>
   1f236:	f384 8811 	msr	BASEPRI, r4
   1f23a:	f3bf 8f6f 	isb	sy
		return NULL;
   1f23e:	2000      	movs	r0, #0
   1f240:	e7e7      	b.n	1f212 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f242:	2000      	movs	r0, #0
   1f244:	e7e5      	b.n	1f212 <z_impl_k_queue_get+0x3e>
   1f246:	bf00      	nop
   1f248:	2000f8a0 	.word	0x2000f8a0

0001f24c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1f24c:	b538      	push	{r3, r4, r5, lr}
   1f24e:	4604      	mov	r4, r0
	__asm__ volatile(
   1f250:	f04f 0320 	mov.w	r3, #32
   1f254:	f3ef 8511 	mrs	r5, BASEPRI
   1f258:	f383 8812 	msr	BASEPRI_MAX, r3
   1f25c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1f260:	f007 f8c1 	bl	263e6 <z_unpend_first_thread>

	if (thread != NULL) {
   1f264:	b148      	cbz	r0, 1f27a <z_impl_k_sem_give+0x2e>
   1f266:	2200      	movs	r2, #0
   1f268:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1f26c:	f006 fff9 	bl	26262 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1f270:	4629      	mov	r1, r5
   1f272:	4809      	ldr	r0, [pc, #36]	; (1f298 <z_impl_k_sem_give+0x4c>)
   1f274:	f000 fa30 	bl	1f6d8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1f278:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1f27a:	68a3      	ldr	r3, [r4, #8]
   1f27c:	68e2      	ldr	r2, [r4, #12]
   1f27e:	4293      	cmp	r3, r2
   1f280:	d008      	beq.n	1f294 <z_impl_k_sem_give+0x48>
   1f282:	2201      	movs	r2, #1
   1f284:	4413      	add	r3, r2
   1f286:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1f288:	2102      	movs	r1, #2
   1f28a:	f104 0010 	add.w	r0, r4, #16
   1f28e:	f007 fa6e 	bl	2676e <z_handle_obj_poll_events>
}
   1f292:	e7ed      	b.n	1f270 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1f294:	2200      	movs	r2, #0
   1f296:	e7f5      	b.n	1f284 <z_impl_k_sem_give+0x38>
   1f298:	2000f8d0 	.word	0x2000f8d0

0001f29c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1f29c:	b530      	push	{r4, r5, lr}
   1f29e:	b083      	sub	sp, #12
   1f2a0:	461d      	mov	r5, r3
   1f2a2:	f04f 0320 	mov.w	r3, #32
   1f2a6:	f3ef 8111 	mrs	r1, BASEPRI
   1f2aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2ae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1f2b2:	6883      	ldr	r3, [r0, #8]
   1f2b4:	b143      	cbz	r3, 1f2c8 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1f2b6:	3b01      	subs	r3, #1
   1f2b8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1f2ba:	f381 8811 	msr	BASEPRI, r1
   1f2be:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1f2c2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1f2c4:	b003      	add	sp, #12
   1f2c6:	bd30      	pop	{r4, r5, pc}
   1f2c8:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f2ca:	ea54 0305 	orrs.w	r3, r4, r5
   1f2ce:	d006      	beq.n	1f2de <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1f2d0:	e9cd 4500 	strd	r4, r5, [sp]
   1f2d4:	4602      	mov	r2, r0
   1f2d6:	4805      	ldr	r0, [pc, #20]	; (1f2ec <z_impl_k_sem_take+0x50>)
   1f2d8:	f000 fb62 	bl	1f9a0 <z_pend_curr>
	return ret;
   1f2dc:	e7f2      	b.n	1f2c4 <z_impl_k_sem_take+0x28>
   1f2de:	f381 8811 	msr	BASEPRI, r1
   1f2e2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1f2e6:	f06f 000f 	mvn.w	r0, #15
   1f2ea:	e7eb      	b.n	1f2c4 <z_impl_k_sem_take+0x28>
   1f2ec:	2000f8d0 	.word	0x2000f8d0

0001f2f0 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1f2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f2f2:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1f2f4:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f2f6:	f013 0f02 	tst.w	r3, #2
   1f2fa:	d15b      	bne.n	1f3b4 <submit_to_queue_locked+0xc4>
   1f2fc:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1f2fe:	f013 0f04 	tst.w	r3, #4
   1f302:	d15c      	bne.n	1f3be <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1f304:	680b      	ldr	r3, [r1, #0]
   1f306:	2b00      	cmp	r3, #0
   1f308:	d037      	beq.n	1f37a <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   1f30a:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1f30c:	f013 0f01 	tst.w	r3, #1
   1f310:	d036      	beq.n	1f380 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1f312:	68a3      	ldr	r3, [r4, #8]
   1f314:	602b      	str	r3, [r5, #0]
			ret = 2;
   1f316:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1f318:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1f31a:	2e00      	cmp	r6, #0
   1f31c:	d03e      	beq.n	1f39c <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1f31e:	4b29      	ldr	r3, [pc, #164]	; (1f3c4 <submit_to_queue_locked+0xd4>)
   1f320:	689b      	ldr	r3, [r3, #8]
   1f322:	42b3      	cmp	r3, r6
   1f324:	d02e      	beq.n	1f384 <submit_to_queue_locked+0x94>
   1f326:	2300      	movs	r3, #0
   1f328:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1f32a:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
   1f32e:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1f332:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f336:	f013 0f01 	tst.w	r3, #1
   1f33a:	d032      	beq.n	1f3a2 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   1f33c:	b101      	cbz	r1, 1f340 <submit_to_queue_locked+0x50>
   1f33e:	b39a      	cbz	r2, 1f3a8 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1f340:	b100      	cbz	r0, 1f344 <submit_to_queue_locked+0x54>
   1f342:	b3a1      	cbz	r1, 1f3ae <submit_to_queue_locked+0xbe>
	parent->next = child;
   1f344:	2300      	movs	r3, #0
   1f346:	6023      	str	r3, [r4, #0]
	return list->tail;
   1f348:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
   1f34c:	b30b      	cbz	r3, 1f392 <submit_to_queue_locked+0xa2>
	parent->next = child;
   1f34e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f350:	f8c6 40fc 	str.w	r4, [r6, #252]	; 0xfc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1f354:	2200      	movs	r2, #0
   1f356:	4611      	mov	r1, r2
   1f358:	f506 7080 	add.w	r0, r6, #256	; 0x100
   1f35c:	f007 f883 	bl	26466 <z_sched_wake>
		ret = 1;
   1f360:	2001      	movs	r0, #1

		if (rc < 0) {
   1f362:	2800      	cmp	r0, #0
   1f364:	db06      	blt.n	1f374 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   1f366:	68e3      	ldr	r3, [r4, #12]
   1f368:	f043 0304 	orr.w	r3, r3, #4
   1f36c:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1f36e:	682b      	ldr	r3, [r5, #0]
   1f370:	60a3      	str	r3, [r4, #8]
   1f372:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1f374:	2800      	cmp	r0, #0
   1f376:	dc21      	bgt.n	1f3bc <submit_to_queue_locked+0xcc>
   1f378:	e01e      	b.n	1f3b8 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1f37a:	6883      	ldr	r3, [r0, #8]
   1f37c:	600b      	str	r3, [r1, #0]
   1f37e:	e7c4      	b.n	1f30a <submit_to_queue_locked+0x1a>
		ret = 1;
   1f380:	2701      	movs	r7, #1
   1f382:	e7c9      	b.n	1f318 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1f384:	f006 fcf2 	bl	25d6c <k_is_in_isr>
   1f388:	b908      	cbnz	r0, 1f38e <submit_to_queue_locked+0x9e>
   1f38a:	2301      	movs	r3, #1
   1f38c:	e7cc      	b.n	1f328 <submit_to_queue_locked+0x38>
   1f38e:	2300      	movs	r3, #0
   1f390:	e7ca      	b.n	1f328 <submit_to_queue_locked+0x38>
   1f392:	f8c6 40fc 	str.w	r4, [r6, #252]	; 0xfc
	list->head = node;
   1f396:	f8c6 40f8 	str.w	r4, [r6, #248]	; 0xf8
}
   1f39a:	e7db      	b.n	1f354 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1f39c:	f06f 0015 	mvn.w	r0, #21
   1f3a0:	e7df      	b.n	1f362 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1f3a2:	f06f 0012 	mvn.w	r0, #18
   1f3a6:	e7dc      	b.n	1f362 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1f3a8:	f06f 000f 	mvn.w	r0, #15
   1f3ac:	e7d9      	b.n	1f362 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1f3ae:	f06f 000f 	mvn.w	r0, #15
   1f3b2:	e7d6      	b.n	1f362 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1f3b4:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1f3b8:	2300      	movs	r3, #0
   1f3ba:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1f3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1f3be:	2000      	movs	r0, #0
   1f3c0:	e7fa      	b.n	1f3b8 <submit_to_queue_locked+0xc8>
   1f3c2:	bf00      	nop
   1f3c4:	2000f8a0 	.word	0x2000f8a0

0001f3c8 <finalize_cancel_locked>:
{
   1f3c8:	b570      	push	{r4, r5, r6, lr}
   1f3ca:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1f3cc:	68c3      	ldr	r3, [r0, #12]
   1f3ce:	f023 0302 	bic.w	r3, r3, #2
   1f3d2:	60c3      	str	r3, [r0, #12]
	return list->head;
   1f3d4:	4b19      	ldr	r3, [pc, #100]	; (1f43c <finalize_cancel_locked+0x74>)
   1f3d6:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1f3d8:	b1e8      	cbz	r0, 1f416 <finalize_cancel_locked+0x4e>
   1f3da:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f3dc:	b100      	cbz	r0, 1f3e0 <finalize_cancel_locked+0x18>
	return node->next;
   1f3de:	6804      	ldr	r4, [r0, #0]
   1f3e0:	2600      	movs	r6, #0
   1f3e2:	e01d      	b.n	1f420 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   1f3e4:	b15e      	cbz	r6, 1f3fe <finalize_cancel_locked+0x36>
	return node->next;
   1f3e6:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1f3e8:	6033      	str	r3, [r6, #0]
	return list->tail;
   1f3ea:	4b14      	ldr	r3, [pc, #80]	; (1f43c <finalize_cancel_locked+0x74>)
   1f3ec:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f3ee:	4298      	cmp	r0, r3
   1f3f0:	d00e      	beq.n	1f410 <finalize_cancel_locked+0x48>
	parent->next = child;
   1f3f2:	2300      	movs	r3, #0
   1f3f4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1f3f8:	f7ff ff28 	bl	1f24c <z_impl_k_sem_give>
}
   1f3fc:	e015      	b.n	1f42a <finalize_cancel_locked+0x62>
	return node->next;
   1f3fe:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1f400:	4b0e      	ldr	r3, [pc, #56]	; (1f43c <finalize_cancel_locked+0x74>)
   1f402:	601a      	str	r2, [r3, #0]
	return list->tail;
   1f404:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f406:	4298      	cmp	r0, r3
   1f408:	d1f3      	bne.n	1f3f2 <finalize_cancel_locked+0x2a>
	list->tail = node;
   1f40a:	4b0c      	ldr	r3, [pc, #48]	; (1f43c <finalize_cancel_locked+0x74>)
   1f40c:	605a      	str	r2, [r3, #4]
}
   1f40e:	e7f0      	b.n	1f3f2 <finalize_cancel_locked+0x2a>
	list->tail = node;
   1f410:	4b0a      	ldr	r3, [pc, #40]	; (1f43c <finalize_cancel_locked+0x74>)
   1f412:	605e      	str	r6, [r3, #4]
}
   1f414:	e7ed      	b.n	1f3f2 <finalize_cancel_locked+0x2a>
   1f416:	4604      	mov	r4, r0
   1f418:	e7e2      	b.n	1f3e0 <finalize_cancel_locked+0x18>
   1f41a:	4623      	mov	r3, r4
   1f41c:	4620      	mov	r0, r4
   1f41e:	461c      	mov	r4, r3
   1f420:	b150      	cbz	r0, 1f438 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1f422:	6843      	ldr	r3, [r0, #4]
   1f424:	42ab      	cmp	r3, r5
   1f426:	d0dd      	beq.n	1f3e4 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1f428:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1f42a:	2c00      	cmp	r4, #0
   1f42c:	d0f5      	beq.n	1f41a <finalize_cancel_locked+0x52>
   1f42e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f430:	2c00      	cmp	r4, #0
   1f432:	d0f3      	beq.n	1f41c <finalize_cancel_locked+0x54>
	return node->next;
   1f434:	6823      	ldr	r3, [r4, #0]
   1f436:	e7f1      	b.n	1f41c <finalize_cancel_locked+0x54>
}
   1f438:	bd70      	pop	{r4, r5, r6, pc}
   1f43a:	bf00      	nop
   1f43c:	2000f8d0 	.word	0x2000f8d0

0001f440 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1f440:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f442:	b085      	sub	sp, #20
   1f444:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1f446:	e016      	b.n	1f476 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1f448:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	*flagp &= ~BIT(bit);
   1f44c:	f023 0204 	bic.w	r2, r3, #4
   1f450:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1f454:	f013 0f04 	tst.w	r3, #4
   1f458:	d158      	bne.n	1f50c <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1f45a:	2300      	movs	r3, #0
   1f45c:	9302      	str	r3, [sp, #8]
   1f45e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f466:	e9cd 2300 	strd	r2, r3, [sp]
   1f46a:	f505 7280 	add.w	r2, r5, #256	; 0x100
   1f46e:	4631      	mov	r1, r6
   1f470:	482e      	ldr	r0, [pc, #184]	; (1f52c <work_queue_main+0xec>)
   1f472:	f000 fcc9 	bl	1fe08 <z_sched_wait>
	__asm__ volatile(
   1f476:	f04f 0320 	mov.w	r3, #32
   1f47a:	f3ef 8611 	mrs	r6, BASEPRI
   1f47e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f482:	f3bf 8f6f 	isb	sy
	return list->head;
   1f486:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   1f48a:	2c00      	cmp	r4, #0
   1f48c:	d0dc      	beq.n	1f448 <work_queue_main+0x8>
	return node->next;
   1f48e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1f490:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	return list->tail;
   1f494:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f498:	4294      	cmp	r4, r2
   1f49a:	d034      	beq.n	1f506 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   1f49c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   1f4a0:	f043 0302 	orr.w	r3, r3, #2
   1f4a4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1f4a8:	68e3      	ldr	r3, [r4, #12]
   1f4aa:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1f4ae:	f023 0304 	bic.w	r3, r3, #4
   1f4b2:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1f4b4:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   1f4b6:	2c00      	cmp	r4, #0
   1f4b8:	d0cf      	beq.n	1f45a <work_queue_main+0x1a>
	__asm__ volatile(
   1f4ba:	f386 8811 	msr	BASEPRI, r6
   1f4be:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1f4c2:	4620      	mov	r0, r4
   1f4c4:	4798      	blx	r3
	__asm__ volatile(
   1f4c6:	f04f 0320 	mov.w	r3, #32
   1f4ca:	f3ef 8611 	mrs	r6, BASEPRI
   1f4ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4d2:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1f4d6:	68e3      	ldr	r3, [r4, #12]
   1f4d8:	f023 0301 	bic.w	r3, r3, #1
   1f4dc:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f4de:	f013 0f02 	tst.w	r3, #2
   1f4e2:	d11e      	bne.n	1f522 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   1f4e4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   1f4e8:	f023 0302 	bic.w	r3, r3, #2
   1f4ec:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
	return (*flagp & BIT(bit)) != 0U;
   1f4f0:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1f4f4:	f386 8811 	msr	BASEPRI, r6
   1f4f8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1f4fc:	2b00      	cmp	r3, #0
   1f4fe:	d1ba      	bne.n	1f476 <work_queue_main+0x36>
	z_impl_k_yield();
   1f500:	f000 fb84 	bl	1fc0c <z_impl_k_yield>
}
   1f504:	e7b7      	b.n	1f476 <work_queue_main+0x36>
	list->tail = node;
   1f506:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
}
   1f50a:	e7c7      	b.n	1f49c <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1f50c:	f505 7784 	add.w	r7, r5, #264	; 0x108
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1f510:	2200      	movs	r2, #0
   1f512:	2101      	movs	r1, #1
   1f514:	4638      	mov	r0, r7
   1f516:	f006 ffa6 	bl	26466 <z_sched_wake>
   1f51a:	2800      	cmp	r0, #0
   1f51c:	d1f8      	bne.n	1f510 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   1f51e:	2300      	movs	r3, #0
   1f520:	e7c9      	b.n	1f4b6 <work_queue_main+0x76>
			finalize_cancel_locked(work);
   1f522:	4620      	mov	r0, r4
   1f524:	f7ff ff50 	bl	1f3c8 <finalize_cancel_locked>
   1f528:	e7dc      	b.n	1f4e4 <work_queue_main+0xa4>
   1f52a:	bf00      	nop
   1f52c:	2000f8d0 	.word	0x2000f8d0

0001f530 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1f530:	b570      	push	{r4, r5, r6, lr}
   1f532:	4606      	mov	r6, r0
   1f534:	4608      	mov	r0, r1
   1f536:	4614      	mov	r4, r2
   1f538:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f53a:	ea54 0305 	orrs.w	r3, r4, r5
   1f53e:	d00c      	beq.n	1f55a <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   1f540:	68cb      	ldr	r3, [r1, #12]
   1f542:	f043 0308 	orr.w	r3, r3, #8
   1f546:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   1f548:	6833      	ldr	r3, [r6, #0]
   1f54a:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1f54c:	462b      	mov	r3, r5
   1f54e:	4905      	ldr	r1, [pc, #20]	; (1f564 <schedule_for_queue_locked+0x34>)
   1f550:	3010      	adds	r0, #16
   1f552:	f000 fccd 	bl	1fef0 <z_add_timeout>

	return ret;
   1f556:	2001      	movs	r0, #1
}
   1f558:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   1f55a:	4631      	mov	r1, r6
   1f55c:	f7ff fec8 	bl	1f2f0 <submit_to_queue_locked>
   1f560:	e7fa      	b.n	1f558 <schedule_for_queue_locked+0x28>
   1f562:	bf00      	nop
   1f564:	00025fef 	.word	0x00025fef

0001f568 <k_work_submit>:
{
   1f568:	b508      	push	{r3, lr}
   1f56a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1f56c:	4801      	ldr	r0, [pc, #4]	; (1f574 <k_work_submit+0xc>)
   1f56e:	f006 fd78 	bl	26062 <k_work_submit_to_queue>
}
   1f572:	bd08      	pop	{r3, pc}
   1f574:	2000d798 	.word	0x2000d798

0001f578 <k_work_queue_start>:
{
   1f578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f57a:	b089      	sub	sp, #36	; 0x24
   1f57c:	4604      	mov	r4, r0
   1f57e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1f580:	2000      	movs	r0, #0
   1f582:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
	list->tail = NULL;
   1f586:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
   1f58a:	f504 7080 	add.w	r0, r4, #256	; 0x100
	list->head = (sys_dnode_t *)list;
   1f58e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	list->tail = (sys_dnode_t *)list;
   1f592:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1f596:	f504 7084 	add.w	r0, r4, #264	; 0x108
	list->head = (sys_dnode_t *)list;
   1f59a:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	list->tail = (sys_dnode_t *)list;
   1f59e:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
	if ((cfg != NULL) && cfg->no_yield) {
   1f5a2:	b1fd      	cbz	r5, 1f5e4 <k_work_queue_start+0x6c>
   1f5a4:	7928      	ldrb	r0, [r5, #4]
   1f5a6:	b9f8      	cbnz	r0, 1f5e8 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1f5a8:	2001      	movs	r0, #1
	*flagp = flags;
   1f5aa:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f5ae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f5b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1f5b6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1f5ba:	2000      	movs	r0, #0
   1f5bc:	9004      	str	r0, [sp, #16]
   1f5be:	9303      	str	r3, [sp, #12]
   1f5c0:	9002      	str	r0, [sp, #8]
   1f5c2:	9001      	str	r0, [sp, #4]
   1f5c4:	9400      	str	r4, [sp, #0]
   1f5c6:	4b0a      	ldr	r3, [pc, #40]	; (1f5f0 <k_work_queue_start+0x78>)
   1f5c8:	4620      	mov	r0, r4
   1f5ca:	f006 fbe7 	bl	25d9c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1f5ce:	b125      	cbz	r5, 1f5da <k_work_queue_start+0x62>
   1f5d0:	6829      	ldr	r1, [r5, #0]
   1f5d2:	b111      	cbz	r1, 1f5da <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1f5d4:	4620      	mov	r0, r4
   1f5d6:	f7ff fb7f 	bl	1ecd8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1f5da:	4620      	mov	r0, r4
   1f5dc:	f006 fbce 	bl	25d7c <z_impl_k_thread_start>
}
   1f5e0:	b009      	add	sp, #36	; 0x24
   1f5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1f5e4:	2001      	movs	r0, #1
   1f5e6:	e7e0      	b.n	1f5aa <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1f5e8:	f240 1001 	movw	r0, #257	; 0x101
   1f5ec:	e7dd      	b.n	1f5aa <k_work_queue_start+0x32>
   1f5ee:	bf00      	nop
   1f5f0:	0001f441 	.word	0x0001f441

0001f5f4 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1f5f4:	b508      	push	{r3, lr}
   1f5f6:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1f5f8:	4801      	ldr	r0, [pc, #4]	; (1f600 <k_work_schedule+0xc>)
   1f5fa:	f006 fd6e 	bl	260da <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1f5fe:	bd08      	pop	{r3, pc}
   1f600:	2000d798 	.word	0x2000d798

0001f604 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1f604:	b508      	push	{r3, lr}
   1f606:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1f608:	4801      	ldr	r0, [pc, #4]	; (1f610 <k_work_reschedule+0xc>)
   1f60a:	f006 fd80 	bl	2610e <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1f60e:	bd08      	pop	{r3, pc}
   1f610:	2000d798 	.word	0x2000d798

0001f614 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1f614:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f61a:	bf08      	it	eq
   1f61c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1f620:	d100      	bne.n	1f624 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1f622:	bd38      	pop	{r3, r4, r5, pc}
   1f624:	4902      	ldr	r1, [pc, #8]	; (1f630 <add_thread_timeout+0x1c>)
   1f626:	3018      	adds	r0, #24
   1f628:	f000 fc62 	bl	1fef0 <z_add_timeout>
   1f62c:	e7f9      	b.n	1f622 <add_thread_timeout+0xe>
   1f62e:	bf00      	nop
   1f630:	0002629b 	.word	0x0002629b

0001f634 <z_reset_time_slice>:
{
   1f634:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1f636:	4b08      	ldr	r3, [pc, #32]	; (1f658 <z_reset_time_slice+0x24>)
   1f638:	681b      	ldr	r3, [r3, #0]
   1f63a:	b903      	cbnz	r3, 1f63e <z_reset_time_slice+0xa>
}
   1f63c:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1f63e:	f7f6 fee3 	bl	16408 <sys_clock_elapsed>
   1f642:	4603      	mov	r3, r0
   1f644:	4a04      	ldr	r2, [pc, #16]	; (1f658 <z_reset_time_slice+0x24>)
   1f646:	6810      	ldr	r0, [r2, #0]
   1f648:	4403      	add	r3, r0
   1f64a:	4a04      	ldr	r2, [pc, #16]	; (1f65c <z_reset_time_slice+0x28>)
   1f64c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1f64e:	2100      	movs	r1, #0
   1f650:	f006 ff8b 	bl	2656a <z_set_timeout_expiry>
}
   1f654:	e7f2      	b.n	1f63c <z_reset_time_slice+0x8>
   1f656:	bf00      	nop
   1f658:	2000f8e0 	.word	0x2000f8e0
   1f65c:	2000f8a0 	.word	0x2000f8a0

0001f660 <k_sched_time_slice_set>:
{
   1f660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f664:	4606      	mov	r6, r0
   1f666:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   1f668:	2300      	movs	r3, #0
	__asm__ volatile(
   1f66a:	f04f 0220 	mov.w	r2, #32
   1f66e:	f3ef 8711 	mrs	r7, BASEPRI
   1f672:	f382 8812 	msr	BASEPRI_MAX, r2
   1f676:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1f67a:	e009      	b.n	1f690 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   1f67c:	4b13      	ldr	r3, [pc, #76]	; (1f6cc <k_sched_time_slice_set+0x6c>)
   1f67e:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   1f682:	f7ff ffd7 	bl	1f634 <z_reset_time_slice>
	__asm__ volatile(
   1f686:	f387 8811 	msr	BASEPRI, r7
   1f68a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1f68e:	2301      	movs	r3, #1
   1f690:	b9cb      	cbnz	r3, 1f6c6 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   1f692:	2300      	movs	r3, #0
   1f694:	4a0e      	ldr	r2, [pc, #56]	; (1f6d0 <k_sched_time_slice_set+0x70>)
   1f696:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1f698:	0c75      	lsrs	r5, r6, #17
   1f69a:	03f4      	lsls	r4, r6, #15
   1f69c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f6a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f6a4:	2300      	movs	r3, #0
   1f6a6:	1820      	adds	r0, r4, r0
   1f6a8:	f04f 0100 	mov.w	r1, #0
   1f6ac:	eb45 0101 	adc.w	r1, r5, r1
   1f6b0:	f7f1 fa34 	bl	10b1c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1f6b4:	4b07      	ldr	r3, [pc, #28]	; (1f6d4 <k_sched_time_slice_set+0x74>)
   1f6b6:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1f6b8:	2e00      	cmp	r6, #0
   1f6ba:	dddf      	ble.n	1f67c <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   1f6bc:	2802      	cmp	r0, #2
   1f6be:	bfb8      	it	lt
   1f6c0:	2002      	movlt	r0, #2
   1f6c2:	6018      	str	r0, [r3, #0]
   1f6c4:	e7da      	b.n	1f67c <k_sched_time_slice_set+0x1c>
}
   1f6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f6ca:	bf00      	nop
   1f6cc:	2000f8dc 	.word	0x2000f8dc
   1f6d0:	2000f8a0 	.word	0x2000f8a0
   1f6d4:	2000f8e0 	.word	0x2000f8e0

0001f6d8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1f6d8:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1f6da:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f6dc:	b921      	cbnz	r1, 1f6e8 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f6de:	f3ef 8305 	mrs	r3, IPSR
   1f6e2:	b913      	cbnz	r3, 1f6ea <z_reschedule+0x12>
   1f6e4:	2101      	movs	r1, #1
   1f6e6:	e000      	b.n	1f6ea <z_reschedule+0x12>
   1f6e8:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1f6ea:	f011 0f01 	tst.w	r1, #1
   1f6ee:	d007      	beq.n	1f700 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1f6f0:	4b06      	ldr	r3, [pc, #24]	; (1f70c <z_reschedule+0x34>)
   1f6f2:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1f6f4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1f6f6:	429a      	cmp	r2, r3
   1f6f8:	d002      	beq.n	1f700 <z_reschedule+0x28>
	ret = arch_swap(key);
   1f6fa:	f7f4 fc25 	bl	13f48 <arch_swap>
		z_swap(lock, key);
   1f6fe:	e003      	b.n	1f708 <z_reschedule+0x30>
   1f700:	f380 8811 	msr	BASEPRI, r0
   1f704:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1f708:	bd08      	pop	{r3, pc}
   1f70a:	bf00      	nop
   1f70c:	2000f8a0 	.word	0x2000f8a0

0001f710 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1f710:	2300      	movs	r3, #0
	__asm__ volatile(
   1f712:	f04f 0220 	mov.w	r2, #32
   1f716:	f3ef 8111 	mrs	r1, BASEPRI
   1f71a:	f382 8812 	msr	BASEPRI_MAX, r2
   1f71e:	f3bf 8f6f 	isb	sy
   1f722:	b953      	cbnz	r3, 1f73a <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   1f724:	4b05      	ldr	r3, [pc, #20]	; (1f73c <k_sched_lock+0x2c>)
   1f726:	689a      	ldr	r2, [r3, #8]
   1f728:	7bd3      	ldrb	r3, [r2, #15]
   1f72a:	3b01      	subs	r3, #1
   1f72c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1f72e:	f381 8811 	msr	BASEPRI, r1
   1f732:	f3bf 8f6f 	isb	sy
   1f736:	2301      	movs	r3, #1
   1f738:	e7f3      	b.n	1f722 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1f73a:	4770      	bx	lr
   1f73c:	2000f8a0 	.word	0x2000f8a0

0001f740 <update_cache>:
{
   1f740:	b538      	push	{r3, r4, r5, lr}
   1f742:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   1f744:	480f      	ldr	r0, [pc, #60]	; (1f784 <update_cache+0x44>)
   1f746:	f006 fd85 	bl	26254 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1f74a:	4605      	mov	r5, r0
   1f74c:	b170      	cbz	r0, 1f76c <update_cache+0x2c>
	if (preempt_ok != 0) {
   1f74e:	b984      	cbnz	r4, 1f772 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1f750:	4b0d      	ldr	r3, [pc, #52]	; (1f788 <update_cache+0x48>)
   1f752:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1f754:	7b5a      	ldrb	r2, [r3, #13]
   1f756:	f012 0f1f 	tst.w	r2, #31
   1f75a:	d10a      	bne.n	1f772 <update_cache+0x32>
	return node->next != NULL;
   1f75c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1f75e:	b942      	cbnz	r2, 1f772 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1f760:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1f762:	2a7f      	cmp	r2, #127	; 0x7f
   1f764:	d905      	bls.n	1f772 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1f766:	4a08      	ldr	r2, [pc, #32]	; (1f788 <update_cache+0x48>)
   1f768:	61d3      	str	r3, [r2, #28]
   1f76a:	e00a      	b.n	1f782 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1f76c:	4b06      	ldr	r3, [pc, #24]	; (1f788 <update_cache+0x48>)
   1f76e:	68dd      	ldr	r5, [r3, #12]
   1f770:	e7ed      	b.n	1f74e <update_cache+0xe>
		if (thread != _current) {
   1f772:	4b05      	ldr	r3, [pc, #20]	; (1f788 <update_cache+0x48>)
   1f774:	689b      	ldr	r3, [r3, #8]
   1f776:	42ab      	cmp	r3, r5
   1f778:	d001      	beq.n	1f77e <update_cache+0x3e>
			z_reset_time_slice();
   1f77a:	f7ff ff5b 	bl	1f634 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1f77e:	4b02      	ldr	r3, [pc, #8]	; (1f788 <update_cache+0x48>)
   1f780:	61dd      	str	r5, [r3, #28]
}
   1f782:	bd38      	pop	{r3, r4, r5, pc}
   1f784:	2000f8c0 	.word	0x2000f8c0
   1f788:	2000f8a0 	.word	0x2000f8a0

0001f78c <move_thread_to_end_of_prio_q>:
{
   1f78c:	b538      	push	{r3, r4, r5, lr}
   1f78e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1f790:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1f792:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f796:	2b00      	cmp	r3, #0
   1f798:	db28      	blt.n	1f7ec <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1f79a:	7b6b      	ldrb	r3, [r5, #13]
   1f79c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f7a0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1f7a2:	4b1a      	ldr	r3, [pc, #104]	; (1f80c <move_thread_to_end_of_prio_q+0x80>)
   1f7a4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f7a8:	429c      	cmp	r4, r3
   1f7aa:	d02d      	beq.n	1f808 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f7ac:	b16c      	cbz	r4, 1f7ca <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1f7ae:	4621      	mov	r1, r4
   1f7b0:	4628      	mov	r0, r5
   1f7b2:	f006 fce6 	bl	26182 <z_sched_prio_cmp>
   1f7b6:	2800      	cmp	r0, #0
   1f7b8:	dc20      	bgt.n	1f7fc <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f7ba:	b134      	cbz	r4, 1f7ca <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1f7bc:	4b13      	ldr	r3, [pc, #76]	; (1f80c <move_thread_to_end_of_prio_q+0x80>)
   1f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f7c0:	429c      	cmp	r4, r3
   1f7c2:	d002      	beq.n	1f7ca <move_thread_to_end_of_prio_q+0x3e>
   1f7c4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f7c6:	2c00      	cmp	r4, #0
   1f7c8:	d1f0      	bne.n	1f7ac <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1f7ca:	4b10      	ldr	r3, [pc, #64]	; (1f80c <move_thread_to_end_of_prio_q+0x80>)
   1f7cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   1f7ce:	f103 0120 	add.w	r1, r3, #32
   1f7d2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1f7d4:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1f7d6:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1f7d8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   1f7da:	4b0c      	ldr	r3, [pc, #48]	; (1f80c <move_thread_to_end_of_prio_q+0x80>)
   1f7dc:	6898      	ldr	r0, [r3, #8]
   1f7de:	42a8      	cmp	r0, r5
   1f7e0:	bf14      	ite	ne
   1f7e2:	2000      	movne	r0, #0
   1f7e4:	2001      	moveq	r0, #1
   1f7e6:	f7ff ffab 	bl	1f740 <update_cache>
}
   1f7ea:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1f7ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1f7f0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1f7f2:	4601      	mov	r1, r0
   1f7f4:	4806      	ldr	r0, [pc, #24]	; (1f810 <move_thread_to_end_of_prio_q+0x84>)
   1f7f6:	f006 fd02 	bl	261fe <z_priq_dumb_remove>
}
   1f7fa:	e7ce      	b.n	1f79a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1f7fc:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1f7fe:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1f800:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1f802:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1f804:	6065      	str	r5, [r4, #4]
}
   1f806:	e7e8      	b.n	1f7da <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f808:	2400      	movs	r4, #0
   1f80a:	e7cf      	b.n	1f7ac <move_thread_to_end_of_prio_q+0x20>
   1f80c:	2000f8a0 	.word	0x2000f8a0
   1f810:	2000f8c0 	.word	0x2000f8c0

0001f814 <z_time_slice>:
{
   1f814:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f816:	f04f 0320 	mov.w	r3, #32
   1f81a:	f3ef 8411 	mrs	r4, BASEPRI
   1f81e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f822:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1f826:	4b1c      	ldr	r3, [pc, #112]	; (1f898 <z_time_slice+0x84>)
   1f828:	689b      	ldr	r3, [r3, #8]
   1f82a:	4a1c      	ldr	r2, [pc, #112]	; (1f89c <z_time_slice+0x88>)
   1f82c:	6812      	ldr	r2, [r2, #0]
   1f82e:	4293      	cmp	r3, r2
   1f830:	d01d      	beq.n	1f86e <z_time_slice+0x5a>
	pending_current = NULL;
   1f832:	4a1a      	ldr	r2, [pc, #104]	; (1f89c <z_time_slice+0x88>)
   1f834:	2100      	movs	r1, #0
   1f836:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1f838:	4a19      	ldr	r2, [pc, #100]	; (1f8a0 <z_time_slice+0x8c>)
   1f83a:	6812      	ldr	r2, [r2, #0]
   1f83c:	b322      	cbz	r2, 1f888 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1f83e:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1f840:	2a7f      	cmp	r2, #127	; 0x7f
   1f842:	d821      	bhi.n	1f888 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1f844:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1f846:	f012 0f1f 	tst.w	r2, #31
   1f84a:	d11d      	bne.n	1f888 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1f84c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1f850:	4a14      	ldr	r2, [pc, #80]	; (1f8a4 <z_time_slice+0x90>)
   1f852:	6812      	ldr	r2, [r2, #0]
   1f854:	4291      	cmp	r1, r2
   1f856:	db17      	blt.n	1f888 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   1f858:	4a13      	ldr	r2, [pc, #76]	; (1f8a8 <z_time_slice+0x94>)
   1f85a:	4293      	cmp	r3, r2
   1f85c:	d014      	beq.n	1f888 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   1f85e:	4a0e      	ldr	r2, [pc, #56]	; (1f898 <z_time_slice+0x84>)
   1f860:	6912      	ldr	r2, [r2, #16]
   1f862:	4282      	cmp	r2, r0
   1f864:	dd0a      	ble.n	1f87c <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1f866:	1a10      	subs	r0, r2, r0
   1f868:	4b0b      	ldr	r3, [pc, #44]	; (1f898 <z_time_slice+0x84>)
   1f86a:	6118      	str	r0, [r3, #16]
   1f86c:	e00f      	b.n	1f88e <z_time_slice+0x7a>
		z_reset_time_slice();
   1f86e:	f7ff fee1 	bl	1f634 <z_reset_time_slice>
	__asm__ volatile(
   1f872:	f384 8811 	msr	BASEPRI, r4
   1f876:	f3bf 8f6f 	isb	sy
		return;
   1f87a:	e00c      	b.n	1f896 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   1f87c:	4618      	mov	r0, r3
   1f87e:	f7ff ff85 	bl	1f78c <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1f882:	f7ff fed7 	bl	1f634 <z_reset_time_slice>
   1f886:	e002      	b.n	1f88e <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1f888:	4b03      	ldr	r3, [pc, #12]	; (1f898 <z_time_slice+0x84>)
   1f88a:	2200      	movs	r2, #0
   1f88c:	611a      	str	r2, [r3, #16]
   1f88e:	f384 8811 	msr	BASEPRI, r4
   1f892:	f3bf 8f6f 	isb	sy
}
   1f896:	bd10      	pop	{r4, pc}
   1f898:	2000f8a0 	.word	0x2000f8a0
   1f89c:	2000f8d8 	.word	0x2000f8d8
   1f8a0:	2000f8e0 	.word	0x2000f8e0
   1f8a4:	2000f8dc 	.word	0x2000f8dc
   1f8a8:	2000d5a0 	.word	0x2000d5a0

0001f8ac <ready_thread>:
{
   1f8ac:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1f8ae:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1f8b0:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1f8b4:	2a00      	cmp	r2, #0
   1f8b6:	db2d      	blt.n	1f914 <ready_thread+0x68>
   1f8b8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f8ba:	f013 0f1f 	tst.w	r3, #31
   1f8be:	d105      	bne.n	1f8cc <ready_thread+0x20>
	return node->next != NULL;
   1f8c0:	6982      	ldr	r2, [r0, #24]
   1f8c2:	b10a      	cbz	r2, 1f8c8 <ready_thread+0x1c>
   1f8c4:	2200      	movs	r2, #0
   1f8c6:	e002      	b.n	1f8ce <ready_thread+0x22>
   1f8c8:	2201      	movs	r2, #1
   1f8ca:	e000      	b.n	1f8ce <ready_thread+0x22>
   1f8cc:	2200      	movs	r2, #0
   1f8ce:	b30a      	cbz	r2, 1f914 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1f8d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f8d4:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1f8d6:	4b14      	ldr	r3, [pc, #80]	; (1f928 <ready_thread+0x7c>)
   1f8d8:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f8dc:	429d      	cmp	r5, r3
   1f8de:	d020      	beq.n	1f922 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f8e0:	b16d      	cbz	r5, 1f8fe <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1f8e2:	4629      	mov	r1, r5
   1f8e4:	4620      	mov	r0, r4
   1f8e6:	f006 fc4c 	bl	26182 <z_sched_prio_cmp>
   1f8ea:	2800      	cmp	r0, #0
   1f8ec:	dc13      	bgt.n	1f916 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f8ee:	b135      	cbz	r5, 1f8fe <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1f8f0:	4b0d      	ldr	r3, [pc, #52]	; (1f928 <ready_thread+0x7c>)
   1f8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f8f4:	429d      	cmp	r5, r3
   1f8f6:	d002      	beq.n	1f8fe <ready_thread+0x52>
   1f8f8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f8fa:	2d00      	cmp	r5, #0
   1f8fc:	d1f0      	bne.n	1f8e0 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1f8fe:	4b0a      	ldr	r3, [pc, #40]	; (1f928 <ready_thread+0x7c>)
   1f900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1f902:	f103 0120 	add.w	r1, r3, #32
   1f906:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1f908:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1f90a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1f90c:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   1f90e:	2000      	movs	r0, #0
   1f910:	f7ff ff16 	bl	1f740 <update_cache>
}
   1f914:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1f916:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1f918:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1f91a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1f91c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1f91e:	606c      	str	r4, [r5, #4]
}
   1f920:	e7f5      	b.n	1f90e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f922:	2500      	movs	r5, #0
   1f924:	e7dc      	b.n	1f8e0 <ready_thread+0x34>
   1f926:	bf00      	nop
   1f928:	2000f8a0 	.word	0x2000f8a0

0001f92c <z_sched_start>:
{
   1f92c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f92e:	f04f 0320 	mov.w	r3, #32
   1f932:	f3ef 8411 	mrs	r4, BASEPRI
   1f936:	f383 8812 	msr	BASEPRI_MAX, r3
   1f93a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1f93e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1f940:	f013 0f04 	tst.w	r3, #4
   1f944:	d104      	bne.n	1f950 <z_sched_start+0x24>
	__asm__ volatile(
   1f946:	f384 8811 	msr	BASEPRI, r4
   1f94a:	f3bf 8f6f 	isb	sy
}
   1f94e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f950:	f023 0304 	bic.w	r3, r3, #4
   1f954:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1f956:	f7ff ffa9 	bl	1f8ac <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1f95a:	4621      	mov	r1, r4
   1f95c:	4801      	ldr	r0, [pc, #4]	; (1f964 <z_sched_start+0x38>)
   1f95e:	f7ff febb 	bl	1f6d8 <z_reschedule>
   1f962:	e7f4      	b.n	1f94e <z_sched_start+0x22>
   1f964:	2000f8dc 	.word	0x2000f8dc

0001f968 <unready_thread>:
{
   1f968:	b510      	push	{r4, lr}
   1f96a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   1f96c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1f96e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f972:	2b00      	cmp	r3, #0
   1f974:	db08      	blt.n	1f988 <unready_thread+0x20>
	update_cache(thread == _current);
   1f976:	4b08      	ldr	r3, [pc, #32]	; (1f998 <unready_thread+0x30>)
   1f978:	6898      	ldr	r0, [r3, #8]
   1f97a:	42a0      	cmp	r0, r4
   1f97c:	bf14      	ite	ne
   1f97e:	2000      	movne	r0, #0
   1f980:	2001      	moveq	r0, #1
   1f982:	f7ff fedd 	bl	1f740 <update_cache>
}
   1f986:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1f988:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1f98c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1f98e:	4601      	mov	r1, r0
   1f990:	4802      	ldr	r0, [pc, #8]	; (1f99c <unready_thread+0x34>)
   1f992:	f006 fc34 	bl	261fe <z_priq_dumb_remove>
}
   1f996:	e7ee      	b.n	1f976 <unready_thread+0xe>
   1f998:	2000f8a0 	.word	0x2000f8a0
   1f99c:	2000f8c0 	.word	0x2000f8c0

0001f9a0 <z_pend_curr>:
{
   1f9a0:	b510      	push	{r4, lr}
   1f9a2:	460c      	mov	r4, r1
   1f9a4:	4611      	mov	r1, r2
	pending_current = _current;
   1f9a6:	4b06      	ldr	r3, [pc, #24]	; (1f9c0 <z_pend_curr+0x20>)
   1f9a8:	6898      	ldr	r0, [r3, #8]
   1f9aa:	4b06      	ldr	r3, [pc, #24]	; (1f9c4 <z_pend_curr+0x24>)
   1f9ac:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1f9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1f9b2:	f006 fcd0 	bl	26356 <pend>
   1f9b6:	4620      	mov	r0, r4
   1f9b8:	f7f4 fac6 	bl	13f48 <arch_swap>
}
   1f9bc:	bd10      	pop	{r4, pc}
   1f9be:	bf00      	nop
   1f9c0:	2000f8a0 	.word	0x2000f8a0
   1f9c4:	2000f8d8 	.word	0x2000f8d8

0001f9c8 <z_set_prio>:
{
   1f9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f9cc:	4604      	mov	r4, r0
   1f9ce:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   1f9d0:	2300      	movs	r3, #0
	__asm__ volatile(
   1f9d2:	f04f 0220 	mov.w	r2, #32
   1f9d6:	f3ef 8611 	mrs	r6, BASEPRI
   1f9da:	f382 8812 	msr	BASEPRI_MAX, r2
   1f9de:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1f9e2:	4698      	mov	r8, r3
   1f9e4:	e008      	b.n	1f9f8 <z_set_prio+0x30>
		if (need_sched) {
   1f9e6:	f012 0801 	ands.w	r8, r2, #1
   1f9ea:	d111      	bne.n	1fa10 <z_set_prio+0x48>
			thread->base.prio = prio;
   1f9ec:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   1f9ee:	f386 8811 	msr	BASEPRI, r6
   1f9f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1f9f6:	2301      	movs	r3, #1
   1f9f8:	461a      	mov	r2, r3
   1f9fa:	2b00      	cmp	r3, #0
   1f9fc:	d13d      	bne.n	1fa7a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1f9fe:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fa00:	f013 0f1f 	tst.w	r3, #31
   1fa04:	d1ef      	bne.n	1f9e6 <z_set_prio+0x1e>
	return node->next != NULL;
   1fa06:	69a1      	ldr	r1, [r4, #24]
   1fa08:	2900      	cmp	r1, #0
   1fa0a:	d1ec      	bne.n	1f9e6 <z_set_prio+0x1e>
   1fa0c:	2201      	movs	r2, #1
   1fa0e:	e7ea      	b.n	1f9e6 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fa10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fa14:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1fa16:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1fa84 <z_set_prio+0xbc>
   1fa1a:	4621      	mov	r1, r4
   1fa1c:	4648      	mov	r0, r9
   1fa1e:	f006 fbee 	bl	261fe <z_priq_dumb_remove>
				thread->base.prio = prio;
   1fa22:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1fa24:	7b63      	ldrb	r3, [r4, #13]
   1fa26:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fa2a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1fa2c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fa30:	454d      	cmp	r5, r9
   1fa32:	d020      	beq.n	1fa76 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fa34:	b16d      	cbz	r5, 1fa52 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1fa36:	4629      	mov	r1, r5
   1fa38:	4620      	mov	r0, r4
   1fa3a:	f006 fba2 	bl	26182 <z_sched_prio_cmp>
   1fa3e:	2800      	cmp	r0, #0
   1fa40:	dc13      	bgt.n	1fa6a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fa42:	b135      	cbz	r5, 1fa52 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1fa44:	4b0e      	ldr	r3, [pc, #56]	; (1fa80 <z_set_prio+0xb8>)
   1fa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fa48:	429d      	cmp	r5, r3
   1fa4a:	d002      	beq.n	1fa52 <z_set_prio+0x8a>
   1fa4c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fa4e:	2d00      	cmp	r5, #0
   1fa50:	d1f0      	bne.n	1fa34 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1fa52:	4b0b      	ldr	r3, [pc, #44]	; (1fa80 <z_set_prio+0xb8>)
   1fa54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1fa56:	f103 0120 	add.w	r1, r3, #32
   1fa5a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1fa5c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1fa5e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1fa60:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1fa62:	2001      	movs	r0, #1
   1fa64:	f7ff fe6c 	bl	1f740 <update_cache>
   1fa68:	e7c1      	b.n	1f9ee <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1fa6a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1fa6c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1fa6e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1fa70:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1fa72:	606c      	str	r4, [r5, #4]
}
   1fa74:	e7f5      	b.n	1fa62 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fa76:	2500      	movs	r5, #0
   1fa78:	e7dc      	b.n	1fa34 <z_set_prio+0x6c>
}
   1fa7a:	4640      	mov	r0, r8
   1fa7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fa80:	2000f8a0 	.word	0x2000f8a0
   1fa84:	2000f8c0 	.word	0x2000f8c0

0001fa88 <z_impl_k_thread_suspend>:
{
   1fa88:	b538      	push	{r3, r4, r5, lr}
   1fa8a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1fa8c:	3018      	adds	r0, #24
   1fa8e:	f006 fd38 	bl	26502 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1fa92:	2300      	movs	r3, #0
	__asm__ volatile(
   1fa94:	f04f 0220 	mov.w	r2, #32
   1fa98:	f3ef 8511 	mrs	r5, BASEPRI
   1fa9c:	f382 8812 	msr	BASEPRI_MAX, r2
   1faa0:	f3bf 8f6f 	isb	sy
   1faa4:	e010      	b.n	1fac8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1faa6:	7b63      	ldrb	r3, [r4, #13]
   1faa8:	f043 0310 	orr.w	r3, r3, #16
   1faac:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1faae:	4b15      	ldr	r3, [pc, #84]	; (1fb04 <z_impl_k_thread_suspend+0x7c>)
   1fab0:	6898      	ldr	r0, [r3, #8]
   1fab2:	42a0      	cmp	r0, r4
   1fab4:	bf14      	ite	ne
   1fab6:	2000      	movne	r0, #0
   1fab8:	2001      	moveq	r0, #1
   1faba:	f7ff fe41 	bl	1f740 <update_cache>
	__asm__ volatile(
   1fabe:	f385 8811 	msr	BASEPRI, r5
   1fac2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1fac6:	2301      	movs	r3, #1
   1fac8:	b963      	cbnz	r3, 1fae4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1faca:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1facc:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1fad0:	2b00      	cmp	r3, #0
   1fad2:	dae8      	bge.n	1faa6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fad4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1fad8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1fada:	4621      	mov	r1, r4
   1fadc:	480a      	ldr	r0, [pc, #40]	; (1fb08 <z_impl_k_thread_suspend+0x80>)
   1fade:	f006 fb8e 	bl	261fe <z_priq_dumb_remove>
}
   1fae2:	e7e0      	b.n	1faa6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1fae4:	4b07      	ldr	r3, [pc, #28]	; (1fb04 <z_impl_k_thread_suspend+0x7c>)
   1fae6:	689b      	ldr	r3, [r3, #8]
   1fae8:	42a3      	cmp	r3, r4
   1faea:	d000      	beq.n	1faee <z_impl_k_thread_suspend+0x66>
}
   1faec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1faee:	f04f 0320 	mov.w	r3, #32
   1faf2:	f3ef 8011 	mrs	r0, BASEPRI
   1faf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1fafa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1fafe:	f006 fb69 	bl	261d4 <z_reschedule_irqlock>
   1fb02:	e7f3      	b.n	1faec <z_impl_k_thread_suspend+0x64>
   1fb04:	2000f8a0 	.word	0x2000f8a0
   1fb08:	2000f8c0 	.word	0x2000f8c0

0001fb0c <k_sched_unlock>:

void k_sched_unlock(void)
{
   1fb0c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1fb0e:	2300      	movs	r3, #0
   1fb10:	f04f 0220 	mov.w	r2, #32
   1fb14:	f3ef 8411 	mrs	r4, BASEPRI
   1fb18:	f382 8812 	msr	BASEPRI_MAX, r2
   1fb1c:	f3bf 8f6f 	isb	sy
   1fb20:	b96b      	cbnz	r3, 1fb3e <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1fb22:	4b0c      	ldr	r3, [pc, #48]	; (1fb54 <k_sched_unlock+0x48>)
   1fb24:	689a      	ldr	r2, [r3, #8]
   1fb26:	7bd3      	ldrb	r3, [r2, #15]
   1fb28:	3301      	adds	r3, #1
   1fb2a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1fb2c:	2000      	movs	r0, #0
   1fb2e:	f7ff fe07 	bl	1f740 <update_cache>
	__asm__ volatile(
   1fb32:	f384 8811 	msr	BASEPRI, r4
   1fb36:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1fb3a:	2301      	movs	r3, #1
   1fb3c:	e7f0      	b.n	1fb20 <k_sched_unlock+0x14>
	__asm__ volatile(
   1fb3e:	f04f 0320 	mov.w	r3, #32
   1fb42:	f3ef 8011 	mrs	r0, BASEPRI
   1fb46:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb4a:	f3bf 8f6f 	isb	sy
   1fb4e:	f006 fb41 	bl	261d4 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1fb52:	bd10      	pop	{r4, pc}
   1fb54:	2000f8a0 	.word	0x2000f8a0

0001fb58 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   1fb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1fb5a:	7b43      	ldrb	r3, [r0, #13]
   1fb5c:	f013 0f08 	tst.w	r3, #8
   1fb60:	d145      	bne.n	1fbee <end_thread+0x96>
   1fb62:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1fb64:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1fb68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1fb6c:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1fb6e:	f013 0f80 	tst.w	r3, #128	; 0x80
   1fb72:	d114      	bne.n	1fb9e <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   1fb74:	68ab      	ldr	r3, [r5, #8]
   1fb76:	b15b      	cbz	r3, 1fb90 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1fb78:	4628      	mov	r0, r5
   1fb7a:	f006 fb00 	bl	2617e <pended_on_thread>
   1fb7e:	4629      	mov	r1, r5
   1fb80:	f006 fb3d 	bl	261fe <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fb84:	7b6b      	ldrb	r3, [r5, #13]
   1fb86:	f023 0302 	bic.w	r3, r3, #2
   1fb8a:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1fb8c:	2300      	movs	r3, #0
   1fb8e:	60ab      	str	r3, [r5, #8]
   1fb90:	f105 0018 	add.w	r0, r5, #24
   1fb94:	f006 fcb5 	bl	26502 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1fb98:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1fb9c:	e01c      	b.n	1fbd8 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fb9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fba2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1fba4:	4601      	mov	r1, r0
   1fba6:	4812      	ldr	r0, [pc, #72]	; (1fbf0 <end_thread+0x98>)
   1fba8:	f006 fb29 	bl	261fe <z_priq_dumb_remove>
}
   1fbac:	e7e2      	b.n	1fb74 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1fbae:	4620      	mov	r0, r4
   1fbb0:	f006 fae5 	bl	2617e <pended_on_thread>
   1fbb4:	4621      	mov	r1, r4
   1fbb6:	f006 fb22 	bl	261fe <z_priq_dumb_remove>
   1fbba:	7b63      	ldrb	r3, [r4, #13]
   1fbbc:	f023 0302 	bic.w	r3, r3, #2
   1fbc0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1fbc2:	2600      	movs	r6, #0
   1fbc4:	60a6      	str	r6, [r4, #8]
   1fbc6:	f104 0018 	add.w	r0, r4, #24
   1fbca:	f006 fc9a 	bl	26502 <z_abort_timeout>
   1fbce:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1fbd2:	4620      	mov	r0, r4
   1fbd4:	f7ff fe6a 	bl	1f8ac <ready_thread>
	return list->head == list;
   1fbd8:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fbda:	42bc      	cmp	r4, r7
   1fbdc:	d001      	beq.n	1fbe2 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1fbde:	2c00      	cmp	r4, #0
   1fbe0:	d1e5      	bne.n	1fbae <end_thread+0x56>
		update_cache(1);
   1fbe2:	2001      	movs	r0, #1
   1fbe4:	f7ff fdac 	bl	1f740 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1fbe8:	4628      	mov	r0, r5
   1fbea:	f7ff f855 	bl	1ec98 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1fbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fbf0:	2000f8c0 	.word	0x2000f8c0

0001fbf4 <z_sched_init>:
{
   1fbf4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1fbf6:	4804      	ldr	r0, [pc, #16]	; (1fc08 <z_sched_init+0x14>)
   1fbf8:	f006 fc31 	bl	2645e <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1fbfc:	2100      	movs	r1, #0
   1fbfe:	4608      	mov	r0, r1
   1fc00:	f7ff fd2e 	bl	1f660 <k_sched_time_slice_set>
}
   1fc04:	bd08      	pop	{r3, pc}
   1fc06:	bf00      	nop
   1fc08:	2000f8bc 	.word	0x2000f8bc

0001fc0c <z_impl_k_yield>:
{
   1fc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc0e:	f04f 0320 	mov.w	r3, #32
   1fc12:	f3ef 8611 	mrs	r6, BASEPRI
   1fc16:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc1a:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   1fc1e:	4c1c      	ldr	r4, [pc, #112]	; (1fc90 <z_impl_k_yield+0x84>)
   1fc20:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fc22:	7b4b      	ldrb	r3, [r1, #13]
   1fc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fc28:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1fc2a:	f104 0720 	add.w	r7, r4, #32
   1fc2e:	4638      	mov	r0, r7
   1fc30:	f006 fae5 	bl	261fe <z_priq_dumb_remove>
	queue_thread(_current);
   1fc34:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1fc36:	7b6b      	ldrb	r3, [r5, #13]
   1fc38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fc3c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1fc3e:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fc40:	42bc      	cmp	r4, r7
   1fc42:	d023      	beq.n	1fc8c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fc44:	b16c      	cbz	r4, 1fc62 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1fc46:	4621      	mov	r1, r4
   1fc48:	4628      	mov	r0, r5
   1fc4a:	f006 fa9a 	bl	26182 <z_sched_prio_cmp>
   1fc4e:	2800      	cmp	r0, #0
   1fc50:	dc16      	bgt.n	1fc80 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fc52:	b134      	cbz	r4, 1fc62 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1fc54:	4b0e      	ldr	r3, [pc, #56]	; (1fc90 <z_impl_k_yield+0x84>)
   1fc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fc58:	429c      	cmp	r4, r3
   1fc5a:	d002      	beq.n	1fc62 <z_impl_k_yield+0x56>
   1fc5c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fc5e:	2c00      	cmp	r4, #0
   1fc60:	d1f0      	bne.n	1fc44 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1fc62:	4b0b      	ldr	r3, [pc, #44]	; (1fc90 <z_impl_k_yield+0x84>)
   1fc64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1fc66:	f103 0120 	add.w	r1, r3, #32
   1fc6a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1fc6c:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1fc6e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1fc70:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1fc72:	2001      	movs	r0, #1
   1fc74:	f7ff fd64 	bl	1f740 <update_cache>
   1fc78:	4630      	mov	r0, r6
   1fc7a:	f7f4 f965 	bl	13f48 <arch_swap>
}
   1fc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   1fc80:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1fc82:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1fc84:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1fc86:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1fc88:	6065      	str	r5, [r4, #4]
}
   1fc8a:	e7f2      	b.n	1fc72 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fc8c:	2400      	movs	r4, #0
   1fc8e:	e7d9      	b.n	1fc44 <z_impl_k_yield+0x38>
   1fc90:	2000f8a0 	.word	0x2000f8a0

0001fc94 <z_tick_sleep>:
{
   1fc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc98:	4604      	mov	r4, r0
   1fc9a:	460d      	mov	r5, r1
	if (ticks == 0) {
   1fc9c:	ea54 0105 	orrs.w	r1, r4, r5
   1fca0:	d037      	beq.n	1fd12 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1fca2:	f06f 0101 	mvn.w	r1, #1
   1fca6:	1a0a      	subs	r2, r1, r0
   1fca8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fcac:	eb61 0305 	sbc.w	r3, r1, r5
   1fcb0:	2a01      	cmp	r2, #1
   1fcb2:	f173 0300 	sbcs.w	r3, r3, #0
   1fcb6:	db30      	blt.n	1fd1a <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1fcb8:	f06f 0601 	mvn.w	r6, #1
   1fcbc:	1a36      	subs	r6, r6, r0
   1fcbe:	f04f 0320 	mov.w	r3, #32
   1fcc2:	f3ef 8811 	mrs	r8, BASEPRI
   1fcc6:	f383 8812 	msr	BASEPRI_MAX, r3
   1fcca:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1fcce:	4f16      	ldr	r7, [pc, #88]	; (1fd28 <z_tick_sleep+0x94>)
   1fcd0:	68b8      	ldr	r0, [r7, #8]
   1fcd2:	4b16      	ldr	r3, [pc, #88]	; (1fd2c <z_tick_sleep+0x98>)
   1fcd4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1fcd6:	f7ff fe47 	bl	1f968 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1fcda:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1fcdc:	4622      	mov	r2, r4
   1fcde:	462b      	mov	r3, r5
   1fce0:	4913      	ldr	r1, [pc, #76]	; (1fd30 <z_tick_sleep+0x9c>)
   1fce2:	3018      	adds	r0, #24
   1fce4:	f000 f904 	bl	1fef0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1fce8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1fcea:	7b53      	ldrb	r3, [r2, #13]
   1fcec:	f043 0310 	orr.w	r3, r3, #16
   1fcf0:	7353      	strb	r3, [r2, #13]
   1fcf2:	4640      	mov	r0, r8
   1fcf4:	f7f4 f928 	bl	13f48 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1fcf8:	2500      	movs	r5, #0
   1fcfa:	f006 fc61 	bl	265c0 <sys_clock_tick_get_32>
   1fcfe:	1a34      	subs	r4, r6, r0
   1fd00:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1fd04:	2c01      	cmp	r4, #1
   1fd06:	f175 0300 	sbcs.w	r3, r5, #0
   1fd0a:	da0a      	bge.n	1fd22 <z_tick_sleep+0x8e>
	return 0;
   1fd0c:	2000      	movs	r0, #0
}
   1fd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1fd12:	f7ff ff7b 	bl	1fc0c <z_impl_k_yield>
		return 0;
   1fd16:	2000      	movs	r0, #0
   1fd18:	e7f9      	b.n	1fd0e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1fd1a:	f006 fc51 	bl	265c0 <sys_clock_tick_get_32>
   1fd1e:	1906      	adds	r6, r0, r4
   1fd20:	e7cd      	b.n	1fcbe <z_tick_sleep+0x2a>
		return ticks;
   1fd22:	4620      	mov	r0, r4
   1fd24:	e7f3      	b.n	1fd0e <z_tick_sleep+0x7a>
   1fd26:	bf00      	nop
   1fd28:	2000f8a0 	.word	0x2000f8a0
   1fd2c:	2000f8d8 	.word	0x2000f8d8
   1fd30:	0002629b 	.word	0x0002629b

0001fd34 <z_impl_k_sleep>:
{
   1fd34:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fd36:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1fd3a:	bf08      	it	eq
   1fd3c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1fd40:	d01a      	beq.n	1fd78 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1fd42:	f7ff ffa7 	bl	1fc94 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1fd46:	4604      	mov	r4, r0
   1fd48:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   1fd4a:	0169      	lsls	r1, r5, #5
   1fd4c:	0143      	lsls	r3, r0, #5
   1fd4e:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1fd52:	1a18      	subs	r0, r3, r0
   1fd54:	eb62 0305 	sbc.w	r3, r2, r5
   1fd58:	009a      	lsls	r2, r3, #2
   1fd5a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   1fd5e:	0081      	lsls	r1, r0, #2
   1fd60:	4613      	mov	r3, r2
   1fd62:	1908      	adds	r0, r1, r4
   1fd64:	eb45 0303 	adc.w	r3, r5, r3
   1fd68:	00da      	lsls	r2, r3, #3
   1fd6a:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   1fd6e:	00c1      	lsls	r1, r0, #3
   1fd70:	0bc8      	lsrs	r0, r1, #15
   1fd72:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1fd76:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   1fd78:	4b03      	ldr	r3, [pc, #12]	; (1fd88 <z_impl_k_sleep+0x54>)
   1fd7a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1fd7c:	f7ff fe84 	bl	1fa88 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1fd80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fd84:	e7f7      	b.n	1fd76 <z_impl_k_sleep+0x42>
   1fd86:	bf00      	nop
   1fd88:	2000f8a0 	.word	0x2000f8a0

0001fd8c <z_impl_z_current_get>:
}
   1fd8c:	4b01      	ldr	r3, [pc, #4]	; (1fd94 <z_impl_z_current_get+0x8>)
   1fd8e:	6898      	ldr	r0, [r3, #8]
   1fd90:	4770      	bx	lr
   1fd92:	bf00      	nop
   1fd94:	2000f8a0 	.word	0x2000f8a0

0001fd98 <z_impl_k_is_preempt_thread>:
   1fd98:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   1fd9c:	b933      	cbnz	r3, 1fdac <z_impl_k_is_preempt_thread+0x14>
   1fd9e:	4b05      	ldr	r3, [pc, #20]	; (1fdb4 <z_impl_k_is_preempt_thread+0x1c>)
   1fda0:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1fda2:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   1fda4:	2b7f      	cmp	r3, #127	; 0x7f
   1fda6:	d803      	bhi.n	1fdb0 <z_impl_k_is_preempt_thread+0x18>
   1fda8:	2001      	movs	r0, #1
   1fdaa:	4770      	bx	lr
   1fdac:	2000      	movs	r0, #0
   1fdae:	4770      	bx	lr
   1fdb0:	2000      	movs	r0, #0
}
   1fdb2:	4770      	bx	lr
   1fdb4:	2000f8a0 	.word	0x2000f8a0

0001fdb8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1fdb8:	b538      	push	{r3, r4, r5, lr}
   1fdba:	f04f 0320 	mov.w	r3, #32
   1fdbe:	f3ef 8511 	mrs	r5, BASEPRI
   1fdc2:	f383 8812 	msr	BASEPRI_MAX, r3
   1fdc6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1fdca:	7b43      	ldrb	r3, [r0, #13]
   1fdcc:	f013 0f08 	tst.w	r3, #8
   1fdd0:	d004      	beq.n	1fddc <z_thread_abort+0x24>
	__asm__ volatile(
   1fdd2:	f385 8811 	msr	BASEPRI, r5
   1fdd6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1fdda:	bd38      	pop	{r3, r4, r5, pc}
   1fddc:	4604      	mov	r4, r0
	end_thread(thread);
   1fdde:	f7ff febb 	bl	1fb58 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1fde2:	4b08      	ldr	r3, [pc, #32]	; (1fe04 <z_thread_abort+0x4c>)
   1fde4:	689b      	ldr	r3, [r3, #8]
   1fde6:	42a3      	cmp	r3, r4
   1fde8:	d004      	beq.n	1fdf4 <z_thread_abort+0x3c>
   1fdea:	f385 8811 	msr	BASEPRI, r5
   1fdee:	f3bf 8f6f 	isb	sy
   1fdf2:	e7f2      	b.n	1fdda <z_thread_abort+0x22>
   1fdf4:	f3ef 8305 	mrs	r3, IPSR
   1fdf8:	2b00      	cmp	r3, #0
   1fdfa:	d1f6      	bne.n	1fdea <z_thread_abort+0x32>
   1fdfc:	4628      	mov	r0, r5
   1fdfe:	f7f4 f8a3 	bl	13f48 <arch_swap>
	return ret;
   1fe02:	e7f2      	b.n	1fdea <z_thread_abort+0x32>
   1fe04:	2000f8a0 	.word	0x2000f8a0

0001fe08 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1fe08:	b5d0      	push	{r4, r6, r7, lr}
   1fe0a:	b082      	sub	sp, #8
   1fe0c:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1fe0e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1fe12:	e9cd 6700 	strd	r6, r7, [sp]
   1fe16:	f7ff fdc3 	bl	1f9a0 <z_pend_curr>

	if (data != NULL) {
   1fe1a:	b11c      	cbz	r4, 1fe24 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   1fe1c:	4b02      	ldr	r3, [pc, #8]	; (1fe28 <z_sched_wait+0x20>)
   1fe1e:	689b      	ldr	r3, [r3, #8]
   1fe20:	695b      	ldr	r3, [r3, #20]
   1fe22:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1fe24:	b002      	add	sp, #8
   1fe26:	bdd0      	pop	{r4, r6, r7, pc}
   1fe28:	2000f8a0 	.word	0x2000f8a0

0001fe2c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1fe2c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1fe2e:	4806      	ldr	r0, [pc, #24]	; (1fe48 <z_data_copy+0x1c>)
   1fe30:	4a06      	ldr	r2, [pc, #24]	; (1fe4c <z_data_copy+0x20>)
   1fe32:	1a12      	subs	r2, r2, r0
   1fe34:	4906      	ldr	r1, [pc, #24]	; (1fe50 <z_data_copy+0x24>)
   1fe36:	f006 fd04 	bl	26842 <memcpy>
   1fe3a:	4a06      	ldr	r2, [pc, #24]	; (1fe54 <z_data_copy+0x28>)
   1fe3c:	4906      	ldr	r1, [pc, #24]	; (1fe58 <z_data_copy+0x2c>)
   1fe3e:	4807      	ldr	r0, [pc, #28]	; (1fe5c <z_data_copy+0x30>)
   1fe40:	f006 fcff 	bl	26842 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1fe44:	bd08      	pop	{r3, pc}
   1fe46:	bf00      	nop
   1fe48:	2000c500 	.word	0x2000c500
   1fe4c:	2000c914 	.word	0x2000c914
   1fe50:	0002a504 	.word	0x0002a504
   1fe54:	00000000 	.word	0x00000000
   1fe58:	0002a4ec 	.word	0x0002a4ec
   1fe5c:	2000c500 	.word	0x2000c500

0001fe60 <first>:
	return list->head == list;
   1fe60:	4b03      	ldr	r3, [pc, #12]	; (1fe70 <first+0x10>)
   1fe62:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fe64:	4298      	cmp	r0, r3
   1fe66:	d000      	beq.n	1fe6a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1fe68:	4770      	bx	lr
   1fe6a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1fe6c:	e7fc      	b.n	1fe68 <first+0x8>
   1fe6e:	bf00      	nop
   1fe70:	2000c690 	.word	0x2000c690

0001fe74 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fe74:	b130      	cbz	r0, 1fe84 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1fe76:	4a04      	ldr	r2, [pc, #16]	; (1fe88 <next+0x14>)
   1fe78:	6852      	ldr	r2, [r2, #4]
   1fe7a:	4290      	cmp	r0, r2
   1fe7c:	d001      	beq.n	1fe82 <next+0xe>
   1fe7e:	6800      	ldr	r0, [r0, #0]
   1fe80:	4770      	bx	lr
   1fe82:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1fe84:	4770      	bx	lr
   1fe86:	bf00      	nop
   1fe88:	2000c690 	.word	0x2000c690

0001fe8c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1fe8c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1fe8e:	4b04      	ldr	r3, [pc, #16]	; (1fea0 <elapsed+0x14>)
   1fe90:	681b      	ldr	r3, [r3, #0]
   1fe92:	b10b      	cbz	r3, 1fe98 <elapsed+0xc>
   1fe94:	2000      	movs	r0, #0
}
   1fe96:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1fe98:	f7f6 fab6 	bl	16408 <sys_clock_elapsed>
   1fe9c:	e7fb      	b.n	1fe96 <elapsed+0xa>
   1fe9e:	bf00      	nop
   1fea0:	2000f8e4 	.word	0x2000f8e4

0001fea4 <next_timeout>:

static int32_t next_timeout(void)
{
   1fea4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1fea6:	f7ff ffdb 	bl	1fe60 <first>
   1feaa:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1feac:	f7ff ffee 	bl	1fe8c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1feb0:	b18c      	cbz	r4, 1fed6 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1feb2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1feb6:	1a12      	subs	r2, r2, r0
   1feb8:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1febc:	2a01      	cmp	r2, #1
   1febe:	f173 0100 	sbcs.w	r1, r3, #0
   1fec2:	db11      	blt.n	1fee8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1fec4:	4610      	mov	r0, r2
   1fec6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1feca:	f173 0300 	sbcs.w	r3, r3, #0
   1fece:	db04      	blt.n	1feda <next_timeout+0x36>
   1fed0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1fed4:	e001      	b.n	1feda <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1fed6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1feda:	4b04      	ldr	r3, [pc, #16]	; (1feec <next_timeout+0x48>)
   1fedc:	691b      	ldr	r3, [r3, #16]
   1fede:	b113      	cbz	r3, 1fee6 <next_timeout+0x42>
   1fee0:	4283      	cmp	r3, r0
   1fee2:	da00      	bge.n	1fee6 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   1fee4:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1fee6:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1fee8:	2000      	movs	r0, #0
   1feea:	e7f6      	b.n	1feda <next_timeout+0x36>
   1feec:	2000f8a0 	.word	0x2000f8a0

0001fef0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fef4:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1fefa:	bf08      	it	eq
   1fefc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1ff00:	f000 8096 	beq.w	20030 <z_add_timeout+0x140>
   1ff04:	4682      	mov	sl, r0
   1ff06:	4614      	mov	r4, r2
   1ff08:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1ff0a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1ff0c:	2300      	movs	r3, #0
	__asm__ volatile(
   1ff0e:	f04f 0220 	mov.w	r2, #32
   1ff12:	f3ef 8b11 	mrs	fp, BASEPRI
   1ff16:	f382 8812 	msr	BASEPRI_MAX, r2
   1ff1a:	f3bf 8f6f 	isb	sy
   1ff1e:	e02e      	b.n	1ff7e <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   1ff20:	2201      	movs	r2, #1
   1ff22:	2300      	movs	r3, #0
   1ff24:	e04b      	b.n	1ffbe <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1ff26:	f7ff ffb1 	bl	1fe8c <elapsed>
   1ff2a:	1822      	adds	r2, r4, r0
   1ff2c:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   1ff30:	3201      	adds	r2, #1
   1ff32:	f143 0300 	adc.w	r3, r3, #0
   1ff36:	f8ca 2010 	str.w	r2, [sl, #16]
   1ff3a:	f8ca 3014 	str.w	r3, [sl, #20]
   1ff3e:	e042      	b.n	1ffc6 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1ff40:	9b00      	ldr	r3, [sp, #0]
   1ff42:	1ac2      	subs	r2, r0, r3
   1ff44:	9b01      	ldr	r3, [sp, #4]
   1ff46:	eb61 0303 	sbc.w	r3, r1, r3
   1ff4a:	f8cc 2010 	str.w	r2, [ip, #16]
   1ff4e:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1ff52:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1ff56:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   1ff5a:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   1ff5e:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1ff62:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1ff66:	f1bc 0f00 	cmp.w	ip, #0
   1ff6a:	d049      	beq.n	20000 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1ff6c:	f7ff ff78 	bl	1fe60 <first>
   1ff70:	4582      	cmp	sl, r0
   1ff72:	d050      	beq.n	20016 <z_add_timeout+0x126>
	__asm__ volatile(
   1ff74:	f38b 8811 	msr	BASEPRI, fp
   1ff78:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1ff7c:	2301      	movs	r3, #1
   1ff7e:	2b00      	cmp	r3, #0
   1ff80:	d156      	bne.n	20030 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1ff82:	f06f 0301 	mvn.w	r3, #1
   1ff86:	ebb3 0804 	subs.w	r8, r3, r4
   1ff8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ff8e:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1ff92:	f1b8 0f00 	cmp.w	r8, #0
   1ff96:	f179 0300 	sbcs.w	r3, r9, #0
   1ff9a:	dbc4      	blt.n	1ff26 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1ff9c:	4a26      	ldr	r2, [pc, #152]	; (20038 <z_add_timeout+0x148>)
   1ff9e:	6813      	ldr	r3, [r2, #0]
   1ffa0:	6852      	ldr	r2, [r2, #4]
   1ffa2:	18e3      	adds	r3, r4, r3
   1ffa4:	eb45 0202 	adc.w	r2, r5, r2
   1ffa8:	f06f 0101 	mvn.w	r1, #1
   1ffac:	1ace      	subs	r6, r1, r3
   1ffae:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   1ffb2:	4632      	mov	r2, r6
   1ffb4:	463b      	mov	r3, r7
   1ffb6:	2e01      	cmp	r6, #1
   1ffb8:	f177 0100 	sbcs.w	r1, r7, #0
   1ffbc:	dbb0      	blt.n	1ff20 <z_add_timeout+0x30>
   1ffbe:	f8ca 2010 	str.w	r2, [sl, #16]
   1ffc2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1ffc6:	f7ff ff4b 	bl	1fe60 <first>
   1ffca:	4684      	mov	ip, r0
   1ffcc:	f1bc 0f00 	cmp.w	ip, #0
   1ffd0:	d0c9      	beq.n	1ff66 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   1ffd2:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   1ffd6:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   1ffda:	e9cd 2300 	strd	r2, r3, [sp]
   1ffde:	4282      	cmp	r2, r0
   1ffe0:	418b      	sbcs	r3, r1
   1ffe2:	dbad      	blt.n	1ff40 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   1ffe4:	9b00      	ldr	r3, [sp, #0]
   1ffe6:	1a1a      	subs	r2, r3, r0
   1ffe8:	9b01      	ldr	r3, [sp, #4]
   1ffea:	eb63 0301 	sbc.w	r3, r3, r1
   1ffee:	f8ca 2010 	str.w	r2, [sl, #16]
   1fff2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1fff6:	4660      	mov	r0, ip
   1fff8:	f7ff ff3c 	bl	1fe74 <next>
   1fffc:	4684      	mov	ip, r0
   1fffe:	e7e5      	b.n	1ffcc <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   20000:	4b0e      	ldr	r3, [pc, #56]	; (2003c <z_add_timeout+0x14c>)
   20002:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   20004:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   20008:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   2000c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   20010:	f8c3 a004 	str.w	sl, [r3, #4]
}
   20014:	e7aa      	b.n	1ff6c <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   20016:	f7ff ff45 	bl	1fea4 <next_timeout>

			if (next_time == 0 ||
   2001a:	4603      	mov	r3, r0
   2001c:	b118      	cbz	r0, 20026 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   2001e:	4a08      	ldr	r2, [pc, #32]	; (20040 <z_add_timeout+0x150>)
   20020:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   20022:	4282      	cmp	r2, r0
   20024:	d0a6      	beq.n	1ff74 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   20026:	2100      	movs	r1, #0
   20028:	4618      	mov	r0, r3
   2002a:	f7f6 f9b9 	bl	163a0 <sys_clock_set_timeout>
   2002e:	e7a1      	b.n	1ff74 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   20030:	b003      	add	sp, #12
   20032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20036:	bf00      	nop
   20038:	2000d790 	.word	0x2000d790
   2003c:	2000c690 	.word	0x2000c690
   20040:	2000f8a0 	.word	0x2000f8a0

00020044 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   20044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20046:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20048:	f7ff fbe4 	bl	1f814 <z_time_slice>
	__asm__ volatile(
   2004c:	f04f 0320 	mov.w	r3, #32
   20050:	f3ef 8511 	mrs	r5, BASEPRI
   20054:	f383 8812 	msr	BASEPRI_MAX, r3
   20058:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2005c:	4b28      	ldr	r3, [pc, #160]	; (20100 <sys_clock_announce+0xbc>)
   2005e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   20060:	f7ff fefe 	bl	1fe60 <first>
   20064:	4604      	mov	r4, r0
   20066:	b350      	cbz	r0, 200be <sys_clock_announce+0x7a>
   20068:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   2006c:	4b24      	ldr	r3, [pc, #144]	; (20100 <sys_clock_announce+0xbc>)
   2006e:	681b      	ldr	r3, [r3, #0]
   20070:	17d9      	asrs	r1, r3, #31
   20072:	42b3      	cmp	r3, r6
   20074:	eb71 0207 	sbcs.w	r2, r1, r7
   20078:	db21      	blt.n	200be <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2007a:	4a22      	ldr	r2, [pc, #136]	; (20104 <sys_clock_announce+0xc0>)
   2007c:	e9d2 0100 	ldrd	r0, r1, [r2]
   20080:	1980      	adds	r0, r0, r6
   20082:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   20086:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   2008a:	1b9b      	subs	r3, r3, r6
   2008c:	4a1c      	ldr	r2, [pc, #112]	; (20100 <sys_clock_announce+0xbc>)
   2008e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   20090:	2200      	movs	r2, #0
   20092:	2300      	movs	r3, #0
   20094:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   20098:	4620      	mov	r0, r4
   2009a:	f006 fa1b 	bl	264d4 <remove_timeout>
	__asm__ volatile(
   2009e:	f385 8811 	msr	BASEPRI, r5
   200a2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   200a6:	68a3      	ldr	r3, [r4, #8]
   200a8:	4620      	mov	r0, r4
   200aa:	4798      	blx	r3
	__asm__ volatile(
   200ac:	f04f 0320 	mov.w	r3, #32
   200b0:	f3ef 8511 	mrs	r5, BASEPRI
   200b4:	f383 8812 	msr	BASEPRI_MAX, r3
   200b8:	f3bf 8f6f 	isb	sy
   200bc:	e7d0      	b.n	20060 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   200be:	b144      	cbz	r4, 200d2 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   200c0:	4b0f      	ldr	r3, [pc, #60]	; (20100 <sys_clock_announce+0xbc>)
   200c2:	6819      	ldr	r1, [r3, #0]
   200c4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   200c8:	1a52      	subs	r2, r2, r1
   200ca:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   200ce:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   200d2:	480c      	ldr	r0, [pc, #48]	; (20104 <sys_clock_announce+0xc0>)
   200d4:	490a      	ldr	r1, [pc, #40]	; (20100 <sys_clock_announce+0xbc>)
   200d6:	680c      	ldr	r4, [r1, #0]
   200d8:	e9d0 2300 	ldrd	r2, r3, [r0]
   200dc:	1912      	adds	r2, r2, r4
   200de:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   200e2:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   200e6:	2400      	movs	r4, #0
   200e8:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   200ea:	f7ff fedb 	bl	1fea4 <next_timeout>
   200ee:	4621      	mov	r1, r4
   200f0:	f7f6 f956 	bl	163a0 <sys_clock_set_timeout>
	__asm__ volatile(
   200f4:	f385 8811 	msr	BASEPRI, r5
   200f8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   200fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   200fe:	bf00      	nop
   20100:	2000f8e4 	.word	0x2000f8e4
   20104:	2000d790 	.word	0x2000d790

00020108 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   20108:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   2010a:	2100      	movs	r1, #0
	__asm__ volatile(
   2010c:	f04f 0320 	mov.w	r3, #32
   20110:	f3ef 8411 	mrs	r4, BASEPRI
   20114:	f383 8812 	msr	BASEPRI_MAX, r3
   20118:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   2011c:	2200      	movs	r2, #0
   2011e:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   20120:	b969      	cbnz	r1, 2013e <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   20122:	f7f6 f971 	bl	16408 <sys_clock_elapsed>
   20126:	4b07      	ldr	r3, [pc, #28]	; (20144 <sys_clock_tick_get+0x3c>)
   20128:	e9d3 2300 	ldrd	r2, r3, [r3]
   2012c:	1812      	adds	r2, r2, r0
   2012e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   20132:	f384 8811 	msr	BASEPRI, r4
   20136:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2013a:	2101      	movs	r1, #1
   2013c:	e7f0      	b.n	20120 <sys_clock_tick_get+0x18>
	}
	return t;
}
   2013e:	4610      	mov	r0, r2
   20140:	4619      	mov	r1, r3
   20142:	bd10      	pop	{r4, pc}
   20144:	2000d790 	.word	0x2000d790

00020148 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   20148:	b570      	push	{r4, r5, r6, lr}
   2014a:	4604      	mov	r4, r0
	__asm__ volatile(
   2014c:	f04f 0320 	mov.w	r3, #32
   20150:	f3ef 8611 	mrs	r6, BASEPRI
   20154:	f383 8812 	msr	BASEPRI_MAX, r3
   20158:	f3bf 8f6f 	isb	sy
   2015c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2015e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   20162:	ea52 0103 	orrs.w	r1, r2, r3
   20166:	d005      	beq.n	20174 <z_timer_expiration_handler+0x2c>
   20168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2016c:	bf08      	it	eq
   2016e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   20172:	d127      	bne.n	201c4 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20174:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20176:	3301      	adds	r3, #1
   20178:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2017a:	6a23      	ldr	r3, [r4, #32]
   2017c:	b173      	cbz	r3, 2019c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   2017e:	f386 8811 	msr	BASEPRI, r6
   20182:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   20186:	6a23      	ldr	r3, [r4, #32]
   20188:	4620      	mov	r0, r4
   2018a:	4798      	blx	r3
	__asm__ volatile(
   2018c:	f04f 0320 	mov.w	r3, #32
   20190:	f3ef 8511 	mrs	r5, BASEPRI
   20194:	f383 8812 	msr	BASEPRI_MAX, r3
   20198:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2019c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   201a0:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   201a2:	42a3      	cmp	r3, r4
   201a4:	d012      	beq.n	201cc <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   201a6:	b18c      	cbz	r4, 201cc <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   201a8:	4620      	mov	r0, r4
   201aa:	f005 fff4 	bl	26196 <z_unpend_thread_no_timeout>
   201ae:	2300      	movs	r3, #0
   201b0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   201b4:	f385 8811 	msr	BASEPRI, r5
   201b8:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   201bc:	4620      	mov	r0, r4
   201be:	f006 f850 	bl	26262 <z_ready_thread>
}
   201c2:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   201c4:	4904      	ldr	r1, [pc, #16]	; (201d8 <z_timer_expiration_handler+0x90>)
   201c6:	f7ff fe93 	bl	1fef0 <z_add_timeout>
   201ca:	e7d3      	b.n	20174 <z_timer_expiration_handler+0x2c>
   201cc:	f385 8811 	msr	BASEPRI, r5
   201d0:	f3bf 8f6f 	isb	sy
		return;
   201d4:	e7f5      	b.n	201c2 <z_timer_expiration_handler+0x7a>
   201d6:	bf00      	nop
   201d8:	00020149 	.word	0x00020149

000201dc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   201dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201e0:	b087      	sub	sp, #28
   201e2:	4614      	mov	r4, r2
   201e4:	461d      	mov	r5, r3
   201e6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   201ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   201ee:	bf08      	it	eq
   201f0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   201f4:	d035      	beq.n	20262 <z_impl_k_timer_start+0x86>
   201f6:	4606      	mov	r6, r0
   201f8:	4613      	mov	r3, r2
   201fa:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   201fc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   20200:	bf08      	it	eq
   20202:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
   20206:	d012      	beq.n	2022e <z_impl_k_timer_start+0x52>
   20208:	ea58 0109 	orrs.w	r1, r8, r9
   2020c:	d00f      	beq.n	2022e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   2020e:	f06f 0701 	mvn.w	r7, #1
   20212:	ebb7 0708 	subs.w	r7, r7, r8
   20216:	9702      	str	r7, [sp, #8]
   20218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2021c:	eb61 0709 	sbc.w	r7, r1, r9
   20220:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   20222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20226:	2800      	cmp	r0, #0
   20228:	f171 0100 	sbcs.w	r1, r1, #0
   2022c:	db1c      	blt.n	20268 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2022e:	f06f 0101 	mvn.w	r1, #1
   20232:	ebb1 0a03 	subs.w	sl, r1, r3
   20236:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2023a:	eb61 0b02 	sbc.w	fp, r1, r2
   2023e:	f1ba 0f00 	cmp.w	sl, #0
   20242:	f17b 0100 	sbcs.w	r1, fp, #0
   20246:	db23      	blt.n	20290 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   20248:	4630      	mov	r0, r6
   2024a:	f006 f95a 	bl	26502 <z_abort_timeout>
	timer->period = period;
   2024e:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   20252:	2300      	movs	r3, #0
   20254:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20256:	4622      	mov	r2, r4
   20258:	462b      	mov	r3, r5
   2025a:	4917      	ldr	r1, [pc, #92]	; (202b8 <z_impl_k_timer_start+0xdc>)
   2025c:	4630      	mov	r0, r6
   2025e:	f7ff fe47 	bl	1fef0 <z_add_timeout>
		     duration);
}
   20262:	b007      	add	sp, #28
   20264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   20268:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
   2026c:	9104      	str	r1, [sp, #16]
   2026e:	f149 31ff 	adc.w	r1, r9, #4294967295	; 0xffffffff
   20272:	9105      	str	r1, [sp, #20]
   20274:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   20278:	4638      	mov	r0, r7
   2027a:	4641      	mov	r1, r8
   2027c:	2f01      	cmp	r7, #1
   2027e:	f178 0700 	sbcs.w	r7, r8, #0
   20282:	db02      	blt.n	2028a <z_impl_k_timer_start+0xae>
   20284:	4680      	mov	r8, r0
   20286:	4689      	mov	r9, r1
   20288:	e7d1      	b.n	2022e <z_impl_k_timer_start+0x52>
   2028a:	2001      	movs	r0, #1
   2028c:	2100      	movs	r1, #0
   2028e:	e7f9      	b.n	20284 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   20290:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   20294:	9300      	str	r3, [sp, #0]
   20296:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   2029a:	9301      	str	r3, [sp, #4]
   2029c:	e9dd 0100 	ldrd	r0, r1, [sp]
   202a0:	4602      	mov	r2, r0
   202a2:	460b      	mov	r3, r1
   202a4:	2800      	cmp	r0, #0
   202a6:	f171 0100 	sbcs.w	r1, r1, #0
   202aa:	db02      	blt.n	202b2 <z_impl_k_timer_start+0xd6>
   202ac:	4614      	mov	r4, r2
   202ae:	461d      	mov	r5, r3
   202b0:	e7ca      	b.n	20248 <z_impl_k_timer_start+0x6c>
   202b2:	2200      	movs	r2, #0
   202b4:	4613      	mov	r3, r2
   202b6:	e7f9      	b.n	202ac <z_impl_k_timer_start+0xd0>
   202b8:	00020149 	.word	0x00020149

000202bc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   202bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202c0:	b08d      	sub	sp, #52	; 0x34
   202c2:	4605      	mov	r5, r0
   202c4:	9107      	str	r1, [sp, #28]
   202c6:	9202      	str	r2, [sp, #8]
   202c8:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   202ca:	4ba4      	ldr	r3, [pc, #656]	; (2055c <z_impl_k_poll+0x2a0>)
   202cc:	f8d3 9008 	ldr.w	r9, [r3, #8]
   202d0:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   202d4:	2301      	movs	r3, #1
   202d6:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   202da:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   202de:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   202e2:	4613      	mov	r3, r2
   202e4:	430b      	orrs	r3, r1
   202e6:	bf0c      	ite	eq
   202e8:	2301      	moveq	r3, #1
   202ea:	2300      	movne	r3, #0
   202ec:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   202ee:	2600      	movs	r6, #0
	int events_registered = 0;
   202f0:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   202f2:	e02e      	b.n	20352 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   202f4:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   202f6:	689b      	ldr	r3, [r3, #8]
   202f8:	b1c3      	cbz	r3, 2032c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   202fa:	2302      	movs	r3, #2
   202fc:	9305      	str	r3, [sp, #20]
			return true;
   202fe:	2301      	movs	r3, #1
   20300:	e014      	b.n	2032c <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   20302:	6923      	ldr	r3, [r4, #16]
	return list->head;
   20304:	681b      	ldr	r3, [r3, #0]
   20306:	b18b      	cbz	r3, 2032c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   20308:	2304      	movs	r3, #4
   2030a:	9305      	str	r3, [sp, #20]
			return true;
   2030c:	2301      	movs	r3, #1
   2030e:	e00d      	b.n	2032c <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   20310:	6923      	ldr	r3, [r4, #16]
   20312:	689b      	ldr	r3, [r3, #8]
   20314:	b153      	cbz	r3, 2032c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   20316:	2301      	movs	r3, #1
   20318:	9305      	str	r3, [sp, #20]
   2031a:	e007      	b.n	2032c <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   2031c:	6923      	ldr	r3, [r4, #16]
   2031e:	6a1b      	ldr	r3, [r3, #32]
   20320:	b123      	cbz	r3, 2032c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   20322:	2310      	movs	r3, #16
   20324:	9305      	str	r3, [sp, #20]
			return true;
   20326:	2301      	movs	r3, #1
   20328:	e000      	b.n	2032c <z_impl_k_poll+0x70>
	switch (event->type) {
   2032a:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   2032c:	2b00      	cmp	r3, #0
   2032e:	d03d      	beq.n	203ac <z_impl_k_poll+0xf0>
	event->poller = NULL;
   20330:	2100      	movs	r1, #0
   20332:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   20334:	68e3      	ldr	r3, [r4, #12]
   20336:	f3c3 3245 	ubfx	r2, r3, #13, #6
   2033a:	9805      	ldr	r0, [sp, #20]
   2033c:	4302      	orrs	r2, r0
   2033e:	f362 3352 	bfi	r3, r2, #13, #6
   20342:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   20344:	7039      	strb	r1, [r7, #0]
   20346:	9b08      	ldr	r3, [sp, #32]
   20348:	f383 8811 	msr	BASEPRI, r3
   2034c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20350:	3601      	adds	r6, #1
   20352:	9b07      	ldr	r3, [sp, #28]
   20354:	42b3      	cmp	r3, r6
   20356:	f340 81bf 	ble.w	206d8 <z_impl_k_poll+0x41c>
	__asm__ volatile(
   2035a:	f04f 0320 	mov.w	r3, #32
   2035e:	f3ef 8211 	mrs	r2, BASEPRI
   20362:	f383 8812 	msr	BASEPRI_MAX, r3
   20366:	f3bf 8f6f 	isb	sy
   2036a:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   2036c:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   20370:	00a3      	lsls	r3, r4, #2
   20372:	9309      	str	r3, [sp, #36]	; 0x24
   20374:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   20378:	7b63      	ldrb	r3, [r4, #13]
   2037a:	f003 031f 	and.w	r3, r3, #31
   2037e:	3b01      	subs	r3, #1
   20380:	2b07      	cmp	r3, #7
   20382:	d8d2      	bhi.n	2032a <z_impl_k_poll+0x6e>
   20384:	a201      	add	r2, pc, #4	; (adr r2, 2038c <z_impl_k_poll+0xd0>)
   20386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2038a:	bf00      	nop
   2038c:	00020311 	.word	0x00020311
   20390:	000202f5 	.word	0x000202f5
   20394:	0002032b 	.word	0x0002032b
   20398:	00020303 	.word	0x00020303
   2039c:	0002032b 	.word	0x0002032b
   203a0:	0002032b 	.word	0x0002032b
   203a4:	0002032b 	.word	0x0002032b
   203a8:	0002031d 	.word	0x0002031d
		} else if (!just_check && poller->is_polling) {
   203ac:	9b06      	ldr	r3, [sp, #24]
   203ae:	2b00      	cmp	r3, #0
   203b0:	d1c9      	bne.n	20346 <z_impl_k_poll+0x8a>
   203b2:	783b      	ldrb	r3, [r7, #0]
   203b4:	2b00      	cmp	r3, #0
   203b6:	d0c6      	beq.n	20346 <z_impl_k_poll+0x8a>
	switch (event->type) {
   203b8:	7b63      	ldrb	r3, [r4, #13]
   203ba:	f003 031f 	and.w	r3, r3, #31
   203be:	3b01      	subs	r3, #1
   203c0:	2b07      	cmp	r3, #7
   203c2:	d846      	bhi.n	20452 <z_impl_k_poll+0x196>
   203c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   203c8:	000800cc 	.word	0x000800cc
   203cc:	006a0045 	.word	0x006a0045
   203d0:	00450045 	.word	0x00450045
   203d4:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   203d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
   203dc:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   203e0:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   203e4:	4598      	cmp	r8, r3
   203e6:	d02b      	beq.n	20440 <z_impl_k_poll+0x184>
   203e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   203ec:	b343      	cbz	r3, 20440 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   203ee:	6898      	ldr	r0, [r3, #8]
   203f0:	f006 f94b 	bl	2668a <poller_thread>
   203f4:	900b      	str	r0, [sp, #44]	; 0x2c
   203f6:	4638      	mov	r0, r7
   203f8:	f006 f947 	bl	2668a <poller_thread>
   203fc:	4601      	mov	r1, r0
   203fe:	900a      	str	r0, [sp, #40]	; 0x28
   20400:	980b      	ldr	r0, [sp, #44]	; 0x2c
   20402:	f005 febe 	bl	26182 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   20406:	2800      	cmp	r0, #0
   20408:	dc1a      	bgt.n	20440 <z_impl_k_poll+0x184>
	return list->head == list;
   2040a:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2040e:	45d0      	cmp	r8, sl
   20410:	d02f      	beq.n	20472 <z_impl_k_poll+0x1b6>
   20412:	4653      	mov	r3, sl
   20414:	46a2      	mov	sl, r4
   20416:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20418:	b38c      	cbz	r4, 2047e <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   2041a:	68a0      	ldr	r0, [r4, #8]
   2041c:	f006 f935 	bl	2668a <poller_thread>
   20420:	4601      	mov	r1, r0
   20422:	980a      	ldr	r0, [sp, #40]	; 0x28
   20424:	f005 fead 	bl	26182 <z_sched_prio_cmp>
   20428:	2800      	cmp	r0, #0
   2042a:	dc16      	bgt.n	2045a <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2042c:	b34c      	cbz	r4, 20482 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   2042e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20432:	429c      	cmp	r4, r3
   20434:	d030      	beq.n	20498 <z_impl_k_poll+0x1dc>
   20436:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20438:	2c00      	cmp	r4, #0
   2043a:	d1ed      	bne.n	20418 <z_impl_k_poll+0x15c>
   2043c:	4654      	mov	r4, sl
   2043e:	e021      	b.n	20484 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   20440:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   20444:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20446:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2044a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2044c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2044e:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   20452:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   20454:	f10b 0b01 	add.w	fp, fp, #1
   20458:	e775      	b.n	20346 <z_impl_k_poll+0x8a>
   2045a:	4623      	mov	r3, r4
   2045c:	4654      	mov	r4, sl
   2045e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   20460:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   20462:	6063      	str	r3, [r4, #4]
	node->next = successor;
   20464:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20466:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2046a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2046c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   20470:	e7ef      	b.n	20452 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20472:	f04f 0a00 	mov.w	sl, #0
   20476:	4653      	mov	r3, sl
   20478:	46a2      	mov	sl, r4
   2047a:	461c      	mov	r4, r3
   2047c:	e7cc      	b.n	20418 <z_impl_k_poll+0x15c>
   2047e:	4654      	mov	r4, sl
   20480:	e000      	b.n	20484 <z_impl_k_poll+0x1c8>
   20482:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   20484:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   20488:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2048a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2048e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   20490:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20492:	f8c8 4004 	str.w	r4, [r8, #4]
}
   20496:	e7dc      	b.n	20452 <z_impl_k_poll+0x196>
   20498:	4654      	mov	r4, sl
   2049a:	e7f3      	b.n	20484 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   2049c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   204a0:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   204a4:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   204a8:	4598      	cmp	r8, r3
   204aa:	d02b      	beq.n	20504 <z_impl_k_poll+0x248>
   204ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   204b0:	b343      	cbz	r3, 20504 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   204b2:	6898      	ldr	r0, [r3, #8]
   204b4:	f006 f8e9 	bl	2668a <poller_thread>
   204b8:	900b      	str	r0, [sp, #44]	; 0x2c
   204ba:	4638      	mov	r0, r7
   204bc:	f006 f8e5 	bl	2668a <poller_thread>
   204c0:	4601      	mov	r1, r0
   204c2:	900a      	str	r0, [sp, #40]	; 0x28
   204c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   204c6:	f005 fe5c 	bl	26182 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   204ca:	2800      	cmp	r0, #0
   204cc:	dc1a      	bgt.n	20504 <z_impl_k_poll+0x248>
	return list->head == list;
   204ce:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   204d2:	45d0      	cmp	r8, sl
   204d4:	d02c      	beq.n	20530 <z_impl_k_poll+0x274>
   204d6:	4653      	mov	r3, sl
   204d8:	46a2      	mov	sl, r4
   204da:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   204dc:	b374      	cbz	r4, 2053c <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   204de:	68a0      	ldr	r0, [r4, #8]
   204e0:	f006 f8d3 	bl	2668a <poller_thread>
   204e4:	4601      	mov	r1, r0
   204e6:	980a      	ldr	r0, [sp, #40]	; 0x28
   204e8:	f005 fe4b 	bl	26182 <z_sched_prio_cmp>
   204ec:	2800      	cmp	r0, #0
   204ee:	dc13      	bgt.n	20518 <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   204f0:	b334      	cbz	r4, 20540 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   204f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   204f6:	429c      	cmp	r4, r3
   204f8:	d02d      	beq.n	20556 <z_impl_k_poll+0x29a>
   204fa:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   204fc:	2c00      	cmp	r4, #0
   204fe:	d1ed      	bne.n	204dc <z_impl_k_poll+0x220>
   20500:	4654      	mov	r4, sl
   20502:	e01e      	b.n	20542 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   20504:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   20508:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2050a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2050e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   20510:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20512:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   20516:	e79c      	b.n	20452 <z_impl_k_poll+0x196>
   20518:	4623      	mov	r3, r4
   2051a:	4654      	mov	r4, sl
   2051c:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   2051e:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   20520:	6063      	str	r3, [r4, #4]
	node->next = successor;
   20522:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20524:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   20528:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2052a:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   2052e:	e790      	b.n	20452 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20530:	f04f 0a00 	mov.w	sl, #0
   20534:	4653      	mov	r3, sl
   20536:	46a2      	mov	sl, r4
   20538:	461c      	mov	r4, r3
   2053a:	e7cf      	b.n	204dc <z_impl_k_poll+0x220>
   2053c:	4654      	mov	r4, sl
   2053e:	e000      	b.n	20542 <z_impl_k_poll+0x286>
   20540:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   20542:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   20546:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20548:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2054c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2054e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20550:	f8c8 4004 	str.w	r4, [r8, #4]
}
   20554:	e77d      	b.n	20452 <z_impl_k_poll+0x196>
   20556:	4654      	mov	r4, sl
   20558:	e7f3      	b.n	20542 <z_impl_k_poll+0x286>
   2055a:	bf00      	nop
   2055c:	2000f8a0 	.word	0x2000f8a0
		add_event(&event->signal->poll_events, event, poller);
   20560:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   20564:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20568:	4598      	cmp	r8, r3
   2056a:	d02b      	beq.n	205c4 <z_impl_k_poll+0x308>
   2056c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   20570:	b343      	cbz	r3, 205c4 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20572:	6898      	ldr	r0, [r3, #8]
   20574:	f006 f889 	bl	2668a <poller_thread>
   20578:	4682      	mov	sl, r0
   2057a:	4638      	mov	r0, r7
   2057c:	f006 f885 	bl	2668a <poller_thread>
   20580:	4601      	mov	r1, r0
   20582:	900a      	str	r0, [sp, #40]	; 0x28
   20584:	4650      	mov	r0, sl
   20586:	f005 fdfc 	bl	26182 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2058a:	2800      	cmp	r0, #0
   2058c:	dc1a      	bgt.n	205c4 <z_impl_k_poll+0x308>
	return list->head == list;
   2058e:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20592:	45d0      	cmp	r8, sl
   20594:	d02c      	beq.n	205f0 <z_impl_k_poll+0x334>
   20596:	4653      	mov	r3, sl
   20598:	46a2      	mov	sl, r4
   2059a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2059c:	b374      	cbz	r4, 205fc <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   2059e:	68a0      	ldr	r0, [r4, #8]
   205a0:	f006 f873 	bl	2668a <poller_thread>
   205a4:	4601      	mov	r1, r0
   205a6:	980a      	ldr	r0, [sp, #40]	; 0x28
   205a8:	f005 fdeb 	bl	26182 <z_sched_prio_cmp>
   205ac:	2800      	cmp	r0, #0
   205ae:	dc13      	bgt.n	205d8 <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   205b0:	b334      	cbz	r4, 20600 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   205b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   205b6:	429c      	cmp	r4, r3
   205b8:	d02d      	beq.n	20616 <z_impl_k_poll+0x35a>
   205ba:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   205bc:	2c00      	cmp	r4, #0
   205be:	d1ed      	bne.n	2059c <z_impl_k_poll+0x2e0>
   205c0:	4654      	mov	r4, sl
   205c2:	e01e      	b.n	20602 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   205c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   205c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   205ca:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   205ce:	6063      	str	r3, [r4, #4]
	tail->next = node;
   205d0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   205d2:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   205d6:	e73c      	b.n	20452 <z_impl_k_poll+0x196>
   205d8:	4623      	mov	r3, r4
   205da:	4654      	mov	r4, sl
   205dc:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   205de:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   205e0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   205e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   205e4:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   205e8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   205ea:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   205ee:	e730      	b.n	20452 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   205f0:	f04f 0a00 	mov.w	sl, #0
   205f4:	4653      	mov	r3, sl
   205f6:	46a2      	mov	sl, r4
   205f8:	461c      	mov	r4, r3
   205fa:	e7cf      	b.n	2059c <z_impl_k_poll+0x2e0>
   205fc:	4654      	mov	r4, sl
   205fe:	e000      	b.n	20602 <z_impl_k_poll+0x346>
   20600:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   20602:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   20606:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20608:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2060c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2060e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20610:	f8c8 4004 	str.w	r4, [r8, #4]
}
   20614:	e71d      	b.n	20452 <z_impl_k_poll+0x196>
   20616:	4654      	mov	r4, sl
   20618:	e7f3      	b.n	20602 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   2061a:	f8d4 a010 	ldr.w	sl, [r4, #16]
   2061e:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   20622:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20626:	4598      	cmp	r8, r3
   20628:	d02b      	beq.n	20682 <z_impl_k_poll+0x3c6>
   2062a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   2062e:	b343      	cbz	r3, 20682 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20630:	6898      	ldr	r0, [r3, #8]
   20632:	f006 f82a 	bl	2668a <poller_thread>
   20636:	900b      	str	r0, [sp, #44]	; 0x2c
   20638:	4638      	mov	r0, r7
   2063a:	f006 f826 	bl	2668a <poller_thread>
   2063e:	4601      	mov	r1, r0
   20640:	900a      	str	r0, [sp, #40]	; 0x28
   20642:	980b      	ldr	r0, [sp, #44]	; 0x2c
   20644:	f005 fd9d 	bl	26182 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   20648:	2800      	cmp	r0, #0
   2064a:	dc1a      	bgt.n	20682 <z_impl_k_poll+0x3c6>
	return list->head == list;
   2064c:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20650:	45d0      	cmp	r8, sl
   20652:	d02c      	beq.n	206ae <z_impl_k_poll+0x3f2>
   20654:	4653      	mov	r3, sl
   20656:	46a2      	mov	sl, r4
   20658:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2065a:	b374      	cbz	r4, 206ba <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2065c:	68a0      	ldr	r0, [r4, #8]
   2065e:	f006 f814 	bl	2668a <poller_thread>
   20662:	4601      	mov	r1, r0
   20664:	980a      	ldr	r0, [sp, #40]	; 0x28
   20666:	f005 fd8c 	bl	26182 <z_sched_prio_cmp>
   2066a:	2800      	cmp	r0, #0
   2066c:	dc13      	bgt.n	20696 <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2066e:	b334      	cbz	r4, 206be <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   20670:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20674:	429c      	cmp	r4, r3
   20676:	d02d      	beq.n	206d4 <z_impl_k_poll+0x418>
   20678:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2067a:	2c00      	cmp	r4, #0
   2067c:	d1ed      	bne.n	2065a <z_impl_k_poll+0x39e>
   2067e:	4654      	mov	r4, sl
   20680:	e01e      	b.n	206c0 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   20682:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   20686:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20688:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2068c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   2068e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20690:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   20694:	e6dd      	b.n	20452 <z_impl_k_poll+0x196>
   20696:	4623      	mov	r3, r4
   20698:	4654      	mov	r4, sl
   2069a:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   2069c:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   2069e:	6063      	str	r3, [r4, #4]
	node->next = successor;
   206a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   206a2:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   206a6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   206a8:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   206ac:	e6d1      	b.n	20452 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   206ae:	f04f 0a00 	mov.w	sl, #0
   206b2:	4653      	mov	r3, sl
   206b4:	46a2      	mov	sl, r4
   206b6:	461c      	mov	r4, r3
   206b8:	e7cf      	b.n	2065a <z_impl_k_poll+0x39e>
   206ba:	4654      	mov	r4, sl
   206bc:	e000      	b.n	206c0 <z_impl_k_poll+0x404>
   206be:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   206c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   206c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   206c6:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   206ca:	6063      	str	r3, [r4, #4]
	tail->next = node;
   206cc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   206ce:	f8c8 4004 	str.w	r4, [r8, #4]
}
   206d2:	e6be      	b.n	20452 <z_impl_k_poll+0x196>
   206d4:	4654      	mov	r4, sl
   206d6:	e7f3      	b.n	206c0 <z_impl_k_poll+0x404>
   206d8:	f04f 0320 	mov.w	r3, #32
   206dc:	f3ef 8111 	mrs	r1, BASEPRI
   206e0:	f383 8812 	msr	BASEPRI_MAX, r3
   206e4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   206e8:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   206ec:	b1cb      	cbz	r3, 20722 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   206ee:	2300      	movs	r3, #0
   206f0:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   206f4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   206f8:	4323      	orrs	r3, r4
   206fa:	d045      	beq.n	20788 <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   206fc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   20700:	e9cd 3400 	strd	r3, r4, [sp]
   20704:	4a3c      	ldr	r2, [pc, #240]	; (207f8 <z_impl_k_poll+0x53c>)
   20706:	483d      	ldr	r0, [pc, #244]	; (207fc <z_impl_k_poll+0x540>)
   20708:	f7ff f94a 	bl	1f9a0 <z_pend_curr>
   2070c:	f04f 0320 	mov.w	r3, #32
   20710:	f3ef 8c11 	mrs	ip, BASEPRI
   20714:	f383 8812 	msr	BASEPRI_MAX, r3
   20718:	f3bf 8f6f 	isb	sy
   2071c:	4661      	mov	r1, ip
	while (num_events--) {
   2071e:	465b      	mov	r3, fp
   20720:	e04e      	b.n	207c0 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   20722:	4608      	mov	r0, r1
	while (num_events--) {
   20724:	465b      	mov	r3, fp
   20726:	e014      	b.n	20752 <z_impl_k_poll+0x496>
	return node->next != NULL;
   20728:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2072a:	b12a      	cbz	r2, 20738 <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   2072c:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   2072e:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   20730:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   20732:	2200      	movs	r2, #0
   20734:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   20736:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   20738:	f380 8811 	msr	BASEPRI, r0
   2073c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20740:	f04f 0320 	mov.w	r3, #32
   20744:	f3ef 8011 	mrs	r0, BASEPRI
   20748:	f383 8812 	msr	BASEPRI_MAX, r3
   2074c:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   20750:	463b      	mov	r3, r7
   20752:	1e5f      	subs	r7, r3, #1
   20754:	b193      	cbz	r3, 2077c <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   20756:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   2075a:	009e      	lsls	r6, r3, #2
   2075c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   20760:	2200      	movs	r2, #0
   20762:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   20764:	7b5a      	ldrb	r2, [r3, #13]
   20766:	f002 021f 	and.w	r2, r2, #31
   2076a:	2a08      	cmp	r2, #8
   2076c:	d8e4      	bhi.n	20738 <z_impl_k_poll+0x47c>
   2076e:	2401      	movs	r4, #1
   20770:	fa04 f202 	lsl.w	r2, r4, r2
   20774:	f412 7f8b 	tst.w	r2, #278	; 0x116
   20778:	d0de      	beq.n	20738 <z_impl_k_poll+0x47c>
   2077a:	e7d5      	b.n	20728 <z_impl_k_poll+0x46c>
	__asm__ volatile(
   2077c:	f381 8811 	msr	BASEPRI, r1
   20780:	f3bf 8f6f 	isb	sy
		return 0;
   20784:	4618      	mov	r0, r3
   20786:	e034      	b.n	207f2 <z_impl_k_poll+0x536>
   20788:	f381 8811 	msr	BASEPRI, r1
   2078c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20790:	f06f 000a 	mvn.w	r0, #10
   20794:	e02d      	b.n	207f2 <z_impl_k_poll+0x536>
	return node->next != NULL;
   20796:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   20798:	b12a      	cbz	r2, 207a6 <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   2079a:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   2079c:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   2079e:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   207a0:	2200      	movs	r2, #0
   207a2:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   207a4:	605a      	str	r2, [r3, #4]
   207a6:	f381 8811 	msr	BASEPRI, r1
   207aa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   207ae:	f04f 0320 	mov.w	r3, #32
   207b2:	f3ef 8111 	mrs	r1, BASEPRI
   207b6:	f383 8812 	msr	BASEPRI_MAX, r3
   207ba:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   207be:	4623      	mov	r3, r4
   207c0:	1e5c      	subs	r4, r3, #1
   207c2:	b193      	cbz	r3, 207ea <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   207c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   207c8:	009f      	lsls	r7, r3, #2
   207ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   207ce:	2200      	movs	r2, #0
   207d0:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   207d2:	7b5a      	ldrb	r2, [r3, #13]
   207d4:	f002 021f 	and.w	r2, r2, #31
   207d8:	2a08      	cmp	r2, #8
   207da:	d8e4      	bhi.n	207a6 <z_impl_k_poll+0x4ea>
   207dc:	2601      	movs	r6, #1
   207de:	fa06 f202 	lsl.w	r2, r6, r2
   207e2:	f412 7f8b 	tst.w	r2, #278	; 0x116
   207e6:	d0de      	beq.n	207a6 <z_impl_k_poll+0x4ea>
   207e8:	e7d5      	b.n	20796 <z_impl_k_poll+0x4da>
	__asm__ volatile(
   207ea:	f38c 8811 	msr	BASEPRI, ip
   207ee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   207f2:	b00d      	add	sp, #52	; 0x34
   207f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207f8:	2000c698 	.word	0x2000c698
   207fc:	2000f8e8 	.word	0x2000f8e8

00020800 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   20800:	b538      	push	{r3, r4, r5, lr}
   20802:	4603      	mov	r3, r0
	__asm__ volatile(
   20804:	f04f 0220 	mov.w	r2, #32
   20808:	f3ef 8511 	mrs	r5, BASEPRI
   2080c:	f382 8812 	msr	BASEPRI_MAX, r2
   20810:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   20814:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   20816:	2201      	movs	r2, #1
   20818:	6082      	str	r2, [r0, #8]
	return list->head == list;
   2081a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2081c:	4283      	cmp	r3, r0
   2081e:	d011      	beq.n	20844 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   20820:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   20822:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   20824:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20826:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20828:	2300      	movs	r3, #0
   2082a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2082c:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   2082e:	b148      	cbz	r0, 20844 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20830:	2101      	movs	r1, #1
   20832:	f005 ff7a 	bl	2672a <signal_poll_event>
   20836:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   20838:	4629      	mov	r1, r5
   2083a:	4805      	ldr	r0, [pc, #20]	; (20850 <z_impl_k_poll_signal_raise+0x50>)
   2083c:	f7fe ff4c 	bl	1f6d8 <z_reschedule>
	return rc;
}
   20840:	4620      	mov	r0, r4
   20842:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20844:	f385 8811 	msr	BASEPRI, r5
   20848:	f3bf 8f6f 	isb	sy
		return 0;
   2084c:	2400      	movs	r4, #0
   2084e:	e7f7      	b.n	20840 <z_impl_k_poll_signal_raise+0x40>
   20850:	2000f8e8 	.word	0x2000f8e8

00020854 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   20854:	b508      	push	{r3, lr}
   20856:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   20858:	4601      	mov	r1, r0
   2085a:	4802      	ldr	r0, [pc, #8]	; (20864 <k_aligned_alloc+0x10>)
   2085c:	f005 ff97 	bl	2678e <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   20860:	bd08      	pop	{r3, pc}
   20862:	bf00      	nop
   20864:	2000c7b4 	.word	0x2000c7b4

00020868 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   20868:	b538      	push	{r3, r4, r5, lr}
   2086a:	4604      	mov	r4, r0
   2086c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2086e:	f005 fa7d 	bl	25d6c <k_is_in_isr>
   20872:	b948      	cbnz	r0, 20888 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   20874:	4b05      	ldr	r3, [pc, #20]	; (2088c <z_thread_aligned_alloc+0x24>)
   20876:	689b      	ldr	r3, [r3, #8]
   20878:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   2087c:	b118      	cbz	r0, 20886 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   2087e:	462a      	mov	r2, r5
   20880:	4621      	mov	r1, r4
   20882:	f005 ff84 	bl	2678e <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   20886:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   20888:	4801      	ldr	r0, [pc, #4]	; (20890 <z_thread_aligned_alloc+0x28>)
   2088a:	e7f7      	b.n	2087c <z_thread_aligned_alloc+0x14>
   2088c:	2000f8a0 	.word	0x2000f8a0
   20890:	2000c7b4 	.word	0x2000c7b4

00020894 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   20894:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   20896:	4a03      	ldr	r2, [pc, #12]	; (208a4 <boot_banner+0x10>)
   20898:	4903      	ldr	r1, [pc, #12]	; (208a8 <boot_banner+0x14>)
   2089a:	4804      	ldr	r0, [pc, #16]	; (208ac <boot_banner+0x18>)
   2089c:	f001 f986 	bl	21bac <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   208a0:	bd08      	pop	{r3, pc}
   208a2:	bf00      	nop
   208a4:	00027660 	.word	0x00027660
   208a8:	0002a22c 	.word	0x0002a22c
   208ac:	0002a23c 	.word	0x0002a23c

000208b0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   208b0:	b510      	push	{r4, lr}
   208b2:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   208b4:	4b08      	ldr	r3, [pc, #32]	; (208d8 <k_sys_work_q_init+0x28>)
   208b6:	9302      	str	r3, [sp, #8]
   208b8:	2400      	movs	r4, #0
   208ba:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   208be:	ab02      	add	r3, sp, #8
   208c0:	9300      	str	r3, [sp, #0]
   208c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   208c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   208ca:	4904      	ldr	r1, [pc, #16]	; (208dc <k_sys_work_q_init+0x2c>)
   208cc:	4804      	ldr	r0, [pc, #16]	; (208e0 <k_sys_work_q_init+0x30>)
   208ce:	f7fe fe53 	bl	1f578 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   208d2:	4620      	mov	r0, r4
   208d4:	b004      	add	sp, #16
   208d6:	bd10      	pop	{r4, pc}
   208d8:	0002a264 	.word	0x0002a264
   208dc:	20012408 	.word	0x20012408
   208e0:	2000d798 	.word	0x2000d798

000208e4 <gmtime_r>:
   208e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   208e8:	e9d0 6700 	ldrd	r6, r7, [r0]
   208ec:	460c      	mov	r4, r1
   208ee:	4a50      	ldr	r2, [pc, #320]	; (20a30 <gmtime_r+0x14c>)
   208f0:	2300      	movs	r3, #0
   208f2:	4630      	mov	r0, r6
   208f4:	4639      	mov	r1, r7
   208f6:	f04f 0805 	mov.w	r8, #5
   208fa:	f7f0 f8bf 	bl	10a7c <__aeabi_ldivmod>
   208fe:	4639      	mov	r1, r7
   20900:	4605      	mov	r5, r0
   20902:	4a4b      	ldr	r2, [pc, #300]	; (20a30 <gmtime_r+0x14c>)
   20904:	4630      	mov	r0, r6
   20906:	2300      	movs	r3, #0
   20908:	f7f0 f8b8 	bl	10a7c <__aeabi_ldivmod>
   2090c:	2a00      	cmp	r2, #0
   2090e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   20912:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   20916:	bfb8      	it	lt
   20918:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   2091c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   20920:	bfae      	itee	ge
   20922:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   20926:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   2092a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   2092e:	f240 176d 	movw	r7, #365	; 0x16d
   20932:	2664      	movs	r6, #100	; 0x64
   20934:	fbb2 f3f1 	udiv	r3, r2, r1
   20938:	fb01 2213 	mls	r2, r1, r3, r2
   2093c:	213c      	movs	r1, #60	; 0x3c
   2093e:	60a3      	str	r3, [r4, #8]
   20940:	fbb2 f3f1 	udiv	r3, r2, r1
   20944:	fb01 2213 	mls	r2, r1, r3, r2
   20948:	493a      	ldr	r1, [pc, #232]	; (20a34 <gmtime_r+0x150>)
   2094a:	6063      	str	r3, [r4, #4]
   2094c:	1cc3      	adds	r3, r0, #3
   2094e:	6022      	str	r2, [r4, #0]
   20950:	2207      	movs	r2, #7
   20952:	fb93 f2f2 	sdiv	r2, r3, r2
   20956:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2095a:	1a9b      	subs	r3, r3, r2
   2095c:	f648 62ac 	movw	r2, #36524	; 0x8eac
   20960:	bf48      	it	mi
   20962:	3307      	addmi	r3, #7
   20964:	2800      	cmp	r0, #0
   20966:	61a3      	str	r3, [r4, #24]
   20968:	bfbb      	ittet	lt
   2096a:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   2096e:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   20972:	fb90 f1f1 	sdivge	r1, r0, r1
   20976:	fb93 f1f1 	sdivlt	r1, r3, r1
   2097a:	4b2f      	ldr	r3, [pc, #188]	; (20a38 <gmtime_r+0x154>)
   2097c:	fb03 0001 	mla	r0, r3, r1, r0
   20980:	fbb0 f2f2 	udiv	r2, r0, r2
   20984:	fbb0 f3fc 	udiv	r3, r0, ip
   20988:	4402      	add	r2, r0
   2098a:	1ad2      	subs	r2, r2, r3
   2098c:	4b2b      	ldr	r3, [pc, #172]	; (20a3c <gmtime_r+0x158>)
   2098e:	fbb0 f3f3 	udiv	r3, r0, r3
   20992:	1ad3      	subs	r3, r2, r3
   20994:	fbb3 f5f7 	udiv	r5, r3, r7
   20998:	fbb3 f3fc 	udiv	r3, r3, ip
   2099c:	fbb5 f2f6 	udiv	r2, r5, r6
   209a0:	1ad3      	subs	r3, r2, r3
   209a2:	4403      	add	r3, r0
   209a4:	2099      	movs	r0, #153	; 0x99
   209a6:	fb07 3315 	mls	r3, r7, r5, r3
   209aa:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   209ae:	f103 0e01 	add.w	lr, r3, #1
   209b2:	f10c 0c02 	add.w	ip, ip, #2
   209b6:	fbbc f7f0 	udiv	r7, ip, r0
   209ba:	4378      	muls	r0, r7
   209bc:	3002      	adds	r0, #2
   209be:	fbb0 f0f8 	udiv	r0, r0, r8
   209c2:	ebae 0000 	sub.w	r0, lr, r0
   209c6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   209ca:	45f4      	cmp	ip, lr
   209cc:	bf94      	ite	ls
   209ce:	f04f 0c02 	movls.w	ip, #2
   209d2:	f06f 0c09 	mvnhi.w	ip, #9
   209d6:	4467      	add	r7, ip
   209d8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   209dc:	fb0c 5101 	mla	r1, ip, r1, r5
   209e0:	2f01      	cmp	r7, #1
   209e2:	bf98      	it	ls
   209e4:	3101      	addls	r1, #1
   209e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   209ea:	d30c      	bcc.n	20a06 <gmtime_r+0x122>
   209ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   209f0:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   209f4:	61e3      	str	r3, [r4, #28]
   209f6:	2300      	movs	r3, #0
   209f8:	60e0      	str	r0, [r4, #12]
   209fa:	4620      	mov	r0, r4
   209fc:	6223      	str	r3, [r4, #32]
   209fe:	e9c4 7104 	strd	r7, r1, [r4, #16]
   20a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20a06:	f015 0f03 	tst.w	r5, #3
   20a0a:	d102      	bne.n	20a12 <gmtime_r+0x12e>
   20a0c:	fb06 5212 	mls	r2, r6, r2, r5
   20a10:	b95a      	cbnz	r2, 20a2a <gmtime_r+0x146>
   20a12:	f44f 76c8 	mov.w	r6, #400	; 0x190
   20a16:	fbb5 f2f6 	udiv	r2, r5, r6
   20a1a:	fb06 5212 	mls	r2, r6, r2, r5
   20a1e:	fab2 f282 	clz	r2, r2
   20a22:	0952      	lsrs	r2, r2, #5
   20a24:	333b      	adds	r3, #59	; 0x3b
   20a26:	4413      	add	r3, r2
   20a28:	e7e2      	b.n	209f0 <gmtime_r+0x10c>
   20a2a:	2201      	movs	r2, #1
   20a2c:	e7fa      	b.n	20a24 <gmtime_r+0x140>
   20a2e:	bf00      	nop
   20a30:	00015180 	.word	0x00015180
   20a34:	00023ab1 	.word	0x00023ab1
   20a38:	fffdc54f 	.word	0xfffdc54f
   20a3c:	00023ab0 	.word	0x00023ab0

00020a40 <_free_r>:
   20a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20a42:	2900      	cmp	r1, #0
   20a44:	d047      	beq.n	20ad6 <_free_r+0x96>
   20a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
   20a4a:	1f0c      	subs	r4, r1, #4
   20a4c:	9001      	str	r0, [sp, #4]
   20a4e:	2b00      	cmp	r3, #0
   20a50:	bfb8      	it	lt
   20a52:	18e4      	addlt	r4, r4, r3
   20a54:	f000 fae4 	bl	21020 <__malloc_lock>
   20a58:	4a20      	ldr	r2, [pc, #128]	; (20adc <_free_r+0x9c>)
   20a5a:	9801      	ldr	r0, [sp, #4]
   20a5c:	6813      	ldr	r3, [r2, #0]
   20a5e:	4615      	mov	r5, r2
   20a60:	b933      	cbnz	r3, 20a70 <_free_r+0x30>
   20a62:	6063      	str	r3, [r4, #4]
   20a64:	6014      	str	r4, [r2, #0]
   20a66:	b003      	add	sp, #12
   20a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20a6c:	f000 bade 	b.w	2102c <__malloc_unlock>
   20a70:	42a3      	cmp	r3, r4
   20a72:	d90b      	bls.n	20a8c <_free_r+0x4c>
   20a74:	6821      	ldr	r1, [r4, #0]
   20a76:	1862      	adds	r2, r4, r1
   20a78:	4293      	cmp	r3, r2
   20a7a:	bf02      	ittt	eq
   20a7c:	681a      	ldreq	r2, [r3, #0]
   20a7e:	685b      	ldreq	r3, [r3, #4]
   20a80:	1852      	addeq	r2, r2, r1
   20a82:	6063      	str	r3, [r4, #4]
   20a84:	bf08      	it	eq
   20a86:	6022      	streq	r2, [r4, #0]
   20a88:	602c      	str	r4, [r5, #0]
   20a8a:	e7ec      	b.n	20a66 <_free_r+0x26>
   20a8c:	461a      	mov	r2, r3
   20a8e:	685b      	ldr	r3, [r3, #4]
   20a90:	b10b      	cbz	r3, 20a96 <_free_r+0x56>
   20a92:	42a3      	cmp	r3, r4
   20a94:	d9fa      	bls.n	20a8c <_free_r+0x4c>
   20a96:	6811      	ldr	r1, [r2, #0]
   20a98:	1855      	adds	r5, r2, r1
   20a9a:	42a5      	cmp	r5, r4
   20a9c:	d10b      	bne.n	20ab6 <_free_r+0x76>
   20a9e:	6824      	ldr	r4, [r4, #0]
   20aa0:	4421      	add	r1, r4
   20aa2:	1854      	adds	r4, r2, r1
   20aa4:	6011      	str	r1, [r2, #0]
   20aa6:	42a3      	cmp	r3, r4
   20aa8:	d1dd      	bne.n	20a66 <_free_r+0x26>
   20aaa:	681c      	ldr	r4, [r3, #0]
   20aac:	685b      	ldr	r3, [r3, #4]
   20aae:	4421      	add	r1, r4
   20ab0:	6053      	str	r3, [r2, #4]
   20ab2:	6011      	str	r1, [r2, #0]
   20ab4:	e7d7      	b.n	20a66 <_free_r+0x26>
   20ab6:	d902      	bls.n	20abe <_free_r+0x7e>
   20ab8:	230c      	movs	r3, #12
   20aba:	6003      	str	r3, [r0, #0]
   20abc:	e7d3      	b.n	20a66 <_free_r+0x26>
   20abe:	6825      	ldr	r5, [r4, #0]
   20ac0:	1961      	adds	r1, r4, r5
   20ac2:	428b      	cmp	r3, r1
   20ac4:	bf02      	ittt	eq
   20ac6:	6819      	ldreq	r1, [r3, #0]
   20ac8:	685b      	ldreq	r3, [r3, #4]
   20aca:	1949      	addeq	r1, r1, r5
   20acc:	6063      	str	r3, [r4, #4]
   20ace:	bf08      	it	eq
   20ad0:	6021      	streq	r1, [r4, #0]
   20ad2:	6054      	str	r4, [r2, #4]
   20ad4:	e7c7      	b.n	20a66 <_free_r+0x26>
   20ad6:	b003      	add	sp, #12
   20ad8:	bd30      	pop	{r4, r5, pc}
   20ada:	bf00      	nop
   20adc:	2000f8e8 	.word	0x2000f8e8

00020ae0 <_malloc_r>:
   20ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20ae2:	1ccd      	adds	r5, r1, #3
   20ae4:	4606      	mov	r6, r0
   20ae6:	f025 0503 	bic.w	r5, r5, #3
   20aea:	3508      	adds	r5, #8
   20aec:	2d0c      	cmp	r5, #12
   20aee:	bf38      	it	cc
   20af0:	250c      	movcc	r5, #12
   20af2:	2d00      	cmp	r5, #0
   20af4:	db01      	blt.n	20afa <_malloc_r+0x1a>
   20af6:	42a9      	cmp	r1, r5
   20af8:	d903      	bls.n	20b02 <_malloc_r+0x22>
   20afa:	230c      	movs	r3, #12
   20afc:	6033      	str	r3, [r6, #0]
   20afe:	2000      	movs	r0, #0
   20b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20b02:	f000 fa8d 	bl	21020 <__malloc_lock>
   20b06:	4921      	ldr	r1, [pc, #132]	; (20b8c <_malloc_r+0xac>)
   20b08:	680a      	ldr	r2, [r1, #0]
   20b0a:	4614      	mov	r4, r2
   20b0c:	b99c      	cbnz	r4, 20b36 <_malloc_r+0x56>
   20b0e:	4f20      	ldr	r7, [pc, #128]	; (20b90 <_malloc_r+0xb0>)
   20b10:	683b      	ldr	r3, [r7, #0]
   20b12:	b923      	cbnz	r3, 20b1e <_malloc_r+0x3e>
   20b14:	4621      	mov	r1, r4
   20b16:	4630      	mov	r0, r6
   20b18:	f000 f83c 	bl	20b94 <_sbrk_r>
   20b1c:	6038      	str	r0, [r7, #0]
   20b1e:	4629      	mov	r1, r5
   20b20:	4630      	mov	r0, r6
   20b22:	f000 f837 	bl	20b94 <_sbrk_r>
   20b26:	1c43      	adds	r3, r0, #1
   20b28:	d123      	bne.n	20b72 <_malloc_r+0x92>
   20b2a:	230c      	movs	r3, #12
   20b2c:	4630      	mov	r0, r6
   20b2e:	6033      	str	r3, [r6, #0]
   20b30:	f000 fa7c 	bl	2102c <__malloc_unlock>
   20b34:	e7e3      	b.n	20afe <_malloc_r+0x1e>
   20b36:	6823      	ldr	r3, [r4, #0]
   20b38:	1b5b      	subs	r3, r3, r5
   20b3a:	d417      	bmi.n	20b6c <_malloc_r+0x8c>
   20b3c:	2b0b      	cmp	r3, #11
   20b3e:	d903      	bls.n	20b48 <_malloc_r+0x68>
   20b40:	6023      	str	r3, [r4, #0]
   20b42:	441c      	add	r4, r3
   20b44:	6025      	str	r5, [r4, #0]
   20b46:	e004      	b.n	20b52 <_malloc_r+0x72>
   20b48:	6863      	ldr	r3, [r4, #4]
   20b4a:	42a2      	cmp	r2, r4
   20b4c:	bf0c      	ite	eq
   20b4e:	600b      	streq	r3, [r1, #0]
   20b50:	6053      	strne	r3, [r2, #4]
   20b52:	4630      	mov	r0, r6
   20b54:	f000 fa6a 	bl	2102c <__malloc_unlock>
   20b58:	f104 000b 	add.w	r0, r4, #11
   20b5c:	1d23      	adds	r3, r4, #4
   20b5e:	f020 0007 	bic.w	r0, r0, #7
   20b62:	1ac2      	subs	r2, r0, r3
   20b64:	d0cc      	beq.n	20b00 <_malloc_r+0x20>
   20b66:	1a1b      	subs	r3, r3, r0
   20b68:	50a3      	str	r3, [r4, r2]
   20b6a:	e7c9      	b.n	20b00 <_malloc_r+0x20>
   20b6c:	4622      	mov	r2, r4
   20b6e:	6864      	ldr	r4, [r4, #4]
   20b70:	e7cc      	b.n	20b0c <_malloc_r+0x2c>
   20b72:	1cc4      	adds	r4, r0, #3
   20b74:	f024 0403 	bic.w	r4, r4, #3
   20b78:	42a0      	cmp	r0, r4
   20b7a:	d0e3      	beq.n	20b44 <_malloc_r+0x64>
   20b7c:	1a21      	subs	r1, r4, r0
   20b7e:	4630      	mov	r0, r6
   20b80:	f000 f808 	bl	20b94 <_sbrk_r>
   20b84:	3001      	adds	r0, #1
   20b86:	d1dd      	bne.n	20b44 <_malloc_r+0x64>
   20b88:	e7cf      	b.n	20b2a <_malloc_r+0x4a>
   20b8a:	bf00      	nop
   20b8c:	2000f8e8 	.word	0x2000f8e8
   20b90:	2000f8ec 	.word	0x2000f8ec

00020b94 <_sbrk_r>:
   20b94:	b538      	push	{r3, r4, r5, lr}
   20b96:	2300      	movs	r3, #0
   20b98:	4d05      	ldr	r5, [pc, #20]	; (20bb0 <_sbrk_r+0x1c>)
   20b9a:	4604      	mov	r4, r0
   20b9c:	4608      	mov	r0, r1
   20b9e:	602b      	str	r3, [r5, #0]
   20ba0:	f7f4 f8f0 	bl	14d84 <_sbrk>
   20ba4:	1c43      	adds	r3, r0, #1
   20ba6:	d102      	bne.n	20bae <_sbrk_r+0x1a>
   20ba8:	682b      	ldr	r3, [r5, #0]
   20baa:	b103      	cbz	r3, 20bae <_sbrk_r+0x1a>
   20bac:	6023      	str	r3, [r4, #0]
   20bae:	bd38      	pop	{r3, r4, r5, pc}
   20bb0:	2000fa44 	.word	0x2000fa44

00020bb4 <sniprintf>:
   20bb4:	b40c      	push	{r2, r3}
   20bb6:	4b18      	ldr	r3, [pc, #96]	; (20c18 <sniprintf+0x64>)
   20bb8:	b530      	push	{r4, r5, lr}
   20bba:	1e0c      	subs	r4, r1, #0
   20bbc:	b09d      	sub	sp, #116	; 0x74
   20bbe:	681d      	ldr	r5, [r3, #0]
   20bc0:	da08      	bge.n	20bd4 <sniprintf+0x20>
   20bc2:	238b      	movs	r3, #139	; 0x8b
   20bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20bc8:	602b      	str	r3, [r5, #0]
   20bca:	b01d      	add	sp, #116	; 0x74
   20bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20bd0:	b002      	add	sp, #8
   20bd2:	4770      	bx	lr
   20bd4:	f44f 7302 	mov.w	r3, #520	; 0x208
   20bd8:	9002      	str	r0, [sp, #8]
   20bda:	9006      	str	r0, [sp, #24]
   20bdc:	a902      	add	r1, sp, #8
   20bde:	f8ad 3014 	strh.w	r3, [sp, #20]
   20be2:	bf14      	ite	ne
   20be4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   20be8:	4623      	moveq	r3, r4
   20bea:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20bec:	4628      	mov	r0, r5
   20bee:	9304      	str	r3, [sp, #16]
   20bf0:	9307      	str	r3, [sp, #28]
   20bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20bf6:	f8ad 3016 	strh.w	r3, [sp, #22]
   20bfa:	ab21      	add	r3, sp, #132	; 0x84
   20bfc:	9301      	str	r3, [sp, #4]
   20bfe:	f000 fa1b 	bl	21038 <_svfiprintf_r>
   20c02:	1c43      	adds	r3, r0, #1
   20c04:	bfbc      	itt	lt
   20c06:	238b      	movlt	r3, #139	; 0x8b
   20c08:	602b      	strlt	r3, [r5, #0]
   20c0a:	2c00      	cmp	r4, #0
   20c0c:	d0dd      	beq.n	20bca <sniprintf+0x16>
   20c0e:	9b02      	ldr	r3, [sp, #8]
   20c10:	2200      	movs	r2, #0
   20c12:	701a      	strb	r2, [r3, #0]
   20c14:	e7d9      	b.n	20bca <sniprintf+0x16>
   20c16:	bf00      	nop
   20c18:	2000c6a0 	.word	0x2000c6a0

00020c1c <_strtol_l.isra.0>:
   20c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20c20:	468c      	mov	ip, r1
   20c22:	4686      	mov	lr, r0
   20c24:	4e38      	ldr	r6, [pc, #224]	; (20d08 <_strtol_l.isra.0+0xec>)
   20c26:	4660      	mov	r0, ip
   20c28:	f81c 4b01 	ldrb.w	r4, [ip], #1
   20c2c:	5da5      	ldrb	r5, [r4, r6]
   20c2e:	f015 0508 	ands.w	r5, r5, #8
   20c32:	d1f8      	bne.n	20c26 <_strtol_l.isra.0+0xa>
   20c34:	2c2d      	cmp	r4, #45	; 0x2d
   20c36:	d133      	bne.n	20ca0 <_strtol_l.isra.0+0x84>
   20c38:	f89c 4000 	ldrb.w	r4, [ip]
   20c3c:	f04f 0801 	mov.w	r8, #1
   20c40:	f100 0c02 	add.w	ip, r0, #2
   20c44:	2b00      	cmp	r3, #0
   20c46:	d05b      	beq.n	20d00 <_strtol_l.isra.0+0xe4>
   20c48:	2b10      	cmp	r3, #16
   20c4a:	d10c      	bne.n	20c66 <_strtol_l.isra.0+0x4a>
   20c4c:	2c30      	cmp	r4, #48	; 0x30
   20c4e:	d10a      	bne.n	20c66 <_strtol_l.isra.0+0x4a>
   20c50:	f89c 0000 	ldrb.w	r0, [ip]
   20c54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   20c58:	2858      	cmp	r0, #88	; 0x58
   20c5a:	d14c      	bne.n	20cf6 <_strtol_l.isra.0+0xda>
   20c5c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   20c60:	2310      	movs	r3, #16
   20c62:	f10c 0c02 	add.w	ip, ip, #2
   20c66:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   20c6a:	2600      	movs	r6, #0
   20c6c:	3f01      	subs	r7, #1
   20c6e:	4630      	mov	r0, r6
   20c70:	fbb7 f9f3 	udiv	r9, r7, r3
   20c74:	fb03 7a19 	mls	sl, r3, r9, r7
   20c78:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   20c7c:	2d09      	cmp	r5, #9
   20c7e:	d817      	bhi.n	20cb0 <_strtol_l.isra.0+0x94>
   20c80:	462c      	mov	r4, r5
   20c82:	42a3      	cmp	r3, r4
   20c84:	dd23      	ble.n	20cce <_strtol_l.isra.0+0xb2>
   20c86:	1c75      	adds	r5, r6, #1
   20c88:	d007      	beq.n	20c9a <_strtol_l.isra.0+0x7e>
   20c8a:	4581      	cmp	r9, r0
   20c8c:	d31c      	bcc.n	20cc8 <_strtol_l.isra.0+0xac>
   20c8e:	d101      	bne.n	20c94 <_strtol_l.isra.0+0x78>
   20c90:	45a2      	cmp	sl, r4
   20c92:	db19      	blt.n	20cc8 <_strtol_l.isra.0+0xac>
   20c94:	fb00 4003 	mla	r0, r0, r3, r4
   20c98:	2601      	movs	r6, #1
   20c9a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   20c9e:	e7eb      	b.n	20c78 <_strtol_l.isra.0+0x5c>
   20ca0:	2c2b      	cmp	r4, #43	; 0x2b
   20ca2:	46a8      	mov	r8, r5
   20ca4:	bf04      	itt	eq
   20ca6:	f89c 4000 	ldrbeq.w	r4, [ip]
   20caa:	f100 0c02 	addeq.w	ip, r0, #2
   20cae:	e7c9      	b.n	20c44 <_strtol_l.isra.0+0x28>
   20cb0:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   20cb4:	2d19      	cmp	r5, #25
   20cb6:	d801      	bhi.n	20cbc <_strtol_l.isra.0+0xa0>
   20cb8:	3c37      	subs	r4, #55	; 0x37
   20cba:	e7e2      	b.n	20c82 <_strtol_l.isra.0+0x66>
   20cbc:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   20cc0:	2d19      	cmp	r5, #25
   20cc2:	d804      	bhi.n	20cce <_strtol_l.isra.0+0xb2>
   20cc4:	3c57      	subs	r4, #87	; 0x57
   20cc6:	e7dc      	b.n	20c82 <_strtol_l.isra.0+0x66>
   20cc8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20ccc:	e7e5      	b.n	20c9a <_strtol_l.isra.0+0x7e>
   20cce:	1c73      	adds	r3, r6, #1
   20cd0:	d106      	bne.n	20ce0 <_strtol_l.isra.0+0xc4>
   20cd2:	2322      	movs	r3, #34	; 0x22
   20cd4:	4638      	mov	r0, r7
   20cd6:	f8ce 3000 	str.w	r3, [lr]
   20cda:	b942      	cbnz	r2, 20cee <_strtol_l.isra.0+0xd2>
   20cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20ce0:	f1b8 0f00 	cmp.w	r8, #0
   20ce4:	d000      	beq.n	20ce8 <_strtol_l.isra.0+0xcc>
   20ce6:	4240      	negs	r0, r0
   20ce8:	2a00      	cmp	r2, #0
   20cea:	d0f7      	beq.n	20cdc <_strtol_l.isra.0+0xc0>
   20cec:	b10e      	cbz	r6, 20cf2 <_strtol_l.isra.0+0xd6>
   20cee:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   20cf2:	6011      	str	r1, [r2, #0]
   20cf4:	e7f2      	b.n	20cdc <_strtol_l.isra.0+0xc0>
   20cf6:	2430      	movs	r4, #48	; 0x30
   20cf8:	2b00      	cmp	r3, #0
   20cfa:	d1b4      	bne.n	20c66 <_strtol_l.isra.0+0x4a>
   20cfc:	2308      	movs	r3, #8
   20cfe:	e7b2      	b.n	20c66 <_strtol_l.isra.0+0x4a>
   20d00:	2c30      	cmp	r4, #48	; 0x30
   20d02:	d0a5      	beq.n	20c50 <_strtol_l.isra.0+0x34>
   20d04:	230a      	movs	r3, #10
   20d06:	e7ae      	b.n	20c66 <_strtol_l.isra.0+0x4a>
   20d08:	0002a397 	.word	0x0002a397

00020d0c <strtol>:
   20d0c:	4613      	mov	r3, r2
   20d0e:	460a      	mov	r2, r1
   20d10:	4601      	mov	r1, r0
   20d12:	4802      	ldr	r0, [pc, #8]	; (20d1c <strtol+0x10>)
   20d14:	6800      	ldr	r0, [r0, #0]
   20d16:	f7ff bf81 	b.w	20c1c <_strtol_l.isra.0>
   20d1a:	bf00      	nop
   20d1c:	2000c6a0 	.word	0x2000c6a0

00020d20 <_strtoll_l.isra.0>:
   20d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d24:	4691      	mov	r9, r2
   20d26:	b087      	sub	sp, #28
   20d28:	4688      	mov	r8, r1
   20d2a:	461f      	mov	r7, r3
   20d2c:	460d      	mov	r5, r1
   20d2e:	4a46      	ldr	r2, [pc, #280]	; (20e48 <_strtoll_l.isra.0+0x128>)
   20d30:	9005      	str	r0, [sp, #20]
   20d32:	462b      	mov	r3, r5
   20d34:	f815 4b01 	ldrb.w	r4, [r5], #1
   20d38:	5ca6      	ldrb	r6, [r4, r2]
   20d3a:	f016 0608 	ands.w	r6, r6, #8
   20d3e:	d1f8      	bne.n	20d32 <_strtoll_l.isra.0+0x12>
   20d40:	2c2d      	cmp	r4, #45	; 0x2d
   20d42:	d148      	bne.n	20dd6 <_strtoll_l.isra.0+0xb6>
   20d44:	782c      	ldrb	r4, [r5, #0]
   20d46:	2601      	movs	r6, #1
   20d48:	1c9d      	adds	r5, r3, #2
   20d4a:	2f00      	cmp	r7, #0
   20d4c:	d078      	beq.n	20e40 <_strtoll_l.isra.0+0x120>
   20d4e:	2f10      	cmp	r7, #16
   20d50:	d109      	bne.n	20d66 <_strtoll_l.isra.0+0x46>
   20d52:	2c30      	cmp	r4, #48	; 0x30
   20d54:	d107      	bne.n	20d66 <_strtoll_l.isra.0+0x46>
   20d56:	782b      	ldrb	r3, [r5, #0]
   20d58:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20d5c:	2b58      	cmp	r3, #88	; 0x58
   20d5e:	d16a      	bne.n	20e36 <_strtoll_l.isra.0+0x116>
   20d60:	786c      	ldrb	r4, [r5, #1]
   20d62:	2710      	movs	r7, #16
   20d64:	3502      	adds	r5, #2
   20d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20d6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   20d6e:	ea4f 7be7 	mov.w	fp, r7, asr #31
   20d72:	46ba      	mov	sl, r7
   20d74:	1990      	adds	r0, r2, r6
   20d76:	463a      	mov	r2, r7
   20d78:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
   20d7c:	465b      	mov	r3, fp
   20d7e:	e9cd 0100 	strd	r0, r1, [sp]
   20d82:	f7ef fecb 	bl	10b1c <__aeabi_uldivmod>
   20d86:	2300      	movs	r3, #0
   20d88:	4696      	mov	lr, r2
   20d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20d8e:	2000      	movs	r0, #0
   20d90:	2100      	movs	r1, #0
   20d92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   20d96:	f1bc 0f09 	cmp.w	ip, #9
   20d9a:	d821      	bhi.n	20de0 <_strtoll_l.isra.0+0xc0>
   20d9c:	4664      	mov	r4, ip
   20d9e:	42a7      	cmp	r7, r4
   20da0:	dd2f      	ble.n	20e02 <_strtoll_l.isra.0+0xe2>
   20da2:	1c5a      	adds	r2, r3, #1
   20da4:	d014      	beq.n	20dd0 <_strtoll_l.isra.0+0xb0>
   20da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20daa:	428b      	cmp	r3, r1
   20dac:	bf08      	it	eq
   20dae:	4282      	cmpeq	r2, r0
   20db0:	d324      	bcc.n	20dfc <_strtoll_l.isra.0+0xdc>
   20db2:	d101      	bne.n	20db8 <_strtoll_l.isra.0+0x98>
   20db4:	45a6      	cmp	lr, r4
   20db6:	db21      	blt.n	20dfc <_strtoll_l.isra.0+0xdc>
   20db8:	fb0a f301 	mul.w	r3, sl, r1
   20dbc:	fb00 330b 	mla	r3, r0, fp, r3
   20dc0:	fbaa 0100 	umull	r0, r1, sl, r0
   20dc4:	4419      	add	r1, r3
   20dc6:	1900      	adds	r0, r0, r4
   20dc8:	f04f 0301 	mov.w	r3, #1
   20dcc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   20dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
   20dd4:	e7dd      	b.n	20d92 <_strtoll_l.isra.0+0x72>
   20dd6:	2c2b      	cmp	r4, #43	; 0x2b
   20dd8:	bf04      	itt	eq
   20dda:	782c      	ldrbeq	r4, [r5, #0]
   20ddc:	1c9d      	addeq	r5, r3, #2
   20dde:	e7b4      	b.n	20d4a <_strtoll_l.isra.0+0x2a>
   20de0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   20de4:	f1bc 0f19 	cmp.w	ip, #25
   20de8:	d801      	bhi.n	20dee <_strtoll_l.isra.0+0xce>
   20dea:	3c37      	subs	r4, #55	; 0x37
   20dec:	e7d7      	b.n	20d9e <_strtoll_l.isra.0+0x7e>
   20dee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   20df2:	f1bc 0f19 	cmp.w	ip, #25
   20df6:	d804      	bhi.n	20e02 <_strtoll_l.isra.0+0xe2>
   20df8:	3c57      	subs	r4, #87	; 0x57
   20dfa:	e7d0      	b.n	20d9e <_strtoll_l.isra.0+0x7e>
   20dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e00:	e7e6      	b.n	20dd0 <_strtoll_l.isra.0+0xb0>
   20e02:	1c5a      	adds	r2, r3, #1
   20e04:	d10a      	bne.n	20e1c <_strtoll_l.isra.0+0xfc>
   20e06:	2322      	movs	r3, #34	; 0x22
   20e08:	9a05      	ldr	r2, [sp, #20]
   20e0a:	e9dd 0100 	ldrd	r0, r1, [sp]
   20e0e:	6013      	str	r3, [r2, #0]
   20e10:	f1b9 0f00 	cmp.w	r9, #0
   20e14:	d10a      	bne.n	20e2c <_strtoll_l.isra.0+0x10c>
   20e16:	b007      	add	sp, #28
   20e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e1c:	b116      	cbz	r6, 20e24 <_strtoll_l.isra.0+0x104>
   20e1e:	4240      	negs	r0, r0
   20e20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20e24:	f1b9 0f00 	cmp.w	r9, #0
   20e28:	d0f5      	beq.n	20e16 <_strtoll_l.isra.0+0xf6>
   20e2a:	b10b      	cbz	r3, 20e30 <_strtoll_l.isra.0+0x110>
   20e2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   20e30:	f8c9 8000 	str.w	r8, [r9]
   20e34:	e7ef      	b.n	20e16 <_strtoll_l.isra.0+0xf6>
   20e36:	2430      	movs	r4, #48	; 0x30
   20e38:	2f00      	cmp	r7, #0
   20e3a:	d194      	bne.n	20d66 <_strtoll_l.isra.0+0x46>
   20e3c:	2708      	movs	r7, #8
   20e3e:	e792      	b.n	20d66 <_strtoll_l.isra.0+0x46>
   20e40:	2c30      	cmp	r4, #48	; 0x30
   20e42:	d088      	beq.n	20d56 <_strtoll_l.isra.0+0x36>
   20e44:	270a      	movs	r7, #10
   20e46:	e78e      	b.n	20d66 <_strtoll_l.isra.0+0x46>
   20e48:	0002a397 	.word	0x0002a397

00020e4c <strtoll>:
   20e4c:	4613      	mov	r3, r2
   20e4e:	460a      	mov	r2, r1
   20e50:	4601      	mov	r1, r0
   20e52:	4802      	ldr	r0, [pc, #8]	; (20e5c <strtoll+0x10>)
   20e54:	6800      	ldr	r0, [r0, #0]
   20e56:	f7ff bf63 	b.w	20d20 <_strtoll_l.isra.0>
   20e5a:	bf00      	nop
   20e5c:	2000c6a0 	.word	0x2000c6a0

00020e60 <_strtoul_l.isra.0>:
   20e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20e64:	468c      	mov	ip, r1
   20e66:	4686      	mov	lr, r0
   20e68:	4e39      	ldr	r6, [pc, #228]	; (20f50 <_strtoul_l.isra.0+0xf0>)
   20e6a:	4660      	mov	r0, ip
   20e6c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   20e70:	5da5      	ldrb	r5, [r4, r6]
   20e72:	f015 0508 	ands.w	r5, r5, #8
   20e76:	d1f8      	bne.n	20e6a <_strtoul_l.isra.0+0xa>
   20e78:	2c2d      	cmp	r4, #45	; 0x2d
   20e7a:	d134      	bne.n	20ee6 <_strtoul_l.isra.0+0x86>
   20e7c:	f89c 4000 	ldrb.w	r4, [ip]
   20e80:	f04f 0801 	mov.w	r8, #1
   20e84:	f100 0c02 	add.w	ip, r0, #2
   20e88:	2b00      	cmp	r3, #0
   20e8a:	d05d      	beq.n	20f48 <_strtoul_l.isra.0+0xe8>
   20e8c:	2b10      	cmp	r3, #16
   20e8e:	d10c      	bne.n	20eaa <_strtoul_l.isra.0+0x4a>
   20e90:	2c30      	cmp	r4, #48	; 0x30
   20e92:	d10a      	bne.n	20eaa <_strtoul_l.isra.0+0x4a>
   20e94:	f89c 0000 	ldrb.w	r0, [ip]
   20e98:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   20e9c:	2858      	cmp	r0, #88	; 0x58
   20e9e:	d14e      	bne.n	20f3e <_strtoul_l.isra.0+0xde>
   20ea0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   20ea4:	2310      	movs	r3, #16
   20ea6:	f10c 0c02 	add.w	ip, ip, #2
   20eaa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20eae:	2500      	movs	r5, #0
   20eb0:	fbb7 f7f3 	udiv	r7, r7, r3
   20eb4:	fb03 f907 	mul.w	r9, r3, r7
   20eb8:	4628      	mov	r0, r5
   20eba:	ea6f 0909 	mvn.w	r9, r9
   20ebe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   20ec2:	2e09      	cmp	r6, #9
   20ec4:	d817      	bhi.n	20ef6 <_strtoul_l.isra.0+0x96>
   20ec6:	4634      	mov	r4, r6
   20ec8:	42a3      	cmp	r3, r4
   20eca:	dd23      	ble.n	20f14 <_strtoul_l.isra.0+0xb4>
   20ecc:	2d00      	cmp	r5, #0
   20ece:	db1e      	blt.n	20f0e <_strtoul_l.isra.0+0xae>
   20ed0:	4287      	cmp	r7, r0
   20ed2:	d31c      	bcc.n	20f0e <_strtoul_l.isra.0+0xae>
   20ed4:	d101      	bne.n	20eda <_strtoul_l.isra.0+0x7a>
   20ed6:	45a1      	cmp	r9, r4
   20ed8:	db19      	blt.n	20f0e <_strtoul_l.isra.0+0xae>
   20eda:	fb00 4003 	mla	r0, r0, r3, r4
   20ede:	2501      	movs	r5, #1
   20ee0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   20ee4:	e7eb      	b.n	20ebe <_strtoul_l.isra.0+0x5e>
   20ee6:	2c2b      	cmp	r4, #43	; 0x2b
   20ee8:	46a8      	mov	r8, r5
   20eea:	bf04      	itt	eq
   20eec:	f89c 4000 	ldrbeq.w	r4, [ip]
   20ef0:	f100 0c02 	addeq.w	ip, r0, #2
   20ef4:	e7c8      	b.n	20e88 <_strtoul_l.isra.0+0x28>
   20ef6:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   20efa:	2e19      	cmp	r6, #25
   20efc:	d801      	bhi.n	20f02 <_strtoul_l.isra.0+0xa2>
   20efe:	3c37      	subs	r4, #55	; 0x37
   20f00:	e7e2      	b.n	20ec8 <_strtoul_l.isra.0+0x68>
   20f02:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   20f06:	2e19      	cmp	r6, #25
   20f08:	d804      	bhi.n	20f14 <_strtoul_l.isra.0+0xb4>
   20f0a:	3c57      	subs	r4, #87	; 0x57
   20f0c:	e7dc      	b.n	20ec8 <_strtoul_l.isra.0+0x68>
   20f0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   20f12:	e7e5      	b.n	20ee0 <_strtoul_l.isra.0+0x80>
   20f14:	2d00      	cmp	r5, #0
   20f16:	da07      	bge.n	20f28 <_strtoul_l.isra.0+0xc8>
   20f18:	2322      	movs	r3, #34	; 0x22
   20f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20f1e:	f8ce 3000 	str.w	r3, [lr]
   20f22:	b942      	cbnz	r2, 20f36 <_strtoul_l.isra.0+0xd6>
   20f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20f28:	f1b8 0f00 	cmp.w	r8, #0
   20f2c:	d000      	beq.n	20f30 <_strtoul_l.isra.0+0xd0>
   20f2e:	4240      	negs	r0, r0
   20f30:	2a00      	cmp	r2, #0
   20f32:	d0f7      	beq.n	20f24 <_strtoul_l.isra.0+0xc4>
   20f34:	b10d      	cbz	r5, 20f3a <_strtoul_l.isra.0+0xda>
   20f36:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   20f3a:	6011      	str	r1, [r2, #0]
   20f3c:	e7f2      	b.n	20f24 <_strtoul_l.isra.0+0xc4>
   20f3e:	2430      	movs	r4, #48	; 0x30
   20f40:	2b00      	cmp	r3, #0
   20f42:	d1b2      	bne.n	20eaa <_strtoul_l.isra.0+0x4a>
   20f44:	2308      	movs	r3, #8
   20f46:	e7b0      	b.n	20eaa <_strtoul_l.isra.0+0x4a>
   20f48:	2c30      	cmp	r4, #48	; 0x30
   20f4a:	d0a3      	beq.n	20e94 <_strtoul_l.isra.0+0x34>
   20f4c:	230a      	movs	r3, #10
   20f4e:	e7ac      	b.n	20eaa <_strtoul_l.isra.0+0x4a>
   20f50:	0002a397 	.word	0x0002a397

00020f54 <strtoul>:
   20f54:	4613      	mov	r3, r2
   20f56:	460a      	mov	r2, r1
   20f58:	4601      	mov	r1, r0
   20f5a:	4802      	ldr	r0, [pc, #8]	; (20f64 <strtoul+0x10>)
   20f5c:	6800      	ldr	r0, [r0, #0]
   20f5e:	f7ff bf7f 	b.w	20e60 <_strtoul_l.isra.0>
   20f62:	bf00      	nop
   20f64:	2000c6a0 	.word	0x2000c6a0

00020f68 <vsniprintf>:
   20f68:	b507      	push	{r0, r1, r2, lr}
   20f6a:	9300      	str	r3, [sp, #0]
   20f6c:	4613      	mov	r3, r2
   20f6e:	460a      	mov	r2, r1
   20f70:	4601      	mov	r1, r0
   20f72:	4803      	ldr	r0, [pc, #12]	; (20f80 <vsniprintf+0x18>)
   20f74:	6800      	ldr	r0, [r0, #0]
   20f76:	f005 fd0a 	bl	2698e <_vsniprintf_r>
   20f7a:	b003      	add	sp, #12
   20f7c:	f85d fb04 	ldr.w	pc, [sp], #4
   20f80:	2000c6a0 	.word	0x2000c6a0

00020f84 <_vsiprintf_r>:
   20f84:	b500      	push	{lr}
   20f86:	b09b      	sub	sp, #108	; 0x6c
   20f88:	9100      	str	r1, [sp, #0]
   20f8a:	9104      	str	r1, [sp, #16]
   20f8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20f90:	9105      	str	r1, [sp, #20]
   20f92:	9102      	str	r1, [sp, #8]
   20f94:	4905      	ldr	r1, [pc, #20]	; (20fac <_vsiprintf_r+0x28>)
   20f96:	9103      	str	r1, [sp, #12]
   20f98:	4669      	mov	r1, sp
   20f9a:	f000 f84d 	bl	21038 <_svfiprintf_r>
   20f9e:	9b00      	ldr	r3, [sp, #0]
   20fa0:	2200      	movs	r2, #0
   20fa2:	701a      	strb	r2, [r3, #0]
   20fa4:	b01b      	add	sp, #108	; 0x6c
   20fa6:	f85d fb04 	ldr.w	pc, [sp], #4
   20faa:	bf00      	nop
   20fac:	ffff0208 	.word	0xffff0208

00020fb0 <vsiprintf>:
   20fb0:	4613      	mov	r3, r2
   20fb2:	460a      	mov	r2, r1
   20fb4:	4601      	mov	r1, r0
   20fb6:	4802      	ldr	r0, [pc, #8]	; (20fc0 <vsiprintf+0x10>)
   20fb8:	6800      	ldr	r0, [r0, #0]
   20fba:	f7ff bfe3 	b.w	20f84 <_vsiprintf_r>
   20fbe:	bf00      	nop
   20fc0:	2000c6a0 	.word	0x2000c6a0

00020fc4 <_vsiscanf_r>:
   20fc4:	b510      	push	{r4, lr}
   20fc6:	4604      	mov	r4, r0
   20fc8:	b09c      	sub	sp, #112	; 0x70
   20fca:	f44f 7001 	mov.w	r0, #516	; 0x204
   20fce:	9102      	str	r1, [sp, #8]
   20fd0:	f8ad 0014 	strh.w	r0, [sp, #20]
   20fd4:	4608      	mov	r0, r1
   20fd6:	9106      	str	r1, [sp, #24]
   20fd8:	e9cd 3200 	strd	r3, r2, [sp]
   20fdc:	f7ef ff22 	bl	10e24 <strlen>
   20fe0:	4909      	ldr	r1, [pc, #36]	; (21008 <_vsiscanf_r+0x44>)
   20fe2:	9003      	str	r0, [sp, #12]
   20fe4:	910b      	str	r1, [sp, #44]	; 0x2c
   20fe6:	2100      	movs	r1, #0
   20fe8:	9007      	str	r0, [sp, #28]
   20fea:	4620      	mov	r0, r4
   20fec:	910f      	str	r1, [sp, #60]	; 0x3c
   20fee:	9114      	str	r1, [sp, #80]	; 0x50
   20ff0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   20ff4:	e9dd 3200 	ldrd	r3, r2, [sp]
   20ff8:	f8ad 1016 	strh.w	r1, [sp, #22]
   20ffc:	a902      	add	r1, sp, #8
   20ffe:	f000 f91b 	bl	21238 <__ssvfiscanf_r>
   21002:	b01c      	add	sp, #112	; 0x70
   21004:	bd10      	pop	{r4, pc}
   21006:	bf00      	nop
   21008:	000268c7 	.word	0x000268c7

0002100c <vsiscanf>:
   2100c:	4613      	mov	r3, r2
   2100e:	460a      	mov	r2, r1
   21010:	4601      	mov	r1, r0
   21012:	4802      	ldr	r0, [pc, #8]	; (2101c <vsiscanf+0x10>)
   21014:	6800      	ldr	r0, [r0, #0]
   21016:	f7ff bfd5 	b.w	20fc4 <_vsiscanf_r>
   2101a:	bf00      	nop
   2101c:	2000c6a0 	.word	0x2000c6a0

00021020 <__malloc_lock>:
   21020:	4801      	ldr	r0, [pc, #4]	; (21028 <__malloc_lock+0x8>)
   21022:	f001 bfac 	b.w	22f7e <__retarget_lock_acquire_recursive>
   21026:	bf00      	nop
   21028:	2000c7f0 	.word	0x2000c7f0

0002102c <__malloc_unlock>:
   2102c:	4801      	ldr	r0, [pc, #4]	; (21034 <__malloc_unlock+0x8>)
   2102e:	f001 bfae 	b.w	22f8e <__retarget_lock_release_recursive>
   21032:	bf00      	nop
   21034:	2000c7f0 	.word	0x2000c7f0

00021038 <_svfiprintf_r>:
   21038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2103c:	4698      	mov	r8, r3
   2103e:	898b      	ldrh	r3, [r1, #12]
   21040:	b09d      	sub	sp, #116	; 0x74
   21042:	4607      	mov	r7, r0
   21044:	061b      	lsls	r3, r3, #24
   21046:	460d      	mov	r5, r1
   21048:	4614      	mov	r4, r2
   2104a:	d50e      	bpl.n	2106a <_svfiprintf_r+0x32>
   2104c:	690b      	ldr	r3, [r1, #16]
   2104e:	b963      	cbnz	r3, 2106a <_svfiprintf_r+0x32>
   21050:	2140      	movs	r1, #64	; 0x40
   21052:	f7ff fd45 	bl	20ae0 <_malloc_r>
   21056:	6028      	str	r0, [r5, #0]
   21058:	6128      	str	r0, [r5, #16]
   2105a:	b920      	cbnz	r0, 21066 <_svfiprintf_r+0x2e>
   2105c:	230c      	movs	r3, #12
   2105e:	603b      	str	r3, [r7, #0]
   21060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21064:	e0d1      	b.n	2120a <_svfiprintf_r+0x1d2>
   21066:	2340      	movs	r3, #64	; 0x40
   21068:	616b      	str	r3, [r5, #20]
   2106a:	2300      	movs	r3, #0
   2106c:	f8cd 800c 	str.w	r8, [sp, #12]
   21070:	f04f 0901 	mov.w	r9, #1
   21074:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 21224 <_svfiprintf_r+0x1ec>
   21078:	9309      	str	r3, [sp, #36]	; 0x24
   2107a:	2320      	movs	r3, #32
   2107c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   21080:	2330      	movs	r3, #48	; 0x30
   21082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   21086:	4623      	mov	r3, r4
   21088:	469a      	mov	sl, r3
   2108a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2108e:	b10a      	cbz	r2, 21094 <_svfiprintf_r+0x5c>
   21090:	2a25      	cmp	r2, #37	; 0x25
   21092:	d1f9      	bne.n	21088 <_svfiprintf_r+0x50>
   21094:	ebba 0b04 	subs.w	fp, sl, r4
   21098:	d00b      	beq.n	210b2 <_svfiprintf_r+0x7a>
   2109a:	465b      	mov	r3, fp
   2109c:	4622      	mov	r2, r4
   2109e:	4629      	mov	r1, r5
   210a0:	4638      	mov	r0, r7
   210a2:	f005 fca0 	bl	269e6 <__ssputs_r>
   210a6:	3001      	adds	r0, #1
   210a8:	f000 80aa 	beq.w	21200 <_svfiprintf_r+0x1c8>
   210ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   210ae:	445a      	add	r2, fp
   210b0:	9209      	str	r2, [sp, #36]	; 0x24
   210b2:	f89a 3000 	ldrb.w	r3, [sl]
   210b6:	2b00      	cmp	r3, #0
   210b8:	f000 80a2 	beq.w	21200 <_svfiprintf_r+0x1c8>
   210bc:	2300      	movs	r3, #0
   210be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   210c2:	f10a 0a01 	add.w	sl, sl, #1
   210c6:	9304      	str	r3, [sp, #16]
   210c8:	9307      	str	r3, [sp, #28]
   210ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   210ce:	931a      	str	r3, [sp, #104]	; 0x68
   210d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   210d4:	4654      	mov	r4, sl
   210d6:	2205      	movs	r2, #5
   210d8:	4852      	ldr	r0, [pc, #328]	; (21224 <_svfiprintf_r+0x1ec>)
   210da:	f814 1b01 	ldrb.w	r1, [r4], #1
   210de:	f005 fb94 	bl	2680a <memchr>
   210e2:	9a04      	ldr	r2, [sp, #16]
   210e4:	b9d8      	cbnz	r0, 2111e <_svfiprintf_r+0xe6>
   210e6:	06d0      	lsls	r0, r2, #27
   210e8:	bf44      	itt	mi
   210ea:	2320      	movmi	r3, #32
   210ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   210f0:	0711      	lsls	r1, r2, #28
   210f2:	bf44      	itt	mi
   210f4:	232b      	movmi	r3, #43	; 0x2b
   210f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   210fa:	f89a 3000 	ldrb.w	r3, [sl]
   210fe:	2b2a      	cmp	r3, #42	; 0x2a
   21100:	d015      	beq.n	2112e <_svfiprintf_r+0xf6>
   21102:	9a07      	ldr	r2, [sp, #28]
   21104:	4654      	mov	r4, sl
   21106:	2000      	movs	r0, #0
   21108:	f04f 0c0a 	mov.w	ip, #10
   2110c:	4621      	mov	r1, r4
   2110e:	f811 3b01 	ldrb.w	r3, [r1], #1
   21112:	3b30      	subs	r3, #48	; 0x30
   21114:	2b09      	cmp	r3, #9
   21116:	d94e      	bls.n	211b6 <_svfiprintf_r+0x17e>
   21118:	b1b0      	cbz	r0, 21148 <_svfiprintf_r+0x110>
   2111a:	9207      	str	r2, [sp, #28]
   2111c:	e014      	b.n	21148 <_svfiprintf_r+0x110>
   2111e:	eba0 0308 	sub.w	r3, r0, r8
   21122:	46a2      	mov	sl, r4
   21124:	fa09 f303 	lsl.w	r3, r9, r3
   21128:	4313      	orrs	r3, r2
   2112a:	9304      	str	r3, [sp, #16]
   2112c:	e7d2      	b.n	210d4 <_svfiprintf_r+0x9c>
   2112e:	9b03      	ldr	r3, [sp, #12]
   21130:	1d19      	adds	r1, r3, #4
   21132:	681b      	ldr	r3, [r3, #0]
   21134:	2b00      	cmp	r3, #0
   21136:	9103      	str	r1, [sp, #12]
   21138:	bfbb      	ittet	lt
   2113a:	425b      	neglt	r3, r3
   2113c:	f042 0202 	orrlt.w	r2, r2, #2
   21140:	9307      	strge	r3, [sp, #28]
   21142:	9307      	strlt	r3, [sp, #28]
   21144:	bfb8      	it	lt
   21146:	9204      	strlt	r2, [sp, #16]
   21148:	7823      	ldrb	r3, [r4, #0]
   2114a:	2b2e      	cmp	r3, #46	; 0x2e
   2114c:	d10c      	bne.n	21168 <_svfiprintf_r+0x130>
   2114e:	7863      	ldrb	r3, [r4, #1]
   21150:	2b2a      	cmp	r3, #42	; 0x2a
   21152:	d135      	bne.n	211c0 <_svfiprintf_r+0x188>
   21154:	9b03      	ldr	r3, [sp, #12]
   21156:	3402      	adds	r4, #2
   21158:	1d1a      	adds	r2, r3, #4
   2115a:	681b      	ldr	r3, [r3, #0]
   2115c:	2b00      	cmp	r3, #0
   2115e:	9203      	str	r2, [sp, #12]
   21160:	bfb8      	it	lt
   21162:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   21166:	9305      	str	r3, [sp, #20]
   21168:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 21234 <_svfiprintf_r+0x1fc>
   2116c:	2203      	movs	r2, #3
   2116e:	7821      	ldrb	r1, [r4, #0]
   21170:	4650      	mov	r0, sl
   21172:	f005 fb4a 	bl	2680a <memchr>
   21176:	b140      	cbz	r0, 2118a <_svfiprintf_r+0x152>
   21178:	2340      	movs	r3, #64	; 0x40
   2117a:	eba0 000a 	sub.w	r0, r0, sl
   2117e:	3401      	adds	r4, #1
   21180:	fa03 f000 	lsl.w	r0, r3, r0
   21184:	9b04      	ldr	r3, [sp, #16]
   21186:	4303      	orrs	r3, r0
   21188:	9304      	str	r3, [sp, #16]
   2118a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2118e:	2206      	movs	r2, #6
   21190:	4825      	ldr	r0, [pc, #148]	; (21228 <_svfiprintf_r+0x1f0>)
   21192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   21196:	f005 fb38 	bl	2680a <memchr>
   2119a:	2800      	cmp	r0, #0
   2119c:	d038      	beq.n	21210 <_svfiprintf_r+0x1d8>
   2119e:	4b23      	ldr	r3, [pc, #140]	; (2122c <_svfiprintf_r+0x1f4>)
   211a0:	bb1b      	cbnz	r3, 211ea <_svfiprintf_r+0x1b2>
   211a2:	9b03      	ldr	r3, [sp, #12]
   211a4:	3307      	adds	r3, #7
   211a6:	f023 0307 	bic.w	r3, r3, #7
   211aa:	3308      	adds	r3, #8
   211ac:	9303      	str	r3, [sp, #12]
   211ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   211b0:	4433      	add	r3, r6
   211b2:	9309      	str	r3, [sp, #36]	; 0x24
   211b4:	e767      	b.n	21086 <_svfiprintf_r+0x4e>
   211b6:	fb0c 3202 	mla	r2, ip, r2, r3
   211ba:	460c      	mov	r4, r1
   211bc:	2001      	movs	r0, #1
   211be:	e7a5      	b.n	2110c <_svfiprintf_r+0xd4>
   211c0:	2300      	movs	r3, #0
   211c2:	3401      	adds	r4, #1
   211c4:	f04f 0c0a 	mov.w	ip, #10
   211c8:	4619      	mov	r1, r3
   211ca:	9305      	str	r3, [sp, #20]
   211cc:	4620      	mov	r0, r4
   211ce:	f810 2b01 	ldrb.w	r2, [r0], #1
   211d2:	3a30      	subs	r2, #48	; 0x30
   211d4:	2a09      	cmp	r2, #9
   211d6:	d903      	bls.n	211e0 <_svfiprintf_r+0x1a8>
   211d8:	2b00      	cmp	r3, #0
   211da:	d0c5      	beq.n	21168 <_svfiprintf_r+0x130>
   211dc:	9105      	str	r1, [sp, #20]
   211de:	e7c3      	b.n	21168 <_svfiprintf_r+0x130>
   211e0:	fb0c 2101 	mla	r1, ip, r1, r2
   211e4:	4604      	mov	r4, r0
   211e6:	2301      	movs	r3, #1
   211e8:	e7f0      	b.n	211cc <_svfiprintf_r+0x194>
   211ea:	ab03      	add	r3, sp, #12
   211ec:	462a      	mov	r2, r5
   211ee:	a904      	add	r1, sp, #16
   211f0:	4638      	mov	r0, r7
   211f2:	9300      	str	r3, [sp, #0]
   211f4:	4b0e      	ldr	r3, [pc, #56]	; (21230 <_svfiprintf_r+0x1f8>)
   211f6:	e000      	b.n	211fa <_svfiprintf_r+0x1c2>
   211f8:	bf00      	nop
   211fa:	1c42      	adds	r2, r0, #1
   211fc:	4606      	mov	r6, r0
   211fe:	d1d6      	bne.n	211ae <_svfiprintf_r+0x176>
   21200:	89ab      	ldrh	r3, [r5, #12]
   21202:	065b      	lsls	r3, r3, #25
   21204:	f53f af2c 	bmi.w	21060 <_svfiprintf_r+0x28>
   21208:	9809      	ldr	r0, [sp, #36]	; 0x24
   2120a:	b01d      	add	sp, #116	; 0x74
   2120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21210:	ab03      	add	r3, sp, #12
   21212:	462a      	mov	r2, r5
   21214:	a904      	add	r1, sp, #16
   21216:	4638      	mov	r0, r7
   21218:	9300      	str	r3, [sp, #0]
   2121a:	4b05      	ldr	r3, [pc, #20]	; (21230 <_svfiprintf_r+0x1f8>)
   2121c:	f000 f988 	bl	21530 <_printf_i>
   21220:	e7eb      	b.n	211fa <_svfiprintf_r+0x1c2>
   21222:	bf00      	nop
   21224:	0002a497 	.word	0x0002a497
   21228:	0002a4a1 	.word	0x0002a4a1
   2122c:	00000000 	.word	0x00000000
   21230:	000269e7 	.word	0x000269e7
   21234:	0002a49d 	.word	0x0002a49d

00021238 <__ssvfiscanf_r>:
   21238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2123c:	460c      	mov	r4, r1
   2123e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   21242:	2100      	movs	r1, #0
   21244:	4606      	mov	r6, r0
   21246:	f10d 0804 	add.w	r8, sp, #4
   2124a:	4fb4      	ldr	r7, [pc, #720]	; (2151c <__ssvfiscanf_r+0x2e4>)
   2124c:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 21528 <__ssvfiscanf_r+0x2f0>
   21250:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   21254:	9300      	str	r3, [sp, #0]
   21256:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2125a:	49b1      	ldr	r1, [pc, #708]	; (21520 <__ssvfiscanf_r+0x2e8>)
   2125c:	91a0      	str	r1, [sp, #640]	; 0x280
   2125e:	49b1      	ldr	r1, [pc, #708]	; (21524 <__ssvfiscanf_r+0x2ec>)
   21260:	91a1      	str	r1, [sp, #644]	; 0x284
   21262:	f892 a000 	ldrb.w	sl, [r2]
   21266:	f1ba 0f00 	cmp.w	sl, #0
   2126a:	f000 8154 	beq.w	21516 <__ssvfiscanf_r+0x2de>
   2126e:	f81a 3007 	ldrb.w	r3, [sl, r7]
   21272:	1c55      	adds	r5, r2, #1
   21274:	f013 0308 	ands.w	r3, r3, #8
   21278:	d019      	beq.n	212ae <__ssvfiscanf_r+0x76>
   2127a:	6863      	ldr	r3, [r4, #4]
   2127c:	2b00      	cmp	r3, #0
   2127e:	dd0f      	ble.n	212a0 <__ssvfiscanf_r+0x68>
   21280:	6823      	ldr	r3, [r4, #0]
   21282:	781a      	ldrb	r2, [r3, #0]
   21284:	5cba      	ldrb	r2, [r7, r2]
   21286:	0712      	lsls	r2, r2, #28
   21288:	d401      	bmi.n	2128e <__ssvfiscanf_r+0x56>
   2128a:	462a      	mov	r2, r5
   2128c:	e7e9      	b.n	21262 <__ssvfiscanf_r+0x2a>
   2128e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   21290:	3301      	adds	r3, #1
   21292:	3201      	adds	r2, #1
   21294:	6023      	str	r3, [r4, #0]
   21296:	9245      	str	r2, [sp, #276]	; 0x114
   21298:	6862      	ldr	r2, [r4, #4]
   2129a:	3a01      	subs	r2, #1
   2129c:	6062      	str	r2, [r4, #4]
   2129e:	e7ec      	b.n	2127a <__ssvfiscanf_r+0x42>
   212a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   212a2:	4621      	mov	r1, r4
   212a4:	4630      	mov	r0, r6
   212a6:	4798      	blx	r3
   212a8:	2800      	cmp	r0, #0
   212aa:	d0e9      	beq.n	21280 <__ssvfiscanf_r+0x48>
   212ac:	e7ed      	b.n	2128a <__ssvfiscanf_r+0x52>
   212ae:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   212b2:	f040 8086 	bne.w	213c2 <__ssvfiscanf_r+0x18a>
   212b6:	9341      	str	r3, [sp, #260]	; 0x104
   212b8:	9343      	str	r3, [sp, #268]	; 0x10c
   212ba:	7853      	ldrb	r3, [r2, #1]
   212bc:	2b2a      	cmp	r3, #42	; 0x2a
   212be:	bf04      	itt	eq
   212c0:	2310      	moveq	r3, #16
   212c2:	1c95      	addeq	r5, r2, #2
   212c4:	f04f 020a 	mov.w	r2, #10
   212c8:	bf08      	it	eq
   212ca:	9341      	streq	r3, [sp, #260]	; 0x104
   212cc:	46ab      	mov	fp, r5
   212ce:	f81b 1b01 	ldrb.w	r1, [fp], #1
   212d2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   212d6:	2b09      	cmp	r3, #9
   212d8:	d91d      	bls.n	21316 <__ssvfiscanf_r+0xde>
   212da:	2203      	movs	r2, #3
   212dc:	4892      	ldr	r0, [pc, #584]	; (21528 <__ssvfiscanf_r+0x2f0>)
   212de:	f005 fa94 	bl	2680a <memchr>
   212e2:	b140      	cbz	r0, 212f6 <__ssvfiscanf_r+0xbe>
   212e4:	2301      	movs	r3, #1
   212e6:	eba0 0009 	sub.w	r0, r0, r9
   212ea:	465d      	mov	r5, fp
   212ec:	fa03 f000 	lsl.w	r0, r3, r0
   212f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
   212f2:	4318      	orrs	r0, r3
   212f4:	9041      	str	r0, [sp, #260]	; 0x104
   212f6:	f815 3b01 	ldrb.w	r3, [r5], #1
   212fa:	2b78      	cmp	r3, #120	; 0x78
   212fc:	d806      	bhi.n	2130c <__ssvfiscanf_r+0xd4>
   212fe:	2b57      	cmp	r3, #87	; 0x57
   21300:	d810      	bhi.n	21324 <__ssvfiscanf_r+0xec>
   21302:	2b25      	cmp	r3, #37	; 0x25
   21304:	d05d      	beq.n	213c2 <__ssvfiscanf_r+0x18a>
   21306:	d857      	bhi.n	213b8 <__ssvfiscanf_r+0x180>
   21308:	2b00      	cmp	r3, #0
   2130a:	d075      	beq.n	213f8 <__ssvfiscanf_r+0x1c0>
   2130c:	2303      	movs	r3, #3
   2130e:	9347      	str	r3, [sp, #284]	; 0x11c
   21310:	230a      	movs	r3, #10
   21312:	9342      	str	r3, [sp, #264]	; 0x108
   21314:	e082      	b.n	2141c <__ssvfiscanf_r+0x1e4>
   21316:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   21318:	465d      	mov	r5, fp
   2131a:	fb02 1303 	mla	r3, r2, r3, r1
   2131e:	3b30      	subs	r3, #48	; 0x30
   21320:	9343      	str	r3, [sp, #268]	; 0x10c
   21322:	e7d3      	b.n	212cc <__ssvfiscanf_r+0x94>
   21324:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   21328:	2a20      	cmp	r2, #32
   2132a:	d8ef      	bhi.n	2130c <__ssvfiscanf_r+0xd4>
   2132c:	a101      	add	r1, pc, #4	; (adr r1, 21334 <__ssvfiscanf_r+0xfc>)
   2132e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   21332:	bf00      	nop
   21334:	00021407 	.word	0x00021407
   21338:	0002130d 	.word	0x0002130d
   2133c:	0002130d 	.word	0x0002130d
   21340:	00021465 	.word	0x00021465
   21344:	0002130d 	.word	0x0002130d
   21348:	0002130d 	.word	0x0002130d
   2134c:	0002130d 	.word	0x0002130d
   21350:	0002130d 	.word	0x0002130d
   21354:	0002130d 	.word	0x0002130d
   21358:	0002130d 	.word	0x0002130d
   2135c:	0002130d 	.word	0x0002130d
   21360:	0002147b 	.word	0x0002147b
   21364:	00021451 	.word	0x00021451
   21368:	000213bf 	.word	0x000213bf
   2136c:	000213bf 	.word	0x000213bf
   21370:	000213bf 	.word	0x000213bf
   21374:	0002130d 	.word	0x0002130d
   21378:	00021455 	.word	0x00021455
   2137c:	0002130d 	.word	0x0002130d
   21380:	0002130d 	.word	0x0002130d
   21384:	0002130d 	.word	0x0002130d
   21388:	0002130d 	.word	0x0002130d
   2138c:	0002148b 	.word	0x0002148b
   21390:	0002145d 	.word	0x0002145d
   21394:	000213ff 	.word	0x000213ff
   21398:	0002130d 	.word	0x0002130d
   2139c:	0002130d 	.word	0x0002130d
   213a0:	00021487 	.word	0x00021487
   213a4:	0002130d 	.word	0x0002130d
   213a8:	00021451 	.word	0x00021451
   213ac:	0002130d 	.word	0x0002130d
   213b0:	0002130d 	.word	0x0002130d
   213b4:	00021407 	.word	0x00021407
   213b8:	3b45      	subs	r3, #69	; 0x45
   213ba:	2b02      	cmp	r3, #2
   213bc:	d8a6      	bhi.n	2130c <__ssvfiscanf_r+0xd4>
   213be:	2305      	movs	r3, #5
   213c0:	e02b      	b.n	2141a <__ssvfiscanf_r+0x1e2>
   213c2:	6863      	ldr	r3, [r4, #4]
   213c4:	2b00      	cmp	r3, #0
   213c6:	dd0d      	ble.n	213e4 <__ssvfiscanf_r+0x1ac>
   213c8:	6823      	ldr	r3, [r4, #0]
   213ca:	781a      	ldrb	r2, [r3, #0]
   213cc:	4552      	cmp	r2, sl
   213ce:	f040 80a2 	bne.w	21516 <__ssvfiscanf_r+0x2de>
   213d2:	3301      	adds	r3, #1
   213d4:	6862      	ldr	r2, [r4, #4]
   213d6:	6023      	str	r3, [r4, #0]
   213d8:	3a01      	subs	r2, #1
   213da:	9b45      	ldr	r3, [sp, #276]	; 0x114
   213dc:	6062      	str	r2, [r4, #4]
   213de:	3301      	adds	r3, #1
   213e0:	9345      	str	r3, [sp, #276]	; 0x114
   213e2:	e752      	b.n	2128a <__ssvfiscanf_r+0x52>
   213e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   213e6:	4621      	mov	r1, r4
   213e8:	4630      	mov	r0, r6
   213ea:	4798      	blx	r3
   213ec:	2800      	cmp	r0, #0
   213ee:	d0eb      	beq.n	213c8 <__ssvfiscanf_r+0x190>
   213f0:	9844      	ldr	r0, [sp, #272]	; 0x110
   213f2:	2800      	cmp	r0, #0
   213f4:	f040 8085 	bne.w	21502 <__ssvfiscanf_r+0x2ca>
   213f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   213fc:	e087      	b.n	2150e <__ssvfiscanf_r+0x2d6>
   213fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
   21400:	f042 0220 	orr.w	r2, r2, #32
   21404:	9241      	str	r2, [sp, #260]	; 0x104
   21406:	9a41      	ldr	r2, [sp, #260]	; 0x104
   21408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2140c:	9241      	str	r2, [sp, #260]	; 0x104
   2140e:	2210      	movs	r2, #16
   21410:	2b6f      	cmp	r3, #111	; 0x6f
   21412:	9242      	str	r2, [sp, #264]	; 0x108
   21414:	bf34      	ite	cc
   21416:	2303      	movcc	r3, #3
   21418:	2304      	movcs	r3, #4
   2141a:	9347      	str	r3, [sp, #284]	; 0x11c
   2141c:	6863      	ldr	r3, [r4, #4]
   2141e:	2b00      	cmp	r3, #0
   21420:	dd42      	ble.n	214a8 <__ssvfiscanf_r+0x270>
   21422:	9b41      	ldr	r3, [sp, #260]	; 0x104
   21424:	0659      	lsls	r1, r3, #25
   21426:	d404      	bmi.n	21432 <__ssvfiscanf_r+0x1fa>
   21428:	6823      	ldr	r3, [r4, #0]
   2142a:	781a      	ldrb	r2, [r3, #0]
   2142c:	5cba      	ldrb	r2, [r7, r2]
   2142e:	0712      	lsls	r2, r2, #28
   21430:	d441      	bmi.n	214b6 <__ssvfiscanf_r+0x27e>
   21432:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   21434:	2b02      	cmp	r3, #2
   21436:	dc50      	bgt.n	214da <__ssvfiscanf_r+0x2a2>
   21438:	466b      	mov	r3, sp
   2143a:	4622      	mov	r2, r4
   2143c:	a941      	add	r1, sp, #260	; 0x104
   2143e:	4630      	mov	r0, r6
   21440:	f000 f99c 	bl	2177c <_scanf_chars>
   21444:	2801      	cmp	r0, #1
   21446:	d066      	beq.n	21516 <__ssvfiscanf_r+0x2de>
   21448:	2802      	cmp	r0, #2
   2144a:	f47f af1e 	bne.w	2128a <__ssvfiscanf_r+0x52>
   2144e:	e7cf      	b.n	213f0 <__ssvfiscanf_r+0x1b8>
   21450:	220a      	movs	r2, #10
   21452:	e7dd      	b.n	21410 <__ssvfiscanf_r+0x1d8>
   21454:	2300      	movs	r3, #0
   21456:	9342      	str	r3, [sp, #264]	; 0x108
   21458:	2303      	movs	r3, #3
   2145a:	e7de      	b.n	2141a <__ssvfiscanf_r+0x1e2>
   2145c:	2308      	movs	r3, #8
   2145e:	9342      	str	r3, [sp, #264]	; 0x108
   21460:	2304      	movs	r3, #4
   21462:	e7da      	b.n	2141a <__ssvfiscanf_r+0x1e2>
   21464:	4629      	mov	r1, r5
   21466:	4640      	mov	r0, r8
   21468:	f005 fbe2 	bl	26c30 <__sccl>
   2146c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2146e:	4605      	mov	r5, r0
   21470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21474:	9341      	str	r3, [sp, #260]	; 0x104
   21476:	2301      	movs	r3, #1
   21478:	e7cf      	b.n	2141a <__ssvfiscanf_r+0x1e2>
   2147a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2147c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21480:	9341      	str	r3, [sp, #260]	; 0x104
   21482:	2300      	movs	r3, #0
   21484:	e7c9      	b.n	2141a <__ssvfiscanf_r+0x1e2>
   21486:	2302      	movs	r3, #2
   21488:	e7c7      	b.n	2141a <__ssvfiscanf_r+0x1e2>
   2148a:	9841      	ldr	r0, [sp, #260]	; 0x104
   2148c:	06c3      	lsls	r3, r0, #27
   2148e:	f53f aefc 	bmi.w	2128a <__ssvfiscanf_r+0x52>
   21492:	9b00      	ldr	r3, [sp, #0]
   21494:	07c0      	lsls	r0, r0, #31
   21496:	9a45      	ldr	r2, [sp, #276]	; 0x114
   21498:	f103 0104 	add.w	r1, r3, #4
   2149c:	9100      	str	r1, [sp, #0]
   2149e:	681b      	ldr	r3, [r3, #0]
   214a0:	bf4c      	ite	mi
   214a2:	801a      	strhmi	r2, [r3, #0]
   214a4:	601a      	strpl	r2, [r3, #0]
   214a6:	e6f0      	b.n	2128a <__ssvfiscanf_r+0x52>
   214a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   214aa:	4621      	mov	r1, r4
   214ac:	4630      	mov	r0, r6
   214ae:	4798      	blx	r3
   214b0:	2800      	cmp	r0, #0
   214b2:	d0b6      	beq.n	21422 <__ssvfiscanf_r+0x1ea>
   214b4:	e79c      	b.n	213f0 <__ssvfiscanf_r+0x1b8>
   214b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
   214b8:	3201      	adds	r2, #1
   214ba:	9245      	str	r2, [sp, #276]	; 0x114
   214bc:	6862      	ldr	r2, [r4, #4]
   214be:	3a01      	subs	r2, #1
   214c0:	2a00      	cmp	r2, #0
   214c2:	6062      	str	r2, [r4, #4]
   214c4:	dd02      	ble.n	214cc <__ssvfiscanf_r+0x294>
   214c6:	3301      	adds	r3, #1
   214c8:	6023      	str	r3, [r4, #0]
   214ca:	e7ad      	b.n	21428 <__ssvfiscanf_r+0x1f0>
   214cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   214ce:	4621      	mov	r1, r4
   214d0:	4630      	mov	r0, r6
   214d2:	4798      	blx	r3
   214d4:	2800      	cmp	r0, #0
   214d6:	d0a7      	beq.n	21428 <__ssvfiscanf_r+0x1f0>
   214d8:	e78a      	b.n	213f0 <__ssvfiscanf_r+0x1b8>
   214da:	2b04      	cmp	r3, #4
   214dc:	dc06      	bgt.n	214ec <__ssvfiscanf_r+0x2b4>
   214de:	466b      	mov	r3, sp
   214e0:	4622      	mov	r2, r4
   214e2:	a941      	add	r1, sp, #260	; 0x104
   214e4:	4630      	mov	r0, r6
   214e6:	f000 f9a1 	bl	2182c <_scanf_i>
   214ea:	e7ab      	b.n	21444 <__ssvfiscanf_r+0x20c>
   214ec:	4b0f      	ldr	r3, [pc, #60]	; (2152c <__ssvfiscanf_r+0x2f4>)
   214ee:	2b00      	cmp	r3, #0
   214f0:	f43f aecb 	beq.w	2128a <__ssvfiscanf_r+0x52>
   214f4:	466b      	mov	r3, sp
   214f6:	4622      	mov	r2, r4
   214f8:	a941      	add	r1, sp, #260	; 0x104
   214fa:	4630      	mov	r0, r6
   214fc:	e000      	b.n	21500 <__ssvfiscanf_r+0x2c8>
   214fe:	bf00      	nop
   21500:	e7a0      	b.n	21444 <__ssvfiscanf_r+0x20c>
   21502:	89a3      	ldrh	r3, [r4, #12]
   21504:	f013 0f40 	tst.w	r3, #64	; 0x40
   21508:	bf18      	it	ne
   2150a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2150e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   21512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21516:	9844      	ldr	r0, [sp, #272]	; 0x110
   21518:	e7f9      	b.n	2150e <__ssvfiscanf_r+0x2d6>
   2151a:	bf00      	nop
   2151c:	0002a397 	.word	0x0002a397
   21520:	00026a9d 	.word	0x00026a9d
   21524:	00026b17 	.word	0x00026b17
   21528:	0002a49d 	.word	0x0002a49d
   2152c:	00000000 	.word	0x00000000

00021530 <_printf_i>:
   21530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   21534:	460c      	mov	r4, r1
   21536:	4691      	mov	r9, r2
   21538:	4680      	mov	r8, r0
   2153a:	469a      	mov	sl, r3
   2153c:	7e27      	ldrb	r7, [r4, #24]
   2153e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21542:	990c      	ldr	r1, [sp, #48]	; 0x30
   21544:	2f78      	cmp	r7, #120	; 0x78
   21546:	d807      	bhi.n	21558 <_printf_i+0x28>
   21548:	2f62      	cmp	r7, #98	; 0x62
   2154a:	d80a      	bhi.n	21562 <_printf_i+0x32>
   2154c:	2f00      	cmp	r7, #0
   2154e:	f000 80d8 	beq.w	21702 <_printf_i+0x1d2>
   21552:	2f58      	cmp	r7, #88	; 0x58
   21554:	f000 80a3 	beq.w	2169e <_printf_i+0x16e>
   21558:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2155c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   21560:	e03a      	b.n	215d8 <_printf_i+0xa8>
   21562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   21566:	2b15      	cmp	r3, #21
   21568:	d8f6      	bhi.n	21558 <_printf_i+0x28>
   2156a:	a001      	add	r0, pc, #4	; (adr r0, 21570 <_printf_i+0x40>)
   2156c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   21570:	000215c9 	.word	0x000215c9
   21574:	000215dd 	.word	0x000215dd
   21578:	00021559 	.word	0x00021559
   2157c:	00021559 	.word	0x00021559
   21580:	00021559 	.word	0x00021559
   21584:	00021559 	.word	0x00021559
   21588:	000215dd 	.word	0x000215dd
   2158c:	00021559 	.word	0x00021559
   21590:	00021559 	.word	0x00021559
   21594:	00021559 	.word	0x00021559
   21598:	00021559 	.word	0x00021559
   2159c:	000216e9 	.word	0x000216e9
   215a0:	0002160d 	.word	0x0002160d
   215a4:	000216cb 	.word	0x000216cb
   215a8:	00021559 	.word	0x00021559
   215ac:	00021559 	.word	0x00021559
   215b0:	0002170b 	.word	0x0002170b
   215b4:	00021559 	.word	0x00021559
   215b8:	0002160d 	.word	0x0002160d
   215bc:	00021559 	.word	0x00021559
   215c0:	00021559 	.word	0x00021559
   215c4:	000216d3 	.word	0x000216d3
   215c8:	680b      	ldr	r3, [r1, #0]
   215ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
   215ce:	1d1a      	adds	r2, r3, #4
   215d0:	681b      	ldr	r3, [r3, #0]
   215d2:	600a      	str	r2, [r1, #0]
   215d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   215d8:	2301      	movs	r3, #1
   215da:	e0a3      	b.n	21724 <_printf_i+0x1f4>
   215dc:	6825      	ldr	r5, [r4, #0]
   215de:	6808      	ldr	r0, [r1, #0]
   215e0:	062e      	lsls	r6, r5, #24
   215e2:	f100 0304 	add.w	r3, r0, #4
   215e6:	d50a      	bpl.n	215fe <_printf_i+0xce>
   215e8:	6805      	ldr	r5, [r0, #0]
   215ea:	600b      	str	r3, [r1, #0]
   215ec:	2d00      	cmp	r5, #0
   215ee:	da03      	bge.n	215f8 <_printf_i+0xc8>
   215f0:	232d      	movs	r3, #45	; 0x2d
   215f2:	426d      	negs	r5, r5
   215f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   215f8:	485e      	ldr	r0, [pc, #376]	; (21774 <_printf_i+0x244>)
   215fa:	230a      	movs	r3, #10
   215fc:	e019      	b.n	21632 <_printf_i+0x102>
   215fe:	f015 0f40 	tst.w	r5, #64	; 0x40
   21602:	6805      	ldr	r5, [r0, #0]
   21604:	600b      	str	r3, [r1, #0]
   21606:	bf18      	it	ne
   21608:	b22d      	sxthne	r5, r5
   2160a:	e7ef      	b.n	215ec <_printf_i+0xbc>
   2160c:	680b      	ldr	r3, [r1, #0]
   2160e:	6825      	ldr	r5, [r4, #0]
   21610:	1d18      	adds	r0, r3, #4
   21612:	6008      	str	r0, [r1, #0]
   21614:	0628      	lsls	r0, r5, #24
   21616:	d501      	bpl.n	2161c <_printf_i+0xec>
   21618:	681d      	ldr	r5, [r3, #0]
   2161a:	e002      	b.n	21622 <_printf_i+0xf2>
   2161c:	0669      	lsls	r1, r5, #25
   2161e:	d5fb      	bpl.n	21618 <_printf_i+0xe8>
   21620:	881d      	ldrh	r5, [r3, #0]
   21622:	2f6f      	cmp	r7, #111	; 0x6f
   21624:	4853      	ldr	r0, [pc, #332]	; (21774 <_printf_i+0x244>)
   21626:	bf0c      	ite	eq
   21628:	2308      	moveq	r3, #8
   2162a:	230a      	movne	r3, #10
   2162c:	2100      	movs	r1, #0
   2162e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   21632:	6866      	ldr	r6, [r4, #4]
   21634:	2e00      	cmp	r6, #0
   21636:	60a6      	str	r6, [r4, #8]
   21638:	bfa2      	ittt	ge
   2163a:	6821      	ldrge	r1, [r4, #0]
   2163c:	f021 0104 	bicge.w	r1, r1, #4
   21640:	6021      	strge	r1, [r4, #0]
   21642:	b90d      	cbnz	r5, 21648 <_printf_i+0x118>
   21644:	2e00      	cmp	r6, #0
   21646:	d04d      	beq.n	216e4 <_printf_i+0x1b4>
   21648:	4616      	mov	r6, r2
   2164a:	fbb5 f1f3 	udiv	r1, r5, r3
   2164e:	fb03 5711 	mls	r7, r3, r1, r5
   21652:	5dc7      	ldrb	r7, [r0, r7]
   21654:	f806 7d01 	strb.w	r7, [r6, #-1]!
   21658:	462f      	mov	r7, r5
   2165a:	460d      	mov	r5, r1
   2165c:	42bb      	cmp	r3, r7
   2165e:	d9f4      	bls.n	2164a <_printf_i+0x11a>
   21660:	2b08      	cmp	r3, #8
   21662:	d10b      	bne.n	2167c <_printf_i+0x14c>
   21664:	6823      	ldr	r3, [r4, #0]
   21666:	07df      	lsls	r7, r3, #31
   21668:	d508      	bpl.n	2167c <_printf_i+0x14c>
   2166a:	6923      	ldr	r3, [r4, #16]
   2166c:	6861      	ldr	r1, [r4, #4]
   2166e:	4299      	cmp	r1, r3
   21670:	bfde      	ittt	le
   21672:	2330      	movle	r3, #48	; 0x30
   21674:	f806 3c01 	strble.w	r3, [r6, #-1]
   21678:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   2167c:	1b92      	subs	r2, r2, r6
   2167e:	6122      	str	r2, [r4, #16]
   21680:	464b      	mov	r3, r9
   21682:	aa03      	add	r2, sp, #12
   21684:	4621      	mov	r1, r4
   21686:	4640      	mov	r0, r8
   21688:	f8cd a000 	str.w	sl, [sp]
   2168c:	f005 fa60 	bl	26b50 <_printf_common>
   21690:	3001      	adds	r0, #1
   21692:	d14c      	bne.n	2172e <_printf_i+0x1fe>
   21694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21698:	b004      	add	sp, #16
   2169a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2169e:	4835      	ldr	r0, [pc, #212]	; (21774 <_printf_i+0x244>)
   216a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   216a4:	6823      	ldr	r3, [r4, #0]
   216a6:	680e      	ldr	r6, [r1, #0]
   216a8:	061f      	lsls	r7, r3, #24
   216aa:	f856 5b04 	ldr.w	r5, [r6], #4
   216ae:	600e      	str	r6, [r1, #0]
   216b0:	d514      	bpl.n	216dc <_printf_i+0x1ac>
   216b2:	07d9      	lsls	r1, r3, #31
   216b4:	bf44      	itt	mi
   216b6:	f043 0320 	orrmi.w	r3, r3, #32
   216ba:	6023      	strmi	r3, [r4, #0]
   216bc:	b91d      	cbnz	r5, 216c6 <_printf_i+0x196>
   216be:	6823      	ldr	r3, [r4, #0]
   216c0:	f023 0320 	bic.w	r3, r3, #32
   216c4:	6023      	str	r3, [r4, #0]
   216c6:	2310      	movs	r3, #16
   216c8:	e7b0      	b.n	2162c <_printf_i+0xfc>
   216ca:	6823      	ldr	r3, [r4, #0]
   216cc:	f043 0320 	orr.w	r3, r3, #32
   216d0:	6023      	str	r3, [r4, #0]
   216d2:	2378      	movs	r3, #120	; 0x78
   216d4:	4828      	ldr	r0, [pc, #160]	; (21778 <_printf_i+0x248>)
   216d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   216da:	e7e3      	b.n	216a4 <_printf_i+0x174>
   216dc:	065e      	lsls	r6, r3, #25
   216de:	bf48      	it	mi
   216e0:	b2ad      	uxthmi	r5, r5
   216e2:	e7e6      	b.n	216b2 <_printf_i+0x182>
   216e4:	4616      	mov	r6, r2
   216e6:	e7bb      	b.n	21660 <_printf_i+0x130>
   216e8:	680b      	ldr	r3, [r1, #0]
   216ea:	6826      	ldr	r6, [r4, #0]
   216ec:	1d1d      	adds	r5, r3, #4
   216ee:	6960      	ldr	r0, [r4, #20]
   216f0:	600d      	str	r5, [r1, #0]
   216f2:	0635      	lsls	r5, r6, #24
   216f4:	681b      	ldr	r3, [r3, #0]
   216f6:	d501      	bpl.n	216fc <_printf_i+0x1cc>
   216f8:	6018      	str	r0, [r3, #0]
   216fa:	e002      	b.n	21702 <_printf_i+0x1d2>
   216fc:	0671      	lsls	r1, r6, #25
   216fe:	d5fb      	bpl.n	216f8 <_printf_i+0x1c8>
   21700:	8018      	strh	r0, [r3, #0]
   21702:	2300      	movs	r3, #0
   21704:	4616      	mov	r6, r2
   21706:	6123      	str	r3, [r4, #16]
   21708:	e7ba      	b.n	21680 <_printf_i+0x150>
   2170a:	680b      	ldr	r3, [r1, #0]
   2170c:	1d1a      	adds	r2, r3, #4
   2170e:	600a      	str	r2, [r1, #0]
   21710:	2100      	movs	r1, #0
   21712:	681e      	ldr	r6, [r3, #0]
   21714:	6862      	ldr	r2, [r4, #4]
   21716:	4630      	mov	r0, r6
   21718:	f005 f877 	bl	2680a <memchr>
   2171c:	b108      	cbz	r0, 21722 <_printf_i+0x1f2>
   2171e:	1b80      	subs	r0, r0, r6
   21720:	6060      	str	r0, [r4, #4]
   21722:	6863      	ldr	r3, [r4, #4]
   21724:	6123      	str	r3, [r4, #16]
   21726:	2300      	movs	r3, #0
   21728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2172c:	e7a8      	b.n	21680 <_printf_i+0x150>
   2172e:	6923      	ldr	r3, [r4, #16]
   21730:	4632      	mov	r2, r6
   21732:	4649      	mov	r1, r9
   21734:	4640      	mov	r0, r8
   21736:	47d0      	blx	sl
   21738:	3001      	adds	r0, #1
   2173a:	d0ab      	beq.n	21694 <_printf_i+0x164>
   2173c:	6823      	ldr	r3, [r4, #0]
   2173e:	079b      	lsls	r3, r3, #30
   21740:	d413      	bmi.n	2176a <_printf_i+0x23a>
   21742:	68e0      	ldr	r0, [r4, #12]
   21744:	9b03      	ldr	r3, [sp, #12]
   21746:	4298      	cmp	r0, r3
   21748:	bfb8      	it	lt
   2174a:	4618      	movlt	r0, r3
   2174c:	e7a4      	b.n	21698 <_printf_i+0x168>
   2174e:	2301      	movs	r3, #1
   21750:	4632      	mov	r2, r6
   21752:	4649      	mov	r1, r9
   21754:	4640      	mov	r0, r8
   21756:	47d0      	blx	sl
   21758:	3001      	adds	r0, #1
   2175a:	d09b      	beq.n	21694 <_printf_i+0x164>
   2175c:	3501      	adds	r5, #1
   2175e:	68e3      	ldr	r3, [r4, #12]
   21760:	9903      	ldr	r1, [sp, #12]
   21762:	1a5b      	subs	r3, r3, r1
   21764:	42ab      	cmp	r3, r5
   21766:	dcf2      	bgt.n	2174e <_printf_i+0x21e>
   21768:	e7eb      	b.n	21742 <_printf_i+0x212>
   2176a:	2500      	movs	r5, #0
   2176c:	f104 0619 	add.w	r6, r4, #25
   21770:	e7f5      	b.n	2175e <_printf_i+0x22e>
   21772:	bf00      	nop
   21774:	0002a4a8 	.word	0x0002a4a8
   21778:	0002a4b9 	.word	0x0002a4b9

0002177c <_scanf_chars>:
   2177c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21780:	4615      	mov	r5, r2
   21782:	688a      	ldr	r2, [r1, #8]
   21784:	4680      	mov	r8, r0
   21786:	460c      	mov	r4, r1
   21788:	b932      	cbnz	r2, 21798 <_scanf_chars+0x1c>
   2178a:	698a      	ldr	r2, [r1, #24]
   2178c:	2a00      	cmp	r2, #0
   2178e:	bf0c      	ite	eq
   21790:	2201      	moveq	r2, #1
   21792:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   21796:	608a      	str	r2, [r1, #8]
   21798:	6822      	ldr	r2, [r4, #0]
   2179a:	2700      	movs	r7, #0
   2179c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 21828 <_scanf_chars+0xac>
   217a0:	06d1      	lsls	r1, r2, #27
   217a2:	bf5f      	itttt	pl
   217a4:	681a      	ldrpl	r2, [r3, #0]
   217a6:	1d11      	addpl	r1, r2, #4
   217a8:	6019      	strpl	r1, [r3, #0]
   217aa:	6816      	ldrpl	r6, [r2, #0]
   217ac:	69a0      	ldr	r0, [r4, #24]
   217ae:	b188      	cbz	r0, 217d4 <_scanf_chars+0x58>
   217b0:	2801      	cmp	r0, #1
   217b2:	d107      	bne.n	217c4 <_scanf_chars+0x48>
   217b4:	682b      	ldr	r3, [r5, #0]
   217b6:	781a      	ldrb	r2, [r3, #0]
   217b8:	6963      	ldr	r3, [r4, #20]
   217ba:	5c9b      	ldrb	r3, [r3, r2]
   217bc:	b953      	cbnz	r3, 217d4 <_scanf_chars+0x58>
   217be:	bb27      	cbnz	r7, 2180a <_scanf_chars+0x8e>
   217c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   217c4:	2802      	cmp	r0, #2
   217c6:	d120      	bne.n	2180a <_scanf_chars+0x8e>
   217c8:	682b      	ldr	r3, [r5, #0]
   217ca:	781b      	ldrb	r3, [r3, #0]
   217cc:	f813 3009 	ldrb.w	r3, [r3, r9]
   217d0:	071b      	lsls	r3, r3, #28
   217d2:	d41a      	bmi.n	2180a <_scanf_chars+0x8e>
   217d4:	6823      	ldr	r3, [r4, #0]
   217d6:	3701      	adds	r7, #1
   217d8:	06da      	lsls	r2, r3, #27
   217da:	bf5e      	ittt	pl
   217dc:	682b      	ldrpl	r3, [r5, #0]
   217de:	781b      	ldrbpl	r3, [r3, #0]
   217e0:	f806 3b01 	strbpl.w	r3, [r6], #1
   217e4:	682a      	ldr	r2, [r5, #0]
   217e6:	686b      	ldr	r3, [r5, #4]
   217e8:	3201      	adds	r2, #1
   217ea:	3b01      	subs	r3, #1
   217ec:	602a      	str	r2, [r5, #0]
   217ee:	68a2      	ldr	r2, [r4, #8]
   217f0:	606b      	str	r3, [r5, #4]
   217f2:	3a01      	subs	r2, #1
   217f4:	60a2      	str	r2, [r4, #8]
   217f6:	b142      	cbz	r2, 2180a <_scanf_chars+0x8e>
   217f8:	2b00      	cmp	r3, #0
   217fa:	dcd7      	bgt.n	217ac <_scanf_chars+0x30>
   217fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   21800:	4629      	mov	r1, r5
   21802:	4640      	mov	r0, r8
   21804:	4798      	blx	r3
   21806:	2800      	cmp	r0, #0
   21808:	d0d0      	beq.n	217ac <_scanf_chars+0x30>
   2180a:	6823      	ldr	r3, [r4, #0]
   2180c:	f013 0310 	ands.w	r3, r3, #16
   21810:	d105      	bne.n	2181e <_scanf_chars+0xa2>
   21812:	68e2      	ldr	r2, [r4, #12]
   21814:	3201      	adds	r2, #1
   21816:	60e2      	str	r2, [r4, #12]
   21818:	69a2      	ldr	r2, [r4, #24]
   2181a:	b102      	cbz	r2, 2181e <_scanf_chars+0xa2>
   2181c:	7033      	strb	r3, [r6, #0]
   2181e:	6923      	ldr	r3, [r4, #16]
   21820:	2000      	movs	r0, #0
   21822:	441f      	add	r7, r3
   21824:	6127      	str	r7, [r4, #16]
   21826:	e7cb      	b.n	217c0 <_scanf_chars+0x44>
   21828:	0002a397 	.word	0x0002a397

0002182c <_scanf_i>:
   2182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21830:	4698      	mov	r8, r3
   21832:	b087      	sub	sp, #28
   21834:	4b72      	ldr	r3, [pc, #456]	; (21a00 <_scanf_i+0x1d4>)
   21836:	460c      	mov	r4, r1
   21838:	4682      	mov	sl, r0
   2183a:	4616      	mov	r6, r2
   2183c:	4627      	mov	r7, r4
   2183e:	f04f 0b00 	mov.w	fp, #0
   21842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   21846:	ab03      	add	r3, sp, #12
   21848:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2184c:	4b6d      	ldr	r3, [pc, #436]	; (21a04 <_scanf_i+0x1d8>)
   2184e:	69a1      	ldr	r1, [r4, #24]
   21850:	4a6d      	ldr	r2, [pc, #436]	; (21a08 <_scanf_i+0x1dc>)
   21852:	2903      	cmp	r1, #3
   21854:	bf18      	it	ne
   21856:	461a      	movne	r2, r3
   21858:	68a3      	ldr	r3, [r4, #8]
   2185a:	9201      	str	r2, [sp, #4]
   2185c:	1e5a      	subs	r2, r3, #1
   2185e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   21862:	bf89      	itett	hi
   21864:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   21868:	f04f 0900 	movls.w	r9, #0
   2186c:	eb03 0905 	addhi.w	r9, r3, r5
   21870:	f240 135d 	movwhi	r3, #349	; 0x15d
   21874:	bf88      	it	hi
   21876:	60a3      	strhi	r3, [r4, #8]
   21878:	f857 3b1c 	ldr.w	r3, [r7], #28
   2187c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   21880:	463d      	mov	r5, r7
   21882:	6023      	str	r3, [r4, #0]
   21884:	6831      	ldr	r1, [r6, #0]
   21886:	ab03      	add	r3, sp, #12
   21888:	2202      	movs	r2, #2
   2188a:	7809      	ldrb	r1, [r1, #0]
   2188c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   21890:	f004 ffbb 	bl	2680a <memchr>
   21894:	b328      	cbz	r0, 218e2 <_scanf_i+0xb6>
   21896:	f1bb 0f01 	cmp.w	fp, #1
   2189a:	d159      	bne.n	21950 <_scanf_i+0x124>
   2189c:	6862      	ldr	r2, [r4, #4]
   2189e:	b92a      	cbnz	r2, 218ac <_scanf_i+0x80>
   218a0:	6822      	ldr	r2, [r4, #0]
   218a2:	2308      	movs	r3, #8
   218a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   218a8:	6063      	str	r3, [r4, #4]
   218aa:	6022      	str	r2, [r4, #0]
   218ac:	6822      	ldr	r2, [r4, #0]
   218ae:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   218b2:	6022      	str	r2, [r4, #0]
   218b4:	68a2      	ldr	r2, [r4, #8]
   218b6:	1e51      	subs	r1, r2, #1
   218b8:	60a1      	str	r1, [r4, #8]
   218ba:	b192      	cbz	r2, 218e2 <_scanf_i+0xb6>
   218bc:	6832      	ldr	r2, [r6, #0]
   218be:	1c51      	adds	r1, r2, #1
   218c0:	6031      	str	r1, [r6, #0]
   218c2:	7812      	ldrb	r2, [r2, #0]
   218c4:	f805 2b01 	strb.w	r2, [r5], #1
   218c8:	6872      	ldr	r2, [r6, #4]
   218ca:	3a01      	subs	r2, #1
   218cc:	2a00      	cmp	r2, #0
   218ce:	6072      	str	r2, [r6, #4]
   218d0:	dc07      	bgt.n	218e2 <_scanf_i+0xb6>
   218d2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   218d6:	4631      	mov	r1, r6
   218d8:	4650      	mov	r0, sl
   218da:	4790      	blx	r2
   218dc:	2800      	cmp	r0, #0
   218de:	f040 8085 	bne.w	219ec <_scanf_i+0x1c0>
   218e2:	f10b 0b01 	add.w	fp, fp, #1
   218e6:	f1bb 0f03 	cmp.w	fp, #3
   218ea:	d1cb      	bne.n	21884 <_scanf_i+0x58>
   218ec:	6863      	ldr	r3, [r4, #4]
   218ee:	b90b      	cbnz	r3, 218f4 <_scanf_i+0xc8>
   218f0:	230a      	movs	r3, #10
   218f2:	6063      	str	r3, [r4, #4]
   218f4:	6863      	ldr	r3, [r4, #4]
   218f6:	f04f 0b00 	mov.w	fp, #0
   218fa:	4944      	ldr	r1, [pc, #272]	; (21a0c <_scanf_i+0x1e0>)
   218fc:	6960      	ldr	r0, [r4, #20]
   218fe:	1ac9      	subs	r1, r1, r3
   21900:	f005 f996 	bl	26c30 <__sccl>
   21904:	68a3      	ldr	r3, [r4, #8]
   21906:	6822      	ldr	r2, [r4, #0]
   21908:	2b00      	cmp	r3, #0
   2190a:	d03d      	beq.n	21988 <_scanf_i+0x15c>
   2190c:	6831      	ldr	r1, [r6, #0]
   2190e:	6960      	ldr	r0, [r4, #20]
   21910:	f891 c000 	ldrb.w	ip, [r1]
   21914:	f810 000c 	ldrb.w	r0, [r0, ip]
   21918:	2800      	cmp	r0, #0
   2191a:	d035      	beq.n	21988 <_scanf_i+0x15c>
   2191c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   21920:	d124      	bne.n	2196c <_scanf_i+0x140>
   21922:	0510      	lsls	r0, r2, #20
   21924:	d522      	bpl.n	2196c <_scanf_i+0x140>
   21926:	f10b 0b01 	add.w	fp, fp, #1
   2192a:	f1b9 0f00 	cmp.w	r9, #0
   2192e:	d003      	beq.n	21938 <_scanf_i+0x10c>
   21930:	3301      	adds	r3, #1
   21932:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   21936:	60a3      	str	r3, [r4, #8]
   21938:	6873      	ldr	r3, [r6, #4]
   2193a:	3b01      	subs	r3, #1
   2193c:	2b00      	cmp	r3, #0
   2193e:	6073      	str	r3, [r6, #4]
   21940:	dd1b      	ble.n	2197a <_scanf_i+0x14e>
   21942:	6833      	ldr	r3, [r6, #0]
   21944:	3301      	adds	r3, #1
   21946:	6033      	str	r3, [r6, #0]
   21948:	68a3      	ldr	r3, [r4, #8]
   2194a:	3b01      	subs	r3, #1
   2194c:	60a3      	str	r3, [r4, #8]
   2194e:	e7d9      	b.n	21904 <_scanf_i+0xd8>
   21950:	f1bb 0f02 	cmp.w	fp, #2
   21954:	d1ae      	bne.n	218b4 <_scanf_i+0x88>
   21956:	6822      	ldr	r2, [r4, #0]
   21958:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2195c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   21960:	d1bf      	bne.n	218e2 <_scanf_i+0xb6>
   21962:	2310      	movs	r3, #16
   21964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   21968:	6063      	str	r3, [r4, #4]
   2196a:	e7a2      	b.n	218b2 <_scanf_i+0x86>
   2196c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   21970:	6022      	str	r2, [r4, #0]
   21972:	780b      	ldrb	r3, [r1, #0]
   21974:	f805 3b01 	strb.w	r3, [r5], #1
   21978:	e7de      	b.n	21938 <_scanf_i+0x10c>
   2197a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2197e:	4631      	mov	r1, r6
   21980:	4650      	mov	r0, sl
   21982:	4798      	blx	r3
   21984:	2800      	cmp	r0, #0
   21986:	d0df      	beq.n	21948 <_scanf_i+0x11c>
   21988:	6823      	ldr	r3, [r4, #0]
   2198a:	05d9      	lsls	r1, r3, #23
   2198c:	d50d      	bpl.n	219aa <_scanf_i+0x17e>
   2198e:	42bd      	cmp	r5, r7
   21990:	d909      	bls.n	219a6 <_scanf_i+0x17a>
   21992:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   21996:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2199a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2199e:	4632      	mov	r2, r6
   219a0:	464d      	mov	r5, r9
   219a2:	4650      	mov	r0, sl
   219a4:	4798      	blx	r3
   219a6:	42bd      	cmp	r5, r7
   219a8:	d028      	beq.n	219fc <_scanf_i+0x1d0>
   219aa:	6822      	ldr	r2, [r4, #0]
   219ac:	f012 0210 	ands.w	r2, r2, #16
   219b0:	d113      	bne.n	219da <_scanf_i+0x1ae>
   219b2:	702a      	strb	r2, [r5, #0]
   219b4:	4639      	mov	r1, r7
   219b6:	6863      	ldr	r3, [r4, #4]
   219b8:	4650      	mov	r0, sl
   219ba:	9e01      	ldr	r6, [sp, #4]
   219bc:	47b0      	blx	r6
   219be:	f8d8 3000 	ldr.w	r3, [r8]
   219c2:	6821      	ldr	r1, [r4, #0]
   219c4:	1d1a      	adds	r2, r3, #4
   219c6:	f011 0f20 	tst.w	r1, #32
   219ca:	f8c8 2000 	str.w	r2, [r8]
   219ce:	681b      	ldr	r3, [r3, #0]
   219d0:	d00f      	beq.n	219f2 <_scanf_i+0x1c6>
   219d2:	6018      	str	r0, [r3, #0]
   219d4:	68e3      	ldr	r3, [r4, #12]
   219d6:	3301      	adds	r3, #1
   219d8:	60e3      	str	r3, [r4, #12]
   219da:	1bed      	subs	r5, r5, r7
   219dc:	2000      	movs	r0, #0
   219de:	44ab      	add	fp, r5
   219e0:	6925      	ldr	r5, [r4, #16]
   219e2:	445d      	add	r5, fp
   219e4:	6125      	str	r5, [r4, #16]
   219e6:	b007      	add	sp, #28
   219e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219ec:	f04f 0b00 	mov.w	fp, #0
   219f0:	e7ca      	b.n	21988 <_scanf_i+0x15c>
   219f2:	07ca      	lsls	r2, r1, #31
   219f4:	bf4c      	ite	mi
   219f6:	8018      	strhmi	r0, [r3, #0]
   219f8:	6018      	strpl	r0, [r3, #0]
   219fa:	e7eb      	b.n	219d4 <_scanf_i+0x1a8>
   219fc:	2001      	movs	r0, #1
   219fe:	e7f2      	b.n	219e6 <_scanf_i+0x1ba>
   21a00:	00027228 	.word	0x00027228
   21a04:	0002698b 	.word	0x0002698b
   21a08:	00026987 	.word	0x00026987
   21a0c:	0002a4e3 	.word	0x0002a4e3

00021a10 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   21a10:	4770      	bx	lr

00021a12 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   21a12:	b40c      	push	{r2, r3}
   21a14:	b500      	push	{lr}
   21a16:	b083      	sub	sp, #12
   21a18:	4603      	mov	r3, r0
   21a1a:	4608      	mov	r0, r1
   21a1c:	aa04      	add	r2, sp, #16
   21a1e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
   21a22:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   21a24:	68db      	ldr	r3, [r3, #12]
   21a26:	4798      	blx	r3
	va_end(args);

	return res;
}
   21a28:	b003      	add	sp, #12
   21a2a:	f85d eb04 	ldr.w	lr, [sp], #4
   21a2e:	b002      	add	sp, #8
   21a30:	4770      	bx	lr

00021a32 <z_free_fd>:

void z_free_fd(int fd)
{
   21a32:	b508      	push	{r3, lr}
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
   21a34:	f7ef fd3a 	bl	114ac <z_fd_unref>
}
   21a38:	bd08      	pop	{r3, pc}

00021a3a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   21a3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   21a3e:	b2db      	uxtb	r3, r3
   21a40:	2b09      	cmp	r3, #9
   21a42:	d802      	bhi.n	21a4a <char2hex+0x10>
		*x = c - '0';
   21a44:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   21a46:	2000      	movs	r0, #0
   21a48:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   21a4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   21a4e:	b2db      	uxtb	r3, r3
   21a50:	2b05      	cmp	r3, #5
   21a52:	d803      	bhi.n	21a5c <char2hex+0x22>
		*x = c - 'a' + 10;
   21a54:	3857      	subs	r0, #87	; 0x57
   21a56:	7008      	strb	r0, [r1, #0]
	return 0;
   21a58:	2000      	movs	r0, #0
   21a5a:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   21a5c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   21a60:	b2db      	uxtb	r3, r3
   21a62:	2b05      	cmp	r3, #5
   21a64:	d803      	bhi.n	21a6e <char2hex+0x34>
		*x = c - 'A' + 10;
   21a66:	3837      	subs	r0, #55	; 0x37
   21a68:	7008      	strb	r0, [r1, #0]
	return 0;
   21a6a:	2000      	movs	r0, #0
   21a6c:	4770      	bx	lr
		return -EINVAL;
   21a6e:	f06f 0015 	mvn.w	r0, #21
}
   21a72:	4770      	bx	lr

00021a74 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   21a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21a78:	b083      	sub	sp, #12
   21a7a:	4616      	mov	r6, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   21a7c:	f001 0201 	and.w	r2, r1, #1
   21a80:	eb02 0851 	add.w	r8, r2, r1, lsr #1
   21a84:	4598      	cmp	r8, r3
   21a86:	d832      	bhi.n	21aee <hex2bin+0x7a>
   21a88:	4607      	mov	r7, r0
   21a8a:	ea4f 0951 	mov.w	r9, r1, lsr #1
		return 0;
	}

	/* if hexlen is uneven, insert leading zero nibble */
	if (hexlen % 2) {
   21a8e:	b90a      	cbnz	r2, 21a94 <hex2bin+0x20>
		hex++;
		buf++;
	}

	/* regular hex conversion */
	for (size_t i = 0; i < hexlen / 2; i++) {
   21a90:	2400      	movs	r4, #0
   21a92:	e012      	b.n	21aba <hex2bin+0x46>
		if (char2hex(hex[0], &dec) < 0) {
   21a94:	f10d 0107 	add.w	r1, sp, #7
   21a98:	7800      	ldrb	r0, [r0, #0]
   21a9a:	f7ff ffce 	bl	21a3a <char2hex>
   21a9e:	2800      	cmp	r0, #0
   21aa0:	db2b      	blt.n	21afa <hex2bin+0x86>
		buf[0] = dec;
   21aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21aa6:	f806 3b01 	strb.w	r3, [r6], #1
		hex++;
   21aaa:	3701      	adds	r7, #1
		buf++;
   21aac:	e7f0      	b.n	21a90 <hex2bin+0x1c>
		buf[i] = dec << 4;

		if (char2hex(hex[2 * i + 1], &dec) < 0) {
			return 0;
		}
		buf[i] += dec;
   21aae:	5d33      	ldrb	r3, [r6, r4]
   21ab0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   21ab4:	4413      	add	r3, r2
   21ab6:	5533      	strb	r3, [r6, r4]
	for (size_t i = 0; i < hexlen / 2; i++) {
   21ab8:	3401      	adds	r4, #1
   21aba:	45a1      	cmp	r9, r4
   21abc:	d919      	bls.n	21af2 <hex2bin+0x7e>
		if (char2hex(hex[2 * i], &dec) < 0) {
   21abe:	0065      	lsls	r5, r4, #1
   21ac0:	f10d 0107 	add.w	r1, sp, #7
   21ac4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
   21ac8:	f7ff ffb7 	bl	21a3a <char2hex>
   21acc:	2800      	cmp	r0, #0
   21ace:	db17      	blt.n	21b00 <hex2bin+0x8c>
		buf[i] = dec << 4;
   21ad0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21ad4:	011b      	lsls	r3, r3, #4
   21ad6:	5533      	strb	r3, [r6, r4]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   21ad8:	3501      	adds	r5, #1
   21ada:	f10d 0107 	add.w	r1, sp, #7
   21ade:	5d78      	ldrb	r0, [r7, r5]
   21ae0:	f7ff ffab 	bl	21a3a <char2hex>
   21ae4:	2800      	cmp	r0, #0
   21ae6:	dae2      	bge.n	21aae <hex2bin+0x3a>
			return 0;
   21ae8:	f04f 0800 	mov.w	r8, #0
   21aec:	e001      	b.n	21af2 <hex2bin+0x7e>
		return 0;
   21aee:	f04f 0800 	mov.w	r8, #0
	}

	return hexlen / 2 + hexlen % 2;
}
   21af2:	4640      	mov	r0, r8
   21af4:	b003      	add	sp, #12
   21af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return 0;
   21afa:	f04f 0800 	mov.w	r8, #0
   21afe:	e7f8      	b.n	21af2 <hex2bin+0x7e>
			return 0;
   21b00:	f04f 0800 	mov.w	r8, #0
   21b04:	e7f5      	b.n	21af2 <hex2bin+0x7e>

00021b06 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   21b06:	4602      	mov	r2, r0
   21b08:	b1b0      	cbz	r0, 21b38 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21b0a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21b0c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   21b10:	2b02      	cmp	r3, #2
   21b12:	d00b      	beq.n	21b2c <sys_notify_validate+0x26>
   21b14:	2b03      	cmp	r3, #3
   21b16:	d004      	beq.n	21b22 <sys_notify_validate+0x1c>
   21b18:	2b01      	cmp	r3, #1
   21b1a:	d004      	beq.n	21b26 <sys_notify_validate+0x20>
   21b1c:	f06f 0015 	mvn.w	r0, #21
   21b20:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   21b22:	6803      	ldr	r3, [r0, #0]
   21b24:	b15b      	cbz	r3, 21b3e <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   21b26:	2000      	movs	r0, #0
   21b28:	6090      	str	r0, [r2, #8]
   21b2a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   21b2c:	6803      	ldr	r3, [r0, #0]
   21b2e:	2b00      	cmp	r3, #0
   21b30:	d1f9      	bne.n	21b26 <sys_notify_validate+0x20>
			rv = -EINVAL;
   21b32:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   21b36:	4770      	bx	lr
		return -EINVAL;
   21b38:	f06f 0015 	mvn.w	r0, #21
   21b3c:	4770      	bx	lr
			rv = -EINVAL;
   21b3e:	f06f 0015 	mvn.w	r0, #21
   21b42:	4770      	bx	lr

00021b44 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   21b44:	b510      	push	{r4, lr}
   21b46:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21b48:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21b4a:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   21b4e:	6081      	str	r1, [r0, #8]
	switch (method) {
   21b50:	2a02      	cmp	r2, #2
   21b52:	d004      	beq.n	21b5e <sys_notify_finalize+0x1a>
   21b54:	2a03      	cmp	r2, #3
   21b56:	d105      	bne.n	21b64 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   21b58:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   21b5a:	2000      	movs	r0, #0
		break;
   21b5c:	e004      	b.n	21b68 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   21b5e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   21b60:	2400      	movs	r4, #0
		break;
   21b62:	e001      	b.n	21b68 <sys_notify_finalize+0x24>
	switch (method) {
   21b64:	2400      	movs	r4, #0
   21b66:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21b68:	2200      	movs	r2, #0
   21b6a:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   21b6c:	b108      	cbz	r0, 21b72 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   21b6e:	f7fe fe47 	bl	20800 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   21b72:	4620      	mov	r0, r4
   21b74:	bd10      	pop	{r4, pc}

00021b76 <arch_printk_char_out>:
}
   21b76:	2000      	movs	r0, #0
   21b78:	4770      	bx	lr

00021b7a <str_out>:
{
   21b7a:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21b7c:	680c      	ldr	r4, [r1, #0]
   21b7e:	b154      	cbz	r4, 21b96 <str_out+0x1c>
   21b80:	688a      	ldr	r2, [r1, #8]
   21b82:	684b      	ldr	r3, [r1, #4]
   21b84:	429a      	cmp	r2, r3
   21b86:	da06      	bge.n	21b96 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   21b88:	3b01      	subs	r3, #1
   21b8a:	429a      	cmp	r2, r3
   21b8c:	d009      	beq.n	21ba2 <str_out+0x28>
		ctx->str[ctx->count++] = c;
   21b8e:	1c53      	adds	r3, r2, #1
   21b90:	608b      	str	r3, [r1, #8]
   21b92:	54a0      	strb	r0, [r4, r2]
   21b94:	e002      	b.n	21b9c <str_out+0x22>
		ctx->count++;
   21b96:	688b      	ldr	r3, [r1, #8]
   21b98:	3301      	adds	r3, #1
   21b9a:	608b      	str	r3, [r1, #8]
}
   21b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
   21ba0:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   21ba2:	1c53      	adds	r3, r2, #1
   21ba4:	608b      	str	r3, [r1, #8]
   21ba6:	2300      	movs	r3, #0
   21ba8:	54a3      	strb	r3, [r4, r2]
   21baa:	e7f7      	b.n	21b9c <str_out+0x22>

00021bac <printk>:
{
   21bac:	b40f      	push	{r0, r1, r2, r3}
   21bae:	b500      	push	{lr}
   21bb0:	b083      	sub	sp, #12
   21bb2:	a904      	add	r1, sp, #16
   21bb4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   21bb8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   21bba:	f7ef fd35 	bl	11628 <vprintk>
}
   21bbe:	b003      	add	sp, #12
   21bc0:	f85d eb04 	ldr.w	lr, [sp], #4
   21bc4:	b004      	add	sp, #16
   21bc6:	4770      	bx	lr

00021bc8 <snprintk>:
{
   21bc8:	b40c      	push	{r2, r3}
   21bca:	b500      	push	{lr}
   21bcc:	b083      	sub	sp, #12
   21bce:	ab04      	add	r3, sp, #16
   21bd0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   21bd4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   21bd6:	f7ef fd37 	bl	11648 <vsnprintk>
}
   21bda:	b003      	add	sp, #12
   21bdc:	f85d eb04 	ldr.w	lr, [sp], #4
   21be0:	b002      	add	sp, #8
   21be2:	4770      	bx	lr

00021be4 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   21be4:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   21be8:	8b01      	ldrh	r1, [r0, #24]
   21bea:	f021 0107 	bic.w	r1, r1, #7
   21bee:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   21bf0:	8301      	strh	r1, [r0, #24]
}
   21bf2:	4770      	bx	lr

00021bf4 <notify_monitors>:
{
   21bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21bf8:	4606      	mov	r6, r0
   21bfa:	460f      	mov	r7, r1
   21bfc:	4690      	mov	r8, r2
	return list->head;
   21bfe:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   21c00:	b119      	cbz	r1, 21c0a <notify_monitors+0x16>
   21c02:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   21c04:	b131      	cbz	r1, 21c14 <notify_monitors+0x20>
	return node->next;
   21c06:	680c      	ldr	r4, [r1, #0]
   21c08:	e004      	b.n	21c14 <notify_monitors+0x20>
   21c0a:	460c      	mov	r4, r1
   21c0c:	e002      	b.n	21c14 <notify_monitors+0x20>
   21c0e:	4623      	mov	r3, r4
   21c10:	4621      	mov	r1, r4
   21c12:	461c      	mov	r4, r3
   21c14:	b159      	cbz	r1, 21c2e <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   21c16:	684d      	ldr	r5, [r1, #4]
   21c18:	4643      	mov	r3, r8
   21c1a:	463a      	mov	r2, r7
   21c1c:	4630      	mov	r0, r6
   21c1e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   21c20:	2c00      	cmp	r4, #0
   21c22:	d0f4      	beq.n	21c0e <notify_monitors+0x1a>
   21c24:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   21c26:	2c00      	cmp	r4, #0
   21c28:	d0f2      	beq.n	21c10 <notify_monitors+0x1c>
	return node->next;
   21c2a:	6823      	ldr	r3, [r4, #0]
   21c2c:	e7f0      	b.n	21c10 <notify_monitors+0x1c>
}
   21c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021c32 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21c32:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   21c34:	f013 0307 	ands.w	r3, r3, #7
   21c38:	d103      	bne.n	21c42 <process_recheck+0x10>
	return list->head;
   21c3a:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   21c3c:	b10a      	cbz	r2, 21c42 <process_recheck+0x10>
		evt = EVT_START;
   21c3e:	2003      	movs	r0, #3
   21c40:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   21c42:	2b02      	cmp	r3, #2
   21c44:	d003      	beq.n	21c4e <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   21c46:	2b01      	cmp	r3, #1
   21c48:	d006      	beq.n	21c58 <process_recheck+0x26>
	int evt = EVT_NOP;
   21c4a:	2000      	movs	r0, #0
   21c4c:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   21c4e:	8b42      	ldrh	r2, [r0, #26]
   21c50:	2a00      	cmp	r2, #0
   21c52:	d1f8      	bne.n	21c46 <process_recheck+0x14>
		evt = EVT_STOP;
   21c54:	2004      	movs	r0, #4
   21c56:	4770      	bx	lr
   21c58:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   21c5a:	b10b      	cbz	r3, 21c60 <process_recheck+0x2e>
		evt = EVT_RESET;
   21c5c:	2005      	movs	r0, #5
}
   21c5e:	4770      	bx	lr
	int evt = EVT_NOP;
   21c60:	2000      	movs	r0, #0
   21c62:	4770      	bx	lr

00021c64 <process_complete>:
{
   21c64:	b538      	push	{r3, r4, r5, lr}
   21c66:	4604      	mov	r4, r0
   21c68:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21c6a:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   21c6c:	2a00      	cmp	r2, #0
   21c6e:	db07      	blt.n	21c80 <process_complete+0x1c>
   21c70:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   21c74:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   21c76:	2a01      	cmp	r2, #1
   21c78:	d90e      	bls.n	21c98 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   21c7a:	2b04      	cmp	r3, #4
   21c7c:	d032      	beq.n	21ce4 <process_complete+0x80>
}
   21c7e:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   21c80:	e9d0 0100 	ldrd	r0, r1, [r0]
   21c84:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   21c88:	2300      	movs	r3, #0
   21c8a:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   21c8c:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   21c8e:	2101      	movs	r1, #1
   21c90:	4620      	mov	r0, r4
   21c92:	f7ff ffa7 	bl	21be4 <set_state>
   21c96:	e7f2      	b.n	21c7e <process_complete+0x1a>
		*clients = mgr->clients;
   21c98:	e9d0 0100 	ldrd	r0, r1, [r0]
   21c9c:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   21ca0:	2200      	movs	r2, #0
   21ca2:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   21ca4:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   21ca6:	2b06      	cmp	r3, #6
   21ca8:	d117      	bne.n	21cda <process_complete+0x76>
	return list->head;
   21caa:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   21cac:	b13b      	cbz	r3, 21cbe <process_complete+0x5a>
				mgr->refs += 1U;
   21cae:	8b62      	ldrh	r2, [r4, #26]
   21cb0:	3201      	adds	r2, #1
   21cb2:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   21cb4:	2b00      	cmp	r3, #0
   21cb6:	d0f9      	beq.n	21cac <process_complete+0x48>
	return node->next;
   21cb8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   21cba:	2b00      	cmp	r3, #0
   21cbc:	d1f6      	bne.n	21cac <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   21cbe:	2102      	movs	r1, #2
   21cc0:	4620      	mov	r0, r4
   21cc2:	f7ff ff8f 	bl	21be4 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   21cc6:	4620      	mov	r0, r4
   21cc8:	f7ff ffb3 	bl	21c32 <process_recheck>
   21ccc:	2800      	cmp	r0, #0
   21cce:	d0d6      	beq.n	21c7e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   21cd0:	8b23      	ldrh	r3, [r4, #24]
   21cd2:	f043 0320 	orr.w	r3, r3, #32
   21cd6:	8323      	strh	r3, [r4, #24]
   21cd8:	e7d1      	b.n	21c7e <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   21cda:	2100      	movs	r1, #0
   21cdc:	4620      	mov	r0, r4
   21cde:	f7ff ff81 	bl	21be4 <set_state>
   21ce2:	e7f0      	b.n	21cc6 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   21ce4:	2100      	movs	r1, #0
   21ce6:	f7ff ff7d 	bl	21be4 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   21cea:	4620      	mov	r0, r4
   21cec:	f7ff ffa1 	bl	21c32 <process_recheck>
   21cf0:	2800      	cmp	r0, #0
   21cf2:	d0c4      	beq.n	21c7e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   21cf4:	8b23      	ldrh	r3, [r4, #24]
   21cf6:	f043 0320 	orr.w	r3, r3, #32
   21cfa:	8323      	strh	r3, [r4, #24]
}
   21cfc:	e7bf      	b.n	21c7e <process_complete+0x1a>

00021cfe <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   21cfe:	b158      	cbz	r0, 21d18 <validate_args+0x1a>
{
   21d00:	b510      	push	{r4, lr}
   21d02:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21d04:	b159      	cbz	r1, 21d1e <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   21d06:	1d08      	adds	r0, r1, #4
   21d08:	f7ff fefd 	bl	21b06 <sys_notify_validate>
	if ((rv == 0)
   21d0c:	b918      	cbnz	r0, 21d16 <validate_args+0x18>
	    && ((cli->notify.flags
   21d0e:	68a3      	ldr	r3, [r4, #8]
   21d10:	f033 0303 	bics.w	r3, r3, #3
   21d14:	d106      	bne.n	21d24 <validate_args+0x26>
}
   21d16:	bd10      	pop	{r4, pc}
		return -EINVAL;
   21d18:	f06f 0015 	mvn.w	r0, #21
}
   21d1c:	4770      	bx	lr
		return -EINVAL;
   21d1e:	f06f 0015 	mvn.w	r0, #21
   21d22:	e7f8      	b.n	21d16 <validate_args+0x18>
		rv = -EINVAL;
   21d24:	f06f 0015 	mvn.w	r0, #21
   21d28:	e7f5      	b.n	21d16 <validate_args+0x18>

00021d2a <notify_one>:
{
   21d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d2e:	4607      	mov	r7, r0
   21d30:	460c      	mov	r4, r1
   21d32:	4616      	mov	r6, r2
   21d34:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21d36:	4619      	mov	r1, r3
   21d38:	1d20      	adds	r0, r4, #4
   21d3a:	f7ff ff03 	bl	21b44 <sys_notify_finalize>
	if (cb) {
   21d3e:	b128      	cbz	r0, 21d4c <notify_one+0x22>
   21d40:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   21d42:	462b      	mov	r3, r5
   21d44:	4632      	mov	r2, r6
   21d46:	4621      	mov	r1, r4
   21d48:	4638      	mov	r0, r7
   21d4a:	47c0      	blx	r8
}
   21d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021d50 <notify_all>:
{
   21d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21d54:	4681      	mov	r9, r0
   21d56:	460c      	mov	r4, r1
   21d58:	4690      	mov	r8, r2
   21d5a:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   21d5c:	e005      	b.n	21d6a <notify_all+0x1a>
	list->tail = node;
   21d5e:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   21d60:	463b      	mov	r3, r7
   21d62:	4642      	mov	r2, r8
   21d64:	4648      	mov	r0, r9
   21d66:	f7ff ffe0 	bl	21d2a <notify_one>
	return list->head;
   21d6a:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   21d6c:	b129      	cbz	r1, 21d7a <notify_all+0x2a>
	return node->next;
   21d6e:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   21d70:	6025      	str	r5, [r4, #0]
	return list->tail;
   21d72:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21d74:	428e      	cmp	r6, r1
   21d76:	d1f3      	bne.n	21d60 <notify_all+0x10>
   21d78:	e7f1      	b.n	21d5e <notify_all+0xe>
}
   21d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021d7e <transition_complete>:
{
   21d7e:	b510      	push	{r4, lr}
	__asm__ volatile(
   21d80:	f04f 0420 	mov.w	r4, #32
   21d84:	f3ef 8211 	mrs	r2, BASEPRI
   21d88:	f384 8812 	msr	BASEPRI_MAX, r4
   21d8c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   21d90:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   21d92:	2101      	movs	r1, #1
   21d94:	f7ef fc6e 	bl	11674 <process_event>
}
   21d98:	bd10      	pop	{r4, pc}

00021d9a <onoff_manager_init>:
	if ((mgr == NULL)
   21d9a:	4603      	mov	r3, r0
   21d9c:	b168      	cbz	r0, 21dba <onoff_manager_init+0x20>
	    || (transitions == NULL)
   21d9e:	b179      	cbz	r1, 21dc0 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   21da0:	680a      	ldr	r2, [r1, #0]
   21da2:	b182      	cbz	r2, 21dc6 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   21da4:	684a      	ldr	r2, [r1, #4]
   21da6:	b18a      	cbz	r2, 21dcc <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21da8:	2000      	movs	r0, #0
   21daa:	6018      	str	r0, [r3, #0]
   21dac:	6058      	str	r0, [r3, #4]
   21dae:	6098      	str	r0, [r3, #8]
   21db0:	60d8      	str	r0, [r3, #12]
   21db2:	6158      	str	r0, [r3, #20]
   21db4:	6198      	str	r0, [r3, #24]
   21db6:	6119      	str	r1, [r3, #16]
	return 0;
   21db8:	4770      	bx	lr
		return -EINVAL;
   21dba:	f06f 0015 	mvn.w	r0, #21
   21dbe:	4770      	bx	lr
   21dc0:	f06f 0015 	mvn.w	r0, #21
   21dc4:	4770      	bx	lr
   21dc6:	f06f 0015 	mvn.w	r0, #21
   21dca:	4770      	bx	lr
   21dcc:	f06f 0015 	mvn.w	r0, #21
}
   21dd0:	4770      	bx	lr

00021dd2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   21dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21dd4:	4604      	mov	r4, r0
   21dd6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   21dd8:	f7ff ff91 	bl	21cfe <validate_args>

	if (rv < 0) {
   21ddc:	1e06      	subs	r6, r0, #0
   21dde:	db37      	blt.n	21e50 <onoff_request+0x7e>
   21de0:	f04f 0320 	mov.w	r3, #32
   21de4:	f3ef 8211 	mrs	r2, BASEPRI
   21de8:	f383 8812 	msr	BASEPRI_MAX, r3
   21dec:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21df0:	8b25      	ldrh	r5, [r4, #24]
   21df2:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21df6:	8b63      	ldrh	r3, [r4, #26]
   21df8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21dfc:	428b      	cmp	r3, r1
   21dfe:	d02f      	beq.n	21e60 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   21e00:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   21e02:	2d02      	cmp	r5, #2
   21e04:	d00c      	beq.n	21e20 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   21e06:	b18d      	cbz	r5, 21e2c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   21e08:	2d04      	cmp	r5, #4
   21e0a:	d00f      	beq.n	21e2c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   21e0c:	2d06      	cmp	r5, #6
   21e0e:	d00d      	beq.n	21e2c <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   21e10:	2d05      	cmp	r5, #5
   21e12:	d01f      	beq.n	21e54 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   21e14:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   21e18:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   21e1a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   21e1c:	4608      	mov	r0, r1
   21e1e:	e00a      	b.n	21e36 <onoff_request+0x64>
		mgr->refs += 1U;
   21e20:	3301      	adds	r3, #1
   21e22:	8363      	strh	r3, [r4, #26]
		notify = true;
   21e24:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   21e26:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   21e28:	4618      	mov	r0, r3
   21e2a:	e004      	b.n	21e36 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   21e2c:	fab5 f385 	clz	r3, r5
   21e30:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   21e32:	2100      	movs	r1, #0
		add_client = true;
   21e34:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   21e36:	b128      	cbz	r0, 21e44 <onoff_request+0x72>
	parent->next = child;
   21e38:	2000      	movs	r0, #0
   21e3a:	6038      	str	r0, [r7, #0]
	return list->tail;
   21e3c:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   21e3e:	b1a8      	cbz	r0, 21e6c <onoff_request+0x9a>
	parent->next = child;
   21e40:	6007      	str	r7, [r0, #0]
	list->tail = node;
   21e42:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   21e44:	b9ab      	cbnz	r3, 21e72 <onoff_request+0xa0>
	__asm__ volatile(
   21e46:	f382 8811 	msr	BASEPRI, r2
   21e4a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   21e4e:	b9a9      	cbnz	r1, 21e7c <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   21e50:	4630      	mov	r0, r6
   21e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   21e54:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   21e58:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   21e5a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   21e5c:	4608      	mov	r0, r1
   21e5e:	e7ea      	b.n	21e36 <onoff_request+0x64>
		rv = -EAGAIN;
   21e60:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   21e64:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   21e66:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   21e68:	4608      	mov	r0, r1
   21e6a:	e7e4      	b.n	21e36 <onoff_request+0x64>
   21e6c:	6067      	str	r7, [r4, #4]
	list->head = node;
   21e6e:	6027      	str	r7, [r4, #0]
}
   21e70:	e7e8      	b.n	21e44 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   21e72:	2102      	movs	r1, #2
   21e74:	4620      	mov	r0, r4
   21e76:	f7ef fbfd 	bl	11674 <process_event>
   21e7a:	e7e9      	b.n	21e50 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   21e7c:	2300      	movs	r3, #0
   21e7e:	462a      	mov	r2, r5
   21e80:	4639      	mov	r1, r7
   21e82:	4620      	mov	r0, r4
   21e84:	f7ff ff51 	bl	21d2a <notify_one>
   21e88:	e7e2      	b.n	21e50 <onoff_request+0x7e>

00021e8a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21e8a:	b508      	push	{r3, lr}
   21e8c:	4604      	mov	r4, r0
   21e8e:	4608      	mov	r0, r1
   21e90:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   21e92:	461a      	mov	r2, r3
   21e94:	47a0      	blx	r4
	return z_impl_z_current_get();
   21e96:	f7fd ff79 	bl	1fd8c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   21e9a:	f7f2 fd5b 	bl	14954 <z_impl_k_thread_abort>

00021e9e <timeutil_timegm64>:

int64_t timeutil_timegm64(const struct tm *tm)
{
   21e9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ea2:	4682      	mov	sl, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   21ea4:	6902      	ldr	r2, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   21ea6:	68c3      	ldr	r3, [r0, #12]
	int64_t ndays = time_days_from_civil(y, m, d);
   21ea8:	3b01      	subs	r3, #1
   21eaa:	3201      	adds	r2, #1
   21eac:	f240 706c 	movw	r0, #1900	; 0x76c
   21eb0:	2100      	movs	r1, #0
   21eb2:	4689      	mov	r9, r1
   21eb4:	f8da 1014 	ldr.w	r1, [sl, #20]
   21eb8:	eb10 0801 	adds.w	r8, r0, r1
   21ebc:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
   21ec0:	4640      	mov	r0, r8
   21ec2:	4649      	mov	r1, r9
   21ec4:	f7ef fc82 	bl	117cc <time_days_from_civil>
	int64_t time = tm->tm_sec;
   21ec8:	f8da c000 	ldr.w	ip, [sl]

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   21ecc:	f8da e004 	ldr.w	lr, [sl, #4]
   21ed0:	f8da 9008 	ldr.w	r9, [sl, #8]
   21ed4:	464a      	mov	r2, r9
   21ed6:	17d3      	asrs	r3, r2, #31
   21ed8:	ea4f 1b03 	mov.w	fp, r3, lsl #4
   21edc:	ea4f 1809 	mov.w	r8, r9, lsl #4
   21ee0:	ea4b 7a19 	orr.w	sl, fp, r9, lsr #28
   21ee4:	ebb8 0409 	subs.w	r4, r8, r9
   21ee8:	eb6a 0503 	sbc.w	r5, sl, r3
   21eec:	00ab      	lsls	r3, r5, #2
   21eee:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
   21ef2:	00a2      	lsls	r2, r4, #2
   21ef4:	eb12 040e 	adds.w	r4, r2, lr
   21ef8:	eb43 75ee 	adc.w	r5, r3, lr, asr #31
   21efc:	ea4f 1e05 	mov.w	lr, r5, lsl #4
   21f00:	0123      	lsls	r3, r4, #4
   21f02:	ea4e 7214 	orr.w	r2, lr, r4, lsr #28
   21f06:	1b1e      	subs	r6, r3, r4
   21f08:	eb62 0705 	sbc.w	r7, r2, r5
   21f0c:	00bb      	lsls	r3, r7, #2
   21f0e:	ea43 7396 	orr.w	r3, r3, r6, lsr #30
   21f12:	00b2      	lsls	r2, r6, #2
   21f14:	eb12 060c 	adds.w	r6, r2, ip
   21f18:	eb43 77ec 	adc.w	r7, r3, ip, asr #31
	time += 86400LL * ndays;
   21f1c:	1803      	adds	r3, r0, r0
   21f1e:	eb41 0201 	adc.w	r2, r1, r1
   21f22:	181b      	adds	r3, r3, r0
   21f24:	eb42 0101 	adc.w	r1, r2, r1
   21f28:	010a      	lsls	r2, r1, #4
   21f2a:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
   21f2e:	0118      	lsls	r0, r3, #4
   21f30:	1ac3      	subs	r3, r0, r3
   21f32:	eb62 0201 	sbc.w	r2, r2, r1
   21f36:	0111      	lsls	r1, r2, #4
   21f38:	ea41 7113 	orr.w	r1, r1, r3, lsr #28
   21f3c:	0118      	lsls	r0, r3, #4
   21f3e:	1ac0      	subs	r0, r0, r3
   21f40:	eb61 0102 	sbc.w	r1, r1, r2
   21f44:	01cb      	lsls	r3, r1, #7
   21f46:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
   21f4a:	01c2      	lsls	r2, r0, #7
   21f4c:	4619      	mov	r1, r3

	return time;
}
   21f4e:	1990      	adds	r0, r2, r6
   21f50:	eb47 0101 	adc.w	r1, r7, r1
   21f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021f58 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   21f58:	00c9      	lsls	r1, r1, #3
   21f5a:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   21f5c:	4408      	add	r0, r1
   21f5e:	4770      	bx	lr

00021f60 <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   21f60:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   21f64:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   21f66:	4299      	cmp	r1, r3
   21f68:	d00f      	beq.n	21f8a <free_list_remove_bidx+0x2a>
{
   21f6a:	b410      	push	{r4}
   21f6c:	00cc      	lsls	r4, r1, #3
   21f6e:	4404      	add	r4, r0
   21f70:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   21f72:	3204      	adds	r2, #4
   21f74:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   21f78:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   21f7a:	3206      	adds	r2, #6
   21f7c:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   21f7e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   21f80:	3304      	adds	r3, #4
   21f82:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   21f84:	f85d 4b04 	ldr.w	r4, [sp], #4
   21f88:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   21f8a:	2301      	movs	r3, #1
   21f8c:	fa03 f102 	lsl.w	r1, r3, r2
   21f90:	68c3      	ldr	r3, [r0, #12]
   21f92:	ea23 0301 	bic.w	r3, r3, r1
   21f96:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   21f98:	3204      	adds	r2, #4
   21f9a:	2300      	movs	r3, #0
   21f9c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   21fa0:	4770      	bx	lr

00021fa2 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   21fa2:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   21fa4:	1d13      	adds	r3, r2, #4
   21fa6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   21faa:	b984      	cbnz	r4, 21fce <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   21fac:	2301      	movs	r3, #1
   21fae:	fa03 f402 	lsl.w	r4, r3, r2
   21fb2:	68c3      	ldr	r3, [r0, #12]
   21fb4:	4323      	orrs	r3, r4
   21fb6:	60c3      	str	r3, [r0, #12]
		b->next = c;
   21fb8:	3204      	adds	r2, #4
   21fba:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   21fbe:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   21fc0:	1d1a      	adds	r2, r3, #4
   21fc2:	b289      	uxth	r1, r1
   21fc4:	5281      	strh	r1, [r0, r2]
   21fc6:	3306      	adds	r3, #6
   21fc8:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   21fca:	bc70      	pop	{r4, r5, r6}
   21fcc:	4770      	bx	lr
	void *cmem = &buf[c];
   21fce:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   21fd0:	3204      	adds	r2, #4
   21fd2:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   21fd4:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   21fd6:	1d2e      	adds	r6, r5, #4
   21fd8:	5383      	strh	r3, [r0, r6]
   21fda:	3506      	adds	r5, #6
   21fdc:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   21fde:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   21fe0:	3306      	adds	r3, #6
   21fe2:	b289      	uxth	r1, r1
   21fe4:	52c1      	strh	r1, [r0, r3]
   21fe6:	5281      	strh	r1, [r0, r2]
   21fe8:	e7ef      	b.n	21fca <free_list_add_bidx+0x28>

00021fea <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   21fea:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   21fec:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   21fee:	3302      	adds	r3, #2
   21ff0:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   21ff2:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   21ff4:	1a89      	subs	r1, r1, r2
   21ff6:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21ffa:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   21ffc:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21ffe:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   22000:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   22002:	3402      	adds	r4, #2
   22004:	5303      	strh	r3, [r0, r4]
   22006:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2200a:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   2200e:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   22010:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   22014:	bc30      	pop	{r4, r5}
   22016:	4770      	bx	lr

00022018 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   22018:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   2201a:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   2201c:	3102      	adds	r1, #2
   2201e:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   22020:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   22022:	3402      	adds	r4, #2
   22024:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   22026:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   22028:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2202c:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   2202e:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   22030:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   22032:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   22036:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   2203a:	bc30      	pop	{r4, r5}
   2203c:	4770      	bx	lr

0002203e <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2203e:	3904      	subs	r1, #4
   22040:	1a08      	subs	r0, r1, r0
}
   22042:	08c0      	lsrs	r0, r0, #3
   22044:	4770      	bx	lr

00022046 <free_list_remove>:
{
   22046:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   22048:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2204c:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2204e:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   22050:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   22054:	f1c2 021f 	rsb	r2, r2, #31
   22058:	f7ff ff82 	bl	21f60 <free_list_remove_bidx>
}
   2205c:	bd08      	pop	{r3, pc}

0002205e <free_list_add>:
{
   2205e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   22060:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   22064:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   22066:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   22068:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   2206c:	f1c2 021f 	rsb	r2, r2, #31
   22070:	f7ff ff97 	bl	21fa2 <free_list_add_bidx>
}
   22074:	bd08      	pop	{r3, pc}

00022076 <free_chunk>:
{
   22076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22078:	4604      	mov	r4, r0
   2207a:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   2207c:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   2207e:	1cb7      	adds	r7, r6, #2
   22080:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   22082:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   22086:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2208a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2208c:	f013 0f01 	tst.w	r3, #1
   22090:	d00c      	beq.n	220ac <free_chunk+0x36>
   22092:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   22094:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   22096:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   2209a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2209c:	f013 0f01 	tst.w	r3, #1
   220a0:	d00e      	beq.n	220c0 <free_chunk+0x4a>
	free_list_add(h, c);
   220a2:	4629      	mov	r1, r5
   220a4:	4620      	mov	r0, r4
   220a6:	f7ff ffda 	bl	2205e <free_list_add>
}
   220aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   220ac:	f7ff ffcb 	bl	22046 <free_list_remove>
   220b0:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   220b2:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   220b6:	4629      	mov	r1, r5
   220b8:	4620      	mov	r0, r4
   220ba:	f7ff ffad 	bl	22018 <merge_chunks>
   220be:	e7e8      	b.n	22092 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   220c0:	4620      	mov	r0, r4
   220c2:	f7ff ffc0 	bl	22046 <free_list_remove>
   220c6:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   220c8:	462a      	mov	r2, r5
   220ca:	1a69      	subs	r1, r5, r1
   220cc:	4620      	mov	r0, r4
   220ce:	f7ff ffa3 	bl	22018 <merge_chunks>
   220d2:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   220d4:	1aed      	subs	r5, r5, r3
   220d6:	e7e4      	b.n	220a2 <free_chunk+0x2c>

000220d8 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   220d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   220da:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   220de:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   220e2:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   220e6:	b1b7      	cbz	r7, 22116 <alloc_chunk+0x3e>
   220e8:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   220ec:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
   220ee:	1d14      	adds	r4, r2, #4
   220f0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   220f4:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   220f6:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   220fa:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   220fe:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   22102:	d912      	bls.n	2212a <alloc_chunk+0x52>
   22104:	4405      	add	r5, r0
   22106:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   22108:	1d15      	adds	r5, r2, #4
   2210a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   2210e:	3e01      	subs	r6, #1
   22110:	d001      	beq.n	22116 <alloc_chunk+0x3e>
   22112:	42a7      	cmp	r7, r4
   22114:	d1eb      	bne.n	220ee <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   22116:	68c4      	ldr	r4, [r0, #12]
   22118:	f1c3 0220 	rsb	r2, r3, #32
   2211c:	2301      	movs	r3, #1
   2211e:	4093      	lsls	r3, r2
   22120:	425b      	negs	r3, r3

	if (bmask != 0U) {
   22122:	401c      	ands	r4, r3
   22124:	d105      	bne.n	22132 <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   22126:	4620      	mov	r0, r4
   22128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   2212a:	4621      	mov	r1, r4
   2212c:	f7ff ff18 	bl	21f60 <free_list_remove_bidx>
				return c;
   22130:	e7f9      	b.n	22126 <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   22132:	fa94 f2a4 	rbit	r2, r4
   22136:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2213a:	1d13      	adds	r3, r2, #4
   2213c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   22140:	4621      	mov	r1, r4
   22142:	f7ff ff0d 	bl	21f60 <free_list_remove_bidx>
		return c;
   22146:	e7ee      	b.n	22126 <alloc_chunk+0x4e>

00022148 <sys_heap_free>:
	if (mem == NULL) {
   22148:	b179      	cbz	r1, 2216a <sys_heap_free+0x22>
{
   2214a:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   2214c:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   2214e:	4620      	mov	r0, r4
   22150:	f7ff ff75 	bl	2203e <mem_to_chunkid>
   22154:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   22156:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2215a:	8853      	ldrh	r3, [r2, #2]
   2215c:	f023 0301 	bic.w	r3, r3, #1
   22160:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   22162:	4620      	mov	r0, r4
   22164:	f7ff ff87 	bl	22076 <free_chunk>
}
   22168:	bd10      	pop	{r4, pc}
   2216a:	4770      	bx	lr

0002216c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   2216e:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   22170:	b341      	cbz	r1, 221c4 <sys_heap_alloc+0x58>
   22172:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   22174:	68aa      	ldr	r2, [r5, #8]
   22176:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   2217a:	d925      	bls.n	221c8 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2217c:	330b      	adds	r3, #11
   2217e:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   22180:	4621      	mov	r1, r4
   22182:	4628      	mov	r0, r5
   22184:	f7ff ffa8 	bl	220d8 <alloc_chunk>
	if (c == 0U) {
   22188:	4607      	mov	r7, r0
   2218a:	b1f8      	cbz	r0, 221cc <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   2218c:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   2218e:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   22192:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   22194:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   22198:	d309      	bcc.n	221ae <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   2219a:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2219c:	885a      	ldrh	r2, [r3, #2]
   2219e:	f042 0201 	orr.w	r2, r2, #1
   221a2:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   221a4:	4639      	mov	r1, r7
   221a6:	4628      	mov	r0, r5
   221a8:	f7ff fed6 	bl	21f58 <chunk_mem>
}
   221ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   221ae:	4404      	add	r4, r0
   221b0:	4622      	mov	r2, r4
   221b2:	4601      	mov	r1, r0
   221b4:	4628      	mov	r0, r5
   221b6:	f7ff ff18 	bl	21fea <split_chunks>
		free_list_add(h, c + chunk_sz);
   221ba:	4621      	mov	r1, r4
   221bc:	4628      	mov	r0, r5
   221be:	f7ff ff4e 	bl	2205e <free_list_add>
   221c2:	e7ea      	b.n	2219a <sys_heap_alloc+0x2e>
		return NULL;
   221c4:	2000      	movs	r0, #0
   221c6:	e7f1      	b.n	221ac <sys_heap_alloc+0x40>
   221c8:	2000      	movs	r0, #0
   221ca:	e7ef      	b.n	221ac <sys_heap_alloc+0x40>
		return NULL;
   221cc:	2000      	movs	r0, #0
   221ce:	e7ed      	b.n	221ac <sys_heap_alloc+0x40>

000221d0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   221d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221d4:	460d      	mov	r5, r1
   221d6:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   221d8:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   221da:	424b      	negs	r3, r1
   221dc:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   221e0:	ea31 0303 	bics.w	r3, r1, r3
   221e4:	d03e      	beq.n	22264 <sys_heap_aligned_alloc+0x94>
		align -= rew;
   221e6:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   221ea:	f1b8 0f03 	cmp.w	r8, #3
   221ee:	d844      	bhi.n	2227a <sys_heap_aligned_alloc+0xaa>
   221f0:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   221f2:	2c00      	cmp	r4, #0
   221f4:	d057      	beq.n	222a6 <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   221f6:	68b3      	ldr	r3, [r6, #8]
   221f8:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   221fc:	d955      	bls.n	222aa <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   221fe:	1929      	adds	r1, r5, r4
   22200:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22202:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   22204:	08c9      	lsrs	r1, r1, #3
   22206:	4630      	mov	r0, r6
   22208:	f7ff ff66 	bl	220d8 <alloc_chunk>

	if (c0 == 0) {
   2220c:	4607      	mov	r7, r0
   2220e:	2800      	cmp	r0, #0
   22210:	d04d      	beq.n	222ae <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   22212:	4601      	mov	r1, r0
   22214:	4630      	mov	r0, r6
   22216:	f7ff fe9f 	bl	21f58 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2221a:	4440      	add	r0, r8
   2221c:	4428      	add	r0, r5
   2221e:	3801      	subs	r0, #1
   22220:	426d      	negs	r5, r5
   22222:	4005      	ands	r5, r0
   22224:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   22228:	442c      	add	r4, r5
   2222a:	3407      	adds	r4, #7
   2222c:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   22230:	4629      	mov	r1, r5
   22232:	4630      	mov	r0, r6
   22234:	f7ff ff03 	bl	2203e <mem_to_chunkid>
   22238:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   2223a:	1ba4      	subs	r4, r4, r6
   2223c:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   2223e:	4287      	cmp	r7, r0
   22240:	d31d      	bcc.n	2227e <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   22242:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   22246:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   2224a:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   2224c:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   22250:	429c      	cmp	r4, r3
   22252:	d31e      	bcc.n	22292 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   22254:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22256:	8873      	ldrh	r3, [r6, #2]
   22258:	f043 0301 	orr.w	r3, r3, #1
   2225c:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   2225e:	4628      	mov	r0, r5
   22260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   22264:	2904      	cmp	r1, #4
   22266:	d903      	bls.n	22270 <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   22268:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   2226c:	2204      	movs	r2, #4
   2226e:	e7c0      	b.n	221f2 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   22270:	4611      	mov	r1, r2
   22272:	f7ff ff7b 	bl	2216c <sys_heap_alloc>
   22276:	4605      	mov	r5, r0
   22278:	e7f1      	b.n	2225e <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   2227a:	2204      	movs	r2, #4
   2227c:	e7b9      	b.n	221f2 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   2227e:	4602      	mov	r2, r0
   22280:	4639      	mov	r1, r7
   22282:	4630      	mov	r0, r6
   22284:	f7ff feb1 	bl	21fea <split_chunks>
		free_list_add(h, c0);
   22288:	4639      	mov	r1, r7
   2228a:	4630      	mov	r0, r6
   2228c:	f7ff fee7 	bl	2205e <free_list_add>
   22290:	e7d7      	b.n	22242 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   22292:	4622      	mov	r2, r4
   22294:	4641      	mov	r1, r8
   22296:	4630      	mov	r0, r6
   22298:	f7ff fea7 	bl	21fea <split_chunks>
		free_list_add(h, c_end);
   2229c:	4621      	mov	r1, r4
   2229e:	4630      	mov	r0, r6
   222a0:	f7ff fedd 	bl	2205e <free_list_add>
   222a4:	e7d6      	b.n	22254 <sys_heap_aligned_alloc+0x84>
		return NULL;
   222a6:	2500      	movs	r5, #0
   222a8:	e7d9      	b.n	2225e <sys_heap_aligned_alloc+0x8e>
   222aa:	2500      	movs	r5, #0
   222ac:	e7d7      	b.n	2225e <sys_heap_aligned_alloc+0x8e>
		return NULL;
   222ae:	2500      	movs	r5, #0
   222b0:	e7d5      	b.n	2225e <sys_heap_aligned_alloc+0x8e>

000222b2 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   222b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222b4:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   222b6:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   222b8:	1dc8      	adds	r0, r1, #7
   222ba:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   222be:	440d      	add	r5, r1
   222c0:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   222c4:	1a2d      	subs	r5, r5, r0
   222c6:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   222ca:	4607      	mov	r7, r0
	heap->heap = h;
   222cc:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   222ce:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
   222d2:	2300      	movs	r3, #0
   222d4:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   222d6:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   222da:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   222de:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
   222e2:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   222e4:	f102 0c07 	add.w	ip, r2, #7
   222e8:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   222ec:	42b3      	cmp	r3, r6
   222ee:	da05      	bge.n	222fc <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
   222f0:	1d1a      	adds	r2, r3, #4
   222f2:	2400      	movs	r4, #0
   222f4:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   222f8:	3301      	adds	r3, #1
   222fa:	e7f7      	b.n	222ec <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   222fc:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
   222fe:	b29b      	uxth	r3, r3
   22300:	2200      	movs	r2, #0
   22302:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22304:	f043 0301 	orr.w	r3, r3, #1
   22308:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2230a:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2230e:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
   22310:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
   22314:	1c94      	adds	r4, r2, #2
   22316:	5306      	strh	r6, [r0, r4]
   22318:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
   2231a:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
   2231e:	4405      	add	r5, r0
   22320:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22322:	2301      	movs	r3, #1
   22324:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   22326:	f7ff fe9a 	bl	2205e <free_list_add>
}
   2232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002232c <_ldiv5>:
{
   2232c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t v_lo = *v;
   2232e:	6806      	ldr	r6, [r0, #0]
   22330:	6845      	ldr	r5, [r0, #4]
	uint32_t v_hi = *v >> 32;
   22332:	f04f 0c00 	mov.w	ip, #0
	__asm__ ("" : "+r" (m));
   22336:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
   2233a:	4611      	mov	r1, r2
	result += (uint64_t)v_lo * m;
   2233c:	fba6 6702 	umull	r6, r7, r6, r2
   22340:	1871      	adds	r1, r6, r1
   22342:	eb47 0102 	adc.w	r1, r7, r2
	result >>= 32;
   22346:	4664      	mov	r4, ip
	result += (uint64_t)v_lo * m;
   22348:	1871      	adds	r1, r6, r1
   2234a:	eb47 0404 	adc.w	r4, r7, r4
	result += (uint64_t)v_hi * m;
   2234e:	fba5 2302 	umull	r2, r3, r5, r2
   22352:	1851      	adds	r1, r2, r1
   22354:	eb43 0404 	adc.w	r4, r3, r4
	result >>= 32;
   22358:	4665      	mov	r5, ip
	result += (uint64_t)v_hi * m;
   2235a:	1911      	adds	r1, r2, r4
   2235c:	eb43 0505 	adc.w	r5, r3, r5
	*v = result;
   22360:	6001      	str	r1, [r0, #0]
   22362:	6045      	str	r5, [r0, #4]
}
   22364:	bcf0      	pop	{r4, r5, r6, r7}
   22366:	4770      	bx	lr

00022368 <_ldiv10>:
{
   22368:	b508      	push	{r3, lr}
	*v >>= 1;
   2236a:	6802      	ldr	r2, [r0, #0]
   2236c:	6841      	ldr	r1, [r0, #4]
   2236e:	0852      	lsrs	r2, r2, #1
   22370:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   22374:	0849      	lsrs	r1, r1, #1
   22376:	6002      	str	r2, [r0, #0]
   22378:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
   2237a:	f7ff ffd7 	bl	2232c <_ldiv5>
}
   2237e:	bd08      	pop	{r3, pc}

00022380 <_get_digit>:
	if (*digit_count > 0) {
   22380:	680b      	ldr	r3, [r1, #0]
   22382:	2b00      	cmp	r3, #0
   22384:	dd16      	ble.n	223b4 <_get_digit+0x34>
{
   22386:	b430      	push	{r4, r5}
   22388:	4604      	mov	r4, r0
		--*digit_count;
   2238a:	3b01      	subs	r3, #1
   2238c:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   2238e:	6801      	ldr	r1, [r0, #0]
   22390:	6840      	ldr	r0, [r0, #4]
   22392:	0085      	lsls	r5, r0, #2
   22394:	008b      	lsls	r3, r1, #2
   22396:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
   2239a:	185b      	adds	r3, r3, r1
   2239c:	eb40 0202 	adc.w	r2, r0, r2
   223a0:	18db      	adds	r3, r3, r3
   223a2:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   223a4:	0f10      	lsrs	r0, r2, #28
   223a6:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
   223a8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   223ac:	6023      	str	r3, [r4, #0]
   223ae:	6062      	str	r2, [r4, #4]
}
   223b0:	bc30      	pop	{r4, r5}
   223b2:	4770      	bx	lr
		rval = '0';
   223b4:	2030      	movs	r0, #48	; 0x30
}
   223b6:	4770      	bx	lr

000223b8 <outs>:
{
   223b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   223bc:	4607      	mov	r7, r0
   223be:	460e      	mov	r6, r1
   223c0:	4614      	mov	r4, r2
   223c2:	4698      	mov	r8, r3
	size_t count = 0;
   223c4:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   223c6:	e006      	b.n	223d6 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   223c8:	4631      	mov	r1, r6
   223ca:	f814 0b01 	ldrb.w	r0, [r4], #1
   223ce:	47b8      	blx	r7
		if (rc < 0) {
   223d0:	2800      	cmp	r0, #0
   223d2:	db09      	blt.n	223e8 <outs+0x30>
		++count;
   223d4:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   223d6:	4544      	cmp	r4, r8
   223d8:	d3f6      	bcc.n	223c8 <outs+0x10>
   223da:	f1b8 0f00 	cmp.w	r8, #0
   223de:	d102      	bne.n	223e6 <outs+0x2e>
   223e0:	7823      	ldrb	r3, [r4, #0]
   223e2:	2b00      	cmp	r3, #0
   223e4:	d1f0      	bne.n	223c8 <outs+0x10>
	return (int)count;
   223e6:	4628      	mov	r0, r5
}
   223e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000223ec <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   223ec:	4770      	bx	lr

000223ee <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   223ee:	b084      	sub	sp, #16
   223f0:	ab04      	add	r3, sp, #16
   223f2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   223f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   223fa:	2b06      	cmp	r3, #6
   223fc:	d001      	beq.n	22402 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   223fe:	b004      	add	sp, #16
   22400:	4770      	bx	lr
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   22402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22406:	2201      	movs	r2, #1
   22408:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2240c:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   22410:	bf20      	wfe
    while (true)
   22412:	e7fd      	b.n	22410 <pm_power_state_set+0x22>

00022414 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   22414:	b084      	sub	sp, #16
   22416:	ab04      	add	r3, sp, #16
   22418:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2241c:	2300      	movs	r3, #0
   2241e:	f383 8811 	msr	BASEPRI, r3
   22422:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   22426:	b004      	add	sp, #16
   22428:	4770      	bx	lr

0002242a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2242a:	2300      	movs	r3, #0
   2242c:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   2242e:	6003      	str	r3, [r0, #0]
}
   22430:	4770      	bx	lr

00022432 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   22432:	6803      	ldr	r3, [r0, #0]
   22434:	b12b      	cbz	r3, 22442 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   22436:	6843      	ldr	r3, [r0, #4]
   22438:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   2243a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2243c:	2300      	movs	r3, #0
   2243e:	600b      	str	r3, [r1, #0]
}
   22440:	4770      	bx	lr
		list->head = msg;
   22442:	6001      	str	r1, [r0, #0]
   22444:	e7f9      	b.n	2243a <log_list_add_tail+0x8>

00022446 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   22446:	6800      	ldr	r0, [r0, #0]
   22448:	4770      	bx	lr

0002244a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   2244a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2244c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2244e:	b108      	cbz	r0, 22454 <log_list_head_get+0xa>
		list->head = list->head->next;
   22450:	6802      	ldr	r2, [r0, #0]
   22452:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   22454:	4770      	bx	lr

00022456 <dummy_timestamp>:
}
   22456:	2000      	movs	r0, #0
   22458:	4770      	bx	lr

0002245a <msg_filter_check>:
}
   2245a:	2001      	movs	r0, #1
   2245c:	4770      	bx	lr

0002245e <default_get_timestamp>:
{
   2245e:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   22460:	f001 fa3e 	bl	238e0 <sys_clock_cycle_get_32>
}
   22464:	bd08      	pop	{r3, pc}

00022466 <z_log_get_tag>:
}
   22466:	2000      	movs	r0, #0
   22468:	4770      	bx	lr

0002246a <block_on_alloc>:
}
   2246a:	2000      	movs	r0, #0
   2246c:	4770      	bx	lr

0002246e <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2246e:	2901      	cmp	r1, #1
   22470:	d906      	bls.n	22480 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   22472:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   22474:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   22476:	2906      	cmp	r1, #6
   22478:	d907      	bls.n	2248a <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   2247a:	3907      	subs	r1, #7
		cont = cont->next;
   2247c:	681b      	ldr	r3, [r3, #0]
   2247e:	e7fa      	b.n	22476 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   22480:	3104      	adds	r1, #4
   22482:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   22486:	6888      	ldr	r0, [r1, #8]
   22488:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   2248a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2248e:	6848      	ldr	r0, [r1, #4]
}
   22490:	4770      	bx	lr

00022492 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   22492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22496:	460d      	mov	r5, r1
	struct log_msg_cont *cont = msg->payload.ext.next;
   22498:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2249a:	2a03      	cmp	r2, #3
   2249c:	d917      	bls.n	224ce <copy_args_to_msg+0x3c>
   2249e:	6809      	ldr	r1, [r1, #0]
   224a0:	686b      	ldr	r3, [r5, #4]
   224a2:	6181      	str	r1, [r0, #24]
   224a4:	61c3      	str	r3, [r0, #28]
		(void)memcpy(msg->payload.ext.data.args, args,
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   224a6:	1e94      	subs	r4, r2, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   224a8:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   224aa:	b1b4      	cbz	r4, 224da <copy_args_to_msg+0x48>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   224ac:	46a0      	mov	r8, r4
   224ae:	2c07      	cmp	r4, #7
   224b0:	bf28      	it	cs
   224b2:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   224b6:	ea4f 0788 	mov.w	r7, r8, lsl #2
   224ba:	463a      	mov	r2, r7
   224bc:	4629      	mov	r1, r5
   224be:	1d30      	adds	r0, r6, #4
   224c0:	f004 f9bf 	bl	26842 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   224c4:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   224c8:	443d      	add	r5, r7
		cont = cont->next;
   224ca:	6836      	ldr	r6, [r6, #0]
   224cc:	e7ed      	b.n	224aa <copy_args_to_msg+0x18>
   224ce:	0092      	lsls	r2, r2, #2
   224d0:	3014      	adds	r0, #20
   224d2:	f004 f9b6 	bl	26842 <memcpy>
		nargs  = 0U;
   224d6:	2400      	movs	r4, #0
   224d8:	e7e7      	b.n	224aa <copy_args_to_msg+0x18>
	}
}
   224da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000224de <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   224de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   224e2:	461c      	mov	r4, r3
   224e4:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   224e8:	8903      	ldrh	r3, [r0, #8]
   224ea:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   224ee:	42a3      	cmp	r3, r4
   224f0:	d91f      	bls.n	22532 <log_msg_hexdump_data_op+0x54>
   224f2:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   224f4:	6811      	ldr	r1, [r2, #0]
   224f6:	4421      	add	r1, r4
   224f8:	4299      	cmp	r1, r3
   224fa:	d901      	bls.n	22500 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   224fc:	1b19      	subs	r1, r3, r4
   224fe:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   22500:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   22502:	2b0c      	cmp	r3, #12
   22504:	d919      	bls.n	2253a <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   22506:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   2250a:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2250c:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   2250e:	42a3      	cmp	r3, r4
   22510:	d91e      	bls.n	22550 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   22512:	42bb      	cmp	r3, r7
   22514:	bf28      	it	cs
   22516:	463b      	movcs	r3, r7
   22518:	461d      	mov	r5, r3

		if (put_op) {
   2251a:	f1b9 0f00 	cmp.w	r9, #0
   2251e:	d010      	beq.n	22542 <log_msg_hexdump_data_op+0x64>
   22520:	461a      	mov	r2, r3
   22522:	4641      	mov	r1, r8
   22524:	eb0c 0004 	add.w	r0, ip, r4
   22528:	f004 f98b 	bl	26842 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   2252c:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   2252e:	44a8      	add	r8, r5
   22530:	e021      	b.n	22576 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   22532:	2300      	movs	r3, #0
   22534:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   22536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   2253a:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   2253e:	2600      	movs	r6, #0
   22540:	e7e5      	b.n	2250e <log_msg_hexdump_data_op+0x30>
   22542:	461a      	mov	r2, r3
   22544:	eb0c 0104 	add.w	r1, ip, r4
   22548:	4640      	mov	r0, r8
   2254a:	f004 f97a 	bl	26842 <memcpy>
   2254e:	e7ed      	b.n	2252c <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   22550:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   22552:	b91e      	cbnz	r6, 2255c <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   22554:	6946      	ldr	r6, [r0, #20]
   22556:	e001      	b.n	2255c <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   22558:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   2255a:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   2255c:	2c1b      	cmp	r4, #27
   2255e:	d8fb      	bhi.n	22558 <log_msg_hexdump_data_op+0x7a>
   22560:	e009      	b.n	22576 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   22562:	1931      	adds	r1, r6, r4
   22564:	462a      	mov	r2, r5
   22566:	3104      	adds	r1, #4
   22568:	4640      	mov	r0, r8
   2256a:	f004 f96a 	bl	26842 <memcpy>
		cont = cont->next;
   2256e:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   22570:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   22572:	44a8      	add	r8, r5
		offset = 0;
   22574:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   22576:	2f00      	cmp	r7, #0
   22578:	d0dd      	beq.n	22536 <log_msg_hexdump_data_op+0x58>
   2257a:	2e00      	cmp	r6, #0
   2257c:	d0db      	beq.n	22536 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2257e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   22582:	42bd      	cmp	r5, r7
   22584:	bf28      	it	cs
   22586:	463d      	movcs	r5, r7
		if (put_op) {
   22588:	f1b9 0f00 	cmp.w	r9, #0
   2258c:	d0e9      	beq.n	22562 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   2258e:	1930      	adds	r0, r6, r4
   22590:	462a      	mov	r2, r5
   22592:	4641      	mov	r1, r8
   22594:	3004      	adds	r0, #4
   22596:	f004 f954 	bl	26842 <memcpy>
   2259a:	e7e8      	b.n	2256e <log_msg_hexdump_data_op+0x90>

0002259c <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   2259c:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2259e:	e8d0 3fef 	ldaex	r3, [r0]
   225a2:	3301      	adds	r3, #1
   225a4:	e8c0 3fe2 	stlex	r2, r3, [r0]
   225a8:	2a00      	cmp	r2, #0
   225aa:	d1f8      	bne.n	2259e <log_msg_get+0x2>
}
   225ac:	4770      	bx	lr

000225ae <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   225ae:	7a40      	ldrb	r0, [r0, #9]
}
   225b0:	0900      	lsrs	r0, r0, #4
   225b2:	4770      	bx	lr

000225b4 <log_msg_arg_get>:
{
   225b4:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   225b6:	7a43      	ldrb	r3, [r0, #9]
   225b8:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   225bc:	d20a      	bcs.n	225d4 <log_msg_arg_get+0x20>
   225be:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   225c0:	2a03      	cmp	r2, #3
   225c2:	d804      	bhi.n	225ce <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   225c4:	3104      	adds	r1, #4
   225c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   225ca:	6840      	ldr	r0, [r0, #4]
   225cc:	e003      	b.n	225d6 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   225ce:	f7ff ff4e 	bl	2246e <cont_arg_get>
   225d2:	e000      	b.n	225d6 <log_msg_arg_get+0x22>
		return 0;
   225d4:	2000      	movs	r0, #0
}
   225d6:	bd08      	pop	{r3, pc}

000225d8 <log_msg_str_get>:
}
   225d8:	6900      	ldr	r0, [r0, #16]
   225da:	4770      	bx	lr

000225dc <log_msg_put>:
{
   225dc:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   225de:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   225e0:	e8d3 2fef 	ldaex	r2, [r3]
   225e4:	3a01      	subs	r2, #1
   225e6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   225ea:	2900      	cmp	r1, #0
   225ec:	d1f8      	bne.n	225e0 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   225ee:	6843      	ldr	r3, [r0, #4]
   225f0:	b103      	cbz	r3, 225f4 <log_msg_put+0x18>
}
   225f2:	bd08      	pop	{r3, pc}
		msg_free(msg);
   225f4:	f7f0 fe28 	bl	13248 <msg_free>
}
   225f8:	e7fb      	b.n	225f2 <log_msg_put+0x16>

000225fa <msg_alloc>:
{
   225fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225fc:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   225fe:	f7f0 fe07 	bl	13210 <log_msg_chunk_alloc>
	if (msg != NULL) {
   22602:	4607      	mov	r7, r0
   22604:	b140      	cbz	r0, 22618 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   22606:	2301      	movs	r3, #1
   22608:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2260a:	2200      	movs	r2, #0
   2260c:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   2260e:	f04f 0300 	mov.w	r3, #0
   22612:	f362 0300 	bfi	r3, r2, #0, #1
   22616:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   22618:	b1f7      	cbz	r7, 22658 <msg_alloc+0x5e>
   2261a:	2d03      	cmp	r5, #3
   2261c:	d91c      	bls.n	22658 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   2261e:	7a7b      	ldrb	r3, [r7, #9]
   22620:	f36f 1307 	bfc	r3, #4, #4
   22624:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   22626:	7a3b      	ldrb	r3, [r7, #8]
   22628:	f043 0302 	orr.w	r3, r3, #2
   2262c:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   2262e:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   22630:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   22634:	2300      	movs	r3, #0
   22636:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   22638:	2d00      	cmp	r5, #0
   2263a:	dd0d      	ble.n	22658 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2263c:	f7f0 fde8 	bl	13210 <log_msg_chunk_alloc>
		if (cont == NULL) {
   22640:	4604      	mov	r4, r0
   22642:	b128      	cbz	r0, 22650 <msg_alloc+0x56>
		*next = cont;
   22644:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   22646:	2300      	movs	r3, #0
   22648:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   2264a:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   2264c:	3d07      	subs	r5, #7
   2264e:	e7f3      	b.n	22638 <msg_alloc+0x3e>
			msg_free(msg);
   22650:	4638      	mov	r0, r7
   22652:	f7f0 fdf9 	bl	13248 <msg_free>
			return NULL;
   22656:	4627      	mov	r7, r4
}
   22658:	4638      	mov	r0, r7
   2265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002265c <log_msg_create_n>:
{
   2265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2265e:	4607      	mov	r7, r0
   22660:	460e      	mov	r6, r1
   22662:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   22664:	4610      	mov	r0, r2
   22666:	f7ff ffc8 	bl	225fa <msg_alloc>
	if (msg != NULL) {
   2266a:	4605      	mov	r5, r0
   2266c:	b140      	cbz	r0, 22680 <log_msg_create_n+0x24>
		msg->str = str;
   2266e:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   22670:	7a43      	ldrb	r3, [r0, #9]
   22672:	f364 1307 	bfi	r3, r4, #4, #4
   22676:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   22678:	4622      	mov	r2, r4
   2267a:	4631      	mov	r1, r6
   2267c:	f7ff ff09 	bl	22492 <copy_args_to_msg>
}
   22680:	4628      	mov	r0, r5
   22682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022684 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   22684:	b510      	push	{r4, lr}
   22686:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   22688:	2400      	movs	r4, #0
   2268a:	9400      	str	r4, [sp, #0]
   2268c:	f7ff ff27 	bl	224de <log_msg_hexdump_data_op>
}
   22690:	b002      	add	sp, #8
   22692:	bd10      	pop	{r4, pc}

00022694 <buffer_write>:
{
   22694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22696:	4607      	mov	r7, r0
   22698:	460d      	mov	r5, r1
   2269a:	4614      	mov	r4, r2
   2269c:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   2269e:	4632      	mov	r2, r6
   226a0:	4621      	mov	r1, r4
   226a2:	4628      	mov	r0, r5
   226a4:	47b8      	blx	r7
		buf += processed;
   226a6:	4405      	add	r5, r0
	} while (len != 0);
   226a8:	1a24      	subs	r4, r4, r0
   226aa:	d1f8      	bne.n	2269e <buffer_write+0xa>
}
   226ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000226ae <color_prefix>:
{
   226ae:	b508      	push	{r3, lr}
   226b0:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   226b2:	2201      	movs	r2, #1
   226b4:	f7f0 fe60 	bl	13378 <color_print>
}
   226b8:	bd08      	pop	{r3, pc}

000226ba <color_postfix>:
{
   226ba:	b508      	push	{r3, lr}
   226bc:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   226be:	2200      	movs	r2, #0
   226c0:	f7f0 fe5a 	bl	13378 <color_print>
}
   226c4:	bd08      	pop	{r3, pc}

000226c6 <postfix_print>:
{
   226c6:	b538      	push	{r3, r4, r5, lr}
   226c8:	4605      	mov	r5, r0
   226ca:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   226cc:	f001 0101 	and.w	r1, r1, #1
   226d0:	f7ff fff3 	bl	226ba <color_postfix>
	newline_print(output, flags);
   226d4:	4621      	mov	r1, r4
   226d6:	4628      	mov	r0, r5
   226d8:	f7f0 fe64 	bl	133a4 <newline_print>
}
   226dc:	bd38      	pop	{r3, r4, r5, pc}

000226de <std_print>:
{
   226de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   226e2:	b08e      	sub	sp, #56	; 0x38
   226e4:	af0e      	add	r7, sp, #56	; 0x38
   226e6:	4606      	mov	r6, r0
   226e8:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   226ea:	f7ff ff75 	bl	225d8 <log_msg_str_get>
   226ee:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   226f0:	4630      	mov	r0, r6
   226f2:	f7ff ff5c 	bl	225ae <log_msg_nargs_get>
   226f6:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   226f8:	0083      	lsls	r3, r0, #2
   226fa:	3307      	adds	r3, #7
   226fc:	f023 0307 	bic.w	r3, r3, #7
   22700:	ebad 0d03 	sub.w	sp, sp, r3
   22704:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   22706:	2400      	movs	r4, #0
   22708:	4544      	cmp	r4, r8
   2270a:	d207      	bcs.n	2271c <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   2270c:	4621      	mov	r1, r4
   2270e:	4630      	mov	r0, r6
   22710:	f7ff ff50 	bl	225b4 <log_msg_arg_get>
   22714:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   22718:	3401      	adds	r4, #1
   2271a:	e7f5      	b.n	22708 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   2271c:	4630      	mov	r0, r6
   2271e:	f7ff ff46 	bl	225ae <log_msg_nargs_get>
   22722:	280f      	cmp	r0, #15
   22724:	d815      	bhi.n	22752 <std_print+0x74>
   22726:	e8df f010 	tbh	[pc, r0, lsl #1]
   2272a:	0010      	.short	0x0010
   2272c:	001d0017 	.word	0x001d0017
   22730:	002d0024 	.word	0x002d0024
   22734:	00450038 	.word	0x00450038
   22738:	00650054 	.word	0x00650054
   2273c:	008d0078 	.word	0x008d0078
   22740:	00bd00a4 	.word	0x00bd00a4
   22744:	00f500d8 	.word	0x00f500d8
   22748:	0114      	.short	0x0114
		print_formatted(output, str);
   2274a:	4651      	mov	r1, sl
   2274c:	4648      	mov	r0, r9
   2274e:	f7f0 fdbb 	bl	132c8 <print_formatted>
}
   22752:	46bd      	mov	sp, r7
   22754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   22758:	682a      	ldr	r2, [r5, #0]
   2275a:	4651      	mov	r1, sl
   2275c:	4648      	mov	r0, r9
   2275e:	f7f0 fdb3 	bl	132c8 <print_formatted>
		break;
   22762:	e7f6      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   22764:	686b      	ldr	r3, [r5, #4]
   22766:	682a      	ldr	r2, [r5, #0]
   22768:	4651      	mov	r1, sl
   2276a:	4648      	mov	r0, r9
   2276c:	f7f0 fdac 	bl	132c8 <print_formatted>
		break;
   22770:	e7ef      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   22772:	686b      	ldr	r3, [r5, #4]
   22774:	682a      	ldr	r2, [r5, #0]
   22776:	68a9      	ldr	r1, [r5, #8]
   22778:	9100      	str	r1, [sp, #0]
   2277a:	4651      	mov	r1, sl
   2277c:	4648      	mov	r0, r9
   2277e:	f7f0 fda3 	bl	132c8 <print_formatted>
		break;
   22782:	e7e6      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   22784:	686b      	ldr	r3, [r5, #4]
   22786:	682a      	ldr	r2, [r5, #0]
   22788:	68e9      	ldr	r1, [r5, #12]
   2278a:	9101      	str	r1, [sp, #4]
   2278c:	68a9      	ldr	r1, [r5, #8]
   2278e:	9100      	str	r1, [sp, #0]
   22790:	4651      	mov	r1, sl
   22792:	4648      	mov	r0, r9
   22794:	f7f0 fd98 	bl	132c8 <print_formatted>
		break;
   22798:	e7db      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2279a:	686b      	ldr	r3, [r5, #4]
   2279c:	682a      	ldr	r2, [r5, #0]
   2279e:	6929      	ldr	r1, [r5, #16]
   227a0:	9102      	str	r1, [sp, #8]
   227a2:	68e9      	ldr	r1, [r5, #12]
   227a4:	9101      	str	r1, [sp, #4]
   227a6:	68a9      	ldr	r1, [r5, #8]
   227a8:	9100      	str	r1, [sp, #0]
   227aa:	4651      	mov	r1, sl
   227ac:	4648      	mov	r0, r9
   227ae:	f7f0 fd8b 	bl	132c8 <print_formatted>
		break;
   227b2:	e7ce      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   227b4:	686b      	ldr	r3, [r5, #4]
   227b6:	682a      	ldr	r2, [r5, #0]
   227b8:	6969      	ldr	r1, [r5, #20]
   227ba:	9103      	str	r1, [sp, #12]
   227bc:	6929      	ldr	r1, [r5, #16]
   227be:	9102      	str	r1, [sp, #8]
   227c0:	68e9      	ldr	r1, [r5, #12]
   227c2:	9101      	str	r1, [sp, #4]
   227c4:	68a9      	ldr	r1, [r5, #8]
   227c6:	9100      	str	r1, [sp, #0]
   227c8:	4651      	mov	r1, sl
   227ca:	4648      	mov	r0, r9
   227cc:	f7f0 fd7c 	bl	132c8 <print_formatted>
		break;
   227d0:	e7bf      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   227d2:	686b      	ldr	r3, [r5, #4]
   227d4:	682a      	ldr	r2, [r5, #0]
   227d6:	69a9      	ldr	r1, [r5, #24]
   227d8:	9104      	str	r1, [sp, #16]
   227da:	6969      	ldr	r1, [r5, #20]
   227dc:	9103      	str	r1, [sp, #12]
   227de:	6929      	ldr	r1, [r5, #16]
   227e0:	9102      	str	r1, [sp, #8]
   227e2:	68e9      	ldr	r1, [r5, #12]
   227e4:	9101      	str	r1, [sp, #4]
   227e6:	68a9      	ldr	r1, [r5, #8]
   227e8:	9100      	str	r1, [sp, #0]
   227ea:	4651      	mov	r1, sl
   227ec:	4648      	mov	r0, r9
   227ee:	f7f0 fd6b 	bl	132c8 <print_formatted>
		break;
   227f2:	e7ae      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   227f4:	686b      	ldr	r3, [r5, #4]
   227f6:	682a      	ldr	r2, [r5, #0]
   227f8:	69e9      	ldr	r1, [r5, #28]
   227fa:	9105      	str	r1, [sp, #20]
   227fc:	69a9      	ldr	r1, [r5, #24]
   227fe:	9104      	str	r1, [sp, #16]
   22800:	6969      	ldr	r1, [r5, #20]
   22802:	9103      	str	r1, [sp, #12]
   22804:	6929      	ldr	r1, [r5, #16]
   22806:	9102      	str	r1, [sp, #8]
   22808:	68e9      	ldr	r1, [r5, #12]
   2280a:	9101      	str	r1, [sp, #4]
   2280c:	68a9      	ldr	r1, [r5, #8]
   2280e:	9100      	str	r1, [sp, #0]
   22810:	4651      	mov	r1, sl
   22812:	4648      	mov	r0, r9
   22814:	f7f0 fd58 	bl	132c8 <print_formatted>
		break;
   22818:	e79b      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2281a:	686b      	ldr	r3, [r5, #4]
   2281c:	682a      	ldr	r2, [r5, #0]
   2281e:	6a29      	ldr	r1, [r5, #32]
   22820:	9106      	str	r1, [sp, #24]
   22822:	69e9      	ldr	r1, [r5, #28]
   22824:	9105      	str	r1, [sp, #20]
   22826:	69a9      	ldr	r1, [r5, #24]
   22828:	9104      	str	r1, [sp, #16]
   2282a:	6969      	ldr	r1, [r5, #20]
   2282c:	9103      	str	r1, [sp, #12]
   2282e:	6929      	ldr	r1, [r5, #16]
   22830:	9102      	str	r1, [sp, #8]
   22832:	68e9      	ldr	r1, [r5, #12]
   22834:	9101      	str	r1, [sp, #4]
   22836:	68a9      	ldr	r1, [r5, #8]
   22838:	9100      	str	r1, [sp, #0]
   2283a:	4651      	mov	r1, sl
   2283c:	4648      	mov	r0, r9
   2283e:	f7f0 fd43 	bl	132c8 <print_formatted>
		break;
   22842:	e786      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   22844:	686b      	ldr	r3, [r5, #4]
   22846:	682a      	ldr	r2, [r5, #0]
   22848:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2284a:	9107      	str	r1, [sp, #28]
   2284c:	6a29      	ldr	r1, [r5, #32]
   2284e:	9106      	str	r1, [sp, #24]
   22850:	69e9      	ldr	r1, [r5, #28]
   22852:	9105      	str	r1, [sp, #20]
   22854:	69a9      	ldr	r1, [r5, #24]
   22856:	9104      	str	r1, [sp, #16]
   22858:	6969      	ldr	r1, [r5, #20]
   2285a:	9103      	str	r1, [sp, #12]
   2285c:	6929      	ldr	r1, [r5, #16]
   2285e:	9102      	str	r1, [sp, #8]
   22860:	68e9      	ldr	r1, [r5, #12]
   22862:	9101      	str	r1, [sp, #4]
   22864:	68a9      	ldr	r1, [r5, #8]
   22866:	9100      	str	r1, [sp, #0]
   22868:	4651      	mov	r1, sl
   2286a:	4648      	mov	r0, r9
   2286c:	f7f0 fd2c 	bl	132c8 <print_formatted>
		break;
   22870:	e76f      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   22872:	686b      	ldr	r3, [r5, #4]
   22874:	682a      	ldr	r2, [r5, #0]
   22876:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   22878:	9108      	str	r1, [sp, #32]
   2287a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2287c:	9107      	str	r1, [sp, #28]
   2287e:	6a29      	ldr	r1, [r5, #32]
   22880:	9106      	str	r1, [sp, #24]
   22882:	69e9      	ldr	r1, [r5, #28]
   22884:	9105      	str	r1, [sp, #20]
   22886:	69a9      	ldr	r1, [r5, #24]
   22888:	9104      	str	r1, [sp, #16]
   2288a:	6969      	ldr	r1, [r5, #20]
   2288c:	9103      	str	r1, [sp, #12]
   2288e:	6929      	ldr	r1, [r5, #16]
   22890:	9102      	str	r1, [sp, #8]
   22892:	68e9      	ldr	r1, [r5, #12]
   22894:	9101      	str	r1, [sp, #4]
   22896:	68a9      	ldr	r1, [r5, #8]
   22898:	9100      	str	r1, [sp, #0]
   2289a:	4651      	mov	r1, sl
   2289c:	4648      	mov	r0, r9
   2289e:	f7f0 fd13 	bl	132c8 <print_formatted>
		break;
   228a2:	e756      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   228a4:	686b      	ldr	r3, [r5, #4]
   228a6:	682a      	ldr	r2, [r5, #0]
   228a8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   228aa:	9109      	str	r1, [sp, #36]	; 0x24
   228ac:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   228ae:	9108      	str	r1, [sp, #32]
   228b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
   228b2:	9107      	str	r1, [sp, #28]
   228b4:	6a29      	ldr	r1, [r5, #32]
   228b6:	9106      	str	r1, [sp, #24]
   228b8:	69e9      	ldr	r1, [r5, #28]
   228ba:	9105      	str	r1, [sp, #20]
   228bc:	69a9      	ldr	r1, [r5, #24]
   228be:	9104      	str	r1, [sp, #16]
   228c0:	6969      	ldr	r1, [r5, #20]
   228c2:	9103      	str	r1, [sp, #12]
   228c4:	6929      	ldr	r1, [r5, #16]
   228c6:	9102      	str	r1, [sp, #8]
   228c8:	68e9      	ldr	r1, [r5, #12]
   228ca:	9101      	str	r1, [sp, #4]
   228cc:	68a9      	ldr	r1, [r5, #8]
   228ce:	9100      	str	r1, [sp, #0]
   228d0:	4651      	mov	r1, sl
   228d2:	4648      	mov	r0, r9
   228d4:	f7f0 fcf8 	bl	132c8 <print_formatted>
		break;
   228d8:	e73b      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   228da:	686b      	ldr	r3, [r5, #4]
   228dc:	682a      	ldr	r2, [r5, #0]
   228de:	6b29      	ldr	r1, [r5, #48]	; 0x30
   228e0:	910a      	str	r1, [sp, #40]	; 0x28
   228e2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   228e4:	9109      	str	r1, [sp, #36]	; 0x24
   228e6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   228e8:	9108      	str	r1, [sp, #32]
   228ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
   228ec:	9107      	str	r1, [sp, #28]
   228ee:	6a29      	ldr	r1, [r5, #32]
   228f0:	9106      	str	r1, [sp, #24]
   228f2:	69e9      	ldr	r1, [r5, #28]
   228f4:	9105      	str	r1, [sp, #20]
   228f6:	69a9      	ldr	r1, [r5, #24]
   228f8:	9104      	str	r1, [sp, #16]
   228fa:	6969      	ldr	r1, [r5, #20]
   228fc:	9103      	str	r1, [sp, #12]
   228fe:	6929      	ldr	r1, [r5, #16]
   22900:	9102      	str	r1, [sp, #8]
   22902:	68e9      	ldr	r1, [r5, #12]
   22904:	9101      	str	r1, [sp, #4]
   22906:	68a9      	ldr	r1, [r5, #8]
   22908:	9100      	str	r1, [sp, #0]
   2290a:	4651      	mov	r1, sl
   2290c:	4648      	mov	r0, r9
   2290e:	f7f0 fcdb 	bl	132c8 <print_formatted>
		break;
   22912:	e71e      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   22914:	686b      	ldr	r3, [r5, #4]
   22916:	682a      	ldr	r2, [r5, #0]
   22918:	6b69      	ldr	r1, [r5, #52]	; 0x34
   2291a:	910b      	str	r1, [sp, #44]	; 0x2c
   2291c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2291e:	910a      	str	r1, [sp, #40]	; 0x28
   22920:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   22922:	9109      	str	r1, [sp, #36]	; 0x24
   22924:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   22926:	9108      	str	r1, [sp, #32]
   22928:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2292a:	9107      	str	r1, [sp, #28]
   2292c:	6a29      	ldr	r1, [r5, #32]
   2292e:	9106      	str	r1, [sp, #24]
   22930:	69e9      	ldr	r1, [r5, #28]
   22932:	9105      	str	r1, [sp, #20]
   22934:	69a9      	ldr	r1, [r5, #24]
   22936:	9104      	str	r1, [sp, #16]
   22938:	6969      	ldr	r1, [r5, #20]
   2293a:	9103      	str	r1, [sp, #12]
   2293c:	6929      	ldr	r1, [r5, #16]
   2293e:	9102      	str	r1, [sp, #8]
   22940:	68e9      	ldr	r1, [r5, #12]
   22942:	9101      	str	r1, [sp, #4]
   22944:	68a9      	ldr	r1, [r5, #8]
   22946:	9100      	str	r1, [sp, #0]
   22948:	4651      	mov	r1, sl
   2294a:	4648      	mov	r0, r9
   2294c:	f7f0 fcbc 	bl	132c8 <print_formatted>
		break;
   22950:	e6ff      	b.n	22752 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   22952:	686b      	ldr	r3, [r5, #4]
   22954:	682a      	ldr	r2, [r5, #0]
   22956:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   22958:	910c      	str	r1, [sp, #48]	; 0x30
   2295a:	6b69      	ldr	r1, [r5, #52]	; 0x34
   2295c:	910b      	str	r1, [sp, #44]	; 0x2c
   2295e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   22960:	910a      	str	r1, [sp, #40]	; 0x28
   22962:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   22964:	9109      	str	r1, [sp, #36]	; 0x24
   22966:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   22968:	9108      	str	r1, [sp, #32]
   2296a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2296c:	9107      	str	r1, [sp, #28]
   2296e:	6a29      	ldr	r1, [r5, #32]
   22970:	9106      	str	r1, [sp, #24]
   22972:	69e9      	ldr	r1, [r5, #28]
   22974:	9105      	str	r1, [sp, #20]
   22976:	69a9      	ldr	r1, [r5, #24]
   22978:	9104      	str	r1, [sp, #16]
   2297a:	6969      	ldr	r1, [r5, #20]
   2297c:	9103      	str	r1, [sp, #12]
   2297e:	6929      	ldr	r1, [r5, #16]
   22980:	9102      	str	r1, [sp, #8]
   22982:	68e9      	ldr	r1, [r5, #12]
   22984:	9101      	str	r1, [sp, #4]
   22986:	68a9      	ldr	r1, [r5, #8]
   22988:	9100      	str	r1, [sp, #0]
   2298a:	4651      	mov	r1, sl
   2298c:	4648      	mov	r0, r9
   2298e:	f7f0 fc9b 	bl	132c8 <print_formatted>
}
   22992:	e6de      	b.n	22752 <std_print+0x74>

00022994 <log_output_flush>:
{
   22994:	b510      	push	{r4, lr}
   22996:	4604      	mov	r4, r0
		     output->control_block->offset,
   22998:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   2299a:	6853      	ldr	r3, [r2, #4]
   2299c:	6812      	ldr	r2, [r2, #0]
   2299e:	6881      	ldr	r1, [r0, #8]
   229a0:	6800      	ldr	r0, [r0, #0]
   229a2:	f7ff fe77 	bl	22694 <buffer_write>
	output->control_block->offset = 0;
   229a6:	6863      	ldr	r3, [r4, #4]
   229a8:	2200      	movs	r2, #0
   229aa:	601a      	str	r2, [r3, #0]
}
   229ac:	bd10      	pop	{r4, pc}

000229ae <out_func>:
{
   229ae:	b538      	push	{r3, r4, r5, lr}
   229b0:	4605      	mov	r5, r0
   229b2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   229b4:	684b      	ldr	r3, [r1, #4]
   229b6:	681a      	ldr	r2, [r3, #0]
   229b8:	68cb      	ldr	r3, [r1, #12]
   229ba:	429a      	cmp	r2, r3
   229bc:	d00b      	beq.n	229d6 <out_func+0x28>
	idx = atomic_inc(&out_ctx->control_block->offset);
   229be:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   229c0:	e8d3 2fef 	ldaex	r2, [r3]
   229c4:	1c51      	adds	r1, r2, #1
   229c6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   229ca:	2800      	cmp	r0, #0
   229cc:	d1f8      	bne.n	229c0 <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
   229ce:	68a3      	ldr	r3, [r4, #8]
   229d0:	549d      	strb	r5, [r3, r2]
}
   229d2:	2000      	movs	r0, #0
   229d4:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   229d6:	4608      	mov	r0, r1
   229d8:	f7ff ffdc 	bl	22994 <log_output_flush>
   229dc:	e7ef      	b.n	229be <out_func+0x10>

000229de <log_output_msg_process>:
{
   229de:	b5f0      	push	{r4, r5, r6, r7, lr}
   229e0:	b085      	sub	sp, #20
   229e2:	4606      	mov	r6, r0
   229e4:	460c      	mov	r4, r1
   229e6:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   229e8:	7a0b      	ldrb	r3, [r1, #8]
   229ea:	f083 0301 	eor.w	r3, r3, #1
   229ee:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   229f2:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   229f4:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   229f6:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   229fa:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   229fc:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   22a00:	f011 0507 	ands.w	r5, r1, #7
   22a04:	d10f      	bne.n	22a26 <log_output_msg_process+0x48>
   22a06:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   22a08:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   22a0a:	f013 0f01 	tst.w	r3, #1
   22a0e:	d014      	beq.n	22a3a <log_output_msg_process+0x5c>
	} else if (raw_string) {
   22a10:	b9c5      	cbnz	r5, 22a44 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   22a12:	4631      	mov	r1, r6
   22a14:	4620      	mov	r0, r4
   22a16:	f7f0 fdd7 	bl	135c8 <raw_string_print>
	if (!raw_string) {
   22a1a:	b9cd      	cbnz	r5, 22a50 <log_output_msg_process+0x72>
	log_output_flush(output);
   22a1c:	4630      	mov	r0, r6
   22a1e:	f7ff ffb9 	bl	22994 <log_output_flush>
}
   22a22:	b005      	add	sp, #20
   22a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   22a26:	9002      	str	r0, [sp, #8]
   22a28:	f8cd c004 	str.w	ip, [sp, #4]
   22a2c:	9500      	str	r5, [sp, #0]
   22a2e:	4639      	mov	r1, r7
   22a30:	4630      	mov	r0, r6
   22a32:	f7f0 fd63 	bl	134fc <prefix_print>
   22a36:	4602      	mov	r2, r0
   22a38:	e7e6      	b.n	22a08 <log_output_msg_process+0x2a>
		std_print(msg, output);
   22a3a:	4631      	mov	r1, r6
   22a3c:	4620      	mov	r0, r4
   22a3e:	f7ff fe4e 	bl	226de <std_print>
   22a42:	e7ea      	b.n	22a1a <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   22a44:	463b      	mov	r3, r7
   22a46:	4631      	mov	r1, r6
   22a48:	4620      	mov	r0, r4
   22a4a:	f7f0 fd93 	bl	13574 <hexdump_print>
   22a4e:	e7e4      	b.n	22a1a <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   22a50:	462a      	mov	r2, r5
   22a52:	4639      	mov	r1, r7
   22a54:	4630      	mov	r0, r6
   22a56:	f7ff fe36 	bl	226c6 <postfix_print>
   22a5a:	e7df      	b.n	22a1c <log_output_msg_process+0x3e>

00022a5c <get_uptime_in_sec>:
{
   22a5c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_uptime_ticks();
   22a5e:	f003 fdb3 	bl	265c8 <z_impl_k_uptime_ticks>
   22a62:	014b      	lsls	r3, r1, #5
   22a64:	0142      	lsls	r2, r0, #5
   22a66:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
   22a6a:	1a13      	subs	r3, r2, r0
   22a6c:	eb64 0201 	sbc.w	r2, r4, r1
   22a70:	0094      	lsls	r4, r2, #2
   22a72:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   22a76:	009d      	lsls	r5, r3, #2
   22a78:	4622      	mov	r2, r4
   22a7a:	182b      	adds	r3, r5, r0
   22a7c:	eb41 0202 	adc.w	r2, r1, r2
   22a80:	00d1      	lsls	r1, r2, #3
   22a82:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   22a86:	00d8      	lsls	r0, r3, #3
   22a88:	0bc0      	lsrs	r0, r0, #15
	return time / MSEC_PER_SEC;
   22a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22a8e:	2300      	movs	r3, #0
   22a90:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   22a94:	2100      	movs	r1, #0
   22a96:	f7ee f841 	bl	10b1c <__aeabi_uldivmod>
}
   22a9a:	bd38      	pop	{r3, r4, r5, pc}

00022a9c <sntp_recv_response>:
{
   22a9c:	b570      	push	{r4, r5, r6, lr}
   22a9e:	b08e      	sub	sp, #56	; 0x38
   22aa0:	4604      	mov	r4, r0
   22aa2:	460d      	mov	r5, r1
   22aa4:	4616      	mov	r6, r2
	struct sntp_pkt buf = { 0 };
   22aa6:	2230      	movs	r2, #48	; 0x30
   22aa8:	2100      	movs	r1, #0
   22aaa:	a802      	add	r0, sp, #8
   22aac:	f003 fee9 	bl	26882 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   22ab0:	68a1      	ldr	r1, [r4, #8]
	return z_impl_zsock_poll(fds, nfds, timeout);
   22ab2:	462a      	mov	r2, r5
   22ab4:	4620      	mov	r0, r4
   22ab6:	f000 f92e 	bl	22d16 <z_impl_zsock_poll>
	if (status < 0) {
   22aba:	2800      	cmp	r0, #0
   22abc:	db14      	blt.n	22ae8 <sntp_recv_response+0x4c>
	if (status == 0) {
   22abe:	b1e8      	cbz	r0, 22afc <sntp_recv_response+0x60>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   22ac0:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   22ac2:	2300      	movs	r3, #0
   22ac4:	9301      	str	r3, [sp, #4]
   22ac6:	9300      	str	r3, [sp, #0]
   22ac8:	2230      	movs	r2, #48	; 0x30
   22aca:	a902      	add	r1, sp, #8
   22acc:	f000 f8f2 	bl	22cb4 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   22ad0:	2800      	cmp	r0, #0
   22ad2:	db0e      	blt.n	22af2 <sntp_recv_response+0x56>
	if (rcvd != sizeof(struct sntp_pkt)) {
   22ad4:	2830      	cmp	r0, #48	; 0x30
   22ad6:	d114      	bne.n	22b02 <sntp_recv_response+0x66>
	status = parse_response((uint8_t *)&buf, sizeof(buf),
   22ad8:	4633      	mov	r3, r6
   22ada:	6922      	ldr	r2, [r4, #16]
   22adc:	2130      	movs	r1, #48	; 0x30
   22ade:	a802      	add	r0, sp, #8
   22ae0:	f7ee f9aa 	bl	10e38 <parse_response>
}
   22ae4:	b00e      	add	sp, #56	; 0x38
   22ae6:	bd70      	pop	{r4, r5, r6, pc}
		return -errno;
   22ae8:	f000 fa55 	bl	22f96 <__errno>
   22aec:	6800      	ldr	r0, [r0, #0]
   22aee:	4240      	negs	r0, r0
   22af0:	e7f8      	b.n	22ae4 <sntp_recv_response+0x48>
		return -errno;
   22af2:	f000 fa50 	bl	22f96 <__errno>
   22af6:	6800      	ldr	r0, [r0, #0]
   22af8:	4240      	negs	r0, r0
   22afa:	e7f3      	b.n	22ae4 <sntp_recv_response+0x48>
		return -ETIMEDOUT;
   22afc:	f06f 0073 	mvn.w	r0, #115	; 0x73
   22b00:	e7f0      	b.n	22ae4 <sntp_recv_response+0x48>
		return -EMSGSIZE;
   22b02:	f06f 0079 	mvn.w	r0, #121	; 0x79
   22b06:	e7ed      	b.n	22ae4 <sntp_recv_response+0x48>

00022b08 <sntp_init>:
	if (!ctx || !addr) {
   22b08:	b388      	cbz	r0, 22b6e <sntp_init+0x66>
{
   22b0a:	b570      	push	{r4, r5, r6, lr}
   22b0c:	460d      	mov	r5, r1
   22b0e:	4616      	mov	r6, r2
   22b10:	4604      	mov	r4, r0
	if (!ctx || !addr) {
   22b12:	b379      	cbz	r1, 22b74 <sntp_init+0x6c>
__ssp_bos_icheck3(memset, void *, int)
   22b14:	2300      	movs	r3, #0
   22b16:	6003      	str	r3, [r0, #0]
   22b18:	6043      	str	r3, [r0, #4]
   22b1a:	6083      	str	r3, [r0, #8]
   22b1c:	60c3      	str	r3, [r0, #12]
   22b1e:	6103      	str	r3, [r0, #16]
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   22b20:	8808      	ldrh	r0, [r1, #0]
	return z_impl_zsock_socket(family, type, proto);
   22b22:	2211      	movs	r2, #17
   22b24:	2102      	movs	r1, #2
   22b26:	f7f0 fe37 	bl	13798 <z_impl_zsock_socket>
   22b2a:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   22b2c:	2800      	cmp	r0, #0
   22b2e:	db11      	blt.n	22b54 <sntp_init+0x4c>
	return z_impl_zsock_connect(sock, addr, addrlen);
   22b30:	4632      	mov	r2, r6
   22b32:	4629      	mov	r1, r5
   22b34:	f000 f865 	bl	22c02 <z_impl_zsock_connect>
	if (ret < 0) {
   22b38:	2800      	cmp	r0, #0
   22b3a:	db10      	blt.n	22b5e <sntp_init+0x56>
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   22b3c:	68a3      	ldr	r3, [r4, #8]
   22b3e:	68e2      	ldr	r2, [r4, #12]
   22b40:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   22b44:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   22b48:	2101      	movs	r1, #1
   22b4a:	8091      	strh	r1, [r2, #4]
	ctx->sock.nfds++;
   22b4c:	440b      	add	r3, r1
   22b4e:	60a3      	str	r3, [r4, #8]
	return 0;
   22b50:	2000      	movs	r0, #0
}
   22b52:	bd70      	pop	{r4, r5, r6, pc}
		return -errno;
   22b54:	f000 fa1f 	bl	22f96 <__errno>
   22b58:	6800      	ldr	r0, [r0, #0]
   22b5a:	4240      	negs	r0, r0
   22b5c:	e7f9      	b.n	22b52 <sntp_init+0x4a>
		(void)close(ctx->sock.fd);
   22b5e:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_close(sock);
   22b60:	f000 f82a 	bl	22bb8 <z_impl_zsock_close>
		return -errno;
   22b64:	f000 fa17 	bl	22f96 <__errno>
   22b68:	6800      	ldr	r0, [r0, #0]
   22b6a:	4240      	negs	r0, r0
   22b6c:	e7f1      	b.n	22b52 <sntp_init+0x4a>
		return -EFAULT;
   22b6e:	f06f 000d 	mvn.w	r0, #13
}
   22b72:	4770      	bx	lr
		return -EFAULT;
   22b74:	f06f 000d 	mvn.w	r0, #13
   22b78:	e7eb      	b.n	22b52 <sntp_init+0x4a>

00022b7a <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   22b7a:	b120      	cbz	r0, 22b86 <sntp_close+0xc>
{
   22b7c:	b508      	push	{r3, lr}
		(void)close(ctx->sock.fd);
   22b7e:	68c0      	ldr	r0, [r0, #12]
   22b80:	f000 f81a 	bl	22bb8 <z_impl_zsock_close>
	}
}
   22b84:	bd08      	pop	{r3, pc}
   22b86:	4770      	bx	lr

00022b88 <zsock_getaddrinfo>:
#endif /* defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4) */

int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
   22b88:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   22b8a:	f7f0 ff69 	bl	13a60 <socket_offload_getaddrinfo>
		*res = NULL;
	}
#endif

	return ret;
}
   22b8e:	bd08      	pop	{r3, pc}

00022b90 <zsock_freeaddrinfo>:

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
   22b90:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   22b92:	f7f0 ff6d 	bl	13a70 <socket_offload_freeaddrinfo>
	}

	free(ai);
}
   22b96:	bd08      	pop	{r3, pc}

00022b98 <z_fdtable_call_ioctl>:
{
   22b98:	b40c      	push	{r2, r3}
   22b9a:	b500      	push	{lr}
   22b9c:	b083      	sub	sp, #12
   22b9e:	4603      	mov	r3, r0
   22ba0:	4608      	mov	r0, r1
   22ba2:	aa04      	add	r2, sp, #16
   22ba4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, request);
   22ba8:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   22baa:	68db      	ldr	r3, [r3, #12]
   22bac:	4798      	blx	r3
}
   22bae:	b003      	add	sp, #12
   22bb0:	f85d eb04 	ldr.w	lr, [sp], #4
   22bb4:	b002      	add	sp, #8
   22bb6:	4770      	bx	lr

00022bb8 <z_impl_zsock_close>:
{
   22bb8:	b530      	push	{r4, r5, lr}
   22bba:	b083      	sub	sp, #12
   22bbc:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   22bbe:	466a      	mov	r2, sp
   22bc0:	a901      	add	r1, sp, #4
   22bc2:	f7ee fcc5 	bl	11550 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   22bc6:	b1a8      	cbz	r0, 22bf4 <z_impl_zsock_close+0x3c>
   22bc8:	4604      	mov	r4, r0
	(void)k_mutex_lock(lock, K_FOREVER);
   22bca:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   22bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22bd4:	f7fc fa30 	bl	1f038 <z_impl_k_mutex_lock>
	ret = vtable->fd_vtable.close(ctx);
   22bd8:	9b01      	ldr	r3, [sp, #4]
   22bda:	689b      	ldr	r3, [r3, #8]
   22bdc:	4620      	mov	r0, r4
   22bde:	4798      	blx	r3
   22be0:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   22be2:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_unlock(mutex);
   22be4:	f7fc fab2 	bl	1f14c <z_impl_k_mutex_unlock>
	z_free_fd(sock);
   22be8:	4628      	mov	r0, r5
   22bea:	f7fe ff22 	bl	21a32 <z_free_fd>
}
   22bee:	4620      	mov	r0, r4
   22bf0:	b003      	add	sp, #12
   22bf2:	bd30      	pop	{r4, r5, pc}
		errno = EBADF;
   22bf4:	f000 f9cf 	bl	22f96 <__errno>
   22bf8:	2309      	movs	r3, #9
   22bfa:	6003      	str	r3, [r0, #0]
		return -1;
   22bfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22c00:	e7f5      	b.n	22bee <z_impl_zsock_close+0x36>

00022c02 <z_impl_zsock_connect>:
{
   22c02:	b570      	push	{r4, r5, r6, lr}
   22c04:	b082      	sub	sp, #8
   22c06:	460d      	mov	r5, r1
   22c08:	4614      	mov	r4, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   22c0a:	aa01      	add	r2, sp, #4
   22c0c:	4669      	mov	r1, sp
   22c0e:	f7ee fc9f 	bl	11550 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   22c12:	b1b8      	cbz	r0, 22c44 <z_impl_zsock_connect+0x42>
   22c14:	4606      	mov	r6, r0
   22c16:	9b00      	ldr	r3, [sp, #0]
   22c18:	695b      	ldr	r3, [r3, #20]
   22c1a:	b19b      	cbz	r3, 22c44 <z_impl_zsock_connect+0x42>
   22c1c:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   22c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22c26:	f7fc fa07 	bl	1f038 <z_impl_k_mutex_lock>
   22c2a:	9b00      	ldr	r3, [sp, #0]
   22c2c:	695b      	ldr	r3, [r3, #20]
   22c2e:	4622      	mov	r2, r4
   22c30:	4629      	mov	r1, r5
   22c32:	4630      	mov	r0, r6
   22c34:	4798      	blx	r3
   22c36:	4604      	mov	r4, r0
   22c38:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   22c3a:	f7fc fa87 	bl	1f14c <z_impl_k_mutex_unlock>
}
   22c3e:	4620      	mov	r0, r4
   22c40:	b002      	add	sp, #8
   22c42:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   22c44:	f000 f9a7 	bl	22f96 <__errno>
   22c48:	2309      	movs	r3, #9
   22c4a:	6003      	str	r3, [r0, #0]
   22c4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22c50:	e7f5      	b.n	22c3e <z_impl_zsock_connect+0x3c>

00022c52 <z_impl_zsock_sendto>:
{
   22c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c56:	b084      	sub	sp, #16
   22c58:	460e      	mov	r6, r1
   22c5a:	4615      	mov	r5, r2
   22c5c:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   22c5e:	aa03      	add	r2, sp, #12
   22c60:	a902      	add	r1, sp, #8
   22c62:	f7ee fc75 	bl	11550 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   22c66:	b1f0      	cbz	r0, 22ca6 <z_impl_zsock_sendto+0x54>
   22c68:	4607      	mov	r7, r0
   22c6a:	9b02      	ldr	r3, [sp, #8]
   22c6c:	6a1b      	ldr	r3, [r3, #32]
   22c6e:	b1d3      	cbz	r3, 22ca6 <z_impl_zsock_sendto+0x54>
   22c70:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   22c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22c7a:	f7fc f9dd 	bl	1f038 <z_impl_k_mutex_lock>
   22c7e:	9b02      	ldr	r3, [sp, #8]
   22c80:	f8d3 8020 	ldr.w	r8, [r3, #32]
   22c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22c86:	9301      	str	r3, [sp, #4]
   22c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22c8a:	9300      	str	r3, [sp, #0]
   22c8c:	4623      	mov	r3, r4
   22c8e:	462a      	mov	r2, r5
   22c90:	4631      	mov	r1, r6
   22c92:	4638      	mov	r0, r7
   22c94:	47c0      	blx	r8
   22c96:	4604      	mov	r4, r0
   22c98:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   22c9a:	f7fc fa57 	bl	1f14c <z_impl_k_mutex_unlock>
}
   22c9e:	4620      	mov	r0, r4
   22ca0:	b004      	add	sp, #16
   22ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   22ca6:	f000 f976 	bl	22f96 <__errno>
   22caa:	2309      	movs	r3, #9
   22cac:	6003      	str	r3, [r0, #0]
   22cae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22cb2:	e7f4      	b.n	22c9e <z_impl_zsock_sendto+0x4c>

00022cb4 <z_impl_zsock_recvfrom>:
{
   22cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22cb8:	b084      	sub	sp, #16
   22cba:	460e      	mov	r6, r1
   22cbc:	4615      	mov	r5, r2
   22cbe:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   22cc0:	aa03      	add	r2, sp, #12
   22cc2:	a902      	add	r1, sp, #8
   22cc4:	f7ee fc44 	bl	11550 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   22cc8:	b1f0      	cbz	r0, 22d08 <z_impl_zsock_recvfrom+0x54>
   22cca:	4607      	mov	r7, r0
   22ccc:	9b02      	ldr	r3, [sp, #8]
   22cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22cd0:	b1d3      	cbz	r3, 22d08 <z_impl_zsock_recvfrom+0x54>
   22cd2:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   22cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22cdc:	f7fc f9ac 	bl	1f038 <z_impl_k_mutex_lock>
   22ce0:	9b02      	ldr	r3, [sp, #8]
   22ce2:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   22ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22ce8:	9301      	str	r3, [sp, #4]
   22cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22cec:	9300      	str	r3, [sp, #0]
   22cee:	4623      	mov	r3, r4
   22cf0:	462a      	mov	r2, r5
   22cf2:	4631      	mov	r1, r6
   22cf4:	4638      	mov	r0, r7
   22cf6:	47c0      	blx	r8
   22cf8:	4604      	mov	r4, r0
   22cfa:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   22cfc:	f7fc fa26 	bl	1f14c <z_impl_k_mutex_unlock>
}
   22d00:	4620      	mov	r0, r4
   22d02:	b004      	add	sp, #16
   22d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   22d08:	f000 f945 	bl	22f96 <__errno>
   22d0c:	2309      	movs	r3, #9
   22d0e:	6003      	str	r3, [r0, #0]
   22d10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22d14:	e7f4      	b.n	22d00 <z_impl_zsock_recvfrom+0x4c>

00022d16 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   22d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d18:	4604      	mov	r4, r0
   22d1a:	460d      	mov	r5, r1
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   22d1c:	2a00      	cmp	r2, #0
   22d1e:	db19      	blt.n	22d54 <z_impl_zsock_poll+0x3e>
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
   22d20:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   22d24:	17d7      	asrs	r7, r2, #31
   22d26:	03f9      	lsls	r1, r7, #15
   22d28:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   22d2c:	03d0      	lsls	r0, r2, #15
   22d2e:	f240 36e7 	movw	r6, #999	; 0x3e7
   22d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22d36:	2300      	movs	r3, #0
   22d38:	1980      	adds	r0, r0, r6
   22d3a:	f04f 0600 	mov.w	r6, #0
   22d3e:	eb46 0101 	adc.w	r1, r6, r1
   22d42:	f7ed feeb 	bl	10b1c <__aeabi_uldivmod>
   22d46:	4602      	mov	r2, r0
   22d48:	460b      	mov	r3, r1
	}

	return zsock_poll_internal(fds, nfds, timeout);
   22d4a:	4629      	mov	r1, r5
   22d4c:	4620      	mov	r0, r4
   22d4e:	f7f0 fd49 	bl	137e4 <zsock_poll_internal>
}
   22d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		timeout = K_FOREVER;
   22d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22d58:	4613      	mov	r3, r2
   22d5a:	e7f6      	b.n	22d4a <z_impl_zsock_poll+0x34>

00022d5c <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   22d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d60:	b084      	sub	sp, #16
   22d62:	460e      	mov	r6, r1
   22d64:	4615      	mov	r5, r2
   22d66:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   22d68:	aa03      	add	r2, sp, #12
   22d6a:	a902      	add	r1, sp, #8
   22d6c:	f7ee fbf0 	bl	11550 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   22d70:	b1e0      	cbz	r0, 22dac <z_impl_zsock_setsockopt+0x50>
   22d72:	4607      	mov	r7, r0
   22d74:	9b02      	ldr	r3, [sp, #8]
   22d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22d78:	b1c3      	cbz	r3, 22dac <z_impl_zsock_setsockopt+0x50>
   22d7a:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   22d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22d84:	f7fc f958 	bl	1f038 <z_impl_k_mutex_lock>
   22d88:	9b02      	ldr	r3, [sp, #8]
   22d8a:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
   22d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22d90:	9300      	str	r3, [sp, #0]
   22d92:	4623      	mov	r3, r4
   22d94:	462a      	mov	r2, r5
   22d96:	4631      	mov	r1, r6
   22d98:	4638      	mov	r0, r7
   22d9a:	47c0      	blx	r8
   22d9c:	4604      	mov	r4, r0
   22d9e:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   22da0:	f7fc f9d4 	bl	1f14c <z_impl_k_mutex_unlock>
}
   22da4:	4620      	mov	r0, r4
   22da6:	b004      	add	sp, #16
   22da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   22dac:	f000 f8f3 	bl	22f96 <__errno>
   22db0:	2309      	movs	r3, #9
   22db2:	6003      	str	r3, [r0, #0]
   22db4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22db8:	e7f4      	b.n	22da4 <z_impl_zsock_setsockopt+0x48>

00022dba <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   22dba:	2200      	movs	r2, #0
   22dbc:	6002      	str	r2, [r0, #0]
   22dbe:	6042      	str	r2, [r0, #4]
   22dc0:	6082      	str	r2, [r0, #8]
}
   22dc2:	4770      	bx	lr

00022dc4 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   22dc4:	b510      	push	{r4, lr}
   22dc6:	b40f      	push	{r0, r1, r2, r3}
   22dc8:	f7f0 ff6c 	bl	13ca4 <before_nse>
   22dcc:	bc0f      	pop	{r0, r1, r2, r3}
   22dce:	f7ed f90b 	bl	ffe8 <spm_request_random_number_nse>
   22dd2:	b40f      	push	{r0, r1, r2, r3}
   22dd4:	f7f0 ff70 	bl	13cb8 <after_nse>
   22dd8:	bc0f      	pop	{r0, r1, r2, r3}
   22dda:	bd10      	pop	{r4, pc}

00022ddc <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22ddc:	b538      	push	{r3, r4, r5, lr}
   22dde:	4604      	mov	r4, r0

	if (esf != NULL) {
   22de0:	460d      	mov	r5, r1
   22de2:	b111      	cbz	r1, 22dea <z_arm_fatal_error+0xe>
		esf_dump(esf);
   22de4:	4608      	mov	r0, r1
   22de6:	f7f0 ff8f 	bl	13d08 <esf_dump>
	}
	z_fatal_error(reason, esf);
   22dea:	4629      	mov	r1, r5
   22dec:	4620      	mov	r0, r4
   22dee:	f7fb fd8f 	bl	1e910 <z_fatal_error>
}
   22df2:	bd38      	pop	{r3, r4, r5, pc}

00022df4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   22df4:	b508      	push	{r3, lr}
   22df6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   22df8:	6800      	ldr	r0, [r0, #0]
   22dfa:	f7ff ffef 	bl	22ddc <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   22dfe:	bd08      	pop	{r3, pc}

00022e00 <z_irq_spurious>:
{
   22e00:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   22e02:	2100      	movs	r1, #0
   22e04:	2001      	movs	r0, #1
   22e06:	f7ff ffe9 	bl	22ddc <z_arm_fatal_error>
}
   22e0a:	bd08      	pop	{r3, pc}

00022e0c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   22e0c:	b508      	push	{r3, lr}
	handler();
   22e0e:	f7f1 f869 	bl	13ee4 <z_SysNmiOnReset>
	z_arm_int_exit();
   22e12:	f7f1 f973 	bl	140fc <z_arm_exc_exit>
}
   22e16:	bd08      	pop	{r3, pc}

00022e18 <z_arm_prepare_switch_to_main>:
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   22e18:	2300      	movs	r3, #0
   22e1a:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   22e1e:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   22e22:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   22e26:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   22e2a:	f3bf 8f6f 	isb	sy
   22e2e:	f3bf 8f6f 	isb	sy
}
   22e32:	4770      	bx	lr

00022e34 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   22e34:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   22e38:	f383 880b 	msr	PSPLIM, r3
}
   22e3c:	4770      	bx	lr

00022e3e <memory_fault_recoverable>:
}
   22e3e:	2000      	movs	r0, #0
   22e40:	4770      	bx	lr

00022e42 <fault_handle>:
{
   22e42:	b508      	push	{r3, lr}
	*recoverable = false;
   22e44:	2300      	movs	r3, #0
   22e46:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   22e48:	1ecb      	subs	r3, r1, #3
   22e4a:	2b09      	cmp	r3, #9
   22e4c:	d81a      	bhi.n	22e84 <fault_handle+0x42>
   22e4e:	e8df f003 	tbb	[pc, r3]
   22e52:	0905      	.short	0x0905
   22e54:	1919110d 	.word	0x1919110d
   22e58:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   22e5c:	4611      	mov	r1, r2
   22e5e:	f7f1 fbdf 	bl	14620 <hard_fault>
}
   22e62:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   22e64:	2100      	movs	r1, #0
   22e66:	f7f1 fa3d 	bl	142e4 <mem_manage_fault>
		break;
   22e6a:	e7fa      	b.n	22e62 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   22e6c:	2100      	movs	r1, #0
   22e6e:	f7f1 faff 	bl	14470 <bus_fault>
		break;
   22e72:	e7f6      	b.n	22e62 <fault_handle+0x20>
		reason = usage_fault(esf);
   22e74:	f7f1 f950 	bl	14118 <usage_fault>
		break;
   22e78:	e7f3      	b.n	22e62 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   22e7a:	4611      	mov	r1, r2
   22e7c:	f7f1 fa18 	bl	142b0 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   22e80:	2000      	movs	r0, #0
		break;
   22e82:	e7ee      	b.n	22e62 <fault_handle+0x20>
		reserved_exception(esf, fault);
   22e84:	f7f1 fc72 	bl	1476c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   22e88:	2000      	movs	r0, #0
	return reason;
   22e8a:	e7ea      	b.n	22e62 <fault_handle+0x20>

00022e8c <z_arm_save_fp_context>:
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   22e8c:	f3ef 8314 	mrs	r3, CONTROL
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   22e90:	f013 0f04 	tst.w	r3, #4
   22e94:	d012      	beq.n	22ebc <z_arm_save_fp_context+0x30>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   22e96:	f100 0240 	add.w	r2, r0, #64	; 0x40
   22e9a:	ec80 0a10 	vstmia	r0, {s0-s15}
   22e9e:	ec82 8a10 	vstmia	r2, {s16-s31}
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
   22ea2:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   22ea6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		buffer->ctx_saved = true;
   22eaa:	2201      	movs	r2, #1
   22eac:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   22eb0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   22eb4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   22eb8:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   22ebc:	4770      	bx	lr

00022ebe <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   22ebe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   22ec2:	b18b      	cbz	r3, 22ee8 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   22ec4:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   22ec8:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   22ecc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   22ed0:	f3bf 8f6f 	isb	sy

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);
   22ed4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   22ed8:	eee1 3a10 	vmsr	fpscr, r3

		__asm__ volatile(
   22edc:	f100 0340 	add.w	r3, r0, #64	; 0x40
   22ee0:	ec90 0a10 	vldmia	r0, {s0-s15}
   22ee4:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   22ee8:	4770      	bx	lr

00022eea <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   22eea:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   22eee:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   22ef2:	d001      	beq.n	22ef8 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   22ef4:	b2c0      	uxtb	r0, r0
   22ef6:	4770      	bx	lr
	}

	return -EINVAL;
   22ef8:	f06f 0015 	mvn.w	r0, #21
}
   22efc:	4770      	bx	lr

00022efe <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   22efe:	6843      	ldr	r3, [r0, #4]
		&&
   22f00:	2b1f      	cmp	r3, #31
   22f02:	d90a      	bls.n	22f1a <mpu_partition_is_valid+0x1c>
		&&
   22f04:	f013 0f1f 	tst.w	r3, #31
   22f08:	d001      	beq.n	22f0e <mpu_partition_is_valid+0x10>
		&&
   22f0a:	2000      	movs	r0, #0
   22f0c:	4770      	bx	lr
		((part->start &
   22f0e:	6803      	ldr	r3, [r0, #0]
		&&
   22f10:	f013 0f1f 	tst.w	r3, #31
   22f14:	d003      	beq.n	22f1e <mpu_partition_is_valid+0x20>
   22f16:	2000      	movs	r0, #0
   22f18:	4770      	bx	lr
   22f1a:	2000      	movs	r0, #0
   22f1c:	4770      	bx	lr
   22f1e:	2001      	movs	r0, #1
}
   22f20:	4770      	bx	lr

00022f22 <mpu_configure_region>:
{
   22f22:	b530      	push	{r4, r5, lr}
   22f24:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   22f26:	680b      	ldr	r3, [r1, #0]
   22f28:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   22f2a:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   22f2c:	890d      	ldrh	r5, [r1, #8]
   22f2e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   22f32:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   22f36:	7a89      	ldrb	r1, [r1, #10]
   22f38:	f361 1247 	bfi	r2, r1, #5, #3
   22f3c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22f40:	f023 031f 	bic.w	r3, r3, #31
   22f44:	4423      	add	r3, r4
   22f46:	3b01      	subs	r3, #1
   22f48:	f023 031f 	bic.w	r3, r3, #31
   22f4c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   22f4e:	4669      	mov	r1, sp
   22f50:	f7f1 fd56 	bl	14a00 <region_allocate_and_init>
}
   22f54:	b005      	add	sp, #20
   22f56:	bd30      	pop	{r4, r5, pc}

00022f58 <arm_core_mpu_configure_static_mpu_regions>:
{
   22f58:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   22f5a:	f7f1 fe5f 	bl	14c1c <mpu_configure_static_mpu_regions>
}
   22f5e:	bd08      	pop	{r3, pc}

00022f60 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   22f60:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   22f62:	f7f1 fe65 	bl	14c30 <mpu_mark_areas_for_dynamic_regions>
}
   22f66:	bd08      	pop	{r3, pc}

00022f68 <malloc_prepare>:
}
   22f68:	2000      	movs	r0, #0
   22f6a:	4770      	bx	lr

00022f6c <_stdout_hook_default>:
}
   22f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22f70:	4770      	bx	lr

00022f72 <_write>:
{
   22f72:	b508      	push	{r3, lr}
   22f74:	4608      	mov	r0, r1
   22f76:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   22f78:	f7f1 feea 	bl	14d50 <z_impl_zephyr_write_stdout>
}
   22f7c:	bd08      	pop	{r3, pc}

00022f7e <__retarget_lock_acquire_recursive>:
{
   22f7e:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   22f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22f88:	f7fc f856 	bl	1f038 <z_impl_k_mutex_lock>
}
   22f8c:	bd08      	pop	{r3, pc}

00022f8e <__retarget_lock_release_recursive>:
{
   22f8e:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   22f90:	f7fc f8dc 	bl	1f14c <z_impl_k_mutex_unlock>
}
   22f94:	bd08      	pop	{r3, pc}

00022f96 <__errno>:
{
   22f96:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   22f98:	f7fb fc84 	bl	1e8a4 <z_impl_z_errno>
}
   22f9c:	bd08      	pop	{r3, pc}

00022f9e <init_rx_queues>:
	net_gptp_init();
#endif
}

static void init_rx_queues(void)
{
   22f9e:	b508      	push	{r3, lr}
	/* Starting TX side. The ordering is important here and the TX
	 * can only be started when RX side is ready to receive packets.
	 */
	net_if_init();
   22fa0:	f7f1 ff5e 	bl	14e60 <net_if_init>

	net_tc_rx_init();

	/* This will take the interface up and start everything. */
	net_if_post_init();
   22fa4:	f7f1 ff80 	bl	14ea8 <net_if_post_init>

	/* Things to init after network interface is working */
	net_post_init();
}
   22fa8:	bd08      	pop	{r3, pc}

00022faa <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   22faa:	b508      	push	{r3, lr}

	l3_init();

	net_mgmt_event_init();

	init_rx_queues();
   22fac:	f7ff fff7 	bl	22f9e <init_rx_queues>

	return services_init();
}
   22fb0:	2000      	movs	r0, #0
   22fb2:	bd08      	pop	{r3, pc}

00022fb4 <l2_flags_get>:
	if (!iface || !iface->if_dev) {
   22fb4:	b140      	cbz	r0, 22fc8 <l2_flags_get+0x14>
{
   22fb6:	b508      	push	{r3, lr}
   22fb8:	6803      	ldr	r3, [r0, #0]
   22fba:	b13b      	cbz	r3, 22fcc <l2_flags_get+0x18>
	return iface->if_dev->l2;
   22fbc:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   22fbe:	b13b      	cbz	r3, 22fd0 <l2_flags_get+0x1c>
   22fc0:	68db      	ldr	r3, [r3, #12]
   22fc2:	b13b      	cbz	r3, 22fd4 <l2_flags_get+0x20>
		flags = net_if_l2(iface)->get_flags(iface);
   22fc4:	4798      	blx	r3
}
   22fc6:	bd08      	pop	{r3, pc}
	enum net_l2_flags flags = 0;
   22fc8:	2000      	movs	r0, #0
}
   22fca:	4770      	bx	lr
	enum net_l2_flags flags = 0;
   22fcc:	2000      	movs	r0, #0
   22fce:	e7fa      	b.n	22fc6 <l2_flags_get+0x12>
   22fd0:	2000      	movs	r0, #0
   22fd2:	e7f8      	b.n	22fc6 <l2_flags_get+0x12>
   22fd4:	2000      	movs	r0, #0
   22fd6:	e7f6      	b.n	22fc6 <l2_flags_get+0x12>

00022fd8 <adc_context_on_timer_expired>:
{
   22fd8:	b508      	push	{r3, lr}
	struct adc_context *ctx =
   22fda:	3808      	subs	r0, #8
   22fdc:	e8d0 3fef 	ldaex	r3, [r0]
   22fe0:	1c5a      	adds	r2, r3, #1
   22fe2:	e8c0 2fe1 	stlex	r1, r2, [r0]
   22fe6:	2900      	cmp	r1, #0
   22fe8:	d1f8      	bne.n	22fdc <adc_context_on_timer_expired+0x4>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   22fea:	b11b      	cbz	r3, 22ff4 <adc_context_on_timer_expired+0x1c>
		ctx->status = -EBUSY;
   22fec:	f06f 030f 	mvn.w	r3, #15
   22ff0:	6703      	str	r3, [r0, #112]	; 0x70
}
   22ff2:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
   22ff4:	f7f1 ff72 	bl	14edc <adc_context_start_sampling>
   22ff8:	e7fb      	b.n	22ff2 <adc_context_on_timer_expired+0x1a>

00022ffa <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   22ffa:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   22ffc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   23000:	0089      	lsls	r1, r1, #2
   23002:	3138      	adds	r1, #56	; 0x38
}
   23004:	4408      	add	r0, r1
   23006:	4770      	bx	lr

00023008 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   23008:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2300a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2300e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   23012:	4770      	bx	lr

00023014 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   23014:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   23016:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   2301a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2301e:	4770      	bx	lr

00023020 <get_status>:
{
   23020:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   23022:	b2c9      	uxtb	r1, r1
   23024:	f7ff ffe9 	bl	22ffa <get_sub_data>
   23028:	6880      	ldr	r0, [r0, #8]
}
   2302a:	f000 0007 	and.w	r0, r0, #7
   2302e:	bd08      	pop	{r3, pc}

00023030 <set_off_state>:
	__asm__ volatile(
   23030:	f04f 0320 	mov.w	r3, #32
   23034:	f3ef 8211 	mrs	r2, BASEPRI
   23038:	f383 8812 	msr	BASEPRI_MAX, r3
   2303c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23040:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23042:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   23046:	d001      	beq.n	2304c <set_off_state+0x1c>
   23048:	428b      	cmp	r3, r1
   2304a:	d107      	bne.n	2305c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2304c:	2301      	movs	r3, #1
   2304e:	6003      	str	r3, [r0, #0]
	int err = 0;
   23050:	2000      	movs	r0, #0
	__asm__ volatile(
   23052:	f382 8811 	msr	BASEPRI, r2
   23056:	f3bf 8f6f 	isb	sy
}
   2305a:	4770      	bx	lr
		err = -EPERM;
   2305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23060:	e7f7      	b.n	23052 <set_off_state+0x22>

00023062 <set_starting_state>:
{
   23062:	b410      	push	{r4}
	__asm__ volatile(
   23064:	f04f 0320 	mov.w	r3, #32
   23068:	f3ef 8211 	mrs	r2, BASEPRI
   2306c:	f383 8812 	msr	BASEPRI_MAX, r3
   23070:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23074:	6803      	ldr	r3, [r0, #0]
   23076:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2307a:	f003 0307 	and.w	r3, r3, #7
   2307e:	2b01      	cmp	r3, #1
   23080:	d00a      	beq.n	23098 <set_starting_state+0x36>
	} else if (current_ctx != ctx) {
   23082:	428c      	cmp	r4, r1
   23084:	d00b      	beq.n	2309e <set_starting_state+0x3c>
		err = -EPERM;
   23086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
   2308a:	f382 8811 	msr	BASEPRI, r2
   2308e:	f3bf 8f6f 	isb	sy
}
   23092:	f85d 4b04 	ldr.w	r4, [sp], #4
   23096:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   23098:	6001      	str	r1, [r0, #0]
	int err = 0;
   2309a:	2000      	movs	r0, #0
   2309c:	e7f5      	b.n	2308a <set_starting_state+0x28>
		err = -EALREADY;
   2309e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   230a2:	e7f2      	b.n	2308a <set_starting_state+0x28>

000230a4 <set_on_state>:
	__asm__ volatile(
   230a4:	f04f 0320 	mov.w	r3, #32
   230a8:	f3ef 8211 	mrs	r2, BASEPRI
   230ac:	f383 8812 	msr	BASEPRI_MAX, r3
   230b0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   230b4:	6803      	ldr	r3, [r0, #0]
   230b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   230ba:	f043 0302 	orr.w	r3, r3, #2
   230be:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   230c0:	f382 8811 	msr	BASEPRI, r2
   230c4:	f3bf 8f6f 	isb	sy
}
   230c8:	4770      	bx	lr

000230ca <clkstarted_handle>:
{
   230ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   230cc:	4606      	mov	r6, r0
   230ce:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   230d0:	f7ff ff93 	bl	22ffa <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   230d4:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   230d6:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   230d8:	2300      	movs	r3, #0
   230da:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   230de:	f7ff ffe1 	bl	230a4 <set_on_state>
	if (callback) {
   230e2:	b11d      	cbz	r5, 230ec <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   230e4:	463a      	mov	r2, r7
   230e6:	4621      	mov	r1, r4
   230e8:	4630      	mov	r0, r6
   230ea:	47a8      	blx	r5
}
   230ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000230ee <stop>:
{
   230ee:	b570      	push	{r4, r5, r6, lr}
   230f0:	4606      	mov	r6, r0
   230f2:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   230f4:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   230f6:	4621      	mov	r1, r4
   230f8:	f7ff ff7f 	bl	22ffa <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   230fc:	4629      	mov	r1, r5
   230fe:	3008      	adds	r0, #8
   23100:	f7ff ff96 	bl	23030 <set_off_state>
	if (err < 0) {
   23104:	2800      	cmp	r0, #0
   23106:	db06      	blt.n	23116 <stop+0x28>
	get_sub_config(dev, type)->stop();
   23108:	4621      	mov	r1, r4
   2310a:	4630      	mov	r0, r6
   2310c:	f7ff ff7c 	bl	23008 <get_sub_config>
   23110:	6843      	ldr	r3, [r0, #4]
   23112:	4798      	blx	r3
	return 0;
   23114:	2000      	movs	r0, #0
}
   23116:	bd70      	pop	{r4, r5, r6, pc}

00023118 <api_stop>:
{
   23118:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2311a:	2280      	movs	r2, #128	; 0x80
   2311c:	f7ff ffe7 	bl	230ee <stop>
}
   23120:	bd08      	pop	{r3, pc}

00023122 <async_start>:
{
   23122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23126:	4606      	mov	r6, r0
   23128:	4690      	mov	r8, r2
   2312a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2312c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2312e:	4629      	mov	r1, r5
   23130:	f7ff ff63 	bl	22ffa <get_sub_data>
   23134:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   23136:	9906      	ldr	r1, [sp, #24]
   23138:	3008      	adds	r0, #8
   2313a:	f7ff ff92 	bl	23062 <set_starting_state>
	if (err < 0) {
   2313e:	2800      	cmp	r0, #0
   23140:	db09      	blt.n	23156 <async_start+0x34>
	subdata->cb = cb;
   23142:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   23146:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   23148:	4629      	mov	r1, r5
   2314a:	4630      	mov	r0, r6
   2314c:	f7ff ff5c 	bl	23008 <get_sub_config>
   23150:	6803      	ldr	r3, [r0, #0]
   23152:	4798      	blx	r3
	return 0;
   23154:	2000      	movs	r0, #0
}
   23156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002315a <api_start>:
{
   2315a:	b510      	push	{r4, lr}
   2315c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2315e:	2480      	movs	r4, #128	; 0x80
   23160:	9400      	str	r4, [sp, #0]
   23162:	f7ff ffde 	bl	23122 <async_start>
}
   23166:	b002      	add	sp, #8
   23168:	bd10      	pop	{r4, pc}

0002316a <onoff_started_callback>:
{
   2316a:	b510      	push	{r4, lr}
   2316c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2316e:	b2c9      	uxtb	r1, r1
   23170:	f7ff ff50 	bl	23014 <get_onoff_manager>
	notify(mgr, 0);
   23174:	2100      	movs	r1, #0
   23176:	47a0      	blx	r4
}
   23178:	bd10      	pop	{r4, pc}

0002317a <hfclk_start>:
{
   2317a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2317c:	2001      	movs	r0, #1
   2317e:	f7f7 fba9 	bl	1a8d4 <nrfx_clock_start>
}
   23182:	bd08      	pop	{r3, pc}

00023184 <lfclk_start>:
{
   23184:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   23186:	2000      	movs	r0, #0
   23188:	f7f7 fba4 	bl	1a8d4 <nrfx_clock_start>
}
   2318c:	bd08      	pop	{r3, pc}

0002318e <hfclk_stop>:
{
   2318e:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   23190:	2001      	movs	r0, #1
   23192:	f7f7 fbd5 	bl	1a940 <nrfx_clock_stop>
}
   23196:	bd08      	pop	{r3, pc}

00023198 <lfclk_stop>:
{
   23198:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2319a:	2000      	movs	r0, #0
   2319c:	f7f7 fbd0 	bl	1a940 <nrfx_clock_stop>
}
   231a0:	bd08      	pop	{r3, pc}

000231a2 <blocking_start_callback>:
{
   231a2:	b508      	push	{r3, lr}
   231a4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   231a6:	f7fc f851 	bl	1f24c <z_impl_k_sem_give>
}
   231aa:	bd08      	pop	{r3, pc}

000231ac <get_pull>:
	if (flags & GPIO_PULL_UP) {
   231ac:	f010 0f10 	tst.w	r0, #16
   231b0:	d104      	bne.n	231bc <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   231b2:	f010 0f20 	tst.w	r0, #32
   231b6:	d103      	bne.n	231c0 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   231b8:	2000      	movs	r0, #0
   231ba:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   231bc:	2003      	movs	r0, #3
   231be:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   231c0:	2001      	movs	r0, #1
}
   231c2:	4770      	bx	lr

000231c4 <gpio_nrfx_port_get_raw>:
	return port->config;
   231c4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231c6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   231c8:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   231ca:	600b      	str	r3, [r1, #0]
}
   231cc:	2000      	movs	r0, #0
   231ce:	4770      	bx	lr

000231d0 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   231d0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231d2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   231d4:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   231d6:	4042      	eors	r2, r0
   231d8:	400a      	ands	r2, r1
   231da:	4042      	eors	r2, r0
    p_reg->OUT = value;
   231dc:	605a      	str	r2, [r3, #4]
}
   231de:	2000      	movs	r0, #0
   231e0:	4770      	bx	lr

000231e2 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   231e2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231e4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   231e6:	6099      	str	r1, [r3, #8]
}
   231e8:	2000      	movs	r0, #0
   231ea:	4770      	bx	lr

000231ec <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   231ec:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231ee:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   231f0:	60d9      	str	r1, [r3, #12]
}
   231f2:	2000      	movs	r0, #0
   231f4:	4770      	bx	lr

000231f6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   231f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231f8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   231fa:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   231fc:	404b      	eors	r3, r1
    p_reg->OUT = value;
   231fe:	6053      	str	r3, [r2, #4]
}
   23200:	2000      	movs	r0, #0
   23202:	4770      	bx	lr

00023204 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   23204:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   23208:	d007      	beq.n	2321a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2320a:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   2320e:	d00d      	beq.n	2322c <get_trigger+0x28>
   23210:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   23214:	d008      	beq.n	23228 <get_trigger+0x24>
   23216:	2001      	movs	r0, #1
}
   23218:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2321a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   2321e:	d001      	beq.n	23224 <get_trigger+0x20>
   23220:	2005      	movs	r0, #5
   23222:	4770      	bx	lr
   23224:	2004      	movs	r0, #4
   23226:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   23228:	2002      	movs	r0, #2
   2322a:	4770      	bx	lr
   2322c:	2003      	movs	r0, #3
   2322e:	4770      	bx	lr

00023230 <gpio_nrfx_manage_callback>:
{
   23230:	b470      	push	{r4, r5, r6}
	return port->data;
   23232:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   23234:	1d05      	adds	r5, r0, #4
	return list->head;
   23236:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   23238:	b1db      	cbz	r3, 23272 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   2323a:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2323c:	2400      	movs	r4, #0
   2323e:	e00a      	b.n	23256 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   23240:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   23242:	6043      	str	r3, [r0, #4]
	return list->tail;
   23244:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   23246:	42a1      	cmp	r1, r4
   23248:	d10f      	bne.n	2326a <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   2324a:	606b      	str	r3, [r5, #4]
}
   2324c:	e00d      	b.n	2326a <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   2324e:	606c      	str	r4, [r5, #4]
}
   23250:	e00b      	b.n	2326a <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23252:	461c      	mov	r4, r3
   23254:	681b      	ldr	r3, [r3, #0]
   23256:	b15b      	cbz	r3, 23270 <gpio_nrfx_manage_callback+0x40>
   23258:	429e      	cmp	r6, r3
   2325a:	d1fa      	bne.n	23252 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   2325c:	2c00      	cmp	r4, #0
   2325e:	d0ef      	beq.n	23240 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   23260:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   23262:	6023      	str	r3, [r4, #0]
	return list->tail;
   23264:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   23266:	4299      	cmp	r1, r3
   23268:	d0f1      	beq.n	2324e <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   2326a:	2300      	movs	r3, #0
   2326c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2326e:	e000      	b.n	23272 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   23270:	b152      	cbz	r2, 23288 <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
   23272:	b162      	cbz	r2, 2328e <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   23274:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   23276:	600b      	str	r3, [r1, #0]
	list->head = node;
   23278:	6041      	str	r1, [r0, #4]
	return list->tail;
   2327a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2327c:	b10b      	cbz	r3, 23282 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2327e:	2000      	movs	r0, #0
   23280:	e006      	b.n	23290 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   23282:	6069      	str	r1, [r5, #4]
   23284:	2000      	movs	r0, #0
}
   23286:	e003      	b.n	23290 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   23288:	f06f 0015 	mvn.w	r0, #21
   2328c:	e000      	b.n	23290 <gpio_nrfx_manage_callback+0x60>
	return 0;
   2328e:	2000      	movs	r0, #0
}
   23290:	bc70      	pop	{r4, r5, r6}
   23292:	4770      	bx	lr

00023294 <nrfx_gpio_handler>:
{
   23294:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   23296:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   2329a:	0940      	lsrs	r0, r0, #5
   2329c:	f7f2 fbba 	bl	15a14 <get_dev>
	if (port == NULL) {
   232a0:	b1d8      	cbz	r0, 232da <nrfx_gpio_handler+0x46>
   232a2:	4606      	mov	r6, r0
	return port->data;
   232a4:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   232a6:	2501      	movs	r5, #1
   232a8:	40a5      	lsls	r5, r4
	return list->head;
   232aa:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   232ac:	b119      	cbz	r1, 232b6 <nrfx_gpio_handler+0x22>
   232ae:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   232b0:	b149      	cbz	r1, 232c6 <nrfx_gpio_handler+0x32>
	return node->next;
   232b2:	680c      	ldr	r4, [r1, #0]
   232b4:	e007      	b.n	232c6 <nrfx_gpio_handler+0x32>
   232b6:	460c      	mov	r4, r1
   232b8:	e005      	b.n	232c6 <nrfx_gpio_handler+0x32>
   232ba:	b164      	cbz	r4, 232d6 <nrfx_gpio_handler+0x42>
   232bc:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   232be:	b104      	cbz	r4, 232c2 <nrfx_gpio_handler+0x2e>
	return node->next;
   232c0:	6823      	ldr	r3, [r4, #0]
   232c2:	4621      	mov	r1, r4
   232c4:	461c      	mov	r4, r3
   232c6:	b141      	cbz	r1, 232da <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   232c8:	688a      	ldr	r2, [r1, #8]
   232ca:	402a      	ands	r2, r5
   232cc:	d0f5      	beq.n	232ba <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   232ce:	684b      	ldr	r3, [r1, #4]
   232d0:	4630      	mov	r0, r6
   232d2:	4798      	blx	r3
   232d4:	e7f1      	b.n	232ba <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   232d6:	4623      	mov	r3, r4
   232d8:	e7f3      	b.n	232c2 <nrfx_gpio_handler+0x2e>
}
   232da:	bd70      	pop	{r4, r5, r6, pc}

000232dc <endtx_isr>:
	return dev->config;
   232dc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   232de:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   232e0:	f04f 0120 	mov.w	r1, #32
   232e4:	f3ef 8211 	mrs	r2, BASEPRI
   232e8:	f381 8812 	msr	BASEPRI_MAX, r1
   232ec:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   232f0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   232f4:	b131      	cbz	r1, 23304 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   232f6:	2100      	movs	r1, #0
   232f8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   232fc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23300:	2101      	movs	r1, #1
   23302:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   23304:	f382 8811 	msr	BASEPRI, r2
   23308:	f3bf 8f6f 	isb	sy
}
   2330c:	4770      	bx	lr

0002330e <uarte_nrfx_isr_int>:
{
   2330e:	b538      	push	{r3, r4, r5, lr}
   23310:	4604      	mov	r4, r0
	return dev->config;
   23312:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23314:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   23316:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2331a:	f413 7f80 	tst.w	r3, #256	; 0x100
   2331e:	d003      	beq.n	23328 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23320:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   23324:	2b00      	cmp	r3, #0
   23326:	d139      	bne.n	2339c <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   23328:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2332a:	685b      	ldr	r3, [r3, #4]
   2332c:	f013 0f10 	tst.w	r3, #16
   23330:	d01a      	beq.n	23368 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   23332:	f04f 0320 	mov.w	r3, #32
   23336:	f3ef 8211 	mrs	r2, BASEPRI
   2333a:	f383 8812 	msr	BASEPRI_MAX, r3
   2333e:	f3bf 8f6f 	isb	sy
   23342:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   23346:	b113      	cbz	r3, 2334e <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   23348:	2300      	movs	r3, #0
   2334a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   2334e:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   23350:	68db      	ldr	r3, [r3, #12]
   23352:	b10b      	cbz	r3, 23358 <uarte_nrfx_isr_int+0x4a>
   23354:	691b      	ldr	r3, [r3, #16]
   23356:	b91b      	cbnz	r3, 23360 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   23358:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2335c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   23360:	f382 8811 	msr	BASEPRI, r2
   23364:	f3bf 8f6f 	isb	sy
	return dev->data;
   23368:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   2336a:	68da      	ldr	r2, [r3, #12]
   2336c:	b1aa      	cbz	r2, 2339a <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2336e:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   23372:	b121      	cbz	r1, 2337e <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   23374:	2100      	movs	r1, #0
   23376:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   23378:	68da      	ldr	r2, [r3, #12]
   2337a:	7b92      	ldrb	r2, [r2, #14]
   2337c:	b98a      	cbnz	r2, 233a2 <uarte_nrfx_isr_int+0x94>
   2337e:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   23382:	b122      	cbz	r2, 2338e <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23384:	2200      	movs	r2, #0
   23386:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   2338a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   2338e:	68da      	ldr	r2, [r3, #12]
   23390:	6813      	ldr	r3, [r2, #0]
   23392:	b113      	cbz	r3, 2339a <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   23394:	6851      	ldr	r1, [r2, #4]
   23396:	4620      	mov	r0, r4
   23398:	4798      	blx	r3
}
   2339a:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2339c:	f7ff ff9e 	bl	232dc <endtx_isr>
   233a0:	e7c2      	b.n	23328 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   233a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   233a6:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   233aa:	68db      	ldr	r3, [r3, #12]
   233ac:	7399      	strb	r1, [r3, #14]
			return;
   233ae:	e7f4      	b.n	2339a <uarte_nrfx_isr_int+0x8c>

000233b0 <uarte_nrfx_configure>:
{
   233b0:	b570      	push	{r4, r5, r6, lr}
   233b2:	b082      	sub	sp, #8
   233b4:	4605      	mov	r5, r0
   233b6:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   233b8:	794b      	ldrb	r3, [r1, #5]
   233ba:	2b01      	cmp	r3, #1
   233bc:	d006      	beq.n	233cc <uarte_nrfx_configure+0x1c>
   233be:	2b03      	cmp	r3, #3
   233c0:	d011      	beq.n	233e6 <uarte_nrfx_configure+0x36>
   233c2:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   233c6:	4618      	mov	r0, r3
   233c8:	b002      	add	sp, #8
   233ca:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   233cc:	2300      	movs	r3, #0
   233ce:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   233d2:	79a3      	ldrb	r3, [r4, #6]
   233d4:	2b03      	cmp	r3, #3
   233d6:	d138      	bne.n	2344a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   233d8:	79e3      	ldrb	r3, [r4, #7]
   233da:	b143      	cbz	r3, 233ee <uarte_nrfx_configure+0x3e>
   233dc:	2b01      	cmp	r3, #1
   233de:	d010      	beq.n	23402 <uarte_nrfx_configure+0x52>
   233e0:	f06f 0385 	mvn.w	r3, #133	; 0x85
   233e4:	e7ef      	b.n	233c6 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   233e6:	2310      	movs	r3, #16
   233e8:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   233ec:	e7f1      	b.n	233d2 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   233ee:	2300      	movs	r3, #0
   233f0:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   233f4:	7923      	ldrb	r3, [r4, #4]
   233f6:	b143      	cbz	r3, 2340a <uarte_nrfx_configure+0x5a>
   233f8:	2b02      	cmp	r3, #2
   233fa:	d022      	beq.n	23442 <uarte_nrfx_configure+0x92>
   233fc:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23400:	e7e1      	b.n	233c6 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   23402:	2301      	movs	r3, #1
   23404:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   23408:	e7f4      	b.n	233f4 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2340a:	2300      	movs	r3, #0
   2340c:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   23410:	6821      	ldr	r1, [r4, #0]
   23412:	4628      	mov	r0, r5
   23414:	f7f2 fcac 	bl	15d70 <baudrate_set>
   23418:	4603      	mov	r3, r0
   2341a:	b9c8      	cbnz	r0, 23450 <uarte_nrfx_configure+0xa0>
	return dev->config;
   2341c:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   2341e:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   23420:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   23424:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   23428:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2342c:	4331      	orrs	r1, r6
   2342e:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   23430:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   23434:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   23436:	3204      	adds	r2, #4
   23438:	e894 0003 	ldmia.w	r4, {r0, r1}
   2343c:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   23440:	e7c1      	b.n	233c6 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   23442:	230e      	movs	r3, #14
   23444:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   23448:	e7e2      	b.n	23410 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   2344a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2344e:	e7ba      	b.n	233c6 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   23450:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23454:	e7b7      	b.n	233c6 <uarte_nrfx_configure+0x16>

00023456 <uarte_nrfx_config_get>:
{
   23456:	460b      	mov	r3, r1
	return dev->data;
   23458:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   2345a:	6891      	ldr	r1, [r2, #8]
   2345c:	6850      	ldr	r0, [r2, #4]
   2345e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   23462:	2000      	movs	r0, #0
   23464:	4770      	bx	lr

00023466 <uarte_nrfx_err_check>:
	return dev->config;
   23466:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23468:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2346a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2346e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   23472:	4770      	bx	lr

00023474 <is_tx_ready>:
	return dev->config;
   23474:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23476:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   23478:	685b      	ldr	r3, [r3, #4]
   2347a:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2347e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   23482:	b929      	cbnz	r1, 23490 <is_tx_ready+0x1c>
   23484:	b933      	cbnz	r3, 23494 <is_tx_ready+0x20>
   23486:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2348a:	b92b      	cbnz	r3, 23498 <is_tx_ready+0x24>
   2348c:	2000      	movs	r0, #0
   2348e:	4770      	bx	lr
   23490:	2001      	movs	r0, #1
   23492:	4770      	bx	lr
   23494:	2000      	movs	r0, #0
   23496:	4770      	bx	lr
   23498:	2001      	movs	r0, #1
}
   2349a:	4770      	bx	lr

0002349c <uarte_enable>:
	return dev->config;
   2349c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2349e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   234a0:	2208      	movs	r2, #8
   234a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   234a6:	4770      	bx	lr

000234a8 <tx_start>:
{
   234a8:	b510      	push	{r4, lr}
	return dev->config;
   234aa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   234ac:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   234ae:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   234b2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   234b6:	2300      	movs	r3, #0
   234b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   234bc:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   234c0:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   234c4:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   234c8:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   234ca:	685b      	ldr	r3, [r3, #4]
   234cc:	f013 0f10 	tst.w	r3, #16
   234d0:	d102      	bne.n	234d8 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   234d2:	2301      	movs	r3, #1
   234d4:	60a3      	str	r3, [r4, #8]
}
   234d6:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   234d8:	2101      	movs	r1, #1
   234da:	f7ff ffdf 	bl	2349c <uarte_enable>
    p_reg->INTENSET = mask;
   234de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   234e2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   234e6:	e7f4      	b.n	234d2 <tx_start+0x2a>

000234e8 <uarte_nrfx_poll_in>:
{
   234e8:	b410      	push	{r4}
	return dev->data;
   234ea:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   234ec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   234ee:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   234f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   234f4:	b15a      	cbz	r2, 2350e <uarte_nrfx_poll_in+0x26>
	*c = data->rx_data;
   234f6:	7d62      	ldrb	r2, [r4, #21]
   234f8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   234fa:	2000      	movs	r0, #0
   234fc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   23500:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23504:	2201      	movs	r2, #1
   23506:	601a      	str	r2, [r3, #0]
}
   23508:	f85d 4b04 	ldr.w	r4, [sp], #4
   2350c:	4770      	bx	lr
		return -1;
   2350e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23512:	e7f9      	b.n	23508 <uarte_nrfx_poll_in+0x20>

00023514 <uarte_nrfx_fifo_fill>:
{
   23514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23518:	4680      	mov	r8, r0
	return dev->data;
   2351a:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2351c:	68fb      	ldr	r3, [r7, #12]
   2351e:	899e      	ldrh	r6, [r3, #12]
   23520:	4296      	cmp	r6, r2
   23522:	bfa8      	it	ge
   23524:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   23526:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23528:	2201      	movs	r2, #1
   2352a:	e8d3 0fef 	ldaex	r0, [r3]
   2352e:	2800      	cmp	r0, #0
   23530:	d103      	bne.n	2353a <uarte_nrfx_fifo_fill+0x26>
   23532:	e8c3 2fe4 	stlex	r4, r2, [r3]
   23536:	2c00      	cmp	r4, #0
   23538:	d1f7      	bne.n	2352a <uarte_nrfx_fifo_fill+0x16>
   2353a:	d101      	bne.n	23540 <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
   2353c:	2300      	movs	r3, #0
   2353e:	e006      	b.n	2354e <uarte_nrfx_fifo_fill+0x3a>
		return 0;
   23540:	2600      	movs	r6, #0
   23542:	e019      	b.n	23578 <uarte_nrfx_fifo_fill+0x64>
		data->int_driven->tx_buffer[i] = tx_data[i];
   23544:	68fc      	ldr	r4, [r7, #12]
   23546:	68a4      	ldr	r4, [r4, #8]
   23548:	5ccd      	ldrb	r5, [r1, r3]
   2354a:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   2354c:	3301      	adds	r3, #1
   2354e:	42b3      	cmp	r3, r6
   23550:	dbf8      	blt.n	23544 <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
   23552:	f04f 0320 	mov.w	r3, #32
   23556:	f3ef 8411 	mrs	r4, BASEPRI
   2355a:	f383 8812 	msr	BASEPRI_MAX, r3
   2355e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   23562:	4640      	mov	r0, r8
   23564:	f7ff ff86 	bl	23474 <is_tx_ready>
   23568:	b948      	cbnz	r0, 2357e <uarte_nrfx_fifo_fill+0x6a>
		data->int_driven->fifo_fill_lock = 0;
   2356a:	68fb      	ldr	r3, [r7, #12]
   2356c:	2600      	movs	r6, #0
   2356e:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   23570:	f384 8811 	msr	BASEPRI, r4
   23574:	f3bf 8f6f 	isb	sy
}
   23578:	4630      	mov	r0, r6
   2357a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   2357e:	68fb      	ldr	r3, [r7, #12]
   23580:	4632      	mov	r2, r6
   23582:	6899      	ldr	r1, [r3, #8]
   23584:	4640      	mov	r0, r8
   23586:	f7ff ff8f 	bl	234a8 <tx_start>
   2358a:	e7f1      	b.n	23570 <uarte_nrfx_fifo_fill+0x5c>

0002358c <uarte_nrfx_fifo_read>:
	return dev->config;
   2358c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2358e:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   23590:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23592:	2a00      	cmp	r2, #0
   23594:	dd0c      	ble.n	235b0 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23596:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   2359a:	b15a      	cbz	r2, 235b4 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2359c:	2200      	movs	r2, #0
   2359e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   235a2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   235a6:	7d42      	ldrb	r2, [r0, #21]
   235a8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   235aa:	2001      	movs	r0, #1
   235ac:	6018      	str	r0, [r3, #0]
}
   235ae:	4770      	bx	lr
	int num_rx = 0;
   235b0:	2000      	movs	r0, #0
   235b2:	4770      	bx	lr
   235b4:	2000      	movs	r0, #0
}
   235b6:	4770      	bx	lr

000235b8 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   235b8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   235ba:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   235bc:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   235be:	f04f 0020 	mov.w	r0, #32
   235c2:	f3ef 8311 	mrs	r3, BASEPRI
   235c6:	f380 8812 	msr	BASEPRI_MAX, r0
   235ca:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   235ce:	68c9      	ldr	r1, [r1, #12]
   235d0:	2000      	movs	r0, #0
   235d2:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   235d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   235d8:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   235dc:	f383 8811 	msr	BASEPRI, r3
   235e0:	f3bf 8f6f 	isb	sy
}
   235e4:	4770      	bx	lr

000235e6 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   235e6:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   235e8:	68db      	ldr	r3, [r3, #12]
   235ea:	2201      	movs	r2, #1
   235ec:	739a      	strb	r2, [r3, #14]
}
   235ee:	4770      	bx	lr

000235f0 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   235f0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   235f2:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   235f4:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   235f6:	68db      	ldr	r3, [r3, #12]
   235f8:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   235fa:	b94a      	cbnz	r2, 23610 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   235fc:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   23600:	b15a      	cbz	r2, 2361a <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   23602:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   23606:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   2360a:	d008      	beq.n	2361e <uarte_nrfx_irq_tx_ready_complete+0x2e>
   2360c:	2001      	movs	r0, #1
   2360e:	e000      	b.n	23612 <uarte_nrfx_irq_tx_ready_complete+0x22>
   23610:	2000      	movs	r0, #0
	if (ready) {
   23612:	b108      	cbz	r0, 23618 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   23614:	2200      	movs	r2, #0
   23616:	611a      	str	r2, [r3, #16]
}
   23618:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2361a:	2000      	movs	r0, #0
   2361c:	e7f9      	b.n	23612 <uarte_nrfx_irq_tx_ready_complete+0x22>
   2361e:	2000      	movs	r0, #0
   23620:	e7f7      	b.n	23612 <uarte_nrfx_irq_tx_ready_complete+0x22>

00023622 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   23622:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23624:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23626:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2362a:	3800      	subs	r0, #0
   2362c:	bf18      	it	ne
   2362e:	2001      	movne	r0, #1
   23630:	4770      	bx	lr

00023632 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   23632:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23634:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   23636:	2210      	movs	r2, #16
   23638:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2363c:	4770      	bx	lr

0002363e <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   2363e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23640:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   23642:	2210      	movs	r2, #16
   23644:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23648:	4770      	bx	lr

0002364a <uarte_nrfx_irq_err_enable>:
	return dev->config;
   2364a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2364c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2364e:	f44f 7200 	mov.w	r2, #512	; 0x200
   23652:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23656:	4770      	bx	lr

00023658 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   23658:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2365a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2365c:	f44f 7200 	mov.w	r2, #512	; 0x200
   23660:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23664:	4770      	bx	lr

00023666 <uarte_nrfx_irq_is_pending>:
{
   23666:	b538      	push	{r3, r4, r5, lr}
   23668:	4604      	mov	r4, r0
	return dev->config;
   2366a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2366c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2366e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   23672:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   23676:	d106      	bne.n	23686 <uarte_nrfx_irq_is_pending+0x20>
   23678:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   2367c:	f013 0f10 	tst.w	r3, #16
   23680:	d107      	bne.n	23692 <uarte_nrfx_irq_is_pending+0x2c>
   23682:	2000      	movs	r0, #0
}
   23684:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   23686:	f7ff ffb3 	bl	235f0 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2368a:	2800      	cmp	r0, #0
   2368c:	d0f4      	beq.n	23678 <uarte_nrfx_irq_is_pending+0x12>
		||
   2368e:	2001      	movs	r0, #1
   23690:	e7f8      	b.n	23684 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   23692:	4620      	mov	r0, r4
   23694:	f7ff ffc5 	bl	23622 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   23698:	2800      	cmp	r0, #0
   2369a:	d0f3      	beq.n	23684 <uarte_nrfx_irq_is_pending+0x1e>
		||
   2369c:	2001      	movs	r0, #1
   2369e:	e7f1      	b.n	23684 <uarte_nrfx_irq_is_pending+0x1e>

000236a0 <uarte_nrfx_irq_update>:
}
   236a0:	2001      	movs	r0, #1
   236a2:	4770      	bx	lr

000236a4 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   236a4:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   236a6:	68d8      	ldr	r0, [r3, #12]
   236a8:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   236aa:	68db      	ldr	r3, [r3, #12]
   236ac:	605a      	str	r2, [r3, #4]
}
   236ae:	4770      	bx	lr

000236b0 <wait_tx_ready>:
{
   236b0:	b570      	push	{r4, r5, r6, lr}
   236b2:	4606      	mov	r6, r0
   236b4:	e014      	b.n	236e0 <wait_tx_ready+0x30>
		if (res) {
   236b6:	b17d      	cbz	r5, 236d8 <wait_tx_ready+0x28>
	__asm__ volatile(
   236b8:	f04f 0320 	mov.w	r3, #32
   236bc:	f3ef 8411 	mrs	r4, BASEPRI
   236c0:	f383 8812 	msr	BASEPRI_MAX, r3
   236c4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   236c8:	4630      	mov	r0, r6
   236ca:	f7ff fed3 	bl	23474 <is_tx_ready>
   236ce:	b9a0      	cbnz	r0, 236fa <wait_tx_ready+0x4a>
	__asm__ volatile(
   236d0:	f384 8811 	msr	BASEPRI, r4
   236d4:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   236d8:	2021      	movs	r0, #33	; 0x21
   236da:	2100      	movs	r1, #0
   236dc:	f7fc fb2a 	bl	1fd34 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   236e0:	2464      	movs	r4, #100	; 0x64
   236e2:	4630      	mov	r0, r6
   236e4:	f7ff fec6 	bl	23474 <is_tx_ready>
   236e8:	4605      	mov	r5, r0
   236ea:	2800      	cmp	r0, #0
   236ec:	d1e3      	bne.n	236b6 <wait_tx_ready+0x6>
   236ee:	2001      	movs	r0, #1
   236f0:	f001 f9ac 	bl	24a4c <nrfx_busy_wait>
   236f4:	3c01      	subs	r4, #1
   236f6:	d1f4      	bne.n	236e2 <wait_tx_ready+0x32>
   236f8:	e7dd      	b.n	236b6 <wait_tx_ready+0x6>
}
   236fa:	4620      	mov	r0, r4
   236fc:	bd70      	pop	{r4, r5, r6, pc}

000236fe <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   236fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23700:	4604      	mov	r4, r0
	return dev->config;
   23702:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   23704:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   23706:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   23708:	2100      	movs	r1, #0
   2370a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   2370e:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   23710:	f7f2 faa8 	bl	15c64 <uarte_nrfx_pins_configure>
	return dev->data;
   23714:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   23716:	3104      	adds	r1, #4
   23718:	4620      	mov	r0, r4
   2371a:	f7ff fe49 	bl	233b0 <uarte_nrfx_configure>
	if (err) {
   2371e:	4604      	mov	r4, r0
   23720:	bb68      	cbnz	r0, 2377e <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   23722:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   23724:	f013 0f02 	tst.w	r3, #2
   23728:	d12b      	bne.n	23782 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2372a:	2308      	movs	r3, #8
   2372c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   23730:	7a33      	ldrb	r3, [r6, #8]
   23732:	b95b      	cbnz	r3, 2374c <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23734:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   23738:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2373c:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   23740:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   23744:	2301      	movs	r3, #1
   23746:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2374a:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2374c:	6873      	ldr	r3, [r6, #4]
   2374e:	f013 0f02 	tst.w	r3, #2
   23752:	d103      	bne.n	2375c <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   23754:	f44f 7380 	mov.w	r3, #256	; 0x100
   23758:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2375c:	6873      	ldr	r3, [r6, #4]
   2375e:	f013 0f10 	tst.w	r3, #16
   23762:	d003      	beq.n	2376c <uarte_instance_init+0x6e>
   23764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   23768:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2376c:	3714      	adds	r7, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2376e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   23772:	2300      	movs	r3, #0
   23774:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23778:	2301      	movs	r3, #1
   2377a:	60ab      	str	r3, [r5, #8]
   2377c:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2377e:	4620      	mov	r0, r4
   23780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   23782:	4639      	mov	r1, r7
   23784:	4628      	mov	r0, r5
   23786:	f7f2 fbd3 	bl	15f30 <endtx_stoptx_ppi_init>
		if (err < 0) {
   2378a:	2800      	cmp	r0, #0
   2378c:	dacd      	bge.n	2372a <uarte_instance_init+0x2c>
			return err;
   2378e:	4604      	mov	r4, r0
   23790:	e7f5      	b.n	2377e <uarte_instance_init+0x80>

00023792 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   23792:	b510      	push	{r4, lr}
   23794:	4604      	mov	r4, r0
   23796:	2200      	movs	r2, #0
   23798:	2101      	movs	r1, #1
   2379a:	2008      	movs	r0, #8
   2379c:	f7f0 fb7c 	bl	13e98 <z_arm_irq_priority_set>
   237a0:	2008      	movs	r0, #8
   237a2:	f7f0 fb5b 	bl	13e5c <arch_irq_enable>
   237a6:	2101      	movs	r1, #1
   237a8:	4620      	mov	r0, r4
   237aa:	f7ff ffa8 	bl	236fe <uarte_instance_init>
   237ae:	bd10      	pop	{r4, pc}

000237b0 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   237b0:	2000      	movs	r0, #0
   237b2:	4770      	bx	lr

000237b4 <entropy_cc3xx_rng_get_entropy>:
{
   237b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   237b6:	b083      	sub	sp, #12
   237b8:	460f      	mov	r7, r1
   237ba:	4616      	mov	r6, r2
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   237bc:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   237c0:	2400      	movs	r4, #0
	int res = -EINVAL;
   237c2:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   237c6:	e009      	b.n	237dc <entropy_cc3xx_rng_get_entropy+0x28>
			res = spm_request_random_number(buffer + offset,
   237c8:	aa01      	add	r2, sp, #4
   237ca:	4629      	mov	r1, r5
   237cc:	1938      	adds	r0, r7, r4
   237ce:	f7ff faf9 	bl	22dc4 <spm_request_random_number>
		if (olen != chunk_size) {
   237d2:	9b01      	ldr	r3, [sp, #4]
   237d4:	42ab      	cmp	r3, r5
   237d6:	d109      	bne.n	237ec <entropy_cc3xx_rng_get_entropy+0x38>
		if (res != 0) {
   237d8:	b950      	cbnz	r0, 237f0 <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
   237da:	442c      	add	r4, r5
	while (offset < length) {
   237dc:	42a6      	cmp	r6, r4
   237de:	d907      	bls.n	237f0 <entropy_cc3xx_rng_get_entropy+0x3c>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   237e0:	1b33      	subs	r3, r6, r4
   237e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   237e6:	d2ef      	bcs.n	237c8 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   237e8:	461d      	mov	r5, r3
   237ea:	e7ed      	b.n	237c8 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   237ec:	f06f 0015 	mvn.w	r0, #21
}
   237f0:	b003      	add	sp, #12
   237f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000237f4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   237f4:	4770      	bx	lr

000237f6 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   237f6:	1a40      	subs	r0, r0, r1
}
   237f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   237fc:	4770      	bx	lr

000237fe <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   237fe:	f100 0350 	add.w	r3, r0, #80	; 0x50
   23802:	009b      	lsls	r3, r3, #2
   23804:	b29b      	uxth	r3, r3
   23806:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2380a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   2380e:	2200      	movs	r2, #0
   23810:	601a      	str	r2, [r3, #0]
   23812:	681b      	ldr	r3, [r3, #0]
}
   23814:	4770      	bx	lr

00023816 <absolute_time_to_cc>:
}
   23816:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2381a:	4770      	bx	lr

0002381c <full_int_lock>:
	__asm__ volatile(
   2381c:	f04f 0320 	mov.w	r3, #32
   23820:	f3ef 8011 	mrs	r0, BASEPRI
   23824:	f383 8812 	msr	BASEPRI_MAX, r3
   23828:	f3bf 8f6f 	isb	sy
}
   2382c:	4770      	bx	lr

0002382e <full_int_unlock>:
	__asm__ volatile(
   2382e:	f380 8811 	msr	BASEPRI, r0
   23832:	f3bf 8f6f 	isb	sy
}
   23836:	4770      	bx	lr

00023838 <set_absolute_alarm>:
{
   23838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2383a:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2383c:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   23840:	f7f2 fbb6 	bl	15fb0 <get_comparator>
   23844:	4607      	mov	r7, r0
   23846:	e019      	b.n	2387c <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   23848:	2013      	movs	r0, #19
   2384a:	f002 fec1 	bl	265d0 <z_impl_k_busy_wait>
}
   2384e:	e022      	b.n	23896 <set_absolute_alarm+0x5e>
		event_clear(chan);
   23850:	4630      	mov	r0, r6
   23852:	f7ff ffd4 	bl	237fe <event_clear>
		event_enable(chan);
   23856:	4630      	mov	r0, r6
   23858:	f7f2 fbb2 	bl	15fc0 <event_enable>
		set_comparator(chan, cc_val);
   2385c:	4629      	mov	r1, r5
   2385e:	4630      	mov	r0, r6
   23860:	f7f2 fb9c 	bl	15f9c <set_comparator>
		now2 = counter();
   23864:	f7f2 fbc0 	bl	15fe8 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   23868:	4284      	cmp	r4, r0
   2386a:	d01e      	beq.n	238aa <set_absolute_alarm+0x72>
   2386c:	1c81      	adds	r1, r0, #2
   2386e:	4628      	mov	r0, r5
   23870:	f7ff ffc1 	bl	237f6 <counter_sub>
	} while ((now2 != now) &&
   23874:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   23878:	d917      	bls.n	238aa <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   2387a:	462f      	mov	r7, r5
		now = counter();
   2387c:	f7f2 fbb4 	bl	15fe8 <counter>
   23880:	4604      	mov	r4, r0
		set_comparator(chan, now);
   23882:	4601      	mov	r1, r0
   23884:	4630      	mov	r0, r6
   23886:	f7f2 fb89 	bl	15f9c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   2388a:	4621      	mov	r1, r4
   2388c:	4638      	mov	r0, r7
   2388e:	f7ff ffb2 	bl	237f6 <counter_sub>
   23892:	2801      	cmp	r0, #1
   23894:	d0d8      	beq.n	23848 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   23896:	1ca7      	adds	r7, r4, #2
   23898:	4639      	mov	r1, r7
   2389a:	4628      	mov	r0, r5
   2389c:	f7ff ffab 	bl	237f6 <counter_sub>
   238a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   238a4:	d9d4      	bls.n	23850 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   238a6:	463d      	mov	r5, r7
   238a8:	e7d2      	b.n	23850 <set_absolute_alarm+0x18>
}
   238aa:	4628      	mov	r0, r5
   238ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000238ae <compare_set>:
{
   238ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   238b0:	b083      	sub	sp, #12
   238b2:	4604      	mov	r4, r0
   238b4:	4617      	mov	r7, r2
   238b6:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   238b8:	f7f2 fb9c 	bl	15ff4 <compare_int_lock>
   238bc:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   238be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   238c0:	9301      	str	r3, [sp, #4]
   238c2:	9b08      	ldr	r3, [sp, #32]
   238c4:	9300      	str	r3, [sp, #0]
   238c6:	463a      	mov	r2, r7
   238c8:	462b      	mov	r3, r5
   238ca:	4620      	mov	r0, r4
   238cc:	f7f2 fc70 	bl	161b0 <compare_set_nolocks>
   238d0:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   238d2:	4631      	mov	r1, r6
   238d4:	4620      	mov	r0, r4
   238d6:	f7f2 fbe7 	bl	160a8 <compare_int_unlock>
}
   238da:	4628      	mov	r0, r5
   238dc:	b003      	add	sp, #12
   238de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000238e0 <sys_clock_cycle_get_32>:
{
   238e0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   238e2:	f7f2 fc45 	bl	16170 <z_nrf_rtc_timer_read>
}
   238e6:	bd08      	pop	{r3, pc}

000238e8 <sleeping_thread_init>:
{
   238e8:	b508      	push	{r3, lr}
	k_sem_init(&thread->sem, 0, 1);
   238ea:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   238ec:	2201      	movs	r2, #1
   238ee:	2100      	movs	r1, #0
   238f0:	f002 fb27 	bl	25f42 <z_impl_k_sem_init>
}
   238f4:	bd08      	pop	{r3, pc}

000238f6 <nrf_modem_os_busywait>:
{
   238f6:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   238f8:	f002 fe6a 	bl	265d0 <z_impl_k_busy_wait>
}
   238fc:	bd08      	pop	{r3, pc}

000238fe <nrf_modem_os_timedwait>:
{
   238fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23902:	b088      	sub	sp, #32
   23904:	460e      	mov	r6, r1
	return z_impl_k_uptime_ticks();
   23906:	f002 fe5f 	bl	265c8 <z_impl_k_uptime_ticks>
   2390a:	014b      	lsls	r3, r1, #5
   2390c:	0142      	lsls	r2, r0, #5
   2390e:	ea43 67d0 	orr.w	r7, r3, r0, lsr #27
   23912:	1a13      	subs	r3, r2, r0
   23914:	eb67 0201 	sbc.w	r2, r7, r1
   23918:	0097      	lsls	r7, r2, #2
   2391a:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
   2391e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   23922:	463a      	mov	r2, r7
   23924:	eb1c 0300 	adds.w	r3, ip, r0
   23928:	eb41 0202 	adc.w	r2, r1, r2
   2392c:	00d1      	lsls	r1, r2, #3
   2392e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   23932:	00d8      	lsls	r0, r3, #3
   23934:	0bc3      	lsrs	r3, r0, #15
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   23936:	ea43 4741 	orr.w	r7, r3, r1, lsl #17
	if (*timeout == 0) {
   2393a:	6833      	ldr	r3, [r6, #0]
   2393c:	2b00      	cmp	r3, #0
   2393e:	d060      	beq.n	23a02 <nrf_modem_os_timedwait+0x104>
   23940:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
	if (*timeout < 0) {
   23944:	2b00      	cmp	r3, #0
   23946:	db60      	blt.n	23a0a <nrf_modem_os_timedwait+0x10c>
	sleeping_thread_init(&thread);
   23948:	a801      	add	r0, sp, #4
   2394a:	f7ff ffcd 	bl	238e8 <sleeping_thread_init>
	if (!sleeping_thread_add(&thread)) {
   2394e:	a801      	add	r0, sp, #4
   23950:	f7f2 fde8 	bl	16524 <sleeping_thread_add>
   23954:	2800      	cmp	r0, #0
   23956:	d062      	beq.n	23a1e <nrf_modem_os_timedwait+0x120>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   23958:	6833      	ldr	r3, [r6, #0]
   2395a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2395e:	d058      	beq.n	23a12 <nrf_modem_os_timedwait+0x114>
   23960:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23964:	ea4f 79e3 	mov.w	r9, r3, asr #31
   23968:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   2396c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   23970:	03d8      	lsls	r0, r3, #15
   23972:	f240 3ce7 	movw	ip, #999	; 0x3e7
   23976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2397a:	2300      	movs	r3, #0
   2397c:	eb10 000c 	adds.w	r0, r0, ip
   23980:	f04f 0c00 	mov.w	ip, #0
   23984:	eb41 010c 	adc.w	r1, r1, ip
   23988:	f7ed f8c8 	bl	10b1c <__aeabi_uldivmod>
   2398c:	4602      	mov	r2, r0
   2398e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   23990:	a802      	add	r0, sp, #8
   23992:	f7fb fc83 	bl	1f29c <z_impl_k_sem_take>
	sleeping_thread_remove(&thread);
   23996:	a801      	add	r0, sp, #4
   23998:	f7f2 fde8 	bl	1656c <sleeping_thread_remove>
	if (*timeout == SYS_FOREVER_MS) {
   2399c:	6833      	ldr	r3, [r6, #0]
   2399e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   239a2:	d040      	beq.n	23a26 <nrf_modem_os_timedwait+0x128>
	remaining = *timeout - k_uptime_delta(&start);
   239a4:	4698      	mov	r8, r3
   239a6:	ea4f 79e3 	mov.w	r9, r3, asr #31
	return z_impl_k_uptime_ticks();
   239aa:	f002 fe0d 	bl	265c8 <z_impl_k_uptime_ticks>
   239ae:	014b      	lsls	r3, r1, #5
   239b0:	0142      	lsls	r2, r0, #5
   239b2:	ea43 6cd0 	orr.w	ip, r3, r0, lsr #27
   239b6:	1a13      	subs	r3, r2, r0
   239b8:	eb6c 0201 	sbc.w	r2, ip, r1
   239bc:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   239c0:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
   239c4:	ea4f 0e83 	mov.w	lr, r3, lsl #2
   239c8:	4662      	mov	r2, ip
   239ca:	eb1e 0300 	adds.w	r3, lr, r0
   239ce:	eb41 0202 	adc.w	r2, r1, r2
   239d2:	00d1      	lsls	r1, r2, #3
   239d4:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   239d8:	00d8      	lsls	r0, r3, #3
   239da:	0bc3      	lsrs	r3, r0, #15
   239dc:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
   239e0:	0bc8      	lsrs	r0, r1, #15
   239e2:	1abf      	subs	r7, r7, r2
   239e4:	eb6a 0a00 	sbc.w	sl, sl, r0
   239e8:	eb17 0408 	adds.w	r4, r7, r8
   239ec:	eb4a 0509 	adc.w	r5, sl, r9
	*timeout = remaining > 0 ? remaining : 0;
   239f0:	4623      	mov	r3, r4
   239f2:	2c00      	cmp	r4, #0
   239f4:	f175 0200 	sbcs.w	r2, r5, #0
   239f8:	db0f      	blt.n	23a1a <nrf_modem_os_timedwait+0x11c>
   239fa:	6033      	str	r3, [r6, #0]
	if (*timeout == 0) {
   239fc:	b1ab      	cbz	r3, 23a2a <nrf_modem_os_timedwait+0x12c>
	return 0;
   239fe:	2000      	movs	r0, #0
   23a00:	e00e      	b.n	23a20 <nrf_modem_os_timedwait+0x122>
	z_impl_k_yield();
   23a02:	f7fc f903 	bl	1fc0c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   23a06:	2074      	movs	r0, #116	; 0x74
   23a08:	e00a      	b.n	23a20 <nrf_modem_os_timedwait+0x122>
		*timeout = SYS_FOREVER_MS;
   23a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23a0e:	6033      	str	r3, [r6, #0]
   23a10:	e79a      	b.n	23948 <nrf_modem_os_timedwait+0x4a>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   23a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23a16:	4613      	mov	r3, r2
   23a18:	e7ba      	b.n	23990 <nrf_modem_os_timedwait+0x92>
	*timeout = remaining > 0 ? remaining : 0;
   23a1a:	2300      	movs	r3, #0
   23a1c:	e7ed      	b.n	239fa <nrf_modem_os_timedwait+0xfc>
		return 0;
   23a1e:	2000      	movs	r0, #0
}
   23a20:	b008      	add	sp, #32
   23a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   23a26:	2000      	movs	r0, #0
   23a28:	e7fa      	b.n	23a20 <nrf_modem_os_timedwait+0x122>
		return NRF_ETIMEDOUT;
   23a2a:	2074      	movs	r0, #116	; 0x74
   23a2c:	e7f8      	b.n	23a20 <nrf_modem_os_timedwait+0x122>

00023a2e <nrf_modem_os_errno_set>:
{
   23a2e:	b510      	push	{r4, lr}
   23a30:	4604      	mov	r4, r0
	errno = err_code;
   23a32:	f7ff fab0 	bl	22f96 <__errno>
   23a36:	6004      	str	r4, [r0, #0]
}
   23a38:	bd10      	pop	{r4, pc}

00023a3a <nrf_modem_os_is_in_isr>:
{
   23a3a:	b508      	push	{r3, lr}
	return k_is_in_isr();
   23a3c:	f002 f996 	bl	25d6c <k_is_in_isr>
}
   23a40:	bd08      	pop	{r3, pc}

00023a42 <nrf_modem_os_sem_give>:
{
   23a42:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   23a44:	f7fb fc02 	bl	1f24c <z_impl_k_sem_give>
}
   23a48:	bd08      	pop	{r3, pc}

00023a4a <nrf_modem_os_sem_take>:
{
   23a4a:	b538      	push	{r3, r4, r5, lr}
   23a4c:	4604      	mov	r4, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   23a4e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   23a52:	d01c      	beq.n	23a8e <nrf_modem_os_sem_take+0x44>
   23a54:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   23a58:	17cb      	asrs	r3, r1, #31
   23a5a:	03dd      	lsls	r5, r3, #15
   23a5c:	ea45 4551 	orr.w	r5, r5, r1, lsr #17
   23a60:	03c8      	lsls	r0, r1, #15
   23a62:	f240 31e7 	movw	r1, #999	; 0x3e7
   23a66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23a6a:	2300      	movs	r3, #0
   23a6c:	1840      	adds	r0, r0, r1
   23a6e:	f04f 0100 	mov.w	r1, #0
   23a72:	eb45 0101 	adc.w	r1, r5, r1
   23a76:	f7ed f851 	bl	10b1c <__aeabi_uldivmod>
   23a7a:	4602      	mov	r2, r0
   23a7c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   23a7e:	4620      	mov	r0, r4
   23a80:	f7fb fc0c 	bl	1f29c <z_impl_k_sem_take>
	if (err == -EAGAIN) {
   23a84:	f110 0f0b 	cmn.w	r0, #11
   23a88:	d005      	beq.n	23a96 <nrf_modem_os_sem_take+0x4c>
	return 0;
   23a8a:	2000      	movs	r0, #0
}
   23a8c:	bd38      	pop	{r3, r4, r5, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   23a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23a92:	4613      	mov	r3, r2
   23a94:	e7f3      	b.n	23a7e <nrf_modem_os_sem_take+0x34>
		return NRF_ETIMEDOUT;
   23a96:	2074      	movs	r0, #116	; 0x74
   23a98:	e7f8      	b.n	23a8c <nrf_modem_os_sem_take+0x42>

00023a9a <read_task_create>:
{
   23a9a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   23a9c:	2200      	movs	r2, #0
   23a9e:	2106      	movs	r1, #6
   23aa0:	201c      	movs	r0, #28
   23aa2:	f7f0 f9f9 	bl	13e98 <z_arm_irq_priority_set>
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   23aa6:	201c      	movs	r0, #28
   23aa8:	f7f0 f9d8 	bl	13e5c <arch_irq_enable>
}
   23aac:	bd08      	pop	{r3, pc}

00023aae <nrf_modem_os_trace_put>:
	if (err) {
		LOG_ERR("nrf_modem_trace_processed_callback failed, err %d", err);
	}
#endif
	return 0;
}
   23aae:	2000      	movs	r0, #0
   23ab0:	4770      	bx	lr

00023ab2 <z_to_nrf_ipv4>:
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   23ab2:	2310      	movs	r3, #16
   23ab4:	700b      	strb	r3, [r1, #0]
	nrf_out->sin_port = ptr->sin_port;
   23ab6:	8843      	ldrh	r3, [r0, #2]
   23ab8:	810b      	strh	r3, [r1, #8]
	nrf_out->sin_family = NRF_AF_INET;
   23aba:	2302      	movs	r3, #2
   23abc:	604b      	str	r3, [r1, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   23abe:	6843      	ldr	r3, [r0, #4]
   23ac0:	60cb      	str	r3, [r1, #12]
}
   23ac2:	4770      	bx	lr

00023ac4 <nrf_to_z_ipv4>:
	ptr->sin_port = nrf_in->sin_port;
   23ac4:	890b      	ldrh	r3, [r1, #8]
   23ac6:	8043      	strh	r3, [r0, #2]
	ptr->sin_family = AF_INET;
   23ac8:	2301      	movs	r3, #1
   23aca:	8003      	strh	r3, [r0, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   23acc:	68cb      	ldr	r3, [r1, #12]
   23ace:	6043      	str	r3, [r0, #4]
}
   23ad0:	4770      	bx	lr

00023ad2 <z_to_nrf_level>:
	switch (z_in_level) {
   23ad2:	2801      	cmp	r0, #1
   23ad4:	d007      	beq.n	23ae6 <z_to_nrf_level+0x14>
   23ad6:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   23ada:	d108      	bne.n	23aee <z_to_nrf_level+0x1c>
		*nrf_out_level = NRF_SOL_SECURE;
   23adc:	f44f 738d 	mov.w	r3, #282	; 0x11a
   23ae0:	600b      	str	r3, [r1, #0]
	int retval = 0;
   23ae2:	2000      	movs	r0, #0
		break;
   23ae4:	4770      	bx	lr
		*nrf_out_level = NRF_SOL_SOCKET;
   23ae6:	2301      	movs	r3, #1
   23ae8:	600b      	str	r3, [r1, #0]
	int retval = 0;
   23aea:	2000      	movs	r0, #0
		break;
   23aec:	4770      	bx	lr
	switch (z_in_level) {
   23aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   23af2:	4770      	bx	lr

00023af4 <z_to_nrf_optname>:
	switch (z_in_level) {
   23af4:	2801      	cmp	r0, #1
   23af6:	d033      	beq.n	23b60 <z_to_nrf_optname+0x6c>
   23af8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   23afc:	f040 8088 	bne.w	23c10 <z_to_nrf_optname+0x11c>
		switch (z_in_optname) {
   23b00:	3901      	subs	r1, #1
   23b02:	290b      	cmp	r1, #11
   23b04:	f200 8087 	bhi.w	23c16 <z_to_nrf_optname+0x122>
   23b08:	e8df f001 	tbb	[pc, r1]
   23b0c:	120e0a06 	.word	0x120e0a06
   23b10:	85851a16 	.word	0x85851a16
   23b14:	26221e85 	.word	0x26221e85
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   23b18:	2302      	movs	r3, #2
   23b1a:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23b1c:	2000      	movs	r0, #0
			break;
   23b1e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   23b20:	2305      	movs	r3, #5
   23b22:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23b24:	2000      	movs	r0, #0
			break;
   23b26:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   23b28:	2306      	movs	r3, #6
   23b2a:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23b2c:	2000      	movs	r0, #0
			break;
   23b2e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   23b30:	2307      	movs	r3, #7
   23b32:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23b34:	2000      	movs	r0, #0
			break;
   23b36:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   23b38:	2304      	movs	r3, #4
   23b3a:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23b3c:	2000      	movs	r0, #0
			break;
   23b3e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   23b40:	2301      	movs	r3, #1
   23b42:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23b44:	2000      	movs	r0, #0
			break;
   23b46:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   23b48:	2303      	movs	r3, #3
   23b4a:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23b4c:	2000      	movs	r0, #0
			break;
   23b4e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   23b50:	2309      	movs	r3, #9
   23b52:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23b54:	2000      	movs	r0, #0
			break;
   23b56:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   23b58:	2308      	movs	r3, #8
   23b5a:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23b5c:	2000      	movs	r0, #0
			break;
   23b5e:	4770      	bx	lr
		switch (z_in_optname) {
   23b60:	3902      	subs	r1, #2
   23b62:	2935      	cmp	r1, #53	; 0x35
   23b64:	d85a      	bhi.n	23c1c <z_to_nrf_optname+0x128>
   23b66:	e8df f001 	tbb	[pc, r1]
   23b6a:	592b      	.short	0x592b
   23b6c:	5959591b 	.word	0x5959591b
   23b70:	59595959 	.word	0x59595959
   23b74:	59595959 	.word	0x59595959
   23b78:	59595959 	.word	0x59595959
   23b7c:	5959231f 	.word	0x5959231f
   23b80:	59592759 	.word	0x59592759
   23b84:	332f5959 	.word	0x332f5959
   23b88:	59595937 	.word	0x59595937
   23b8c:	59595959 	.word	0x59595959
   23b90:	59595959 	.word	0x59595959
   23b94:	59595959 	.word	0x59595959
   23b98:	433f5959 	.word	0x433f5959
   23b9c:	3b4f4b47 	.word	0x3b4f4b47
			*nrf_out_optname = NRF_SO_ERROR;
   23ba0:	2304      	movs	r3, #4
   23ba2:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23ba4:	2000      	movs	r0, #0
			break;
   23ba6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   23ba8:	2314      	movs	r3, #20
   23baa:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bac:	2000      	movs	r0, #0
			break;
   23bae:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   23bb0:	2315      	movs	r3, #21
   23bb2:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bb4:	2000      	movs	r0, #0
			break;
   23bb6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   23bb8:	2319      	movs	r3, #25
   23bba:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bbc:	2000      	movs	r0, #0
			break;
   23bbe:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_REUSEADDR;
   23bc0:	2328      	movs	r3, #40	; 0x28
   23bc2:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bc4:	2000      	movs	r0, #0
			break;
   23bc6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   23bc8:	231e      	movs	r3, #30
   23bca:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bcc:	2000      	movs	r0, #0
			break;
   23bce:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   23bd0:	231f      	movs	r3, #31
   23bd2:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bd4:	2000      	movs	r0, #0
			break;
   23bd6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   23bd8:	2320      	movs	r3, #32
   23bda:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bdc:	2000      	movs	r0, #0
			break;
   23bde:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   23be0:	2337      	movs	r3, #55	; 0x37
   23be2:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23be4:	2000      	movs	r0, #0
			break;
   23be6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_LAST;
   23be8:	2332      	movs	r3, #50	; 0x32
   23bea:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bec:	2000      	movs	r0, #0
			break;
   23bee:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   23bf0:	2333      	movs	r3, #51	; 0x33
   23bf2:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bf4:	2000      	movs	r0, #0
			break;
   23bf6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   23bf8:	2334      	movs	r3, #52	; 0x34
   23bfa:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23bfc:	2000      	movs	r0, #0
			break;
   23bfe:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   23c00:	2335      	movs	r3, #53	; 0x35
   23c02:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23c04:	2000      	movs	r0, #0
			break;
   23c06:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   23c08:	2336      	movs	r3, #54	; 0x36
   23c0a:	6013      	str	r3, [r2, #0]
	int retval = 0;
   23c0c:	2000      	movs	r0, #0
			break;
   23c0e:	4770      	bx	lr
	switch (z_in_level) {
   23c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c14:	4770      	bx	lr
   23c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c1a:	4770      	bx	lr
   23c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   23c20:	4770      	bx	lr

00023c22 <z_to_nrf_flags>:
{
   23c22:	4603      	mov	r3, r0
	if (z_flags & MSG_DONTWAIT) {
   23c24:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   23c28:	d000      	beq.n	23c2c <z_to_nrf_flags+0xa>
		nrf_flags |= NRF_MSG_DONTWAIT;
   23c2a:	2002      	movs	r0, #2
	if (z_flags & MSG_PEEK) {
   23c2c:	f013 0f02 	tst.w	r3, #2
   23c30:	d001      	beq.n	23c36 <z_to_nrf_flags+0x14>
		nrf_flags |= NRF_MSG_PEEK;
   23c32:	f040 0008 	orr.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   23c36:	f013 0f20 	tst.w	r3, #32
   23c3a:	d001      	beq.n	23c40 <z_to_nrf_flags+0x1e>
		nrf_flags |= NRF_MSG_TRUNC;
   23c3c:	f040 0020 	orr.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   23c40:	f413 7f80 	tst.w	r3, #256	; 0x100
   23c44:	d001      	beq.n	23c4a <z_to_nrf_flags+0x28>
		nrf_flags |= NRF_MSG_WAITALL;
   23c46:	f040 0010 	orr.w	r0, r0, #16
}
   23c4a:	4770      	bx	lr

00023c4c <z_to_nrf_addrinfo_flags>:
{
   23c4c:	4603      	mov	r3, r0
	if (flags & AI_NUMERICSERV) {
   23c4e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
   23c52:	d001      	beq.n	23c58 <z_to_nrf_addrinfo_flags+0xc>
		nrf_flags |= NRF_AI_NUMERICSERV;
   23c54:	f44f 6080 	mov.w	r0, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   23c58:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   23c5c:	d001      	beq.n	23c62 <z_to_nrf_addrinfo_flags+0x16>
		nrf_flags |= NRF_AI_PDNSERV;
   23c5e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
}
   23c62:	4770      	bx	lr

00023c64 <nrf_to_z_addrinfo_flags>:
}
   23c64:	2000      	movs	r0, #0
   23c66:	4770      	bx	lr

00023c68 <z_to_nrf_family>:
	switch (z_family) {
   23c68:	2803      	cmp	r0, #3
   23c6a:	d809      	bhi.n	23c80 <z_to_nrf_family+0x18>
   23c6c:	e8df f000 	tbb	[pc, r0]
   23c70:	040b0206 	.word	0x040b0206
		return NRF_AF_UNSPEC;
   23c74:	2002      	movs	r0, #2
   23c76:	4770      	bx	lr
		return NRF_AF_PACKET;
   23c78:	2005      	movs	r0, #5
   23c7a:	4770      	bx	lr
		return NRF_AF_UNSPEC;
   23c7c:	2000      	movs	r0, #0
   23c7e:	4770      	bx	lr
		return -EAFNOSUPPORT;
   23c80:	f06f 0069 	mvn.w	r0, #105	; 0x69
   23c84:	4770      	bx	lr
		return NRF_AF_INET6;
   23c86:	200a      	movs	r0, #10
}
   23c88:	4770      	bx	lr

00023c8a <nrf_to_z_family>:
	switch (nrf_family) {
   23c8a:	280a      	cmp	r0, #10
   23c8c:	d80b      	bhi.n	23ca6 <nrf_to_z_family+0x1c>
   23c8e:	e8df f000 	tbb	[pc, r0]
   23c92:	0a0e      	.short	0x0a0e
   23c94:	080a0a06 	.word	0x080a0a06
   23c98:	0a0a0a0a 	.word	0x0a0a0a0a
   23c9c:	0d          	.byte	0x0d
   23c9d:	00          	.byte	0x00
		return AF_UNSPEC;
   23c9e:	2001      	movs	r0, #1
   23ca0:	4770      	bx	lr
		return AF_PACKET;
   23ca2:	2003      	movs	r0, #3
   23ca4:	4770      	bx	lr
		return -EAFNOSUPPORT;
   23ca6:	f06f 0069 	mvn.w	r0, #105	; 0x69
   23caa:	4770      	bx	lr
		return AF_INET6;
   23cac:	2002      	movs	r0, #2
}
   23cae:	4770      	bx	lr

00023cb0 <nrf_to_z_protocol>:
	switch (proto) {
   23cb0:	2802      	cmp	r0, #2
   23cb2:	d00e      	beq.n	23cd2 <nrf_to_z_protocol+0x22>
   23cb4:	dd08      	ble.n	23cc8 <nrf_to_z_protocol+0x18>
   23cb6:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   23cba:	d00f      	beq.n	23cdc <nrf_to_z_protocol+0x2c>
   23cbc:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
   23cc0:	d10f      	bne.n	23ce2 <nrf_to_z_protocol+0x32>
		return IPPROTO_DTLS_1_2;
   23cc2:	f240 1011 	movw	r0, #273	; 0x111
   23cc6:	4770      	bx	lr
	switch (proto) {
   23cc8:	b168      	cbz	r0, 23ce6 <nrf_to_z_protocol+0x36>
   23cca:	2801      	cmp	r0, #1
   23ccc:	d103      	bne.n	23cd6 <nrf_to_z_protocol+0x26>
   23cce:	2006      	movs	r0, #6
   23cd0:	4770      	bx	lr
		return IPPROTO_UDP;
   23cd2:	2011      	movs	r0, #17
   23cd4:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   23cd6:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   23cda:	4770      	bx	lr
		return IPPROTO_TLS_1_2;
   23cdc:	f44f 7081 	mov.w	r0, #258	; 0x102
   23ce0:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   23ce2:	f06f 007a 	mvn.w	r0, #122	; 0x7a
}
   23ce6:	4770      	bx	lr

00023ce8 <z_to_nrf_socktype>:
}
   23ce8:	4770      	bx	lr

00023cea <z_to_nrf_protocol>:
	switch (proto) {
   23cea:	2811      	cmp	r0, #17
   23cec:	d00f      	beq.n	23d0e <z_to_nrf_protocol+0x24>
   23cee:	dd09      	ble.n	23d04 <z_to_nrf_protocol+0x1a>
   23cf0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   23cf4:	d010      	beq.n	23d18 <z_to_nrf_protocol+0x2e>
   23cf6:	f240 1311 	movw	r3, #273	; 0x111
   23cfa:	4298      	cmp	r0, r3
   23cfc:	d10f      	bne.n	23d1e <z_to_nrf_protocol+0x34>
		return NRF_SPROTO_DTLS1v2;
   23cfe:	f44f 7087 	mov.w	r0, #270	; 0x10e
   23d02:	4770      	bx	lr
	switch (proto) {
   23d04:	b168      	cbz	r0, 23d22 <z_to_nrf_protocol+0x38>
   23d06:	2806      	cmp	r0, #6
   23d08:	d103      	bne.n	23d12 <z_to_nrf_protocol+0x28>
   23d0a:	2001      	movs	r0, #1
   23d0c:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   23d0e:	2002      	movs	r0, #2
   23d10:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   23d12:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   23d16:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   23d18:	f44f 7082 	mov.w	r0, #260	; 0x104
   23d1c:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   23d1e:	f06f 007a 	mvn.w	r0, #122	; 0x7a
}
   23d22:	4770      	bx	lr

00023d24 <nrf_to_z_dns_error_code>:
	switch (nrf_gai_err) {
   23d24:	f2a0 1001 	subw	r0, r0, #257	; 0x101
   23d28:	2814      	cmp	r0, #20
   23d2a:	d82d      	bhi.n	23d88 <nrf_to_z_dns_error_code+0x64>
   23d2c:	e8df f000 	tbb	[pc, r0]
   23d30:	110e2f0b 	.word	0x110e2f0b
   23d34:	2c2c2c2c 	.word	0x2c2c2c2c
   23d38:	2c2c2c2c 	.word	0x2c2c2c2c
   23d3c:	1a17142c 	.word	0x1a17142c
   23d40:	2623201d 	.word	0x2623201d
   23d44:	29          	.byte	0x29
   23d45:	00          	.byte	0x00
		return DNS_EAI_SYSTEM;
   23d46:	f06f 0008 	mvn.w	r0, #8
   23d4a:	4770      	bx	lr
		return DNS_EAI_BADFLAGS;
   23d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23d50:	4770      	bx	lr
		return DNS_EAI_FAIL;
   23d52:	f06f 0003 	mvn.w	r0, #3
   23d56:	4770      	bx	lr
		return DNS_EAI_FAMILY;
   23d58:	f06f 0005 	mvn.w	r0, #5
   23d5c:	4770      	bx	lr
		return DNS_EAI_MEMORY;
   23d5e:	f06f 0009 	mvn.w	r0, #9
   23d62:	4770      	bx	lr
		return DNS_EAI_NODATA;
   23d64:	f06f 0004 	mvn.w	r0, #4
   23d68:	4770      	bx	lr
		return DNS_EAI_NONAME;
   23d6a:	f06f 0001 	mvn.w	r0, #1
   23d6e:	4770      	bx	lr
		return DNS_EAI_SERVICE;
   23d70:	f06f 0007 	mvn.w	r0, #7
   23d74:	4770      	bx	lr
		return DNS_EAI_SOCKTYPE;
   23d76:	f06f 0006 	mvn.w	r0, #6
   23d7a:	4770      	bx	lr
		return DNS_EAI_INPROGRESS;
   23d7c:	f06f 0063 	mvn.w	r0, #99	; 0x63
   23d80:	4770      	bx	lr
		return DNS_EAI_SYSTEM;
   23d82:	f06f 000a 	mvn.w	r0, #10
   23d86:	4770      	bx	lr
		return -1;
   23d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23d8c:	4770      	bx	lr
		return DNS_EAI_AGAIN;
   23d8e:	f06f 0002 	mvn.w	r0, #2
}
   23d92:	4770      	bx	lr

00023d94 <nrf_to_z_ipv6>:
{
   23d94:	b470      	push	{r4, r5, r6}
	ptr->sin6_port = nrf_in->sin6_port;
   23d96:	890b      	ldrh	r3, [r1, #8]
   23d98:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   23d9a:	4603      	mov	r3, r0
   23d9c:	2202      	movs	r2, #2
   23d9e:	f823 2b04 	strh.w	r2, [r3], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   23da2:	460a      	mov	r2, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23da4:	f852 6f10 	ldr.w	r6, [r2, #16]!
   23da8:	6855      	ldr	r5, [r2, #4]
   23daa:	6894      	ldr	r4, [r2, #8]
   23dac:	68d2      	ldr	r2, [r2, #12]
   23dae:	6046      	str	r6, [r0, #4]
   23db0:	605d      	str	r5, [r3, #4]
   23db2:	609c      	str	r4, [r3, #8]
   23db4:	60da      	str	r2, [r3, #12]
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   23db6:	f891 3020 	ldrb.w	r3, [r1, #32]
   23dba:	7503      	strb	r3, [r0, #20]
}
   23dbc:	bc70      	pop	{r4, r5, r6}
   23dbe:	4770      	bx	lr

00023dc0 <z_to_nrf_ipv6>:
{
   23dc0:	b430      	push	{r4, r5}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   23dc2:	2324      	movs	r3, #36	; 0x24
   23dc4:	700b      	strb	r3, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   23dc6:	8843      	ldrh	r3, [r0, #2]
   23dc8:	810b      	strh	r3, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   23dca:	230a      	movs	r3, #10
   23dcc:	604b      	str	r3, [r1, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   23dce:	4603      	mov	r3, r0
   23dd0:	f853 5f04 	ldr.w	r5, [r3, #4]!
   23dd4:	685c      	ldr	r4, [r3, #4]
   23dd6:	689a      	ldr	r2, [r3, #8]
   23dd8:	68db      	ldr	r3, [r3, #12]
   23dda:	610d      	str	r5, [r1, #16]
   23ddc:	614c      	str	r4, [r1, #20]
   23dde:	618a      	str	r2, [r1, #24]
   23de0:	61cb      	str	r3, [r1, #28]
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   23de2:	7d03      	ldrb	r3, [r0, #20]
   23de4:	620b      	str	r3, [r1, #32]
}
   23de6:	bc30      	pop	{r4, r5}
   23de8:	4770      	bx	lr

00023dea <nrf91_socket_offload_close>:
{
   23dea:	b538      	push	{r3, r4, r5, lr}
   23dec:	4604      	mov	r4, r0
	retval = nrf_close(ctx->nrf_fd);
   23dee:	6800      	ldr	r0, [r0, #0]
   23df0:	f001 fde0 	bl	259b4 <nrf_close>
	if (retval == 0) {
   23df4:	4605      	mov	r5, r0
   23df6:	b108      	cbz	r0, 23dfc <nrf91_socket_offload_close+0x12>
}
   23df8:	4628      	mov	r0, r5
   23dfa:	bd38      	pop	{r3, r4, r5, pc}
		release_ctx(ctx);
   23dfc:	4620      	mov	r0, r4
   23dfe:	f7f2 fcc7 	bl	16790 <release_ctx>
	return retval;
   23e02:	e7f9      	b.n	23df8 <nrf91_socket_offload_close+0xe>

00023e04 <nrf91_socket_offload_setsockopt>:
{
   23e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e06:	b087      	sub	sp, #28
   23e08:	460c      	mov	r4, r1
   23e0a:	4615      	mov	r5, r2
   23e0c:	461e      	mov	r6, r3
	int sd = OBJ_TO_SD(obj);
   23e0e:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_level(level, &nrf_level) < 0)
   23e10:	a905      	add	r1, sp, #20
   23e12:	4620      	mov	r0, r4
   23e14:	f7ff fe5d 	bl	23ad2 <z_to_nrf_level>
   23e18:	2800      	cmp	r0, #0
   23e1a:	db27      	blt.n	23e6c <nrf91_socket_offload_setsockopt+0x68>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   23e1c:	aa04      	add	r2, sp, #16
   23e1e:	4629      	mov	r1, r5
   23e20:	4620      	mov	r0, r4
   23e22:	f7ff fe67 	bl	23af4 <z_to_nrf_optname>
   23e26:	2800      	cmp	r0, #0
   23e28:	db20      	blt.n	23e6c <nrf91_socket_offload_setsockopt+0x68>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   23e2a:	2c01      	cmp	r4, #1
   23e2c:	d00c      	beq.n	23e48 <nrf91_socket_offload_setsockopt+0x44>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   23e2e:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   23e32:	d016      	beq.n	23e62 <nrf91_socket_offload_setsockopt+0x5e>
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   23e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23e36:	9300      	str	r3, [sp, #0]
   23e38:	4633      	mov	r3, r6
   23e3a:	9a04      	ldr	r2, [sp, #16]
   23e3c:	9905      	ldr	r1, [sp, #20]
   23e3e:	4638      	mov	r0, r7
   23e40:	f001 fe45 	bl	25ace <nrf_setsockopt>
}
   23e44:	b007      	add	sp, #28
   23e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   23e48:	f1a5 0314 	sub.w	r3, r5, #20
   23e4c:	2b01      	cmp	r3, #1
   23e4e:	d8ee      	bhi.n	23e2e <nrf91_socket_offload_setsockopt+0x2a>
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   23e50:	6833      	ldr	r3, [r6, #0]
   23e52:	9302      	str	r3, [sp, #8]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   23e54:	6873      	ldr	r3, [r6, #4]
   23e56:	9303      	str	r3, [sp, #12]
		nrf_optlen = sizeof(struct nrf_timeval);
   23e58:	2308      	movs	r3, #8
   23e5a:	930c      	str	r3, [sp, #48]	; 0x30
		nrf_optval = &nrf_timeo;
   23e5c:	eb0d 0603 	add.w	r6, sp, r3
		nrf_optlen = sizeof(struct nrf_timeval);
   23e60:	e7e8      	b.n	23e34 <nrf91_socket_offload_setsockopt+0x30>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   23e62:	2d0a      	cmp	r5, #10
   23e64:	d1e6      	bne.n	23e34 <nrf91_socket_offload_setsockopt+0x30>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   23e66:	2301      	movs	r3, #1
   23e68:	930c      	str	r3, [sp, #48]	; 0x30
   23e6a:	e7e3      	b.n	23e34 <nrf91_socket_offload_setsockopt+0x30>
	errno = ENOPROTOOPT;
   23e6c:	f7ff f893 	bl	22f96 <__errno>
   23e70:	236d      	movs	r3, #109	; 0x6d
   23e72:	6003      	str	r3, [r0, #0]
	return retval;
   23e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23e78:	e7e4      	b.n	23e44 <nrf91_socket_offload_setsockopt+0x40>

00023e7a <nrf91_socket_offload_getsockopt>:
{
   23e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e7e:	b088      	sub	sp, #32
   23e80:	460c      	mov	r4, r1
   23e82:	4615      	mov	r5, r2
   23e84:	461e      	mov	r6, r3
   23e86:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	int sd = OBJ_TO_SD(obj);
   23e88:	f8d0 8000 	ldr.w	r8, [r0]
	struct nrf_timeval nrf_timeo = {0, 0};
   23e8c:	2200      	movs	r2, #0
   23e8e:	9204      	str	r2, [sp, #16]
   23e90:	9205      	str	r2, [sp, #20]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   23e92:	683b      	ldr	r3, [r7, #0]
   23e94:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_level(level, &nrf_level) < 0)
   23e96:	a907      	add	r1, sp, #28
   23e98:	4620      	mov	r0, r4
   23e9a:	f7ff fe1a 	bl	23ad2 <z_to_nrf_level>
   23e9e:	2800      	cmp	r0, #0
   23ea0:	db3b      	blt.n	23f1a <nrf91_socket_offload_getsockopt+0xa0>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   23ea2:	aa06      	add	r2, sp, #24
   23ea4:	4629      	mov	r1, r5
   23ea6:	4620      	mov	r0, r4
   23ea8:	f7ff fe24 	bl	23af4 <z_to_nrf_optname>
   23eac:	2800      	cmp	r0, #0
   23eae:	db34      	blt.n	23f1a <nrf91_socket_offload_getsockopt+0xa0>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   23eb0:	2c01      	cmp	r4, #1
   23eb2:	d012      	beq.n	23eda <nrf91_socket_offload_getsockopt+0x60>
	void *nrf_optval = optval;
   23eb4:	4633      	mov	r3, r6
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   23eb6:	aa03      	add	r2, sp, #12
   23eb8:	9200      	str	r2, [sp, #0]
   23eba:	9a06      	ldr	r2, [sp, #24]
   23ebc:	9907      	ldr	r1, [sp, #28]
   23ebe:	4640      	mov	r0, r8
   23ec0:	f001 fe1e 	bl	25b00 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   23ec4:	4680      	mov	r8, r0
   23ec6:	b920      	cbnz	r0, 23ed2 <nrf91_socket_offload_getsockopt+0x58>
   23ec8:	b11e      	cbz	r6, 23ed2 <nrf91_socket_offload_getsockopt+0x58>
		*optlen = nrf_optlen;
   23eca:	9b03      	ldr	r3, [sp, #12]
   23ecc:	603b      	str	r3, [r7, #0]
		if (level == SOL_SOCKET) {
   23ece:	2c01      	cmp	r4, #1
   23ed0:	d00d      	beq.n	23eee <nrf91_socket_offload_getsockopt+0x74>
}
   23ed2:	4640      	mov	r0, r8
   23ed4:	b008      	add	sp, #32
   23ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   23eda:	f1a5 0314 	sub.w	r3, r5, #20
   23ede:	2b01      	cmp	r3, #1
   23ee0:	d901      	bls.n	23ee6 <nrf91_socket_offload_getsockopt+0x6c>
	void *nrf_optval = optval;
   23ee2:	4633      	mov	r3, r6
   23ee4:	e7e7      	b.n	23eb6 <nrf91_socket_offload_getsockopt+0x3c>
		nrf_optlen = sizeof(struct nrf_timeval);
   23ee6:	2308      	movs	r3, #8
   23ee8:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   23eea:	ab04      	add	r3, sp, #16
   23eec:	e7e3      	b.n	23eb6 <nrf91_socket_offload_getsockopt+0x3c>
			if (optname == SO_ERROR) {
   23eee:	2d04      	cmp	r5, #4
   23ef0:	d009      	beq.n	23f06 <nrf91_socket_offload_getsockopt+0x8c>
			} else if ((optname == SO_RCVTIMEO) ||
   23ef2:	3d14      	subs	r5, #20
   23ef4:	2d01      	cmp	r5, #1
   23ef6:	d8ec      	bhi.n	23ed2 <nrf91_socket_offload_getsockopt+0x58>
					nrf_timeo.tv_sec;
   23ef8:	9b04      	ldr	r3, [sp, #16]
				((struct timeval *)optval)->tv_sec =
   23efa:	6033      	str	r3, [r6, #0]
					nrf_timeo.tv_usec;
   23efc:	9b05      	ldr	r3, [sp, #20]
				((struct timeval *)optval)->tv_usec =
   23efe:	6073      	str	r3, [r6, #4]
				*optlen = sizeof(struct timeval);
   23f00:	2308      	movs	r3, #8
   23f02:	603b      	str	r3, [r7, #0]
   23f04:	e7e5      	b.n	23ed2 <nrf91_socket_offload_getsockopt+0x58>
				if (*(int *)optval != 0) {
   23f06:	6830      	ldr	r0, [r6, #0]
   23f08:	2800      	cmp	r0, #0
   23f0a:	d0e2      	beq.n	23ed2 <nrf91_socket_offload_getsockopt+0x58>
					nrf_modem_os_errno_set(*(int *)optval);
   23f0c:	f7ff fd8f 	bl	23a2e <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   23f10:	f7ff f841 	bl	22f96 <__errno>
   23f14:	6803      	ldr	r3, [r0, #0]
   23f16:	6033      	str	r3, [r6, #0]
   23f18:	e7db      	b.n	23ed2 <nrf91_socket_offload_getsockopt+0x58>
	errno = ENOPROTOOPT;
   23f1a:	f7ff f83c 	bl	22f96 <__errno>
   23f1e:	236d      	movs	r3, #109	; 0x6d
   23f20:	6003      	str	r3, [r0, #0]
	return retval;
   23f22:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   23f26:	e7d4      	b.n	23ed2 <nrf91_socket_offload_getsockopt+0x58>

00023f28 <nrf91_socket_offload_recvfrom>:
{
   23f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23f2c:	b08c      	sub	sp, #48	; 0x30
   23f2e:	4604      	mov	r4, r0
   23f30:	460d      	mov	r5, r1
   23f32:	4617      	mov	r7, r2
   23f34:	4698      	mov	r8, r3
   23f36:	9e14      	ldr	r6, [sp, #80]	; 0x50
	k_mutex_unlock(ctx->lock);
   23f38:	6840      	ldr	r0, [r0, #4]
	return z_impl_k_mutex_unlock(mutex);
   23f3a:	f7fb f907 	bl	1f14c <z_impl_k_mutex_unlock>
	if (from == NULL) {
   23f3e:	b356      	cbz	r6, 23f96 <nrf91_socket_offload_recvfrom+0x6e>
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   23f40:	f10d 090c 	add.w	r9, sp, #12
   23f44:	f04f 0a24 	mov.w	sl, #36	; 0x24
   23f48:	4652      	mov	r2, sl
   23f4a:	2100      	movs	r1, #0
   23f4c:	4648      	mov	r0, r9
   23f4e:	f002 fc98 	bl	26882 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   23f52:	f8cd a008 	str.w	sl, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   23f56:	4640      	mov	r0, r8
   23f58:	f7ff fe63 	bl	23c22 <z_to_nrf_flags>
   23f5c:	4603      	mov	r3, r0
   23f5e:	aa02      	add	r2, sp, #8
   23f60:	9201      	str	r2, [sp, #4]
   23f62:	f8cd 9000 	str.w	r9, [sp]
   23f66:	463a      	mov	r2, r7
   23f68:	4629      	mov	r1, r5
   23f6a:	6820      	ldr	r0, [r4, #0]
   23f6c:	f001 fd49 	bl	25a02 <nrf_recvfrom>
		if (retval < 0) {
   23f70:	1e05      	subs	r5, r0, #0
   23f72:	db04      	blt.n	23f7e <nrf91_socket_offload_recvfrom+0x56>
		if (cliaddr->sa_family == NRF_AF_INET) {
   23f74:	9b04      	ldr	r3, [sp, #16]
   23f76:	2b02      	cmp	r3, #2
   23f78:	d01b      	beq.n	23fb2 <nrf91_socket_offload_recvfrom+0x8a>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   23f7a:	2b0a      	cmp	r3, #10
   23f7c:	d021      	beq.n	23fc2 <nrf91_socket_offload_recvfrom+0x9a>
	if (ctx->lock) {
   23f7e:	6860      	ldr	r0, [r4, #4]
   23f80:	b128      	cbz	r0, 23f8e <nrf91_socket_offload_recvfrom+0x66>
	return z_impl_k_mutex_lock(mutex, timeout);
   23f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23f8a:	f7fb f855 	bl	1f038 <z_impl_k_mutex_lock>
}
   23f8e:	4628      	mov	r0, r5
   23f90:	b00c      	add	sp, #48	; 0x30
   23f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   23f96:	4640      	mov	r0, r8
   23f98:	f7ff fe43 	bl	23c22 <z_to_nrf_flags>
   23f9c:	4603      	mov	r3, r0
   23f9e:	2200      	movs	r2, #0
   23fa0:	9201      	str	r2, [sp, #4]
   23fa2:	9200      	str	r2, [sp, #0]
   23fa4:	463a      	mov	r2, r7
   23fa6:	4629      	mov	r1, r5
   23fa8:	6820      	ldr	r0, [r4, #0]
   23faa:	f001 fd2a 	bl	25a02 <nrf_recvfrom>
   23fae:	4605      	mov	r5, r0
   23fb0:	e7e5      	b.n	23f7e <nrf91_socket_offload_recvfrom+0x56>
			nrf_to_z_ipv4(from, (struct nrf_sockaddr_in *)cliaddr);
   23fb2:	a903      	add	r1, sp, #12
   23fb4:	4630      	mov	r0, r6
   23fb6:	f7ff fd85 	bl	23ac4 <nrf_to_z_ipv4>
			*fromlen = sizeof(struct sockaddr_in);
   23fba:	2308      	movs	r3, #8
   23fbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   23fbe:	6013      	str	r3, [r2, #0]
   23fc0:	e7dd      	b.n	23f7e <nrf91_socket_offload_recvfrom+0x56>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   23fc2:	a903      	add	r1, sp, #12
   23fc4:	4630      	mov	r0, r6
   23fc6:	f7ff fee5 	bl	23d94 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   23fca:	2318      	movs	r3, #24
   23fcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   23fce:	6013      	str	r3, [r2, #0]
   23fd0:	e7d5      	b.n	23f7e <nrf91_socket_offload_recvfrom+0x56>

00023fd2 <nrf91_socket_offload_read>:
{
   23fd2:	b500      	push	{lr}
   23fd4:	b083      	sub	sp, #12
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   23fd6:	2300      	movs	r3, #0
   23fd8:	9301      	str	r3, [sp, #4]
   23fda:	9300      	str	r3, [sp, #0]
   23fdc:	f7ff ffa4 	bl	23f28 <nrf91_socket_offload_recvfrom>
}
   23fe0:	b003      	add	sp, #12
   23fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00023fe6 <nrf91_socket_offload_sendto>:
{
   23fe6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23fea:	b08d      	sub	sp, #52	; 0x34
   23fec:	460f      	mov	r7, r1
   23fee:	4616      	mov	r6, r2
   23ff0:	461d      	mov	r5, r3
   23ff2:	9c14      	ldr	r4, [sp, #80]	; 0x50
	int sd = OBJ_TO_SD(obj);
   23ff4:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   23ff8:	b1d4      	cbz	r4, 24030 <nrf91_socket_offload_sendto+0x4a>
	} else if (to->sa_family == AF_INET) {
   23ffa:	8820      	ldrh	r0, [r4, #0]
   23ffc:	2801      	cmp	r0, #1
   23ffe:	d024      	beq.n	2404a <nrf91_socket_offload_sendto+0x64>
	} else if (to->sa_family == AF_INET6) {
   24000:	2802      	cmp	r0, #2
   24002:	d136      	bne.n	24072 <nrf91_socket_offload_sendto+0x8c>
		z_to_nrf_ipv6(to, &ipv6);
   24004:	f10d 090c 	add.w	r9, sp, #12
   24008:	4649      	mov	r1, r9
   2400a:	4620      	mov	r0, r4
   2400c:	f7ff fed8 	bl	23dc0 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   24010:	4628      	mov	r0, r5
   24012:	f7ff fe06 	bl	23c22 <z_to_nrf_flags>
   24016:	4603      	mov	r3, r0
   24018:	2224      	movs	r2, #36	; 0x24
   2401a:	9201      	str	r2, [sp, #4]
   2401c:	f8cd 9000 	str.w	r9, [sp]
   24020:	4632      	mov	r2, r6
   24022:	4639      	mov	r1, r7
   24024:	4640      	mov	r0, r8
   24026:	f001 fcd2 	bl	259ce <nrf_sendto>
}
   2402a:	b00d      	add	sp, #52	; 0x34
   2402c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   24030:	4618      	mov	r0, r3
   24032:	f7ff fdf6 	bl	23c22 <z_to_nrf_flags>
   24036:	4603      	mov	r3, r0
   24038:	2200      	movs	r2, #0
   2403a:	9201      	str	r2, [sp, #4]
   2403c:	9200      	str	r2, [sp, #0]
   2403e:	4632      	mov	r2, r6
   24040:	4639      	mov	r1, r7
   24042:	4640      	mov	r0, r8
   24044:	f001 fcc3 	bl	259ce <nrf_sendto>
   24048:	e7ef      	b.n	2402a <nrf91_socket_offload_sendto+0x44>
		z_to_nrf_ipv4(to, &ipv4);
   2404a:	f10d 090c 	add.w	r9, sp, #12
   2404e:	4649      	mov	r1, r9
   24050:	4620      	mov	r0, r4
   24052:	f7ff fd2e 	bl	23ab2 <z_to_nrf_ipv4>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   24056:	4628      	mov	r0, r5
   24058:	f7ff fde3 	bl	23c22 <z_to_nrf_flags>
   2405c:	4603      	mov	r3, r0
   2405e:	2210      	movs	r2, #16
   24060:	9201      	str	r2, [sp, #4]
   24062:	f8cd 9000 	str.w	r9, [sp]
   24066:	4632      	mov	r2, r6
   24068:	4639      	mov	r1, r7
   2406a:	4640      	mov	r0, r8
   2406c:	f001 fcaf 	bl	259ce <nrf_sendto>
   24070:	e7db      	b.n	2402a <nrf91_socket_offload_sendto+0x44>
	errno = ENOTSUP;
   24072:	f7fe ff90 	bl	22f96 <__errno>
   24076:	2386      	movs	r3, #134	; 0x86
   24078:	6003      	str	r3, [r0, #0]
	return retval;
   2407a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2407e:	e7d4      	b.n	2402a <nrf91_socket_offload_sendto+0x44>

00024080 <nrf91_socket_offload_write>:
{
   24080:	b500      	push	{lr}
   24082:	b083      	sub	sp, #12
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   24084:	2300      	movs	r3, #0
   24086:	9301      	str	r3, [sp, #4]
   24088:	9300      	str	r3, [sp, #0]
   2408a:	f7ff ffac 	bl	23fe6 <nrf91_socket_offload_sendto>
}
   2408e:	b003      	add	sp, #12
   24090:	f85d fb04 	ldr.w	pc, [sp], #4

00024094 <nrf91_socket_offload_listen>:
{
   24094:	b508      	push	{r3, lr}
	return nrf_listen(sd, backlog);
   24096:	6800      	ldr	r0, [r0, #0]
   24098:	f001 fce0 	bl	25a5c <nrf_listen>
}
   2409c:	bd08      	pop	{r3, pc}

0002409e <nrf91_socket_offload_connect>:
{
   2409e:	b510      	push	{r4, lr}
   240a0:	b08a      	sub	sp, #40	; 0x28
   240a2:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   240a4:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   240a6:	8809      	ldrh	r1, [r1, #0]
   240a8:	2901      	cmp	r1, #1
   240aa:	d009      	beq.n	240c0 <nrf91_socket_offload_connect+0x22>
	} else if (addr->sa_family == AF_INET6) {
   240ac:	2902      	cmp	r1, #2
   240ae:	d011      	beq.n	240d4 <nrf91_socket_offload_connect+0x36>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   240b0:	4619      	mov	r1, r3
   240b2:	4620      	mov	r0, r4
   240b4:	f001 fcbf 	bl	25a36 <nrf_connect>
		if (retval < 0) {
   240b8:	2800      	cmp	r0, #0
   240ba:	db15      	blt.n	240e8 <nrf91_socket_offload_connect+0x4a>
}
   240bc:	b00a      	add	sp, #40	; 0x28
   240be:	bd10      	pop	{r4, pc}
		z_to_nrf_ipv4(addr, &ipv4);
   240c0:	a901      	add	r1, sp, #4
   240c2:	4618      	mov	r0, r3
   240c4:	f7ff fcf5 	bl	23ab2 <z_to_nrf_ipv4>
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   240c8:	2210      	movs	r2, #16
   240ca:	a901      	add	r1, sp, #4
   240cc:	4620      	mov	r0, r4
   240ce:	f001 fcb2 	bl	25a36 <nrf_connect>
   240d2:	e7f3      	b.n	240bc <nrf91_socket_offload_connect+0x1e>
		z_to_nrf_ipv6(addr, &ipv6);
   240d4:	a901      	add	r1, sp, #4
   240d6:	4618      	mov	r0, r3
   240d8:	f7ff fe72 	bl	23dc0 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   240dc:	2224      	movs	r2, #36	; 0x24
   240de:	a901      	add	r1, sp, #4
   240e0:	4620      	mov	r0, r4
   240e2:	f001 fca8 	bl	25a36 <nrf_connect>
   240e6:	e7e9      	b.n	240bc <nrf91_socket_offload_connect+0x1e>
	errno = ENOTSUP;
   240e8:	f7fe ff55 	bl	22f96 <__errno>
   240ec:	2386      	movs	r3, #134	; 0x86
   240ee:	6003      	str	r3, [r0, #0]
	return retval;
   240f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   240f4:	e7e2      	b.n	240bc <nrf91_socket_offload_connect+0x1e>

000240f6 <nrf91_socket_offload_bind>:
{
   240f6:	b510      	push	{r4, lr}
   240f8:	b08a      	sub	sp, #40	; 0x28
   240fa:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   240fc:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   240fe:	880a      	ldrh	r2, [r1, #0]
   24100:	2a01      	cmp	r2, #1
   24102:	d00c      	beq.n	2411e <nrf91_socket_offload_bind+0x28>
	} else if (addr->sa_family == AF_INET6) {
   24104:	2a02      	cmp	r2, #2
   24106:	d114      	bne.n	24132 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   24108:	a901      	add	r1, sp, #4
   2410a:	4618      	mov	r0, r3
   2410c:	f7ff fe58 	bl	23dc0 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   24110:	2224      	movs	r2, #36	; 0x24
   24112:	a901      	add	r1, sp, #4
   24114:	4620      	mov	r0, r4
   24116:	f001 fcc7 	bl	25aa8 <nrf_bind>
}
   2411a:	b00a      	add	sp, #40	; 0x28
   2411c:	bd10      	pop	{r4, pc}
		z_to_nrf_ipv4(addr, &ipv4);
   2411e:	a901      	add	r1, sp, #4
   24120:	4618      	mov	r0, r3
   24122:	f7ff fcc6 	bl	23ab2 <z_to_nrf_ipv4>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   24126:	2210      	movs	r2, #16
   24128:	a901      	add	r1, sp, #4
   2412a:	4620      	mov	r0, r4
   2412c:	f001 fcbc 	bl	25aa8 <nrf_bind>
   24130:	e7f3      	b.n	2411a <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   24132:	f7fe ff30 	bl	22f96 <__errno>
   24136:	2386      	movs	r3, #134	; 0x86
   24138:	6003      	str	r3, [r0, #0]
	return retval;
   2413a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2413e:	e7ec      	b.n	2411a <nrf91_socket_offload_bind+0x24>

00024140 <nrf91_socket_offload_fcntl>:
{
   24140:	b500      	push	{lr}
   24142:	b083      	sub	sp, #12
   24144:	9201      	str	r2, [sp, #4]
	switch (cmd) {
   24146:	2903      	cmp	r1, #3
   24148:	d00f      	beq.n	2416a <nrf91_socket_offload_fcntl+0x2a>
   2414a:	2904      	cmp	r1, #4
   2414c:	d115      	bne.n	2417a <nrf91_socket_offload_fcntl+0x3a>
		flags = va_arg(args, int);
   2414e:	4613      	mov	r3, r2
   24150:	3204      	adds	r2, #4
   24152:	9201      	str	r2, [sp, #4]
   24154:	681a      	ldr	r2, [r3, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   24156:	b112      	cbz	r2, 2415e <nrf91_socket_offload_fcntl+0x1e>
   24158:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   2415c:	d10d      	bne.n	2417a <nrf91_socket_offload_fcntl+0x3a>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   2415e:	f3c2 3280 	ubfx	r2, r2, #14, #1
   24162:	2101      	movs	r1, #1
   24164:	f001 fceb 	bl	25b3e <nrf_fcntl>
		break;
   24168:	e00d      	b.n	24186 <nrf91_socket_offload_fcntl+0x46>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   2416a:	2200      	movs	r2, #0
   2416c:	2102      	movs	r1, #2
   2416e:	f001 fce6 	bl	25b3e <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   24172:	0380      	lsls	r0, r0, #14
   24174:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
		break;
   24178:	e005      	b.n	24186 <nrf91_socket_offload_fcntl+0x46>
	errno = EINVAL;
   2417a:	f7fe ff0c 	bl	22f96 <__errno>
   2417e:	2316      	movs	r3, #22
   24180:	6003      	str	r3, [r0, #0]
	return retval;
   24182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   24186:	b003      	add	sp, #12
   24188:	f85d fb04 	ldr.w	pc, [sp], #4

0002418c <native_socket>:
{
   2418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2418e:	4605      	mov	r5, r0
   24190:	4617      	mov	r7, r2
   24192:	461c      	mov	r4, r3
	type = type & ~(SOCK_NATIVE | SOCK_NATIVE_TLS);
   24194:	f021 4640 	bic.w	r6, r1, #3221225472	; 0xc0000000
	k_sched_lock();
   24198:	f7fb faba 	bl	1f710 <k_sched_lock>
	*offload_lock = true;
   2419c:	2301      	movs	r3, #1
   2419e:	7023      	strb	r3, [r4, #0]
	return z_impl_zsock_socket(family, type, proto);
   241a0:	463a      	mov	r2, r7
   241a2:	4631      	mov	r1, r6
   241a4:	4628      	mov	r0, r5
   241a6:	f7ef faf7 	bl	13798 <z_impl_zsock_socket>
   241aa:	4605      	mov	r5, r0
	*offload_lock = false;
   241ac:	2300      	movs	r3, #0
   241ae:	7023      	strb	r3, [r4, #0]
	k_sched_unlock();
   241b0:	f7fb fcac 	bl	1fb0c <k_sched_unlock>
}
   241b4:	4628      	mov	r0, r5
   241b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000241b8 <nrf91_socket_offload_socket>:
{
   241b8:	b570      	push	{r4, r5, r6, lr}
   241ba:	460e      	mov	r6, r1
   241bc:	4615      	mov	r5, r2
	family = z_to_nrf_family(family);
   241be:	b280      	uxth	r0, r0
   241c0:	f7ff fd52 	bl	23c68 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   241c4:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   241c8:	d010      	beq.n	241ec <nrf91_socket_offload_socket+0x34>
   241ca:	4604      	mov	r4, r0
	type = z_to_nrf_socktype(type);
   241cc:	4630      	mov	r0, r6
   241ce:	f7ff fd8b 	bl	23ce8 <z_to_nrf_socktype>
   241d2:	4606      	mov	r6, r0
	proto = z_to_nrf_protocol(proto);
   241d4:	4628      	mov	r0, r5
   241d6:	f7ff fd88 	bl	23cea <z_to_nrf_protocol>
   241da:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   241dc:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   241e0:	d00b      	beq.n	241fa <nrf91_socket_offload_socket+0x42>
	retval = nrf_socket(family, type, proto);
   241e2:	4631      	mov	r1, r6
   241e4:	4620      	mov	r0, r4
   241e6:	f001 fbd4 	bl	25992 <nrf_socket>
}
   241ea:	bd70      	pop	{r4, r5, r6, pc}
		errno = EAFNOSUPPORT;
   241ec:	f7fe fed3 	bl	22f96 <__errno>
   241f0:	236a      	movs	r3, #106	; 0x6a
   241f2:	6003      	str	r3, [r0, #0]
		return -1;
   241f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   241f8:	e7f7      	b.n	241ea <nrf91_socket_offload_socket+0x32>
		errno = EPROTONOSUPPORT;
   241fa:	f7fe fecc 	bl	22f96 <__errno>
   241fe:	237b      	movs	r3, #123	; 0x7b
   24200:	6003      	str	r3, [r0, #0]
		return -1;
   24202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24206:	e7f0      	b.n	241ea <nrf91_socket_offload_socket+0x32>

00024208 <nrf91_socket_offload_freeaddrinfo>:
{
   24208:	b538      	push	{r3, r4, r5, lr}
   2420a:	4604      	mov	r4, r0
	while (next != NULL) {
   2420c:	b144      	cbz	r4, 24220 <nrf91_socket_offload_freeaddrinfo+0x18>
		next = next->ai_next;
   2420e:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   24210:	69a0      	ldr	r0, [r4, #24]
   24212:	f002 fad0 	bl	267b6 <k_free>
		k_free(this);
   24216:	4620      	mov	r0, r4
   24218:	f002 facd 	bl	267b6 <k_free>
		next = next->ai_next;
   2421c:	462c      	mov	r4, r5
   2421e:	e7f5      	b.n	2420c <nrf91_socket_offload_freeaddrinfo+0x4>
}
   24220:	bd38      	pop	{r3, r4, r5, pc}

00024222 <nrf_to_z_addrinfo>:
{
   24222:	b538      	push	{r3, r4, r5, lr}
   24224:	4604      	mov	r4, r0
   24226:	460d      	mov	r5, r1
	z_out->ai_next = NULL;
   24228:	2300      	movs	r3, #0
   2422a:	6003      	str	r3, [r0, #0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2422c:	61c3      	str	r3, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2422e:	6808      	ldr	r0, [r1, #0]
   24230:	f7ff fd18 	bl	23c64 <nrf_to_z_addrinfo_flags>
   24234:	6060      	str	r0, [r4, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   24236:	68ab      	ldr	r3, [r5, #8]
   24238:	60e3      	str	r3, [r4, #12]
	family = nrf_to_z_family(nrf_in->ai_family);
   2423a:	6868      	ldr	r0, [r5, #4]
   2423c:	f7ff fd25 	bl	23c8a <nrf_to_z_family>
	if (family == -EAFNOSUPPORT) {
   24240:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   24244:	d017      	beq.n	24276 <nrf_to_z_addrinfo+0x54>
	z_out->ai_family = family;
   24246:	60a0      	str	r0, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   24248:	68e8      	ldr	r0, [r5, #12]
   2424a:	f7ff fd31 	bl	23cb0 <nrf_to_z_protocol>
   2424e:	6120      	str	r0, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   24250:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   24254:	d010      	beq.n	24278 <nrf_to_z_addrinfo+0x56>
	if (nrf_in->ai_family == NRF_AF_INET) {
   24256:	686b      	ldr	r3, [r5, #4]
   24258:	2b02      	cmp	r3, #2
   2425a:	d010      	beq.n	2427e <nrf_to_z_addrinfo+0x5c>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2425c:	2b0a      	cmp	r3, #10
   2425e:	d11d      	bne.n	2429c <nrf_to_z_addrinfo+0x7a>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   24260:	2018      	movs	r0, #24
   24262:	f002 fab1 	bl	267c8 <k_malloc>
   24266:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   24268:	b1d8      	cbz	r0, 242a2 <nrf_to_z_addrinfo+0x80>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2426a:	2318      	movs	r3, #24
   2426c:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2426e:	6969      	ldr	r1, [r5, #20]
   24270:	f7ff fd90 	bl	23d94 <nrf_to_z_ipv6>
	return 0;
   24274:	2000      	movs	r0, #0
}
   24276:	bd38      	pop	{r3, r4, r5, pc}
		z_out->ai_addr = NULL;
   24278:	2300      	movs	r3, #0
   2427a:	61a3      	str	r3, [r4, #24]
		return -EPROTONOSUPPORT;
   2427c:	e7fb      	b.n	24276 <nrf_to_z_addrinfo+0x54>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2427e:	2008      	movs	r0, #8
   24280:	f002 faa2 	bl	267c8 <k_malloc>
   24284:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   24286:	b130      	cbz	r0, 24296 <nrf_to_z_addrinfo+0x74>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   24288:	2308      	movs	r3, #8
   2428a:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv4(z_out->ai_addr,
   2428c:	6969      	ldr	r1, [r5, #20]
   2428e:	f7ff fc19 	bl	23ac4 <nrf_to_z_ipv4>
	return 0;
   24292:	2000      	movs	r0, #0
   24294:	e7ef      	b.n	24276 <nrf_to_z_addrinfo+0x54>
			return -ENOMEM;
   24296:	f06f 000b 	mvn.w	r0, #11
   2429a:	e7ec      	b.n	24276 <nrf_to_z_addrinfo+0x54>
		return -EPROTONOSUPPORT;
   2429c:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   242a0:	e7e9      	b.n	24276 <nrf_to_z_addrinfo+0x54>
			return -ENOMEM;
   242a2:	f06f 000b 	mvn.w	r0, #11
   242a6:	e7e6      	b.n	24276 <nrf_to_z_addrinfo+0x54>

000242a8 <z_to_nrf_addrinfo_hints>:
{
   242a8:	b538      	push	{r3, r4, r5, lr}
   242aa:	4605      	mov	r5, r0
   242ac:	460c      	mov	r4, r1
__ssp_bos_icheck3(memset, void *, int)
   242ae:	2220      	movs	r2, #32
   242b0:	2100      	movs	r1, #0
   242b2:	4620      	mov	r0, r4
   242b4:	f002 fae5 	bl	26882 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   242b8:	6868      	ldr	r0, [r5, #4]
   242ba:	f7ff fcc7 	bl	23c4c <z_to_nrf_addrinfo_flags>
   242be:	6020      	str	r0, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   242c0:	68e8      	ldr	r0, [r5, #12]
   242c2:	f7ff fd11 	bl	23ce8 <z_to_nrf_socktype>
   242c6:	60a0      	str	r0, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   242c8:	8928      	ldrh	r0, [r5, #8]
   242ca:	f7ff fccd 	bl	23c68 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   242ce:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   242d2:	d00b      	beq.n	242ec <z_to_nrf_addrinfo_hints+0x44>
	nrf_out->ai_family = family;
   242d4:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   242d6:	6928      	ldr	r0, [r5, #16]
   242d8:	f7ff fd07 	bl	23cea <z_to_nrf_protocol>
   242dc:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   242de:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   242e2:	d003      	beq.n	242ec <z_to_nrf_addrinfo_hints+0x44>
	if (z_in->ai_canonname != NULL) {
   242e4:	69eb      	ldr	r3, [r5, #28]
   242e6:	b113      	cbz	r3, 242ee <z_to_nrf_addrinfo_hints+0x46>
		nrf_out->ai_canonname = z_in->ai_canonname;
   242e8:	61a3      	str	r3, [r4, #24]
	return 0;
   242ea:	2000      	movs	r0, #0
}
   242ec:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   242ee:	2000      	movs	r0, #0
   242f0:	e7fc      	b.n	242ec <z_to_nrf_addrinfo_hints+0x44>

000242f2 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   242f2:	b570      	push	{r4, r5, r6, lr}
   242f4:	b082      	sub	sp, #8
   242f6:	9001      	str	r0, [sp, #4]
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   242f8:	b1a8      	cbz	r0, 24326 <at_parser_max_params_from_str+0x34>
   242fa:	460d      	mov	r5, r1
   242fc:	4614      	mov	r4, r2
   242fe:	461e      	mov	r6, r3
   24300:	b1a2      	cbz	r2, 2432c <at_parser_max_params_from_str+0x3a>
   24302:	6853      	ldr	r3, [r2, #4]
   24304:	b1ab      	cbz	r3, 24332 <at_parser_max_params_from_str+0x40>
		return -EINVAL;
	}

	at_params_list_clear(list);
   24306:	4610      	mov	r0, r2
   24308:	f000 f85a 	bl	243c0 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   2430c:	6822      	ldr	r2, [r4, #0]

	err = at_parse_param(&at_params_str, list, max_params_count);
   2430e:	42b2      	cmp	r2, r6
   24310:	bf28      	it	cs
   24312:	4632      	movcs	r2, r6
   24314:	4621      	mov	r1, r4
   24316:	a801      	add	r0, sp, #4
   24318:	f7f3 f804 	bl	17324 <at_parse_param>

	if (next_param_str) {
   2431c:	b10d      	cbz	r5, 24322 <at_parser_max_params_from_str+0x30>
		*next_param_str = (char *)at_params_str;
   2431e:	9b01      	ldr	r3, [sp, #4]
   24320:	602b      	str	r3, [r5, #0]
	}

	return err;
}
   24322:	b002      	add	sp, #8
   24324:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   24326:	f06f 0015 	mvn.w	r0, #21
   2432a:	e7fa      	b.n	24322 <at_parser_max_params_from_str+0x30>
   2432c:	f06f 0015 	mvn.w	r0, #21
   24330:	e7f7      	b.n	24322 <at_parser_max_params_from_str+0x30>
   24332:	f06f 0015 	mvn.w	r0, #21
   24336:	e7f4      	b.n	24322 <at_parser_max_params_from_str+0x30>

00024338 <at_parser_params_from_str>:
{
   24338:	b508      	push	{r3, lr}
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2433a:	6813      	ldr	r3, [r2, #0]
   2433c:	f7ff ffd9 	bl	242f2 <at_parser_max_params_from_str>
}
   24340:	bd08      	pop	{r3, pc}

00024342 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   24342:	6803      	ldr	r3, [r0, #0]
   24344:	428b      	cmp	r3, r1
   24346:	d903      	bls.n	24350 <at_params_get+0xe>
		return NULL;
	}

	struct at_param *param = list->params;
   24348:	6840      	ldr	r0, [r0, #4]

	return &param[index];
   2434a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   2434e:	4770      	bx	lr
		return NULL;
   24350:	2000      	movs	r0, #0
}
   24352:	4770      	bx	lr

00024354 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   24354:	7803      	ldrb	r3, [r0, #0]
   24356:	2b01      	cmp	r3, #1
   24358:	d007      	beq.n	2436a <at_param_size+0x16>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2435a:	3b02      	subs	r3, #2
   2435c:	b2db      	uxtb	r3, r3
   2435e:	2b01      	cmp	r3, #1
   24360:	d901      	bls.n	24366 <at_param_size+0x12>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
	}

	return 0;
   24362:	2000      	movs	r0, #0
}
   24364:	4770      	bx	lr
		return param->size;
   24366:	6840      	ldr	r0, [r0, #4]
   24368:	4770      	bx	lr
		return sizeof(uint64_t);
   2436a:	2008      	movs	r0, #8
   2436c:	4770      	bx	lr

0002436e <at_param_clear>:
{
   2436e:	b510      	push	{r4, lr}
   24370:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   24372:	7803      	ldrb	r3, [r0, #0]
   24374:	3b02      	subs	r3, #2
   24376:	b2db      	uxtb	r3, r3
   24378:	2b01      	cmp	r3, #1
   2437a:	d904      	bls.n	24386 <at_param_clear+0x18>
	param->value.int_val = 0;
   2437c:	2200      	movs	r2, #0
   2437e:	2300      	movs	r3, #0
   24380:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   24384:	bd10      	pop	{r4, pc}
		k_free(param->value.str_val);
   24386:	6880      	ldr	r0, [r0, #8]
   24388:	f002 fa15 	bl	267b6 <k_free>
   2438c:	e7f6      	b.n	2437c <at_param_clear+0xe>

0002438e <at_param_init>:
   2438e:	2300      	movs	r3, #0
   24390:	6003      	str	r3, [r0, #0]
   24392:	6043      	str	r3, [r0, #4]
   24394:	6083      	str	r3, [r0, #8]
   24396:	60c3      	str	r3, [r0, #12]
}
   24398:	4770      	bx	lr

0002439a <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
	if (list == NULL) {
   2439a:	b158      	cbz	r0, 243b4 <at_params_list_init+0x1a>
{
   2439c:	b538      	push	{r3, r4, r5, lr}
   2439e:	460c      	mov	r4, r1
   243a0:	4605      	mov	r5, r0
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   243a2:	2110      	movs	r1, #16
   243a4:	4620      	mov	r0, r4
   243a6:	f002 fa15 	bl	267d4 <k_calloc>
   243aa:	6068      	str	r0, [r5, #4]
	if (list->params == NULL) {
   243ac:	b128      	cbz	r0, 243ba <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
   243ae:	602c      	str	r4, [r5, #0]
	return 0;
   243b0:	2000      	movs	r0, #0
}
   243b2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   243b4:	f06f 0015 	mvn.w	r0, #21
}
   243b8:	4770      	bx	lr
		return -ENOMEM;
   243ba:	f06f 000b 	mvn.w	r0, #11
   243be:	e7f8      	b.n	243b2 <at_params_list_init+0x18>

000243c0 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   243c0:	b198      	cbz	r0, 243ea <at_params_list_clear+0x2a>
{
   243c2:	b570      	push	{r4, r5, r6, lr}
   243c4:	4606      	mov	r6, r0
	if (list == NULL || list->params == NULL) {
   243c6:	6843      	ldr	r3, [r0, #4]
   243c8:	b173      	cbz	r3, 243e8 <at_params_list_clear+0x28>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   243ca:	2500      	movs	r5, #0
   243cc:	e009      	b.n	243e2 <at_params_list_clear+0x22>
		struct at_param *params = list->params;
   243ce:	6874      	ldr	r4, [r6, #4]

		at_param_clear(&params[i]);
   243d0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   243d4:	4620      	mov	r0, r4
   243d6:	f7ff ffca 	bl	2436e <at_param_clear>
		at_param_init(&params[i]);
   243da:	4620      	mov	r0, r4
   243dc:	f7ff ffd7 	bl	2438e <at_param_init>
	for (size_t i = 0; i < list->param_count; ++i) {
   243e0:	3501      	adds	r5, #1
   243e2:	6833      	ldr	r3, [r6, #0]
   243e4:	42ab      	cmp	r3, r5
   243e6:	d8f2      	bhi.n	243ce <at_params_list_clear+0xe>
	}
}
   243e8:	bd70      	pop	{r4, r5, r6, pc}
   243ea:	4770      	bx	lr

000243ec <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   243ec:	b160      	cbz	r0, 24408 <at_params_list_free+0x1c>
{
   243ee:	b538      	push	{r3, r4, r5, lr}
   243f0:	4604      	mov	r4, r0
	if (list == NULL || list->params == NULL) {
   243f2:	6843      	ldr	r3, [r0, #4]
   243f4:	b13b      	cbz	r3, 24406 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);
   243f6:	f7ff ffe3 	bl	243c0 <at_params_list_clear>

	list->param_count = 0;
   243fa:	2500      	movs	r5, #0
   243fc:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   243fe:	6860      	ldr	r0, [r4, #4]
   24400:	f002 f9d9 	bl	267b6 <k_free>
	list->params = NULL;
   24404:	6065      	str	r5, [r4, #4]
}
   24406:	bd38      	pop	{r3, r4, r5, pc}
   24408:	4770      	bx	lr

0002440a <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
	if (list == NULL || list->params == NULL) {
   2440a:	b180      	cbz	r0, 2442e <at_params_empty_put+0x24>
   2440c:	6842      	ldr	r2, [r0, #4]
   2440e:	b18a      	cbz	r2, 24434 <at_params_empty_put+0x2a>
{
   24410:	b510      	push	{r4, lr}
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   24412:	f7ff ff96 	bl	24342 <at_params_get>

	if (param == NULL) {
   24416:	4604      	mov	r4, r0
   24418:	b178      	cbz	r0, 2443a <at_params_empty_put+0x30>
		return -EINVAL;
	}

	at_param_clear(param);
   2441a:	f7ff ffa8 	bl	2436e <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   2441e:	2304      	movs	r3, #4
   24420:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   24422:	2200      	movs	r2, #0
   24424:	2300      	movs	r3, #0
   24426:	e9c4 2302 	strd	r2, r3, [r4, #8]

	return 0;
   2442a:	2000      	movs	r0, #0
}
   2442c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2442e:	f06f 0015 	mvn.w	r0, #21
   24432:	4770      	bx	lr
   24434:	f06f 0015 	mvn.w	r0, #21
}
   24438:	4770      	bx	lr
		return -EINVAL;
   2443a:	f06f 0015 	mvn.w	r0, #21
   2443e:	e7f5      	b.n	2442c <at_params_empty_put+0x22>

00024440 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
	if (list == NULL || list->params == NULL) {
   24440:	b180      	cbz	r0, 24464 <at_params_int_put+0x24>
{
   24442:	b570      	push	{r4, r5, r6, lr}
   24444:	4616      	mov	r6, r2
   24446:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   24448:	6843      	ldr	r3, [r0, #4]
   2444a:	b173      	cbz	r3, 2446a <at_params_int_put+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2444c:	f7ff ff79 	bl	24342 <at_params_get>

	if (param == NULL) {
   24450:	4604      	mov	r4, r0
   24452:	b168      	cbz	r0, 24470 <at_params_int_put+0x30>
		return -EINVAL;
	}

	at_param_clear(param);
   24454:	f7ff ff8b 	bl	2436e <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   24458:	2301      	movs	r3, #1
   2445a:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   2445c:	60a6      	str	r6, [r4, #8]
   2445e:	60e5      	str	r5, [r4, #12]
	return 0;
   24460:	2000      	movs	r0, #0
}
   24462:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   24464:	f06f 0015 	mvn.w	r0, #21
}
   24468:	4770      	bx	lr
		return -EINVAL;
   2446a:	f06f 0015 	mvn.w	r0, #21
   2446e:	e7f8      	b.n	24462 <at_params_int_put+0x22>
		return -EINVAL;
   24470:	f06f 0015 	mvn.w	r0, #21
   24474:	e7f5      	b.n	24462 <at_params_int_put+0x22>

00024476 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
	if (list == NULL || list->params == NULL || str == NULL) {
   24476:	b1d8      	cbz	r0, 244b0 <at_params_string_put+0x3a>
{
   24478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2447a:	4615      	mov	r5, r2
   2447c:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2447e:	6842      	ldr	r2, [r0, #4]
   24480:	b1ca      	cbz	r2, 244b6 <at_params_string_put+0x40>
   24482:	b1dd      	cbz	r5, 244bc <at_params_string_put+0x46>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   24484:	f7ff ff5d 	bl	24342 <at_params_get>

	if (param == NULL) {
   24488:	4606      	mov	r6, r0
   2448a:	b1d0      	cbz	r0, 244c2 <at_params_string_put+0x4c>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   2448c:	1c60      	adds	r0, r4, #1
   2448e:	f002 f99b 	bl	267c8 <k_malloc>

	if (param_value == NULL) {
   24492:	4607      	mov	r7, r0
   24494:	b1c0      	cbz	r0, 244c8 <at_params_string_put+0x52>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24496:	4622      	mov	r2, r4
   24498:	4629      	mov	r1, r5
   2449a:	f002 f9d2 	bl	26842 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   2449e:	4630      	mov	r0, r6
   244a0:	f7ff ff65 	bl	2436e <at_param_clear>
	param->size = str_len;
   244a4:	6074      	str	r4, [r6, #4]
	param->type = AT_PARAM_TYPE_STRING;
   244a6:	2302      	movs	r3, #2
   244a8:	7033      	strb	r3, [r6, #0]
	param->value.str_val = param_value;
   244aa:	60b7      	str	r7, [r6, #8]

	return 0;
   244ac:	2000      	movs	r0, #0
}
   244ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   244b0:	f06f 0015 	mvn.w	r0, #21
}
   244b4:	4770      	bx	lr
		return -EINVAL;
   244b6:	f06f 0015 	mvn.w	r0, #21
   244ba:	e7f8      	b.n	244ae <at_params_string_put+0x38>
   244bc:	f06f 0015 	mvn.w	r0, #21
   244c0:	e7f5      	b.n	244ae <at_params_string_put+0x38>
		return -EINVAL;
   244c2:	f06f 0015 	mvn.w	r0, #21
   244c6:	e7f2      	b.n	244ae <at_params_string_put+0x38>
		return -ENOMEM;
   244c8:	f06f 000b 	mvn.w	r0, #11
   244cc:	e7ef      	b.n	244ae <at_params_string_put+0x38>

000244ce <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
	if (list == NULL || list->params == NULL || array == NULL) {
   244ce:	b1d8      	cbz	r0, 24508 <at_params_array_put+0x3a>
{
   244d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   244d2:	4615      	mov	r5, r2
   244d4:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   244d6:	6842      	ldr	r2, [r0, #4]
   244d8:	b1ca      	cbz	r2, 2450e <at_params_array_put+0x40>
   244da:	b1dd      	cbz	r5, 24514 <at_params_array_put+0x46>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   244dc:	f7ff ff31 	bl	24342 <at_params_get>

	if (param == NULL) {
   244e0:	4606      	mov	r6, r0
   244e2:	b1d0      	cbz	r0, 2451a <at_params_array_put+0x4c>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   244e4:	4620      	mov	r0, r4
   244e6:	f002 f96f 	bl	267c8 <k_malloc>

	if (param_value == NULL) {
   244ea:	4607      	mov	r7, r0
   244ec:	b1c0      	cbz	r0, 24520 <at_params_array_put+0x52>
   244ee:	4622      	mov	r2, r4
   244f0:	4629      	mov	r1, r5
   244f2:	f002 f9a6 	bl	26842 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   244f6:	4630      	mov	r0, r6
   244f8:	f7ff ff39 	bl	2436e <at_param_clear>
	param->size = array_len;
   244fc:	6074      	str	r4, [r6, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   244fe:	2303      	movs	r3, #3
   24500:	7033      	strb	r3, [r6, #0]
	param->value.array_val = param_value;
   24502:	60b7      	str	r7, [r6, #8]

	return 0;
   24504:	2000      	movs	r0, #0
}
   24506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   24508:	f06f 0015 	mvn.w	r0, #21
}
   2450c:	4770      	bx	lr
		return -EINVAL;
   2450e:	f06f 0015 	mvn.w	r0, #21
   24512:	e7f8      	b.n	24506 <at_params_array_put+0x38>
   24514:	f06f 0015 	mvn.w	r0, #21
   24518:	e7f5      	b.n	24506 <at_params_array_put+0x38>
		return -EINVAL;
   2451a:	f06f 0015 	mvn.w	r0, #21
   2451e:	e7f2      	b.n	24506 <at_params_array_put+0x38>
		return -ENOMEM;
   24520:	f06f 000b 	mvn.w	r0, #11
   24524:	e7ef      	b.n	24506 <at_params_array_put+0x38>

00024526 <at_params_short_get>:
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   24526:	b1c0      	cbz	r0, 2455a <at_params_short_get+0x34>
{
   24528:	b5d0      	push	{r4, r6, r7, lr}
   2452a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2452c:	6842      	ldr	r2, [r0, #4]
   2452e:	b1ba      	cbz	r2, 24560 <at_params_short_get+0x3a>
   24530:	b1cc      	cbz	r4, 24566 <at_params_short_get+0x40>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   24532:	f7ff ff06 	bl	24342 <at_params_get>

	if (param == NULL) {
   24536:	b1c8      	cbz	r0, 2456c <at_params_short_get+0x46>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   24538:	7803      	ldrb	r3, [r0, #0]
   2453a:	2b01      	cmp	r3, #1
   2453c:	d119      	bne.n	24572 <at_params_short_get+0x4c>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   2453e:	6883      	ldr	r3, [r0, #8]
   24540:	68c2      	ldr	r2, [r0, #12]
   24542:	f513 4600 	adds.w	r6, r3, #32768	; 0x8000
   24546:	f142 0700 	adc.w	r7, r2, #0
   2454a:	2f00      	cmp	r7, #0
   2454c:	bf08      	it	eq
   2454e:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
   24552:	d211      	bcs.n	24578 <at_params_short_get+0x52>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
   24554:	8023      	strh	r3, [r4, #0]
	return 0;
   24556:	2000      	movs	r0, #0
}
   24558:	bdd0      	pop	{r4, r6, r7, pc}
		return -EINVAL;
   2455a:	f06f 0015 	mvn.w	r0, #21
}
   2455e:	4770      	bx	lr
		return -EINVAL;
   24560:	f06f 0015 	mvn.w	r0, #21
   24564:	e7f8      	b.n	24558 <at_params_short_get+0x32>
   24566:	f06f 0015 	mvn.w	r0, #21
   2456a:	e7f5      	b.n	24558 <at_params_short_get+0x32>
		return -EINVAL;
   2456c:	f06f 0015 	mvn.w	r0, #21
   24570:	e7f2      	b.n	24558 <at_params_short_get+0x32>
		return -EINVAL;
   24572:	f06f 0015 	mvn.w	r0, #21
   24576:	e7ef      	b.n	24558 <at_params_short_get+0x32>
		return -EINVAL;
   24578:	f06f 0015 	mvn.w	r0, #21
   2457c:	e7ec      	b.n	24558 <at_params_short_get+0x32>

0002457e <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   2457e:	b1a8      	cbz	r0, 245ac <at_params_unsigned_short_get+0x2e>
{
   24580:	b510      	push	{r4, lr}
   24582:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   24584:	6842      	ldr	r2, [r0, #4]
   24586:	b1a2      	cbz	r2, 245b2 <at_params_unsigned_short_get+0x34>
   24588:	b1b4      	cbz	r4, 245b8 <at_params_unsigned_short_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2458a:	f7ff feda 	bl	24342 <at_params_get>

	if (param == NULL) {
   2458e:	4603      	mov	r3, r0
   24590:	b1a8      	cbz	r0, 245be <at_params_unsigned_short_get+0x40>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   24592:	7802      	ldrb	r2, [r0, #0]
   24594:	2a01      	cmp	r2, #1
   24596:	d115      	bne.n	245c4 <at_params_unsigned_short_get+0x46>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   24598:	6882      	ldr	r2, [r0, #8]
   2459a:	68d9      	ldr	r1, [r3, #12]
   2459c:	2900      	cmp	r1, #0
   2459e:	bf08      	it	eq
   245a0:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   245a4:	d211      	bcs.n	245ca <at_params_unsigned_short_get+0x4c>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
   245a6:	8022      	strh	r2, [r4, #0]
	return 0;
   245a8:	2000      	movs	r0, #0
}
   245aa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   245ac:	f06f 0015 	mvn.w	r0, #21
}
   245b0:	4770      	bx	lr
		return -EINVAL;
   245b2:	f06f 0015 	mvn.w	r0, #21
   245b6:	e7f8      	b.n	245aa <at_params_unsigned_short_get+0x2c>
   245b8:	f06f 0015 	mvn.w	r0, #21
   245bc:	e7f5      	b.n	245aa <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
   245be:	f06f 0015 	mvn.w	r0, #21
   245c2:	e7f2      	b.n	245aa <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
   245c4:	f06f 0015 	mvn.w	r0, #21
   245c8:	e7ef      	b.n	245aa <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
   245ca:	f06f 0015 	mvn.w	r0, #21
   245ce:	e7ec      	b.n	245aa <at_params_unsigned_short_get+0x2c>

000245d0 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   245d0:	b1b8      	cbz	r0, 24602 <at_params_int_get+0x32>
{
   245d2:	b5d0      	push	{r4, r6, r7, lr}
   245d4:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   245d6:	6842      	ldr	r2, [r0, #4]
   245d8:	b1b2      	cbz	r2, 24608 <at_params_int_get+0x38>
   245da:	b1c4      	cbz	r4, 2460e <at_params_int_get+0x3e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   245dc:	f7ff feb1 	bl	24342 <at_params_get>

	if (param == NULL) {
   245e0:	b1c0      	cbz	r0, 24614 <at_params_int_get+0x44>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   245e2:	7803      	ldrb	r3, [r0, #0]
   245e4:	2b01      	cmp	r3, #1
   245e6:	d118      	bne.n	2461a <at_params_int_get+0x4a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   245e8:	6883      	ldr	r3, [r0, #8]
   245ea:	68c2      	ldr	r2, [r0, #12]
   245ec:	f113 4600 	adds.w	r6, r3, #2147483648	; 0x80000000
   245f0:	f142 0700 	adc.w	r7, r2, #0
   245f4:	2f01      	cmp	r7, #1
   245f6:	bf08      	it	eq
   245f8:	2e00      	cmpeq	r6, #0
   245fa:	d211      	bcs.n	24620 <at_params_int_get+0x50>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
   245fc:	6023      	str	r3, [r4, #0]
	return 0;
   245fe:	2000      	movs	r0, #0
}
   24600:	bdd0      	pop	{r4, r6, r7, pc}
		return -EINVAL;
   24602:	f06f 0015 	mvn.w	r0, #21
}
   24606:	4770      	bx	lr
		return -EINVAL;
   24608:	f06f 0015 	mvn.w	r0, #21
   2460c:	e7f8      	b.n	24600 <at_params_int_get+0x30>
   2460e:	f06f 0015 	mvn.w	r0, #21
   24612:	e7f5      	b.n	24600 <at_params_int_get+0x30>
		return -EINVAL;
   24614:	f06f 0015 	mvn.w	r0, #21
   24618:	e7f2      	b.n	24600 <at_params_int_get+0x30>
		return -EINVAL;
   2461a:	f06f 0015 	mvn.w	r0, #21
   2461e:	e7ef      	b.n	24600 <at_params_int_get+0x30>
		return -EINVAL;
   24620:	f06f 0015 	mvn.w	r0, #21
   24624:	e7ec      	b.n	24600 <at_params_int_get+0x30>

00024626 <at_params_int64_get>:
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   24626:	b180      	cbz	r0, 2464a <at_params_int64_get+0x24>
{
   24628:	b510      	push	{r4, lr}
   2462a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2462c:	6842      	ldr	r2, [r0, #4]
   2462e:	b17a      	cbz	r2, 24650 <at_params_int64_get+0x2a>
   24630:	b18c      	cbz	r4, 24656 <at_params_int64_get+0x30>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   24632:	f7ff fe86 	bl	24342 <at_params_get>

	if (param == NULL) {
   24636:	b188      	cbz	r0, 2465c <at_params_int64_get+0x36>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   24638:	7802      	ldrb	r2, [r0, #0]
   2463a:	2a01      	cmp	r2, #1
   2463c:	d111      	bne.n	24662 <at_params_int64_get+0x3c>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   2463e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   24642:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   24646:	2000      	movs	r0, #0
}
   24648:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2464a:	f06f 0015 	mvn.w	r0, #21
}
   2464e:	4770      	bx	lr
		return -EINVAL;
   24650:	f06f 0015 	mvn.w	r0, #21
   24654:	e7f8      	b.n	24648 <at_params_int64_get+0x22>
   24656:	f06f 0015 	mvn.w	r0, #21
   2465a:	e7f5      	b.n	24648 <at_params_int64_get+0x22>
		return -EINVAL;
   2465c:	f06f 0015 	mvn.w	r0, #21
   24660:	e7f2      	b.n	24648 <at_params_int64_get+0x22>
		return -EINVAL;
   24662:	f06f 0015 	mvn.w	r0, #21
   24666:	e7ef      	b.n	24648 <at_params_int64_get+0x22>

00024668 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
	if (list == NULL || list->params == NULL || value == NULL ||
   24668:	b1d8      	cbz	r0, 246a2 <at_params_string_get+0x3a>
{
   2466a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2466c:	4616      	mov	r6, r2
   2466e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   24670:	6842      	ldr	r2, [r0, #4]
   24672:	b1ca      	cbz	r2, 246a8 <at_params_string_get+0x40>
   24674:	b1de      	cbz	r6, 246ae <at_params_string_get+0x46>
	    value == NULL || len == NULL) {
   24676:	b1ec      	cbz	r4, 246b4 <at_params_string_get+0x4c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   24678:	f7ff fe63 	bl	24342 <at_params_get>

	if (param == NULL) {
   2467c:	4607      	mov	r7, r0
   2467e:	b1e0      	cbz	r0, 246ba <at_params_string_get+0x52>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   24680:	7803      	ldrb	r3, [r0, #0]
   24682:	2b02      	cmp	r3, #2
   24684:	d11c      	bne.n	246c0 <at_params_string_get+0x58>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   24686:	f7ff fe65 	bl	24354 <at_param_size>
   2468a:	4605      	mov	r5, r0

	if (*len < param_len) {
   2468c:	6823      	ldr	r3, [r4, #0]
   2468e:	4283      	cmp	r3, r0
   24690:	d319      	bcc.n	246c6 <at_params_string_get+0x5e>
   24692:	4602      	mov	r2, r0
   24694:	68b9      	ldr	r1, [r7, #8]
   24696:	4630      	mov	r0, r6
   24698:	f002 f8d3 	bl	26842 <memcpy>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;
   2469c:	6025      	str	r5, [r4, #0]

	return 0;
   2469e:	2000      	movs	r0, #0
}
   246a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   246a2:	f06f 0015 	mvn.w	r0, #21
}
   246a6:	4770      	bx	lr
		return -EINVAL;
   246a8:	f06f 0015 	mvn.w	r0, #21
   246ac:	e7f8      	b.n	246a0 <at_params_string_get+0x38>
   246ae:	f06f 0015 	mvn.w	r0, #21
   246b2:	e7f5      	b.n	246a0 <at_params_string_get+0x38>
   246b4:	f06f 0015 	mvn.w	r0, #21
   246b8:	e7f2      	b.n	246a0 <at_params_string_get+0x38>
		return -EINVAL;
   246ba:	f06f 0015 	mvn.w	r0, #21
   246be:	e7ef      	b.n	246a0 <at_params_string_get+0x38>
		return -EINVAL;
   246c0:	f06f 0015 	mvn.w	r0, #21
   246c4:	e7ec      	b.n	246a0 <at_params_string_get+0x38>
		return -ENOMEM;
   246c6:	f06f 000b 	mvn.w	r0, #11
   246ca:	e7e9      	b.n	246a0 <at_params_string_get+0x38>

000246cc <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   246cc:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   246ce:	b178      	cbz	r0, 246f0 <at_params_valid_count_get+0x24>
   246d0:	4605      	mov	r5, r0
   246d2:	6843      	ldr	r3, [r0, #4]
   246d4:	b183      	cbz	r3, 246f8 <at_params_valid_count_get+0x2c>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   246d6:	2100      	movs	r1, #0
   246d8:	f7ff fe33 	bl	24342 <at_params_get>
	size_t valid_i = 0;
   246dc:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   246de:	b148      	cbz	r0, 246f4 <at_params_valid_count_get+0x28>
   246e0:	7803      	ldrb	r3, [r0, #0]
   246e2:	b13b      	cbz	r3, 246f4 <at_params_valid_count_get+0x28>
		valid_i += 1;
   246e4:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   246e6:	4621      	mov	r1, r4
   246e8:	4628      	mov	r0, r5
   246ea:	f7ff fe2a 	bl	24342 <at_params_get>
   246ee:	e7f6      	b.n	246de <at_params_valid_count_get+0x12>
		return -EINVAL;
   246f0:	f06f 0415 	mvn.w	r4, #21
	}

	return valid_i;
}
   246f4:	4620      	mov	r0, r4
   246f6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   246f8:	f06f 0415 	mvn.w	r4, #21
   246fc:	e7fa      	b.n	246f4 <at_params_valid_count_get+0x28>

000246fe <is_cellid_valid>:
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   246fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   24702:	d001      	beq.n	24708 <is_cellid_valid+0xa>
	return true;
   24704:	2001      	movs	r0, #1
   24706:	4770      	bx	lr
		return false;
   24708:	2000      	movs	r0, #0
}
   2470a:	4770      	bx	lr

0002470c <lte_lc_init>:
{
   2470c:	b508      	push	{r3, lr}
	int err = init_and_config();
   2470e:	f7f3 fbc7 	bl	17ea0 <init_and_config>
	return err ? -EFAULT : 0;
   24712:	b900      	cbnz	r0, 24716 <lte_lc_init+0xa>
}
   24714:	bd08      	pop	{r3, pc}
	return err ? -EFAULT : 0;
   24716:	f06f 000d 	mvn.w	r0, #13
   2471a:	e7fb      	b.n	24714 <lte_lc_init+0x8>

0002471c <init_and_connect>:
{
   2471c:	b508      	push	{r3, lr}
	err = lte_lc_init();
   2471e:	f7ff fff5 	bl	2470c <lte_lc_init>
	if (err) {
   24722:	b100      	cbz	r0, 24726 <init_and_connect+0xa>
}
   24724:	bd08      	pop	{r3, pc}
	return connect_lte(true);
   24726:	2001      	movs	r0, #1
   24728:	f7f3 fcda 	bl	180e0 <connect_lte>
   2472c:	e7fa      	b.n	24724 <init_and_connect+0x8>

0002472e <lte_lc_init_and_connect>:
{
   2472e:	b508      	push	{r3, lr}
	return init_and_connect(x);
   24730:	2000      	movs	r0, #0
   24732:	f7ff fff3 	bl	2471c <init_and_connect>
}
   24736:	bd08      	pop	{r3, pc}

00024738 <get_char_frequency>:
{
   24738:	4603      	mov	r3, r0
	uint32_t count = 0;
   2473a:	2000      	movs	r0, #0
   2473c:	e001      	b.n	24742 <get_char_frequency+0xa>
	} while (*(str++) != '\0');
   2473e:	3301      	adds	r3, #1
   24740:	b122      	cbz	r2, 2474c <get_char_frequency+0x14>
		if (*str == c) {
   24742:	781a      	ldrb	r2, [r3, #0]
   24744:	428a      	cmp	r2, r1
   24746:	d1fa      	bne.n	2473e <get_char_frequency+0x6>
			count++;
   24748:	3001      	adds	r0, #1
   2474a:	e7f8      	b.n	2473e <get_char_frequency+0x6>
}
   2474c:	4770      	bx	lr

0002474e <string_to_int>:
{
   2474e:	b570      	push	{r4, r5, r6, lr}
   24750:	b082      	sub	sp, #8
   24752:	4604      	mov	r4, r0
   24754:	460d      	mov	r5, r1
   24756:	4616      	mov	r6, r2
	errno = 0;
   24758:	f7fe fc1d 	bl	22f96 <__errno>
   2475c:	2300      	movs	r3, #0
   2475e:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   24760:	462a      	mov	r2, r5
   24762:	a901      	add	r1, sp, #4
   24764:	4620      	mov	r0, r4
   24766:	f7fc fad1 	bl	20d0c <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2476a:	9b01      	ldr	r3, [sp, #4]
   2476c:	42a3      	cmp	r3, r4
   2476e:	d011      	beq.n	24794 <string_to_int+0x46>
   24770:	4605      	mov	r5, r0
   24772:	781b      	ldrb	r3, [r3, #0]
   24774:	b973      	cbnz	r3, 24794 <string_to_int+0x46>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   24776:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   2477a:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2477c:	f113 0f03 	cmn.w	r3, #3
   24780:	d803      	bhi.n	2478a <string_to_int+0x3c>
	*output = temp;
   24782:	6035      	str	r5, [r6, #0]
	return 0;
   24784:	2000      	movs	r0, #0
}
   24786:	b002      	add	sp, #8
   24788:	bd70      	pop	{r4, r5, r6, pc}
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2478a:	f7fe fc04 	bl	22f96 <__errno>
   2478e:	6803      	ldr	r3, [r0, #0]
   24790:	2b22      	cmp	r3, #34	; 0x22
   24792:	d1f6      	bne.n	24782 <string_to_int+0x34>
		return -ENODATA;
   24794:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   24798:	e7f5      	b.n	24786 <string_to_int+0x38>

0002479a <string_param_to_int>:
{
   2479a:	b530      	push	{r4, r5, lr}
   2479c:	b087      	sub	sp, #28
   2479e:	4615      	mov	r5, r2
   247a0:	461c      	mov	r4, r3
	size_t len = sizeof(str_buf);
   247a2:	2310      	movs	r3, #16
   247a4:	9301      	str	r3, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   247a6:	ab01      	add	r3, sp, #4
   247a8:	aa02      	add	r2, sp, #8
   247aa:	f7ff ff5d 	bl	24668 <at_params_string_get>
	if (err) {
   247ae:	b108      	cbz	r0, 247b4 <string_param_to_int+0x1a>
}
   247b0:	b007      	add	sp, #28
   247b2:	bd30      	pop	{r4, r5, pc}
	str_buf[len] = '\0';
   247b4:	9b01      	ldr	r3, [sp, #4]
   247b6:	aa06      	add	r2, sp, #24
   247b8:	4413      	add	r3, r2
   247ba:	2200      	movs	r2, #0
   247bc:	f803 2c10 	strb.w	r2, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   247c0:	462a      	mov	r2, r5
   247c2:	4621      	mov	r1, r4
   247c4:	a802      	add	r0, sp, #8
   247c6:	f7ff ffc2 	bl	2474e <string_to_int>
   247ca:	2800      	cmp	r0, #0
   247cc:	d0f0      	beq.n	247b0 <string_param_to_int+0x16>
		return -ENODATA;
   247ce:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   247d2:	e7ed      	b.n	247b0 <string_param_to_int+0x16>

000247d4 <cmee_disable>:
{
   247d4:	b508      	push	{r3, lr}
	cmee_control(DISABLE);
   247d6:	2000      	movs	r0, #0
   247d8:	f7f4 fd30 	bl	1923c <cmee_control>
}
   247dc:	bd08      	pop	{r3, pc}

000247de <cmee_enable>:
{
   247de:	b510      	push	{r4, lr}
   247e0:	4604      	mov	r4, r0
	if (!cmee_is_active()) {
   247e2:	f7f4 fd33 	bl	1924c <cmee_is_active>
   247e6:	b110      	cbz	r0, 247ee <cmee_enable+0x10>
		*was_enabled = true;
   247e8:	2301      	movs	r3, #1
   247ea:	7023      	strb	r3, [r4, #0]
}
   247ec:	bd10      	pop	{r4, pc}
		*was_enabled = false;
   247ee:	2300      	movs	r3, #0
   247f0:	7023      	strb	r3, [r4, #0]
		cmee_control(ENABLE);
   247f2:	2001      	movs	r0, #1
   247f4:	f7f4 fd22 	bl	1923c <cmee_control>
   247f8:	e7f8      	b.n	247ec <cmee_enable+0xe>

000247fa <date_time_init>:

	return 0;
}

static int date_time_init(const struct device *unused)
{
   247fa:	b508      	push	{r3, lr}
	date_time_core_init();
   247fc:	f7f4 fe6a 	bl	194d4 <date_time_core_init>

	return 0;
}
   24800:	2000      	movs	r0, #0
   24802:	bd08      	pop	{r3, pc}

00024804 <date_time_is_valid>:
{
   24804:	b508      	push	{r3, lr}
	return date_time_core_is_valid();
   24806:	f7f4 fe6d 	bl	194e4 <date_time_core_is_valid>
}
   2480a:	bd08      	pop	{r3, pc}

0002480c <semioctet_to_dec>:
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   2480c:	f000 030f 	and.w	r3, r0, #15
   24810:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   24814:	005b      	lsls	r3, r3, #1
   24816:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   2481a:	b2c0      	uxtb	r0, r0
   2481c:	4770      	bx	lr

0002481e <ext_api_satisfies_req>:
{
   2481e:	b430      	push	{r4, r5}
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   24820:	690b      	ldr	r3, [r1, #16]
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   24822:	694d      	ldr	r5, [r1, #20]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   24824:	698c      	ldr	r4, [r1, #24]
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   24826:	69c9      	ldr	r1, [r1, #28]
	return ((ext_api->ext_api_id == req_id)
   24828:	6902      	ldr	r2, [r0, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2482a:	429a      	cmp	r2, r3
   2482c:	d002      	beq.n	24834 <ext_api_satisfies_req+0x16>
   2482e:	2000      	movs	r0, #0
}
   24830:	bc30      	pop	{r4, r5}
   24832:	4770      	bx	lr
		&&  (ext_api->ext_api_version >= req_min_version)
   24834:	6983      	ldr	r3, [r0, #24]
   24836:	42a3      	cmp	r3, r4
   24838:	d307      	bcc.n	2484a <ext_api_satisfies_req+0x2c>
		&&  (ext_api->ext_api_version <  req_max_version)
   2483a:	428b      	cmp	r3, r1
   2483c:	d207      	bcs.n	2484e <ext_api_satisfies_req+0x30>
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2483e:	6943      	ldr	r3, [r0, #20]
   24840:	ea35 0303 	bics.w	r3, r5, r3
   24844:	d005      	beq.n	24852 <ext_api_satisfies_req+0x34>
   24846:	2000      	movs	r0, #0
   24848:	e7f2      	b.n	24830 <ext_api_satisfies_req+0x12>
   2484a:	2000      	movs	r0, #0
   2484c:	e7f0      	b.n	24830 <ext_api_satisfies_req+0x12>
   2484e:	2000      	movs	r0, #0
   24850:	e7ee      	b.n	24830 <ext_api_satisfies_req+0x12>
   24852:	2001      	movs	r0, #1
   24854:	e7ec      	b.n	24830 <ext_api_satisfies_req+0x12>

00024856 <skip_ext_apis>:
{
   24856:	4601      	mov	r1, r0
	const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
   24858:	303c      	adds	r0, #60	; 0x3c
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   2485a:	2300      	movs	r3, #0
   2485c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   2485e:	429a      	cmp	r2, r3
   24860:	d903      	bls.n	2486a <skip_ext_apis+0x14>
		ADVANCE_EXT_API(ext_api);
   24862:	68c2      	ldr	r2, [r0, #12]
   24864:	4410      	add	r0, r2
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   24866:	3301      	adds	r3, #1
   24868:	e7f8      	b.n	2485c <skip_ext_apis+0x6>
}
   2486a:	4770      	bx	lr

0002486c <copy_pvt>:
{
   2486c:	b470      	push	{r4, r5, r6}
	dest->latitude = src->latitude;
   2486e:	e9d1 2300 	ldrd	r2, r3, [r1]
   24872:	e9c0 2300 	strd	r2, r3, [r0]
	dest->longitude = src->longitude;
   24876:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   2487a:	e9c0 2302 	strd	r2, r3, [r0, #8]
	dest->altitude = src->altitude;
   2487e:	690b      	ldr	r3, [r1, #16]
   24880:	6103      	str	r3, [r0, #16]
	dest->accuracy = src->accuracy;
   24882:	694b      	ldr	r3, [r1, #20]
   24884:	6143      	str	r3, [r0, #20]
	dest->speed = src->speed;
   24886:	69cb      	ldr	r3, [r1, #28]
   24888:	6183      	str	r3, [r0, #24]
	dest->heading = src->heading;
   2488a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   2488c:	61c3      	str	r3, [r0, #28]
	dest->datetime.year = src->datetime.year;
   2488e:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
   24890:	8683      	strh	r3, [r0, #52]	; 0x34
	dest->datetime.month = src->datetime.month;
   24892:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
   24896:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
	dest->datetime.day = src->datetime.day;
   2489a:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
   2489e:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	dest->datetime.hour = src->datetime.hour;
   248a2:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   248a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	dest->datetime.minute = src->datetime.minute;
   248aa:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   248ae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	dest->datetime.seconds = src->datetime.seconds;
   248b2:	f891 303a 	ldrb.w	r3, [r1, #58]	; 0x3a
   248b6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	dest->datetime.ms = src->datetime.ms;
   248ba:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
   248bc:	8783      	strh	r3, [r0, #60]	; 0x3c
	dest->pdop = src->pdop;
   248be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   248c0:	6203      	str	r3, [r0, #32]
	dest->hdop = src->hdop;
   248c2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   248c4:	6243      	str	r3, [r0, #36]	; 0x24
	dest->vdop = src->vdop;
   248c6:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   248c8:	6283      	str	r3, [r0, #40]	; 0x28
	dest->tdop = src->tdop;
   248ca:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   248cc:	62c3      	str	r3, [r0, #44]	; 0x2c
	for (size_t i = 0;
   248ce:	2400      	movs	r4, #0
   248d0:	2c0b      	cmp	r4, #11
   248d2:	d82f      	bhi.n	24934 <copy_pvt+0xc8>
		dest->sv[i].sv = src->sv[i].sv;
   248d4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   248d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   248dc:	f8b3 5052 	ldrh.w	r5, [r3, #82]	; 0x52
   248e0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   248e4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
   248e8:	87d5      	strh	r5, [r2, #62]	; 0x3e
		dest->sv[i].cn0 = src->sv[i].cn0;
   248ea:	f8b3 6056 	ldrh.w	r6, [r3, #86]	; 0x56
   248ee:	f102 0540 	add.w	r5, r2, #64	; 0x40
   248f2:	f8a2 6040 	strh.w	r6, [r2, #64]	; 0x40
		dest->sv[i].elevation = src->sv[i].elevation;
   248f6:	f9b3 6058 	ldrsh.w	r6, [r3, #88]	; 0x58
   248fa:	f8a2 6042 	strh.w	r6, [r2, #66]	; 0x42
		dest->sv[i].azimuth = src->sv[i].azimuth;
   248fe:	f9b3 605a 	ldrsh.w	r6, [r3, #90]	; 0x5a
   24902:	f8a2 6044 	strh.w	r6, [r2, #68]	; 0x44
		dest->sv[i].signal = src->sv[i].signal;
   24906:	f893 6054 	ldrb.w	r6, [r3, #84]	; 0x54
   2490a:	f882 6046 	strb.w	r6, [r2, #70]	; 0x46
			(src->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_USED_IN_FIX) ==
   2490e:	f893 605c 	ldrb.w	r6, [r3, #92]	; 0x5c
   24912:	f3c6 0640 	ubfx	r6, r6, #1, #1
		dest->sv[i].in_fix =
   24916:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   2491a:	f366 0200 	bfi	r2, r6, #0, #1
   2491e:	71ea      	strb	r2, [r5, #7]
			(src->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_UNHEALTHY) ==
   24920:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   24924:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		dest->sv[i].unhealthy =
   24928:	b2d2      	uxtb	r2, r2
   2492a:	f363 0241 	bfi	r2, r3, #1, #1
   2492e:	71ea      	strb	r2, [r5, #7]
	     i < MIN(NRF_MODEM_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   24930:	3401      	adds	r4, #1
   24932:	e7cd      	b.n	248d0 <copy_pvt+0x64>
}
   24934:	bc70      	pop	{r4, r5, r6}
   24936:	4770      	bx	lr

00024938 <notify_event>:
{
   24938:	b508      	push	{r3, lr}
	struct gps_drv_data *drv_data = dev->data;
   2493a:	6903      	ldr	r3, [r0, #16]
	if (drv_data->handler) {
   2493c:	685b      	ldr	r3, [r3, #4]
   2493e:	b103      	cbz	r3, 24942 <notify_event+0xa>
		drv_data->handler(dev, evt);
   24940:	4798      	blx	r3
}
   24942:	bd08      	pop	{r3, pc}

00024944 <set_nmea_mask>:
	*nmea_mask |= NRF_MODEM_GNSS_NMEA_GGA_MASK;
   24944:	2301      	movs	r3, #1
   24946:	8003      	strh	r3, [r0, #0]
}
   24948:	4770      	bx	lr

0002494a <start_work_fn>:
{
   2494a:	b510      	push	{r4, lr}
   2494c:	b0b0      	sub	sp, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   2494e:	f6a0 102c 	subw	r0, r0, #2348	; 0x92c
   24952:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   24954:	22c0      	movs	r2, #192	; 0xc0
   24956:	2100      	movs	r1, #0
   24958:	4668      	mov	r0, sp
   2495a:	f001 ff92 	bl	26882 <memset>
	notify_event(dev, &evt);
   2495e:	4669      	mov	r1, sp
   24960:	4620      	mov	r0, r4
   24962:	f7ff ffe9 	bl	24938 <notify_event>
}
   24966:	b030      	add	sp, #192	; 0xc0
   24968:	bd10      	pop	{r4, pc}

0002496a <stop_work_fn>:
{
   2496a:	b510      	push	{r4, lr}
   2496c:	b0b0      	sub	sp, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   2496e:	f6a0 103c 	subw	r0, r0, #2364	; 0x93c
   24972:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   24974:	22c0      	movs	r2, #192	; 0xc0
   24976:	2100      	movs	r1, #0
   24978:	4668      	mov	r0, sp
   2497a:	f001 ff82 	bl	26882 <memset>
   2497e:	2301      	movs	r3, #1
   24980:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   24984:	4669      	mov	r1, sp
   24986:	4620      	mov	r0, r4
   24988:	f7ff ffd6 	bl	24938 <notify_event>
}
   2498c:	b030      	add	sp, #192	; 0xc0
   2498e:	bd10      	pop	{r4, pc}

00024990 <error_work_fn>:
{
   24990:	b510      	push	{r4, lr}
   24992:	b0b0      	sub	sp, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   24994:	f6a0 104c 	subw	r0, r0, #2380	; 0x94c
   24998:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   2499a:	22c0      	movs	r2, #192	; 0xc0
   2499c:	2100      	movs	r1, #0
   2499e:	4668      	mov	r0, sp
   249a0:	f001 ff6f 	bl	26882 <memset>
   249a4:	230a      	movs	r3, #10
   249a6:	f88d 3000 	strb.w	r3, [sp]
   249aa:	2301      	movs	r3, #1
   249ac:	f88d 3008 	strb.w	r3, [sp, #8]
	notify_event(dev, &evt);
   249b0:	4669      	mov	r1, sp
   249b2:	4620      	mov	r0, r4
   249b4:	f7ff ffc0 	bl	24938 <notify_event>
}
   249b8:	b030      	add	sp, #192	; 0xc0
   249ba:	bd10      	pop	{r4, pc}

000249bc <setup>:
	struct gps_drv_data *drv_data = dev->data;
   249bc:	6903      	ldr	r3, [r0, #16]
	drv_data->dev = dev;
   249be:	6018      	str	r0, [r3, #0]
}
   249c0:	2000      	movs	r0, #0
   249c2:	4770      	bx	lr

000249c4 <get_event_data>:
{
   249c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249c6:	4606      	mov	r6, r0
   249c8:	460d      	mov	r5, r1
   249ca:	4614      	mov	r4, r2
	data = k_malloc(len);
   249cc:	4610      	mov	r0, r2
   249ce:	f001 fefb 	bl	267c8 <k_malloc>
	if (data == NULL) {
   249d2:	b168      	cbz	r0, 249f0 <get_event_data+0x2c>
   249d4:	4607      	mov	r7, r0
	if (nrf_modem_gnss_read(data, len, type) != 0) {
   249d6:	462a      	mov	r2, r5
   249d8:	4621      	mov	r1, r4
   249da:	f7f9 faf3 	bl	1dfc4 <nrf_modem_gnss_read>
   249de:	b908      	cbnz	r0, 249e4 <get_event_data+0x20>
	*dest = data;
   249e0:	6037      	str	r7, [r6, #0]
}
   249e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_free(data);
   249e4:	4638      	mov	r0, r7
   249e6:	f001 fee6 	bl	267b6 <k_free>
		return -1;
   249ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   249ee:	e7f8      	b.n	249e2 <get_event_data+0x1e>
		return -1;
   249f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   249f4:	e7f5      	b.n	249e2 <get_event_data+0x1e>

000249f6 <cancel_works>:
{
   249f6:	b510      	push	{r4, lr}
   249f8:	4604      	mov	r4, r0
	k_work_cancel_delayable(&drv_data->timeout_work);
   249fa:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   249fe:	f001 fbac 	bl	2615a <k_work_cancel_delayable>
	k_work_cancel_delayable(&drv_data->blocked_work);
   24a02:	f504 6019 	add.w	r0, r4, #2448	; 0x990
   24a06:	f001 fba8 	bl	2615a <k_work_cancel_delayable>
}
   24a0a:	bd10      	pop	{r4, pc}

00024a0c <timeout_work_fn>:
{
   24a0c:	b530      	push	{r4, r5, lr}
   24a0e:	b0b1      	sub	sp, #196	; 0xc4
   24a10:	4604      	mov	r4, r0
	const struct device *dev = drv_data->dev;
   24a12:	f5a0 6316 	sub.w	r3, r0, #2400	; 0x960
   24a16:	681d      	ldr	r5, [r3, #0]
	struct gps_event evt = {
   24a18:	22c0      	movs	r2, #192	; 0xc0
   24a1a:	2100      	movs	r1, #0
   24a1c:	4668      	mov	r0, sp
   24a1e:	f001 ff30 	bl	26882 <memset>
   24a22:	2302      	movs	r3, #2
   24a24:	f88d 3000 	strb.w	r3, [sp]
	atomic_set(&drv_data->timeout_occurred, 1);
   24a28:	f6a4 143c 	subw	r4, r4, #2364	; 0x93c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24a2c:	2301      	movs	r3, #1
   24a2e:	e8d4 2fef 	ldaex	r2, [r4]
   24a32:	e8c4 3fe1 	stlex	r1, r3, [r4]
   24a36:	2900      	cmp	r1, #0
   24a38:	d1f9      	bne.n	24a2e <timeout_work_fn+0x22>
	notify_event(dev, &evt);
   24a3a:	4669      	mov	r1, sp
   24a3c:	4628      	mov	r0, r5
   24a3e:	f7ff ff7b 	bl	24938 <notify_event>
}
   24a42:	b031      	add	sp, #196	; 0xc4
   24a44:	bd30      	pop	{r4, r5, pc}

00024a46 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   24a46:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   24a48:	4780      	blx	r0
}
   24a4a:	bd08      	pop	{r3, pc}

00024a4c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   24a4c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   24a4e:	f001 fdbf 	bl	265d0 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   24a52:	bd08      	pop	{r3, pc}

00024a54 <nrfx_clock_enable>:
{
   24a54:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   24a56:	2005      	movs	r0, #5
   24a58:	f7ef fa10 	bl	13e7c <arch_irq_is_enabled>
   24a5c:	b100      	cbz	r0, 24a60 <nrfx_clock_enable+0xc>
}
   24a5e:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   24a60:	2005      	movs	r0, #5
   24a62:	f7ef f9fb 	bl	13e5c <arch_irq_enable>
   24a66:	e7fa      	b.n	24a5e <nrfx_clock_enable+0xa>

00024a68 <pin_is_task_output>:
{
   24a68:	b510      	push	{r4, lr}
   24a6a:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   24a6c:	f7f6 f840 	bl	1aaf0 <pin_is_output>
   24a70:	b128      	cbz	r0, 24a7e <pin_is_task_output+0x16>
   24a72:	4620      	mov	r0, r4
   24a74:	f7f6 f826 	bl	1aac4 <pin_in_use_by_te>
   24a78:	b118      	cbz	r0, 24a82 <pin_is_task_output+0x1a>
   24a7a:	2001      	movs	r0, #1
   24a7c:	e000      	b.n	24a80 <pin_is_task_output+0x18>
   24a7e:	2000      	movs	r0, #0
}
   24a80:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   24a82:	2000      	movs	r0, #0
   24a84:	e7fc      	b.n	24a80 <pin_is_task_output+0x18>

00024a86 <pin_is_input>:
{
   24a86:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   24a88:	f7f6 f832 	bl	1aaf0 <pin_is_output>
   24a8c:	f080 0001 	eor.w	r0, r0, #1
}
   24a90:	b2c0      	uxtb	r0, r0
   24a92:	bd08      	pop	{r3, pc}

00024a94 <gpiote_polarity_to_trigger>:
}
   24a94:	4770      	bx	lr

00024a96 <gpiote_trigger_to_polarity>:
}
   24a96:	4770      	bx	lr

00024a98 <is_level>:
}
   24a98:	2803      	cmp	r0, #3
   24a9a:	bf94      	ite	ls
   24a9c:	2000      	movls	r0, #0
   24a9e:	2001      	movhi	r0, #1
   24aa0:	4770      	bx	lr

00024aa2 <rpc_handle_ctrl_message>:
   24aa2:	2902      	cmp	r1, #2
   24aa4:	b510      	push	{r4, lr}
   24aa6:	4604      	mov	r4, r0
   24aa8:	d005      	beq.n	24ab6 <rpc_handle_ctrl_message+0x14>
   24aaa:	2904      	cmp	r1, #4
   24aac:	d001      	beq.n	24ab2 <rpc_handle_ctrl_message+0x10>
   24aae:	2901      	cmp	r1, #1
   24ab0:	d107      	bne.n	24ac2 <rpc_handle_ctrl_message+0x20>
   24ab2:	2000      	movs	r0, #0
   24ab4:	bd10      	pop	{r4, pc}
   24ab6:	6880      	ldr	r0, [r0, #8]
   24ab8:	2800      	cmp	r0, #0
   24aba:	d0fa      	beq.n	24ab2 <rpc_handle_ctrl_message+0x10>
   24abc:	f000 f833 	bl	24b26 <rpc_transport_local_data_free>
   24ac0:	e7f7      	b.n	24ab2 <rpc_handle_ctrl_message+0x10>
   24ac2:	6880      	ldr	r0, [r0, #8]
   24ac4:	b108      	cbz	r0, 24aca <rpc_handle_ctrl_message+0x28>
   24ac6:	f000 f82e 	bl	24b26 <rpc_transport_local_data_free>
   24aca:	4620      	mov	r0, r4
   24acc:	f000 f827 	bl	24b1e <rpc_transport_msg_free>
   24ad0:	e7ef      	b.n	24ab2 <rpc_handle_ctrl_message+0x10>

00024ad2 <rpc_message_send>:
   24ad2:	6843      	ldr	r3, [r0, #4]
   24ad4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24ad8:	f043 0302 	orr.w	r3, r3, #2
   24adc:	6043      	str	r3, [r0, #4]
   24ade:	f000 b826 	b.w	24b2e <rpc_transport_data_msg_send>

00024ae2 <rpc_message_alloc>:
   24ae2:	b570      	push	{r4, r5, r6, lr}
   24ae4:	4606      	mov	r6, r0
   24ae6:	b130      	cbz	r0, 24af6 <rpc_message_alloc+0x14>
   24ae8:	f000 f81b 	bl	24b22 <rpc_transport_data_alloc>
   24aec:	4605      	mov	r5, r0
   24aee:	b918      	cbnz	r0, 24af8 <rpc_message_alloc+0x16>
   24af0:	2400      	movs	r4, #0
   24af2:	4620      	mov	r0, r4
   24af4:	bd70      	pop	{r4, r5, r6, pc}
   24af6:	4605      	mov	r5, r0
   24af8:	f000 f80f 	bl	24b1a <rpc_transport_data_msg_alloc>
   24afc:	4604      	mov	r4, r0
   24afe:	b110      	cbz	r0, 24b06 <rpc_message_alloc+0x24>
   24b00:	60c6      	str	r6, [r0, #12]
   24b02:	6085      	str	r5, [r0, #8]
   24b04:	e7f5      	b.n	24af2 <rpc_message_alloc+0x10>
   24b06:	2d00      	cmp	r5, #0
   24b08:	d0f2      	beq.n	24af0 <rpc_message_alloc+0xe>
   24b0a:	4628      	mov	r0, r5
   24b0c:	f000 f80b 	bl	24b26 <rpc_transport_local_data_free>
   24b10:	e7ef      	b.n	24af2 <rpc_message_alloc+0x10>

00024b12 <rpc_message_free>:
   24b12:	f000 b804 	b.w	24b1e <rpc_transport_msg_free>

00024b16 <rpc_message_data_free>:
   24b16:	f000 b808 	b.w	24b2a <rpc_transport_peer_data_free>

00024b1a <rpc_transport_data_msg_alloc>:
   24b1a:	f7f6 bf2d 	b.w	1b978 <rpc_transport_ipc_data_msg_alloc>

00024b1e <rpc_transport_msg_free>:
   24b1e:	f7f6 bf77 	b.w	1ba10 <rpc_transport_ipc_msg_free>

00024b22 <rpc_transport_data_alloc>:
   24b22:	f7f6 bf5b 	b.w	1b9dc <rpc_transport_ipc_data_alloc>

00024b26 <rpc_transport_local_data_free>:
   24b26:	f000 b808 	b.w	24b3a <rpc_transport_ipc_local_data_free>

00024b2a <rpc_transport_peer_data_free>:
   24b2a:	f000 b80d 	b.w	24b48 <rpc_transport_ipc_peer_data_free>

00024b2e <rpc_transport_data_msg_send>:
   24b2e:	f7f6 bee7 	b.w	1b900 <rpc_transport_ipc_data_msg_send>

00024b32 <rpc_transport_rx_data_suspend>:
   24b32:	f000 b81b 	b.w	24b6c <rpc_transport_ipc_rx_data_suspend>

00024b36 <rpc_transport_rx_data_resume>:
   24b36:	f000 b81c 	b.w	24b72 <rpc_transport_ipc_rx_data_resume>

00024b3a <rpc_transport_ipc_local_data_free>:
   24b3a:	b508      	push	{r3, lr}
   24b3c:	f7f1 fdce 	bl	166dc <nrf_modem_os_shm_tx_free>
   24b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24b44:	f7f1 bd8e 	b.w	16664 <nrf_modem_os_application_irq_set>

00024b48 <rpc_transport_ipc_peer_data_free>:
   24b48:	b510      	push	{r4, lr}
   24b4a:	4604      	mov	r4, r0
   24b4c:	f7f6 ff26 	bl	1b99c <rpc_transport_ipc_ctrl_msg_alloc>
   24b50:	2101      	movs	r1, #1
   24b52:	2200      	movs	r2, #0
   24b54:	7001      	strb	r1, [r0, #0]
   24b56:	2102      	movs	r1, #2
   24b58:	6084      	str	r4, [r0, #8]
   24b5a:	7042      	strb	r2, [r0, #1]
   24b5c:	7081      	strb	r1, [r0, #2]
   24b5e:	70c2      	strb	r2, [r0, #3]
   24b60:	f7f6 feec 	bl	1b93c <rpc_transport_ipc_ctrl_msg_send>
   24b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24b68:	f7f1 bd7c 	b.w	16664 <nrf_modem_os_application_irq_set>

00024b6c <rpc_transport_ipc_rx_data_suspend>:
   24b6c:	2004      	movs	r0, #4
   24b6e:	f7f6 bc79 	b.w	1b464 <nrfx_ipc_receive_event_disable>

00024b72 <rpc_transport_ipc_rx_data_resume>:
   24b72:	2004      	movs	r0, #4
   24b74:	f7f6 bc6e 	b.w	1b454 <nrfx_ipc_receive_event_enable>

00024b78 <rpc_client_request_alloc>:
   24b78:	b508      	push	{r3, lr}
   24b7a:	f7ff ffb2 	bl	24ae2 <rpc_message_alloc>
   24b7e:	b100      	cbz	r0, 24b82 <rpc_client_request_alloc+0xa>
   24b80:	3008      	adds	r0, #8
   24b82:	bd08      	pop	{r3, pc}

00024b84 <rpc_client_request_send>:
   24b84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   24b88:	4610      	mov	r0, r2
   24b8a:	f840 1d08 	str.w	r1, [r0, #-8]!
   24b8e:	f7ff bfa0 	b.w	24ad2 <rpc_message_send>

00024b92 <rpc_client_message_free>:
   24b92:	3808      	subs	r0, #8
   24b94:	f7ff bfbd 	b.w	24b12 <rpc_message_free>

00024b98 <rpc_client_data_free>:
   24b98:	f7ff bfbd 	b.w	24b16 <rpc_message_data_free>

00024b9c <rpc_gnss_serialize_utc>:
   24b9c:	b1c0      	cbz	r0, 24bd0 <rpc_gnss_serialize_utc+0x34>
   24b9e:	b1b9      	cbz	r1, 24bd0 <rpc_gnss_serialize_utc+0x34>
   24ba0:	2301      	movs	r3, #1
   24ba2:	700b      	strb	r3, [r1, #0]
   24ba4:	2300      	movs	r3, #0
   24ba6:	704b      	strb	r3, [r1, #1]
   24ba8:	6843      	ldr	r3, [r0, #4]
   24baa:	f8c1 3006 	str.w	r3, [r1, #6]
   24bae:	6803      	ldr	r3, [r0, #0]
   24bb0:	f8c1 3002 	str.w	r3, [r1, #2]
   24bb4:	7a83      	ldrb	r3, [r0, #10]
   24bb6:	730b      	strb	r3, [r1, #12]
   24bb8:	7b43      	ldrb	r3, [r0, #13]
   24bba:	73cb      	strb	r3, [r1, #15]
   24bbc:	7b03      	ldrb	r3, [r0, #12]
   24bbe:	738b      	strb	r3, [r1, #14]
   24bc0:	7a03      	ldrb	r3, [r0, #8]
   24bc2:	728b      	strb	r3, [r1, #10]
   24bc4:	7ac3      	ldrb	r3, [r0, #11]
   24bc6:	734b      	strb	r3, [r1, #13]
   24bc8:	7a43      	ldrb	r3, [r0, #9]
   24bca:	2010      	movs	r0, #16
   24bcc:	72cb      	strb	r3, [r1, #11]
   24bce:	4770      	bx	lr
   24bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24bd4:	4770      	bx	lr

00024bd6 <rpc_gnss_serialize_ephe>:
   24bd6:	2800      	cmp	r0, #0
   24bd8:	d044      	beq.n	24c64 <rpc_gnss_serialize_ephe+0x8e>
   24bda:	2900      	cmp	r1, #0
   24bdc:	d042      	beq.n	24c64 <rpc_gnss_serialize_ephe+0x8e>
   24bde:	2302      	movs	r3, #2
   24be0:	700b      	strb	r3, [r1, #0]
   24be2:	2300      	movs	r3, #0
   24be4:	704b      	strb	r3, [r1, #1]
   24be6:	68c3      	ldr	r3, [r0, #12]
   24be8:	f8c1 300b 	str.w	r3, [r1, #11]
   24bec:	8903      	ldrh	r3, [r0, #8]
   24bee:	f8a1 3009 	strh.w	r3, [r1, #9]
   24bf2:	7983      	ldrb	r3, [r0, #6]
   24bf4:	720b      	strb	r3, [r1, #8]
   24bf6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   24bfa:	878b      	strh	r3, [r1, #60]	; 0x3c
   24bfc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   24bfe:	86cb      	strh	r3, [r1, #54]	; 0x36
   24c00:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   24c04:	874b      	strh	r3, [r1, #58]	; 0x3a
   24c06:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   24c08:	868b      	strh	r3, [r1, #52]	; 0x34
   24c0a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   24c0e:	87cb      	strh	r3, [r1, #62]	; 0x3e
   24c10:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   24c14:	870b      	strh	r3, [r1, #56]	; 0x38
   24c16:	8b83      	ldrh	r3, [r0, #28]
   24c18:	830b      	strh	r3, [r1, #24]
   24c1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   24c1c:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   24c20:	7c83      	ldrb	r3, [r0, #18]
   24c22:	744b      	strb	r3, [r1, #17]
   24c24:	7843      	ldrb	r3, [r0, #1]
   24c26:	70cb      	strb	r3, [r1, #3]
   24c28:	6b43      	ldr	r3, [r0, #52]	; 0x34
   24c2a:	62cb      	str	r3, [r1, #44]	; 0x2c
   24c2c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   24c2e:	84cb      	strh	r3, [r1, #38]	; 0x26
   24c30:	8843      	ldrh	r3, [r0, #2]
   24c32:	808b      	strh	r3, [r1, #4]
   24c34:	6a03      	ldr	r3, [r0, #32]
   24c36:	f8c1 301a 	str.w	r3, [r1, #26]
   24c3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   24c3c:	630b      	str	r3, [r1, #48]	; 0x30
   24c3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   24c40:	f8c1 301e 	str.w	r3, [r1, #30]
   24c44:	6b03      	ldr	r3, [r0, #48]	; 0x30
   24c46:	628b      	str	r3, [r1, #40]	; 0x28
   24c48:	7803      	ldrb	r3, [r0, #0]
   24c4a:	708b      	strb	r3, [r1, #2]
   24c4c:	7c03      	ldrb	r3, [r0, #16]
   24c4e:	73cb      	strb	r3, [r1, #15]
   24c50:	8883      	ldrh	r3, [r0, #4]
   24c52:	80cb      	strh	r3, [r1, #6]
   24c54:	8a83      	ldrh	r3, [r0, #20]
   24c56:	824b      	strh	r3, [r1, #18]
   24c58:	7c43      	ldrb	r3, [r0, #17]
   24c5a:	740b      	strb	r3, [r1, #16]
   24c5c:	6983      	ldr	r3, [r0, #24]
   24c5e:	2040      	movs	r0, #64	; 0x40
   24c60:	614b      	str	r3, [r1, #20]
   24c62:	4770      	bx	lr
   24c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24c68:	4770      	bx	lr

00024c6a <rpc_gnss_serialize_alm>:
   24c6a:	b340      	cbz	r0, 24cbe <rpc_gnss_serialize_alm+0x54>
   24c6c:	b339      	cbz	r1, 24cbe <rpc_gnss_serialize_alm+0x54>
   24c6e:	2303      	movs	r3, #3
   24c70:	700b      	strb	r3, [r1, #0]
   24c72:	2300      	movs	r3, #0
   24c74:	704b      	strb	r3, [r1, #1]
   24c76:	8b83      	ldrh	r3, [r0, #28]
   24c78:	f8a1 301d 	strh.w	r3, [r1, #29]
   24c7c:	8bc3      	ldrh	r3, [r0, #30]
   24c7e:	f8a1 301f 	strh.w	r3, [r1, #31]
   24c82:	88c3      	ldrh	r3, [r0, #6]
   24c84:	810b      	strh	r3, [r1, #8]
   24c86:	8883      	ldrh	r3, [r0, #4]
   24c88:	80cb      	strh	r3, [r1, #6]
   24c8a:	78c3      	ldrb	r3, [r0, #3]
   24c8c:	714b      	strb	r3, [r1, #5]
   24c8e:	6983      	ldr	r3, [r0, #24]
   24c90:	f8c1 3019 	str.w	r3, [r1, #25]
   24c94:	6903      	ldr	r3, [r0, #16]
   24c96:	f8c1 3011 	str.w	r3, [r1, #17]
   24c9a:	8903      	ldrh	r3, [r0, #8]
   24c9c:	814b      	strh	r3, [r1, #10]
   24c9e:	68c3      	ldr	r3, [r0, #12]
   24ca0:	f8c1 300d 	str.w	r3, [r1, #13]
   24ca4:	7a83      	ldrb	r3, [r0, #10]
   24ca6:	730b      	strb	r3, [r1, #12]
   24ca8:	7803      	ldrb	r3, [r0, #0]
   24caa:	708b      	strb	r3, [r1, #2]
   24cac:	7883      	ldrb	r3, [r0, #2]
   24cae:	710b      	strb	r3, [r1, #4]
   24cb0:	6943      	ldr	r3, [r0, #20]
   24cb2:	f8c1 3015 	str.w	r3, [r1, #21]
   24cb6:	7843      	ldrb	r3, [r0, #1]
   24cb8:	2021      	movs	r0, #33	; 0x21
   24cba:	70cb      	strb	r3, [r1, #3]
   24cbc:	4770      	bx	lr
   24cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24cc2:	4770      	bx	lr

00024cc4 <rpc_gnss_serialize_klob>:
   24cc4:	b1b0      	cbz	r0, 24cf4 <rpc_gnss_serialize_klob+0x30>
   24cc6:	b1a9      	cbz	r1, 24cf4 <rpc_gnss_serialize_klob+0x30>
   24cc8:	2304      	movs	r3, #4
   24cca:	700b      	strb	r3, [r1, #0]
   24ccc:	2300      	movs	r3, #0
   24cce:	704b      	strb	r3, [r1, #1]
   24cd0:	7803      	ldrb	r3, [r0, #0]
   24cd2:	708b      	strb	r3, [r1, #2]
   24cd4:	7843      	ldrb	r3, [r0, #1]
   24cd6:	70cb      	strb	r3, [r1, #3]
   24cd8:	7883      	ldrb	r3, [r0, #2]
   24cda:	710b      	strb	r3, [r1, #4]
   24cdc:	78c3      	ldrb	r3, [r0, #3]
   24cde:	714b      	strb	r3, [r1, #5]
   24ce0:	7903      	ldrb	r3, [r0, #4]
   24ce2:	718b      	strb	r3, [r1, #6]
   24ce4:	7943      	ldrb	r3, [r0, #5]
   24ce6:	71cb      	strb	r3, [r1, #7]
   24ce8:	7983      	ldrb	r3, [r0, #6]
   24cea:	720b      	strb	r3, [r1, #8]
   24cec:	79c3      	ldrb	r3, [r0, #7]
   24cee:	200a      	movs	r0, #10
   24cf0:	724b      	strb	r3, [r1, #9]
   24cf2:	4770      	bx	lr
   24cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24cf8:	4770      	bx	lr

00024cfa <rpc_gnss_serialize_nequick>:
   24cfa:	b180      	cbz	r0, 24d1e <rpc_gnss_serialize_nequick+0x24>
   24cfc:	b179      	cbz	r1, 24d1e <rpc_gnss_serialize_nequick+0x24>
   24cfe:	2305      	movs	r3, #5
   24d00:	700b      	strb	r3, [r1, #0]
   24d02:	2300      	movs	r3, #0
   24d04:	704b      	strb	r3, [r1, #1]
   24d06:	8803      	ldrh	r3, [r0, #0]
   24d08:	804b      	strh	r3, [r1, #2]
   24d0a:	8843      	ldrh	r3, [r0, #2]
   24d0c:	808b      	strh	r3, [r1, #4]
   24d0e:	8883      	ldrh	r3, [r0, #4]
   24d10:	80cb      	strh	r3, [r1, #6]
   24d12:	7983      	ldrb	r3, [r0, #6]
   24d14:	720b      	strb	r3, [r1, #8]
   24d16:	79c3      	ldrb	r3, [r0, #7]
   24d18:	200a      	movs	r0, #10
   24d1a:	724b      	strb	r3, [r1, #9]
   24d1c:	4770      	bx	lr
   24d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24d22:	4770      	bx	lr

00024d24 <rpc_gnss_serialize_time_and_sv_tow>:
   24d24:	b570      	push	{r4, r5, r6, lr}
   24d26:	b1e8      	cbz	r0, 24d64 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   24d28:	b1e1      	cbz	r1, 24d64 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   24d2a:	2206      	movs	r2, #6
   24d2c:	2300      	movs	r3, #0
   24d2e:	700a      	strb	r2, [r1, #0]
   24d30:	8802      	ldrh	r2, [r0, #0]
   24d32:	704b      	strb	r3, [r1, #1]
   24d34:	804a      	strh	r2, [r1, #2]
   24d36:	68c2      	ldr	r2, [r0, #12]
   24d38:	f101 0410 	add.w	r4, r1, #16
   24d3c:	f8c1 200a 	str.w	r2, [r1, #10]
   24d40:	8902      	ldrh	r2, [r0, #8]
   24d42:	810a      	strh	r2, [r1, #8]
   24d44:	6842      	ldr	r2, [r0, #4]
   24d46:	604a      	str	r2, [r1, #4]
   24d48:	8a06      	ldrh	r6, [r0, #16]
   24d4a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   24d4e:	188d      	adds	r5, r1, r2
   24d50:	81ee      	strh	r6, [r5, #14]
   24d52:	7c85      	ldrb	r5, [r0, #18]
   24d54:	3301      	adds	r3, #1
   24d56:	2b20      	cmp	r3, #32
   24d58:	54a5      	strb	r5, [r4, r2]
   24d5a:	f100 0004 	add.w	r0, r0, #4
   24d5e:	d1f3      	bne.n	24d48 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   24d60:	206e      	movs	r0, #110	; 0x6e
   24d62:	bd70      	pop	{r4, r5, r6, pc}
   24d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24d68:	e7fb      	b.n	24d62 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

00024d6a <rpc_gnss_serialize_location>:
   24d6a:	b1c0      	cbz	r0, 24d9e <rpc_gnss_serialize_location+0x34>
   24d6c:	b1b9      	cbz	r1, 24d9e <rpc_gnss_serialize_location+0x34>
   24d6e:	2307      	movs	r3, #7
   24d70:	700b      	strb	r3, [r1, #0]
   24d72:	2300      	movs	r3, #0
   24d74:	704b      	strb	r3, [r1, #1]
   24d76:	8903      	ldrh	r3, [r0, #8]
   24d78:	814b      	strh	r3, [r1, #10]
   24d7a:	7b83      	ldrb	r3, [r0, #14]
   24d7c:	740b      	strb	r3, [r1, #16]
   24d7e:	6803      	ldr	r3, [r0, #0]
   24d80:	f8c1 3002 	str.w	r3, [r1, #2]
   24d84:	6843      	ldr	r3, [r0, #4]
   24d86:	f8c1 3006 	str.w	r3, [r1, #6]
   24d8a:	7b03      	ldrb	r3, [r0, #12]
   24d8c:	738b      	strb	r3, [r1, #14]
   24d8e:	7b43      	ldrb	r3, [r0, #13]
   24d90:	73cb      	strb	r3, [r1, #15]
   24d92:	7a83      	ldrb	r3, [r0, #10]
   24d94:	730b      	strb	r3, [r1, #12]
   24d96:	7ac3      	ldrb	r3, [r0, #11]
   24d98:	2011      	movs	r0, #17
   24d9a:	734b      	strb	r3, [r1, #13]
   24d9c:	4770      	bx	lr
   24d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24da2:	4770      	bx	lr

00024da4 <rpc_gnss_serialize_integrity>:
   24da4:	b148      	cbz	r0, 24dba <rpc_gnss_serialize_integrity+0x16>
   24da6:	b141      	cbz	r1, 24dba <rpc_gnss_serialize_integrity+0x16>
   24da8:	2308      	movs	r3, #8
   24daa:	700b      	strb	r3, [r1, #0]
   24dac:	2300      	movs	r3, #0
   24dae:	704b      	strb	r3, [r1, #1]
   24db0:	6803      	ldr	r3, [r0, #0]
   24db2:	2006      	movs	r0, #6
   24db4:	f8c1 3002 	str.w	r3, [r1, #2]
   24db8:	4770      	bx	lr
   24dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24dbe:	4770      	bx	lr

00024dc0 <packet_handler_alloc_and_init>:
   24dc0:	b538      	push	{r3, r4, r5, lr}
   24dc2:	4604      	mov	r4, r0
   24dc4:	4608      	mov	r0, r1
   24dc6:	4611      	mov	r1, r2
   24dc8:	4622      	mov	r2, r4
   24dca:	f7f9 fc73 	bl	1e6b4 <packet_handler_create>
   24dce:	61e0      	str	r0, [r4, #28]
   24dd0:	b158      	cbz	r0, 24dea <packet_handler_alloc_and_init+0x2a>
   24dd2:	6803      	ldr	r3, [r0, #0]
   24dd4:	681b      	ldr	r3, [r3, #0]
   24dd6:	4798      	blx	r3
   24dd8:	4605      	mov	r5, r0
   24dda:	b120      	cbz	r0, 24de6 <packet_handler_alloc_and_init+0x26>
   24ddc:	69e0      	ldr	r0, [r4, #28]
   24dde:	f000 fd2b 	bl	25838 <packet_handler_delete>
   24de2:	2300      	movs	r3, #0
   24de4:	61e3      	str	r3, [r4, #28]
   24de6:	4628      	mov	r0, r5
   24de8:	bd38      	pop	{r3, r4, r5, pc}
   24dea:	250c      	movs	r5, #12
   24dec:	e7fb      	b.n	24de6 <packet_handler_alloc_and_init+0x26>

00024dee <socket_free>:
   24dee:	b510      	push	{r4, lr}
   24df0:	4604      	mov	r4, r0
   24df2:	69c0      	ldr	r0, [r0, #28]
   24df4:	b108      	cbz	r0, 24dfa <socket_free+0xc>
   24df6:	f000 fd1f 	bl	25838 <packet_handler_delete>
   24dfa:	4620      	mov	r0, r4
   24dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24e00:	222c      	movs	r2, #44	; 0x2c
   24e02:	2100      	movs	r1, #0
   24e04:	f001 bd3d 	b.w	26882 <memset>

00024e08 <interface_socket_event_get>:
   24e08:	b510      	push	{r4, lr}
   24e0a:	4604      	mov	r4, r0
   24e0c:	b189      	cbz	r1, 24e32 <interface_socket_event_get+0x2a>
   24e0e:	f7f7 f84b 	bl	1bea8 <interface_socket_from_handle_get>
   24e12:	b158      	cbz	r0, 24e2c <interface_socket_event_get+0x24>
   24e14:	6803      	ldr	r3, [r0, #0]
   24e16:	0c1b      	lsrs	r3, r3, #16
   24e18:	f003 020a 	and.w	r2, r3, #10
   24e1c:	2a0a      	cmp	r2, #10
   24e1e:	bf14      	ite	ne
   24e20:	f003 030f 	andne.w	r3, r3, #15
   24e24:	f003 030d 	andeq.w	r3, r3, #13
   24e28:	600b      	str	r3, [r1, #0]
   24e2a:	e002      	b.n	24e32 <interface_socket_event_get+0x2a>
   24e2c:	2c00      	cmp	r4, #0
   24e2e:	da01      	bge.n	24e34 <interface_socket_event_get+0x2c>
   24e30:	6008      	str	r0, [r1, #0]
   24e32:	bd10      	pop	{r4, pc}
   24e34:	2310      	movs	r3, #16
   24e36:	e7f7      	b.n	24e28 <interface_socket_event_get+0x20>

00024e38 <ip_recvd_packet_free_cb>:
   24e38:	b510      	push	{r4, lr}
   24e3a:	4604      	mov	r4, r0
   24e3c:	6800      	ldr	r0, [r0, #0]
   24e3e:	f7ff feab 	bl	24b98 <rpc_client_data_free>
   24e42:	68a0      	ldr	r0, [r4, #8]
   24e44:	b118      	cbz	r0, 24e4e <ip_recvd_packet_free_cb+0x16>
   24e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24e4a:	f7f1 bc35 	b.w	166b8 <nrf_modem_os_free>
   24e4e:	bd10      	pop	{r4, pc}

00024e50 <protocol_verify>:
   24e50:	b508      	push	{r3, lr}
   24e52:	4603      	mov	r3, r0
   24e54:	b171      	cbz	r1, 24e74 <protocol_verify+0x24>
   24e56:	2801      	cmp	r0, #1
   24e58:	d108      	bne.n	24e6c <protocol_verify+0x1c>
   24e5a:	2901      	cmp	r1, #1
   24e5c:	d014      	beq.n	24e88 <protocol_verify+0x38>
   24e5e:	206b      	movs	r0, #107	; 0x6b
   24e60:	f7fe fde5 	bl	23a2e <nrf_modem_os_errno_set>
   24e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24e68:	4608      	mov	r0, r1
   24e6a:	bd08      	pop	{r3, pc}
   24e6c:	2802      	cmp	r0, #2
   24e6e:	d10b      	bne.n	24e88 <protocol_verify+0x38>
   24e70:	2902      	cmp	r1, #2
   24e72:	e7f3      	b.n	24e5c <protocol_verify+0xc>
   24e74:	2801      	cmp	r0, #1
   24e76:	d101      	bne.n	24e7c <protocol_verify+0x2c>
   24e78:	6013      	str	r3, [r2, #0]
   24e7a:	e7f5      	b.n	24e68 <protocol_verify+0x18>
   24e7c:	2803      	cmp	r0, #3
   24e7e:	d101      	bne.n	24e84 <protocol_verify+0x34>
   24e80:	6011      	str	r1, [r2, #0]
   24e82:	e7f1      	b.n	24e68 <protocol_verify+0x18>
   24e84:	2302      	movs	r3, #2
   24e86:	e7f7      	b.n	24e78 <protocol_verify+0x28>
   24e88:	2100      	movs	r1, #0
   24e8a:	e7ed      	b.n	24e68 <protocol_verify+0x18>

00024e8c <ip_addr_parse>:
   24e8c:	b570      	push	{r4, r5, r6, lr}
   24e8e:	684d      	ldr	r5, [r1, #4]
   24e90:	e9dd 6404 	ldrd	r6, r4, [sp, #16]
   24e94:	4285      	cmp	r5, r0
   24e96:	d11f      	bne.n	24ed8 <ip_addr_parse+0x4c>
   24e98:	7808      	ldrb	r0, [r1, #0]
   24e9a:	4290      	cmp	r0, r2
   24e9c:	d11e      	bne.n	24edc <ip_addr_parse+0x50>
   24e9e:	2d02      	cmp	r5, #2
   24ea0:	d109      	bne.n	24eb6 <ip_addr_parse+0x2a>
   24ea2:	2810      	cmp	r0, #16
   24ea4:	d11a      	bne.n	24edc <ip_addr_parse+0x50>
   24ea6:	890a      	ldrh	r2, [r1, #8]
   24ea8:	8032      	strh	r2, [r6, #0]
   24eaa:	2204      	movs	r2, #4
   24eac:	801a      	strh	r2, [r3, #0]
   24eae:	68cb      	ldr	r3, [r1, #12]
   24eb0:	6023      	str	r3, [r4, #0]
   24eb2:	2000      	movs	r0, #0
   24eb4:	bd70      	pop	{r4, r5, r6, pc}
   24eb6:	2d0a      	cmp	r5, #10
   24eb8:	d110      	bne.n	24edc <ip_addr_parse+0x50>
   24eba:	2824      	cmp	r0, #36	; 0x24
   24ebc:	d10e      	bne.n	24edc <ip_addr_parse+0x50>
   24ebe:	890a      	ldrh	r2, [r1, #8]
   24ec0:	8032      	strh	r2, [r6, #0]
   24ec2:	2210      	movs	r2, #16
   24ec4:	801a      	strh	r2, [r3, #0]
   24ec6:	188b      	adds	r3, r1, r2
   24ec8:	3120      	adds	r1, #32
   24eca:	f853 2b04 	ldr.w	r2, [r3], #4
   24ece:	428b      	cmp	r3, r1
   24ed0:	f844 2b04 	str.w	r2, [r4], #4
   24ed4:	d1f9      	bne.n	24eca <ip_addr_parse+0x3e>
   24ed6:	e7ec      	b.n	24eb2 <ip_addr_parse+0x26>
   24ed8:	206a      	movs	r0, #106	; 0x6a
   24eda:	e7eb      	b.n	24eb4 <ip_addr_parse+0x28>
   24edc:	2016      	movs	r0, #22
   24ede:	e7e9      	b.n	24eb4 <ip_addr_parse+0x28>

00024ee0 <ip_interface_request_create>:
   24ee0:	b570      	push	{r4, r5, r6, lr}
   24ee2:	4606      	mov	r6, r0
   24ee4:	4618      	mov	r0, r3
   24ee6:	460d      	mov	r5, r1
   24ee8:	4614      	mov	r4, r2
   24eea:	f7ff fe45 	bl	24b78 <rpc_client_request_alloc>
   24eee:	b148      	cbz	r0, 24f04 <ip_interface_request_create+0x24>
   24ef0:	2300      	movs	r3, #0
   24ef2:	2208      	movs	r2, #8
   24ef4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   24ef8:	60c4      	str	r4, [r0, #12]
   24efa:	6105      	str	r5, [r0, #16]
   24efc:	7202      	strb	r2, [r0, #8]
   24efe:	7243      	strb	r3, [r0, #9]
   24f00:	7283      	strb	r3, [r0, #10]
   24f02:	72c3      	strb	r3, [r0, #11]
   24f04:	bd70      	pop	{r4, r5, r6, pc}

00024f06 <ip_interface_wait>:
   24f06:	b538      	push	{r3, r4, r5, lr}
   24f08:	4605      	mov	r5, r0
   24f0a:	f7f6 ff53 	bl	1bdb4 <interface_socket_wait>
   24f0e:	4604      	mov	r4, r0
   24f10:	b938      	cbnz	r0, 24f22 <ip_interface_wait+0x1c>
   24f12:	4628      	mov	r0, r5
   24f14:	f7f6 ffc8 	bl	1bea8 <interface_socket_from_handle_get>
   24f18:	b118      	cbz	r0, 24f22 <ip_interface_wait+0x1c>
   24f1a:	6844      	ldr	r4, [r0, #4]
   24f1c:	b10c      	cbz	r4, 24f22 <ip_interface_wait+0x1c>
   24f1e:	2300      	movs	r3, #0
   24f20:	6043      	str	r3, [r0, #4]
   24f22:	4620      	mov	r0, r4
   24f24:	bd38      	pop	{r3, r4, r5, pc}

00024f26 <ip_interface_recvfrom>:
   24f26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f2a:	b087      	sub	sp, #28
   24f2c:	4681      	mov	r9, r0
   24f2e:	461e      	mov	r6, r3
   24f30:	4690      	mov	r8, r2
   24f32:	9f11      	ldr	r7, [sp, #68]	; 0x44
   24f34:	9101      	str	r1, [sp, #4]
   24f36:	2a00      	cmp	r2, #0
   24f38:	f000 80e8 	beq.w	2510c <ip_interface_recvfrom+0x1e6>
   24f3c:	b11b      	cbz	r3, 24f46 <ip_interface_recvfrom+0x20>
   24f3e:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   24f42:	f000 80e5 	beq.w	25110 <ip_interface_recvfrom+0x1ea>
   24f46:	4648      	mov	r0, r9
   24f48:	f7f6 ffae 	bl	1bea8 <interface_socket_from_handle_get>
   24f4c:	4604      	mov	r4, r0
   24f4e:	2800      	cmp	r0, #0
   24f50:	f000 80e0 	beq.w	25114 <ip_interface_recvfrom+0x1ee>
   24f54:	6803      	ldr	r3, [r0, #0]
   24f56:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   24f5a:	d10f      	bne.n	24f7c <ip_interface_recvfrom+0x56>
   24f5c:	6802      	ldr	r2, [r0, #0]
   24f5e:	b292      	uxth	r2, r2
   24f60:	2a06      	cmp	r2, #6
   24f62:	f000 809e 	beq.w	250a2 <ip_interface_recvfrom+0x17c>
   24f66:	6802      	ldr	r2, [r0, #0]
   24f68:	461e      	mov	r6, r3
   24f6a:	b292      	uxth	r2, r2
   24f6c:	2a07      	cmp	r2, #7
   24f6e:	469a      	mov	sl, r3
   24f70:	f000 8099 	beq.w	250a6 <ip_interface_recvfrom+0x180>
   24f74:	2280      	movs	r2, #128	; 0x80
   24f76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   24f7a:	e084      	b.n	25086 <ip_interface_recvfrom+0x160>
   24f7c:	07b1      	lsls	r1, r6, #30
   24f7e:	d422      	bmi.n	24fc6 <ip_interface_recvfrom+0xa0>
   24f80:	6803      	ldr	r3, [r0, #0]
   24f82:	00da      	lsls	r2, r3, #3
   24f84:	d522      	bpl.n	24fcc <ip_interface_recvfrom+0xa6>
   24f86:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   24f8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   24f8e:	f006 0b10 	and.w	fp, r6, #16
   24f92:	6822      	ldr	r2, [r4, #0]
   24f94:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   24f98:	d01b      	beq.n	24fd2 <ip_interface_recvfrom+0xac>
   24f9a:	6822      	ldr	r2, [r4, #0]
   24f9c:	69e0      	ldr	r0, [r4, #28]
   24f9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   24fa2:	6022      	str	r2, [r4, #0]
   24fa4:	6802      	ldr	r2, [r0, #0]
   24fa6:	68d2      	ldr	r2, [r2, #12]
   24fa8:	4790      	blx	r2
   24faa:	1c43      	adds	r3, r0, #1
   24fac:	4605      	mov	r5, r0
   24fae:	d029      	beq.n	25004 <ip_interface_recvfrom+0xde>
   24fb0:	4580      	cmp	r8, r0
   24fb2:	dd05      	ble.n	24fc0 <ip_interface_recvfrom+0x9a>
   24fb4:	6923      	ldr	r3, [r4, #16]
   24fb6:	2b01      	cmp	r3, #1
   24fb8:	d102      	bne.n	24fc0 <ip_interface_recvfrom+0x9a>
   24fba:	f1bb 0f00 	cmp.w	fp, #0
   24fbe:	d125      	bne.n	2500c <ip_interface_recvfrom+0xe6>
   24fc0:	f04f 0a00 	mov.w	sl, #0
   24fc4:	e04a      	b.n	2505c <ip_interface_recvfrom+0x136>
   24fc6:	f04f 0a00 	mov.w	sl, #0
   24fca:	e7de      	b.n	24f8a <ip_interface_recvfrom+0x64>
   24fcc:	f04f 0a01 	mov.w	sl, #1
   24fd0:	e7db      	b.n	24f8a <ip_interface_recvfrom+0x64>
   24fd2:	6821      	ldr	r1, [r4, #0]
   24fd4:	0308      	lsls	r0, r1, #12
   24fd6:	d515      	bpl.n	25004 <ip_interface_recvfrom+0xde>
   24fd8:	6821      	ldr	r1, [r4, #0]
   24fda:	b289      	uxth	r1, r1
   24fdc:	290d      	cmp	r1, #13
   24fde:	d011      	beq.n	25004 <ip_interface_recvfrom+0xde>
   24fe0:	6923      	ldr	r3, [r4, #16]
   24fe2:	2b01      	cmp	r3, #1
   24fe4:	f000 809e 	beq.w	25124 <ip_interface_recvfrom+0x1fe>
   24fe8:	4692      	mov	sl, r2
   24fea:	2280      	movs	r2, #128	; 0x80
   24fec:	6823      	ldr	r3, [r4, #0]
   24fee:	0c1b      	lsrs	r3, r3, #16
   24ff0:	041b      	lsls	r3, r3, #16
   24ff2:	f043 030d 	orr.w	r3, r3, #13
   24ff6:	6023      	str	r3, [r4, #0]
   24ff8:	6823      	ldr	r3, [r4, #0]
   24ffa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   24ffe:	6023      	str	r3, [r4, #0]
   25000:	2600      	movs	r6, #0
   25002:	e040      	b.n	25086 <ip_interface_recvfrom+0x160>
   25004:	f1ba 0f00 	cmp.w	sl, #0
   25008:	f000 808d 	beq.w	25126 <ip_interface_recvfrom+0x200>
   2500c:	6a23      	ldr	r3, [r4, #32]
   2500e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25012:	2b00      	cmp	r3, #0
   25014:	bf08      	it	eq
   25016:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2501a:	4611      	mov	r1, r2
   2501c:	9302      	str	r3, [sp, #8]
   2501e:	4648      	mov	r0, r9
   25020:	ab02      	add	r3, sp, #8
   25022:	f7ff ff70 	bl	24f06 <ip_interface_wait>
   25026:	6823      	ldr	r3, [r4, #0]
   25028:	4602      	mov	r2, r0
   2502a:	b29b      	uxth	r3, r3
   2502c:	b933      	cbnz	r3, 2503c <ip_interface_recvfrom+0x116>
   2502e:	2204      	movs	r2, #4
   25030:	4610      	mov	r0, r2
   25032:	f7fe fcfc 	bl	23a2e <nrf_modem_os_errno_set>
   25036:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2503a:	e046      	b.n	250ca <ip_interface_recvfrom+0x1a4>
   2503c:	2800      	cmp	r0, #0
   2503e:	d06b      	beq.n	25118 <ip_interface_recvfrom+0x1f2>
   25040:	6823      	ldr	r3, [r4, #0]
   25042:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   25046:	d06a      	beq.n	2511e <ip_interface_recvfrom+0x1f8>
   25048:	6823      	ldr	r3, [r4, #0]
   2504a:	b29b      	uxth	r3, r3
   2504c:	2b0d      	cmp	r3, #13
   2504e:	d066      	beq.n	2511e <ip_interface_recvfrom+0x1f8>
   25050:	6923      	ldr	r3, [r4, #16]
   25052:	1e59      	subs	r1, r3, #1
   25054:	f1d1 0a00 	rsbs	sl, r1, #0
   25058:	eb4a 0a01 	adc.w	sl, sl, r1
   2505c:	b107      	cbz	r7, 25060 <ip_interface_recvfrom+0x13a>
   2505e:	683f      	ldr	r7, [r7, #0]
   25060:	9a10      	ldr	r2, [sp, #64]	; 0x40
   25062:	69e0      	ldr	r0, [r4, #28]
   25064:	e9cd 2704 	strd	r2, r7, [sp, #16]
   25068:	9b01      	ldr	r3, [sp, #4]
   2506a:	6802      	ldr	r2, [r0, #0]
   2506c:	e9cd 3802 	strd	r3, r8, [sp, #8]
   25070:	6895      	ldr	r5, [r2, #8]
   25072:	a902      	add	r1, sp, #8
   25074:	4632      	mov	r2, r6
   25076:	47a8      	blx	r5
   25078:	1c42      	adds	r2, r0, #1
   2507a:	4605      	mov	r5, r0
   2507c:	bf0b      	itete	eq
   2507e:	2600      	moveq	r6, #0
   25080:	2601      	movne	r6, #1
   25082:	220b      	moveq	r2, #11
   25084:	2200      	movne	r2, #0
   25086:	69e0      	ldr	r0, [r4, #28]
   25088:	9201      	str	r2, [sp, #4]
   2508a:	6801      	ldr	r1, [r0, #0]
   2508c:	68c9      	ldr	r1, [r1, #12]
   2508e:	4788      	blx	r1
   25090:	3001      	adds	r0, #1
   25092:	9a01      	ldr	r2, [sp, #4]
   25094:	d009      	beq.n	250aa <ip_interface_recvfrom+0x184>
   25096:	6823      	ldr	r3, [r4, #0]
   25098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2509c:	6023      	str	r3, [r4, #0]
   2509e:	b1a2      	cbz	r2, 250ca <ip_interface_recvfrom+0x1a4>
   250a0:	e7c6      	b.n	25030 <ip_interface_recvfrom+0x10a>
   250a2:	461e      	mov	r6, r3
   250a4:	469a      	mov	sl, r3
   250a6:	2209      	movs	r2, #9
   250a8:	e765      	b.n	24f76 <ip_interface_recvfrom+0x50>
   250aa:	f1ba 0f00 	cmp.w	sl, #0
   250ae:	d010      	beq.n	250d2 <ip_interface_recvfrom+0x1ac>
   250b0:	2e00      	cmp	r6, #0
   250b2:	d1f4      	bne.n	2509e <ip_interface_recvfrom+0x178>
   250b4:	4635      	mov	r5, r6
   250b6:	6823      	ldr	r3, [r4, #0]
   250b8:	0c1b      	lsrs	r3, r3, #16
   250ba:	041b      	lsls	r3, r3, #16
   250bc:	f043 030d 	orr.w	r3, r3, #13
   250c0:	6023      	str	r3, [r4, #0]
   250c2:	6823      	ldr	r3, [r4, #0]
   250c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   250c8:	6023      	str	r3, [r4, #0]
   250ca:	4628      	mov	r0, r5
   250cc:	b007      	add	sp, #28
   250ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250d2:	2e00      	cmp	r6, #0
   250d4:	d1e3      	bne.n	2509e <ip_interface_recvfrom+0x178>
   250d6:	6823      	ldr	r3, [r4, #0]
   250d8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   250dc:	6823      	ldr	r3, [r4, #0]
   250de:	d00a      	beq.n	250f6 <ip_interface_recvfrom+0x1d0>
   250e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   250e4:	6023      	str	r3, [r4, #0]
   250e6:	6823      	ldr	r3, [r4, #0]
   250e8:	2269      	movs	r2, #105	; 0x69
   250ea:	0c1b      	lsrs	r3, r3, #16
   250ec:	041b      	lsls	r3, r3, #16
   250ee:	f043 030d 	orr.w	r3, r3, #13
   250f2:	6023      	str	r3, [r4, #0]
   250f4:	e79c      	b.n	25030 <ip_interface_recvfrom+0x10a>
   250f6:	031b      	lsls	r3, r3, #12
   250f8:	d5d1      	bpl.n	2509e <ip_interface_recvfrom+0x178>
   250fa:	6823      	ldr	r3, [r4, #0]
   250fc:	b29b      	uxth	r3, r3
   250fe:	2b0d      	cmp	r3, #13
   25100:	d1cd      	bne.n	2509e <ip_interface_recvfrom+0x178>
   25102:	68a3      	ldr	r3, [r4, #8]
   25104:	2b00      	cmp	r3, #0
   25106:	d0ca      	beq.n	2509e <ip_interface_recvfrom+0x178>
   25108:	68a2      	ldr	r2, [r4, #8]
   2510a:	e7c8      	b.n	2509e <ip_interface_recvfrom+0x178>
   2510c:	2216      	movs	r2, #22
   2510e:	e78f      	b.n	25030 <ip_interface_recvfrom+0x10a>
   25110:	225f      	movs	r2, #95	; 0x5f
   25112:	e78d      	b.n	25030 <ip_interface_recvfrom+0x10a>
   25114:	2209      	movs	r2, #9
   25116:	e78b      	b.n	25030 <ip_interface_recvfrom+0x10a>
   25118:	f04f 0a01 	mov.w	sl, #1
   2511c:	e739      	b.n	24f92 <ip_interface_recvfrom+0x6c>
   2511e:	2600      	movs	r6, #0
   25120:	46b2      	mov	sl, r6
   25122:	e7b0      	b.n	25086 <ip_interface_recvfrom+0x160>
   25124:	469a      	mov	sl, r3
   25126:	220b      	movs	r2, #11
   25128:	e76a      	b.n	25000 <ip_interface_recvfrom+0xda>

0002512a <ip_interface_connect>:
   2512a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2512e:	4606      	mov	r6, r0
   25130:	4691      	mov	r9, r2
   25132:	460f      	mov	r7, r1
   25134:	b085      	sub	sp, #20
   25136:	2900      	cmp	r1, #0
   25138:	d067      	beq.n	2520a <ip_interface_connect+0xe0>
   2513a:	2a00      	cmp	r2, #0
   2513c:	d065      	beq.n	2520a <ip_interface_connect+0xe0>
   2513e:	f7f6 feb3 	bl	1bea8 <interface_socket_from_handle_get>
   25142:	4604      	mov	r4, r0
   25144:	2800      	cmp	r0, #0
   25146:	d062      	beq.n	2520e <ip_interface_connect+0xe4>
   25148:	6803      	ldr	r3, [r0, #0]
   2514a:	b29b      	uxth	r3, r3
   2514c:	2b02      	cmp	r3, #2
   2514e:	d003      	beq.n	25158 <ip_interface_connect+0x2e>
   25150:	6803      	ldr	r3, [r0, #0]
   25152:	b29b      	uxth	r3, r3
   25154:	2b04      	cmp	r3, #4
   25156:	d151      	bne.n	251fc <ip_interface_connect+0xd2>
   25158:	6823      	ldr	r3, [r4, #0]
   2515a:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   2515e:	d158      	bne.n	25212 <ip_interface_connect+0xe8>
   25160:	f247 0202 	movw	r2, #28674	; 0x7002
   25164:	4630      	mov	r0, r6
   25166:	69a1      	ldr	r1, [r4, #24]
   25168:	f7ff feba 	bl	24ee0 <ip_interface_request_create>
   2516c:	4605      	mov	r5, r0
   2516e:	2800      	cmp	r0, #0
   25170:	d051      	beq.n	25216 <ip_interface_connect+0xec>
   25172:	f247 0802 	movw	r8, #28674	; 0x7002
   25176:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   2517a:	60c3      	str	r3, [r0, #12]
   2517c:	69a3      	ldr	r3, [r4, #24]
   2517e:	464a      	mov	r2, r9
   25180:	6103      	str	r3, [r0, #16]
   25182:	6883      	ldr	r3, [r0, #8]
   25184:	4639      	mov	r1, r7
   25186:	3304      	adds	r3, #4
   25188:	6083      	str	r3, [r0, #8]
   2518a:	f100 0318 	add.w	r3, r0, #24
   2518e:	9301      	str	r3, [sp, #4]
   25190:	f10d 030a 	add.w	r3, sp, #10
   25194:	9300      	str	r3, [sp, #0]
   25196:	68e0      	ldr	r0, [r4, #12]
   25198:	ab02      	add	r3, sp, #8
   2519a:	f7ff fe77 	bl	24e8c <ip_addr_parse>
   2519e:	bb30      	cbnz	r0, 251ee <ip_interface_connect+0xc4>
   251a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   251a4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   251a8:	82ab      	strh	r3, [r5, #20]
   251aa:	68ab      	ldr	r3, [r5, #8]
   251ac:	6827      	ldr	r7, [r4, #0]
   251ae:	4413      	add	r3, r2
   251b0:	60ab      	str	r3, [r5, #8]
   251b2:	6823      	ldr	r3, [r4, #0]
   251b4:	82ea      	strh	r2, [r5, #22]
   251b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   251ba:	6023      	str	r3, [r4, #0]
   251bc:	462a      	mov	r2, r5
   251be:	4641      	mov	r1, r8
   251c0:	2004      	movs	r0, #4
   251c2:	f7ff fcdf 	bl	24b84 <rpc_client_request_send>
   251c6:	6823      	ldr	r3, [r4, #0]
   251c8:	00db      	lsls	r3, r3, #3
   251ca:	d426      	bmi.n	2521a <ip_interface_connect+0xf0>
   251cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   251ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   251d2:	2b00      	cmp	r3, #0
   251d4:	bf08      	it	eq
   251d6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   251da:	2105      	movs	r1, #5
   251dc:	9303      	str	r3, [sp, #12]
   251de:	4630      	mov	r0, r6
   251e0:	ab03      	add	r3, sp, #12
   251e2:	f7ff fe90 	bl	24f06 <ip_interface_wait>
   251e6:	b130      	cbz	r0, 251f6 <ip_interface_connect+0xcc>
   251e8:	2877      	cmp	r0, #119	; 0x77
   251ea:	d000      	beq.n	251ee <ip_interface_connect+0xc4>
   251ec:	6027      	str	r7, [r4, #0]
   251ee:	f7fe fc1e 	bl	23a2e <nrf_modem_os_errno_set>
   251f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   251f6:	b005      	add	sp, #20
   251f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   251fc:	6803      	ldr	r3, [r0, #0]
   251fe:	b29b      	uxth	r3, r3
   25200:	2b05      	cmp	r3, #5
   25202:	bf14      	ite	ne
   25204:	2009      	movne	r0, #9
   25206:	207f      	moveq	r0, #127	; 0x7f
   25208:	e7f1      	b.n	251ee <ip_interface_connect+0xc4>
   2520a:	2016      	movs	r0, #22
   2520c:	e7ef      	b.n	251ee <ip_interface_connect+0xc4>
   2520e:	2009      	movs	r0, #9
   25210:	e7ed      	b.n	251ee <ip_interface_connect+0xc4>
   25212:	2078      	movs	r0, #120	; 0x78
   25214:	e7eb      	b.n	251ee <ip_interface_connect+0xc4>
   25216:	200c      	movs	r0, #12
   25218:	e7e9      	b.n	251ee <ip_interface_connect+0xc4>
   2521a:	2077      	movs	r0, #119	; 0x77
   2521c:	e7e7      	b.n	251ee <ip_interface_connect+0xc4>

0002521e <getopt_check_and_send_int>:
   2521e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25220:	4604      	mov	r4, r0
   25222:	460d      	mov	r5, r1
   25224:	4618      	mov	r0, r3
   25226:	4611      	mov	r1, r2
   25228:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2522c:	b18b      	cbz	r3, 25252 <getopt_check_and_send_int+0x34>
   2522e:	681e      	ldr	r6, [r3, #0]
   25230:	b17e      	cbz	r6, 25252 <getopt_check_and_send_int+0x34>
   25232:	b172      	cbz	r2, 25252 <getopt_check_and_send_int+0x34>
   25234:	e9cd 2300 	strd	r2, r3, [sp]
   25238:	462b      	mov	r3, r5
   2523a:	4622      	mov	r2, r4
   2523c:	f7f7 f91a 	bl	1c474 <ip_interface_socketoption_get>
   25240:	4603      	mov	r3, r0
   25242:	b118      	cbz	r0, 2524c <getopt_check_and_send_int+0x2e>
   25244:	f7fe fbf3 	bl	23a2e <nrf_modem_os_errno_set>
   25248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2524c:	4618      	mov	r0, r3
   2524e:	b002      	add	sp, #8
   25250:	bd70      	pop	{r4, r5, r6, pc}
   25252:	2016      	movs	r0, #22
   25254:	e7f6      	b.n	25244 <getopt_check_and_send_int+0x26>

00025256 <ip_interface_socketoption_send>:
   25256:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2525a:	4698      	mov	r8, r3
   2525c:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   25260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25264:	9301      	str	r3, [sp, #4]
   25266:	680b      	ldr	r3, [r1, #0]
   25268:	4606      	mov	r6, r0
   2526a:	025d      	lsls	r5, r3, #9
   2526c:	460c      	mov	r4, r1
   2526e:	4692      	mov	sl, r2
   25270:	d43a      	bmi.n	252e8 <ip_interface_socketoption_send+0x92>
   25272:	680b      	ldr	r3, [r1, #0]
   25274:	0219      	lsls	r1, r3, #8
   25276:	d437      	bmi.n	252e8 <ip_interface_socketoption_send+0x92>
   25278:	6823      	ldr	r3, [r4, #0]
   2527a:	01da      	lsls	r2, r3, #7
   2527c:	d434      	bmi.n	252e8 <ip_interface_socketoption_send+0x92>
   2527e:	6823      	ldr	r3, [r4, #0]
   25280:	019b      	lsls	r3, r3, #6
   25282:	d431      	bmi.n	252e8 <ip_interface_socketoption_send+0x92>
   25284:	f8d4 9000 	ldr.w	r9, [r4]
   25288:	6823      	ldr	r3, [r4, #0]
   2528a:	f247 0203 	movw	r2, #28675	; 0x7003
   2528e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   25292:	6023      	str	r3, [r4, #0]
   25294:	69a1      	ldr	r1, [r4, #24]
   25296:	463b      	mov	r3, r7
   25298:	f7ff fe22 	bl	24ee0 <ip_interface_request_create>
   2529c:	4605      	mov	r5, r0
   2529e:	b308      	cbz	r0, 252e4 <ip_interface_socketoption_send+0x8e>
   252a0:	6883      	ldr	r3, [r0, #8]
   252a2:	f8c0 a014 	str.w	sl, [r0, #20]
   252a6:	3308      	adds	r3, #8
   252a8:	6083      	str	r3, [r0, #8]
   252aa:	f8c0 8018 	str.w	r8, [r0, #24]
   252ae:	b13f      	cbz	r7, 252c0 <ip_interface_socketoption_send+0x6a>
   252b0:	f1bb 0f00 	cmp.w	fp, #0
   252b4:	d004      	beq.n	252c0 <ip_interface_socketoption_send+0x6a>
   252b6:	463a      	mov	r2, r7
   252b8:	4659      	mov	r1, fp
   252ba:	6800      	ldr	r0, [r0, #0]
   252bc:	f001 fac1 	bl	26842 <memcpy>
   252c0:	462a      	mov	r2, r5
   252c2:	f247 0103 	movw	r1, #28675	; 0x7003
   252c6:	2004      	movs	r0, #4
   252c8:	f7ff fc5c 	bl	24b84 <rpc_client_request_send>
   252cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   252d0:	4630      	mov	r0, r6
   252d2:	4611      	mov	r1, r2
   252d4:	ab01      	add	r3, sp, #4
   252d6:	f7ff fe16 	bl	24f06 <ip_interface_wait>
   252da:	f8c4 9000 	str.w	r9, [r4]
   252de:	b003      	add	sp, #12
   252e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252e4:	200c      	movs	r0, #12
   252e6:	e7f8      	b.n	252da <ip_interface_socketoption_send+0x84>
   252e8:	200b      	movs	r0, #11
   252ea:	e7f8      	b.n	252de <ip_interface_socketoption_send+0x88>

000252ec <setopt_check_and_send_int>:
   252ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   252ee:	4604      	mov	r4, r0
   252f0:	460d      	mov	r5, r1
   252f2:	4618      	mov	r0, r3
   252f4:	4611      	mov	r1, r2
   252f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   252fa:	2a04      	cmp	r2, #4
   252fc:	d10f      	bne.n	2531e <setopt_check_and_send_int+0x32>
   252fe:	b173      	cbz	r3, 2531e <setopt_check_and_send_int+0x32>
   25300:	e9cd 3200 	strd	r3, r2, [sp]
   25304:	462b      	mov	r3, r5
   25306:	4622      	mov	r2, r4
   25308:	f7ff ffa5 	bl	25256 <ip_interface_socketoption_send>
   2530c:	4603      	mov	r3, r0
   2530e:	b118      	cbz	r0, 25318 <setopt_check_and_send_int+0x2c>
   25310:	f7fe fb8d 	bl	23a2e <nrf_modem_os_errno_set>
   25314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25318:	4618      	mov	r0, r3
   2531a:	b003      	add	sp, #12
   2531c:	bd30      	pop	{r4, r5, pc}
   2531e:	2016      	movs	r0, #22
   25320:	e7f6      	b.n	25310 <setopt_check_and_send_int+0x24>

00025322 <ip_interface_getopt>:
   25322:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25326:	2901      	cmp	r1, #1
   25328:	4604      	mov	r4, r0
   2532a:	460f      	mov	r7, r1
   2532c:	4616      	mov	r6, r2
   2532e:	461d      	mov	r5, r3
   25330:	f8dd 8020 	ldr.w	r8, [sp, #32]
   25334:	d007      	beq.n	25346 <ip_interface_getopt+0x24>
   25336:	206d      	movs	r0, #109	; 0x6d
   25338:	f7fe fb79 	bl	23a2e <nrf_modem_os_errno_set>
   2533c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25340:	b002      	add	sp, #8
   25342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25346:	f7f6 fdaf 	bl	1bea8 <interface_socket_from_handle_get>
   2534a:	4602      	mov	r2, r0
   2534c:	b908      	cbnz	r0, 25352 <ip_interface_getopt+0x30>
   2534e:	2009      	movs	r0, #9
   25350:	e7f2      	b.n	25338 <ip_interface_getopt+0x16>
   25352:	2e28      	cmp	r6, #40	; 0x28
   25354:	dc0d      	bgt.n	25372 <ip_interface_getopt+0x50>
   25356:	2e1d      	cmp	r6, #29
   25358:	dd0d      	ble.n	25376 <ip_interface_getopt+0x54>
   2535a:	f1a6 031e 	sub.w	r3, r6, #30
   2535e:	2b0a      	cmp	r3, #10
   25360:	d809      	bhi.n	25376 <ip_interface_getopt+0x54>
   25362:	e8df f003 	tbb	[pc, r3]
   25366:	1d13      	.short	0x1d13
   25368:	08080824 	.word	0x08080824
   2536c:	08080808 	.word	0x08080808
   25370:	2b          	.byte	0x2b
   25371:	00          	.byte	0x00
   25372:	2e37      	cmp	r6, #55	; 0x37
   25374:	d029      	beq.n	253ca <ip_interface_getopt+0xa8>
   25376:	462b      	mov	r3, r5
   25378:	4632      	mov	r2, r6
   2537a:	2101      	movs	r1, #1
   2537c:	4620      	mov	r0, r4
   2537e:	f8cd 8020 	str.w	r8, [sp, #32]
   25382:	b002      	add	sp, #8
   25384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25388:	f7f6 bdd2 	b.w	1bf30 <interface_socket_getopt>
   2538c:	4623      	mov	r3, r4
   2538e:	f248 0101 	movw	r1, #32769	; 0x8001
   25392:	f44f 7000 	mov.w	r0, #512	; 0x200
   25396:	e9cd 5800 	strd	r5, r8, [sp]
   2539a:	f7ff ff40 	bl	2521e <getopt_check_and_send_int>
   2539e:	e7cf      	b.n	25340 <ip_interface_getopt+0x1e>
   253a0:	4623      	mov	r3, r4
   253a2:	f244 0110 	movw	r1, #16400	; 0x4010
   253a6:	2004      	movs	r0, #4
   253a8:	e9cd 5800 	strd	r5, r8, [sp]
   253ac:	e7f5      	b.n	2539a <ip_interface_getopt+0x78>
   253ae:	4623      	mov	r3, r4
   253b0:	f246 0110 	movw	r1, #24592	; 0x6010
   253b4:	2006      	movs	r0, #6
   253b6:	e9cd 5800 	strd	r5, r8, [sp]
   253ba:	e7ee      	b.n	2539a <ip_interface_getopt+0x78>
   253bc:	4623      	mov	r3, r4
   253be:	f241 0104 	movw	r1, #4100	; 0x1004
   253c2:	2008      	movs	r0, #8
   253c4:	e9cd 5800 	strd	r5, r8, [sp]
   253c8:	e7e7      	b.n	2539a <ip_interface_getopt+0x78>
   253ca:	4623      	mov	r3, r4
   253cc:	f245 0106 	movw	r1, #20486	; 0x5006
   253d0:	4638      	mov	r0, r7
   253d2:	e9cd 5800 	strd	r5, r8, [sp]
   253d6:	e7e0      	b.n	2539a <ip_interface_getopt+0x78>

000253d8 <attach_trigger_condition_verify>:
   253d8:	6903      	ldr	r3, [r0, #16]
   253da:	2b01      	cmp	r3, #1
   253dc:	d105      	bne.n	253ea <attach_trigger_condition_verify+0x12>
   253de:	6800      	ldr	r0, [r0, #0]
   253e0:	b280      	uxth	r0, r0
   253e2:	1f43      	subs	r3, r0, #5
   253e4:	4258      	negs	r0, r3
   253e6:	4158      	adcs	r0, r3
   253e8:	4770      	bx	lr
   253ea:	2b02      	cmp	r3, #2
   253ec:	d109      	bne.n	25402 <attach_trigger_condition_verify+0x2a>
   253ee:	6803      	ldr	r3, [r0, #0]
   253f0:	b29b      	uxth	r3, r3
   253f2:	2b02      	cmp	r3, #2
   253f4:	d003      	beq.n	253fe <attach_trigger_condition_verify+0x26>
   253f6:	6803      	ldr	r3, [r0, #0]
   253f8:	b29b      	uxth	r3, r3
   253fa:	2b04      	cmp	r3, #4
   253fc:	d1ef      	bne.n	253de <attach_trigger_condition_verify+0x6>
   253fe:	2001      	movs	r0, #1
   25400:	4770      	bx	lr
   25402:	2000      	movs	r0, #0
   25404:	4770      	bx	lr

00025406 <secure_client_socket>:
   25406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2540a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2540c:	9301      	str	r3, [sp, #4]
   2540e:	680b      	ldr	r3, [r1, #0]
   25410:	4606      	mov	r6, r0
   25412:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   25416:	600b      	str	r3, [r1, #0]
   25418:	680b      	ldr	r3, [r1, #0]
   2541a:	460c      	mov	r4, r1
   2541c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   25420:	600b      	str	r3, [r1, #0]
   25422:	680f      	ldr	r7, [r1, #0]
   25424:	463a      	mov	r2, r7
   25426:	f7f7 fe8f 	bl	1d148 <secure_socket_attach_initiate>
   2542a:	4605      	mov	r5, r0
   2542c:	b950      	cbnz	r0, 25444 <secure_client_socket+0x3e>
   2542e:	220c      	movs	r2, #12
   25430:	4630      	mov	r0, r6
   25432:	4611      	mov	r1, r2
   25434:	ab01      	add	r3, sp, #4
   25436:	f7ff fd66 	bl	24f06 <ip_interface_wait>
   2543a:	4605      	mov	r5, r0
   2543c:	b128      	cbz	r0, 2544a <secure_client_socket+0x44>
   2543e:	2877      	cmp	r0, #119	; 0x77
   25440:	d000      	beq.n	25444 <secure_client_socket+0x3e>
   25442:	6027      	str	r7, [r4, #0]
   25444:	4628      	mov	r0, r5
   25446:	b003      	add	sp, #12
   25448:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2544a:	4630      	mov	r0, r6
   2544c:	f7f7 fe6a 	bl	1d124 <hostname_free>
   25450:	6823      	ldr	r3, [r4, #0]
   25452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   25456:	6023      	str	r3, [r4, #0]
   25458:	6823      	ldr	r3, [r4, #0]
   2545a:	0c1b      	lsrs	r3, r3, #16
   2545c:	041b      	lsls	r3, r3, #16
   2545e:	f043 030c 	orr.w	r3, r3, #12
   25462:	6023      	str	r3, [r4, #0]
   25464:	6823      	ldr	r3, [r4, #0]
   25466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2546a:	6023      	str	r3, [r4, #0]
   2546c:	6823      	ldr	r3, [r4, #0]
   2546e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   25472:	6023      	str	r3, [r4, #0]
   25474:	e7e6      	b.n	25444 <secure_client_socket+0x3e>

00025476 <tls_interface_close>:
   25476:	b510      	push	{r4, lr}
   25478:	4604      	mov	r4, r0
   2547a:	f7f6 fd15 	bl	1bea8 <interface_socket_from_handle_get>
   2547e:	b138      	cbz	r0, 25490 <tls_interface_close+0x1a>
   25480:	4620      	mov	r0, r4
   25482:	f7f7 fe4f 	bl	1d124 <hostname_free>
   25486:	4620      	mov	r0, r4
   25488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2548c:	f7f6 be8e 	b.w	1c1ac <ip_interface_close>
   25490:	2009      	movs	r0, #9
   25492:	f7fe facc 	bl	23a2e <nrf_modem_os_errno_set>
   25496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2549a:	bd10      	pop	{r4, pc}

0002549c <nrf_modem_gnss_agps_write>:
   2549c:	b530      	push	{r4, r5, lr}
   2549e:	4615      	mov	r5, r2
   254a0:	4604      	mov	r4, r0
   254a2:	b09f      	sub	sp, #124	; 0x7c
   254a4:	2800      	cmp	r0, #0
   254a6:	d03e      	beq.n	25526 <nrf_modem_gnss_agps_write+0x8a>
   254a8:	2900      	cmp	r1, #0
   254aa:	d03c      	beq.n	25526 <nrf_modem_gnss_agps_write+0x8a>
   254ac:	2272      	movs	r2, #114	; 0x72
   254ae:	2100      	movs	r1, #0
   254b0:	a801      	add	r0, sp, #4
   254b2:	f001 f9e6 	bl	26882 <memset>
   254b6:	1e6a      	subs	r2, r5, #1
   254b8:	2a07      	cmp	r2, #7
   254ba:	d834      	bhi.n	25526 <nrf_modem_gnss_agps_write+0x8a>
   254bc:	e8df f002 	tbb	[pc, r2]
   254c0:	1a151004 	.word	0x1a151004
   254c4:	2e29241f 	.word	0x2e29241f
   254c8:	4620      	mov	r0, r4
   254ca:	a902      	add	r1, sp, #8
   254cc:	f7ff fb66 	bl	24b9c <rpc_gnss_serialize_utc>
   254d0:	2272      	movs	r2, #114	; 0x72
   254d2:	f241 0005 	movw	r0, #4101	; 0x1005
   254d6:	a901      	add	r1, sp, #4
   254d8:	f7f8 fc30 	bl	1dd3c <send_message>
   254dc:	b01f      	add	sp, #124	; 0x7c
   254de:	bd30      	pop	{r4, r5, pc}
   254e0:	4620      	mov	r0, r4
   254e2:	a902      	add	r1, sp, #8
   254e4:	f7ff fb77 	bl	24bd6 <rpc_gnss_serialize_ephe>
   254e8:	e7f2      	b.n	254d0 <nrf_modem_gnss_agps_write+0x34>
   254ea:	4620      	mov	r0, r4
   254ec:	a902      	add	r1, sp, #8
   254ee:	f7ff fbbc 	bl	24c6a <rpc_gnss_serialize_alm>
   254f2:	e7ed      	b.n	254d0 <nrf_modem_gnss_agps_write+0x34>
   254f4:	4620      	mov	r0, r4
   254f6:	a902      	add	r1, sp, #8
   254f8:	f7ff fbe4 	bl	24cc4 <rpc_gnss_serialize_klob>
   254fc:	e7e8      	b.n	254d0 <nrf_modem_gnss_agps_write+0x34>
   254fe:	4620      	mov	r0, r4
   25500:	a902      	add	r1, sp, #8
   25502:	f7ff fbfa 	bl	24cfa <rpc_gnss_serialize_nequick>
   25506:	e7e3      	b.n	254d0 <nrf_modem_gnss_agps_write+0x34>
   25508:	4620      	mov	r0, r4
   2550a:	a902      	add	r1, sp, #8
   2550c:	f7ff fc0a 	bl	24d24 <rpc_gnss_serialize_time_and_sv_tow>
   25510:	e7de      	b.n	254d0 <nrf_modem_gnss_agps_write+0x34>
   25512:	4620      	mov	r0, r4
   25514:	a902      	add	r1, sp, #8
   25516:	f7ff fc28 	bl	24d6a <rpc_gnss_serialize_location>
   2551a:	e7d9      	b.n	254d0 <nrf_modem_gnss_agps_write+0x34>
   2551c:	4620      	mov	r0, r4
   2551e:	a902      	add	r1, sp, #8
   25520:	f7ff fc40 	bl	24da4 <rpc_gnss_serialize_integrity>
   25524:	e7d4      	b.n	254d0 <nrf_modem_gnss_agps_write+0x34>
   25526:	f06f 0015 	mvn.w	r0, #21
   2552a:	e7d7      	b.n	254dc <nrf_modem_gnss_agps_write+0x40>

0002552c <null_handler_init>:
   2552c:	2000      	movs	r0, #0
   2552e:	4770      	bx	lr

00025530 <null_handler_put>:
   25530:	b510      	push	{r4, lr}
   25532:	460c      	mov	r4, r1
   25534:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   25538:	4620      	mov	r0, r4
   2553a:	4798      	blx	r3
   2553c:	6860      	ldr	r0, [r4, #4]
   2553e:	bd10      	pop	{r4, pc}

00025540 <null_handler_get>:
   25540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25544:	4770      	bx	lr

00025546 <null_handler_available>:
   25546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2554a:	4770      	bx	lr

0002554c <null_handler_flush>:
   2554c:	2000      	movs	r0, #0
   2554e:	4770      	bx	lr

00025550 <null_handler_free>:
   25550:	4770      	bx	lr

00025552 <stream_handler_free_packet>:
   25552:	b530      	push	{r4, r5, lr}
   25554:	4605      	mov	r5, r0
   25556:	b085      	sub	sp, #20
   25558:	68c0      	ldr	r0, [r0, #12]
   2555a:	f000 fb0e 	bl	25b7a <linked_list_pop>
   2555e:	4604      	mov	r4, r0
   25560:	b170      	cbz	r0, 25580 <stream_handler_free_packet+0x2e>
   25562:	6843      	ldr	r3, [r0, #4]
   25564:	9300      	str	r3, [sp, #0]
   25566:	6883      	ldr	r3, [r0, #8]
   25568:	9301      	str	r3, [sp, #4]
   2556a:	6903      	ldr	r3, [r0, #16]
   2556c:	9302      	str	r3, [sp, #8]
   2556e:	68c3      	ldr	r3, [r0, #12]
   25570:	4668      	mov	r0, sp
   25572:	9303      	str	r3, [sp, #12]
   25574:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   25578:	4798      	blx	r3
   2557a:	4620      	mov	r0, r4
   2557c:	f7f1 f89c 	bl	166b8 <nrf_modem_os_free>
   25580:	b005      	add	sp, #20
   25582:	bd30      	pop	{r4, r5, pc}

00025584 <stream_handler_init>:
   25584:	b510      	push	{r4, lr}
   25586:	4604      	mov	r4, r0
   25588:	200c      	movs	r0, #12
   2558a:	f7f1 f88b 	bl	166a4 <nrf_modem_os_alloc>
   2558e:	60e0      	str	r0, [r4, #12]
   25590:	b128      	cbz	r0, 2559e <stream_handler_init+0x1a>
   25592:	2300      	movs	r3, #0
   25594:	6123      	str	r3, [r4, #16]
   25596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2559a:	f000 bad2 	b.w	25b42 <linked_list_init>
   2559e:	200c      	movs	r0, #12
   255a0:	bd10      	pop	{r4, pc}

000255a2 <stream_handler_put>:
   255a2:	b570      	push	{r4, r5, r6, lr}
   255a4:	4606      	mov	r6, r0
   255a6:	2014      	movs	r0, #20
   255a8:	460d      	mov	r5, r1
   255aa:	f7f1 f87b 	bl	166a4 <nrf_modem_os_alloc>
   255ae:	4604      	mov	r4, r0
   255b0:	b178      	cbz	r0, 255d2 <stream_handler_put+0x30>
   255b2:	682b      	ldr	r3, [r5, #0]
   255b4:	4601      	mov	r1, r0
   255b6:	6043      	str	r3, [r0, #4]
   255b8:	686b      	ldr	r3, [r5, #4]
   255ba:	6083      	str	r3, [r0, #8]
   255bc:	68eb      	ldr	r3, [r5, #12]
   255be:	60c3      	str	r3, [r0, #12]
   255c0:	68ab      	ldr	r3, [r5, #8]
   255c2:	6103      	str	r3, [r0, #16]
   255c4:	68f0      	ldr	r0, [r6, #12]
   255c6:	f000 fac5 	bl	25b54 <linked_list_push>
   255ca:	b128      	cbz	r0, 255d8 <stream_handler_put+0x36>
   255cc:	4620      	mov	r0, r4
   255ce:	f7f1 f873 	bl	166b8 <nrf_modem_os_free>
   255d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   255d6:	e000      	b.n	255da <stream_handler_put+0x38>
   255d8:	6868      	ldr	r0, [r5, #4]
   255da:	bd70      	pop	{r4, r5, r6, pc}

000255dc <stream_handler_get>:
   255dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255e0:	4606      	mov	r6, r0
   255e2:	b085      	sub	sp, #20
   255e4:	68c0      	ldr	r0, [r0, #12]
   255e6:	468a      	mov	sl, r1
   255e8:	4617      	mov	r7, r2
   255ea:	f000 fad0 	bl	25b8e <linked_list_peek>
   255ee:	4604      	mov	r4, r0
   255f0:	2800      	cmp	r0, #0
   255f2:	d055      	beq.n	256a0 <stream_handler_get+0xc4>
   255f4:	f8da 0008 	ldr.w	r0, [sl, #8]
   255f8:	2800      	cmp	r0, #0
   255fa:	d049      	beq.n	25690 <stream_handler_get+0xb4>
   255fc:	6921      	ldr	r1, [r4, #16]
   255fe:	2900      	cmp	r1, #0
   25600:	d046      	beq.n	25690 <stream_handler_get+0xb4>
   25602:	68e2      	ldr	r2, [r4, #12]
   25604:	2a00      	cmp	r2, #0
   25606:	d043      	beq.n	25690 <stream_handler_get+0xb4>
   25608:	f8da 500c 	ldr.w	r5, [sl, #12]
   2560c:	42aa      	cmp	r2, r5
   2560e:	bf28      	it	cs
   25610:	462a      	movcs	r2, r5
   25612:	f8ca 200c 	str.w	r2, [sl, #12]
   25616:	f001 f914 	bl	26842 <memcpy>
   2561a:	2500      	movs	r5, #0
   2561c:	f8da 3004 	ldr.w	r3, [sl, #4]
   25620:	6931      	ldr	r1, [r6, #16]
   25622:	9301      	str	r3, [sp, #4]
   25624:	f8da 3000 	ldr.w	r3, [sl]
   25628:	9302      	str	r3, [sp, #8]
   2562a:	f007 0320 	and.w	r3, r7, #32
   2562e:	9303      	str	r3, [sp, #12]
   25630:	f007 0708 	and.w	r7, r7, #8
   25634:	9b01      	ldr	r3, [sp, #4]
   25636:	42ab      	cmp	r3, r5
   25638:	d924      	bls.n	25684 <stream_handler_get+0xa8>
   2563a:	68a2      	ldr	r2, [r4, #8]
   2563c:	9b01      	ldr	r3, [sp, #4]
   2563e:	eba2 0801 	sub.w	r8, r2, r1
   25642:	eba3 0b05 	sub.w	fp, r3, r5
   25646:	f8da 2000 	ldr.w	r2, [sl]
   2564a:	45d8      	cmp	r8, fp
   2564c:	46c1      	mov	r9, r8
   2564e:	bf28      	it	cs
   25650:	46d9      	movcs	r9, fp
   25652:	b142      	cbz	r2, 25666 <stream_handler_get+0x8a>
   25654:	9b03      	ldr	r3, [sp, #12]
   25656:	b933      	cbnz	r3, 25666 <stream_handler_get+0x8a>
   25658:	6860      	ldr	r0, [r4, #4]
   2565a:	9b02      	ldr	r3, [sp, #8]
   2565c:	4401      	add	r1, r0
   2565e:	464a      	mov	r2, r9
   25660:	1958      	adds	r0, r3, r5
   25662:	f001 f8ee 	bl	26842 <memcpy>
   25666:	4620      	mov	r0, r4
   25668:	f000 fa99 	bl	25b9e <linked_list_get_next>
   2566c:	4604      	mov	r4, r0
   2566e:	b92f      	cbnz	r7, 2567c <stream_handler_get+0xa0>
   25670:	45d8      	cmp	r8, fp
   25672:	d811      	bhi.n	25698 <stream_handler_get+0xbc>
   25674:	4630      	mov	r0, r6
   25676:	f7ff ff6c 	bl	25552 <stream_handler_free_packet>
   2567a:	6137      	str	r7, [r6, #16]
   2567c:	2100      	movs	r1, #0
   2567e:	444d      	add	r5, r9
   25680:	2c00      	cmp	r4, #0
   25682:	d1d7      	bne.n	25634 <stream_handler_get+0x58>
   25684:	4628      	mov	r0, r5
   25686:	f8ca 5004 	str.w	r5, [sl, #4]
   2568a:	b005      	add	sp, #20
   2568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25690:	2200      	movs	r2, #0
   25692:	f8ca 200c 	str.w	r2, [sl, #12]
   25696:	e7c0      	b.n	2561a <stream_handler_get+0x3e>
   25698:	6932      	ldr	r2, [r6, #16]
   2569a:	444a      	add	r2, r9
   2569c:	6132      	str	r2, [r6, #16]
   2569e:	e7ed      	b.n	2567c <stream_handler_get+0xa0>
   256a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   256a4:	e7f1      	b.n	2568a <stream_handler_get+0xae>

000256a6 <stream_handler_available>:
   256a6:	b510      	push	{r4, lr}
   256a8:	4604      	mov	r4, r0
   256aa:	68c0      	ldr	r0, [r0, #12]
   256ac:	f000 fa6f 	bl	25b8e <linked_list_peek>
   256b0:	b150      	cbz	r0, 256c8 <stream_handler_available+0x22>
   256b2:	6924      	ldr	r4, [r4, #16]
   256b4:	4264      	negs	r4, r4
   256b6:	6883      	ldr	r3, [r0, #8]
   256b8:	441c      	add	r4, r3
   256ba:	f000 fa70 	bl	25b9e <linked_list_get_next>
   256be:	2800      	cmp	r0, #0
   256c0:	d1f9      	bne.n	256b6 <stream_handler_available+0x10>
   256c2:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   256c6:	bd10      	pop	{r4, pc}
   256c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   256cc:	e7fb      	b.n	256c6 <stream_handler_available+0x20>

000256ce <stream_handler_flush>:
   256ce:	68c3      	ldr	r3, [r0, #12]
   256d0:	b510      	push	{r4, lr}
   256d2:	4604      	mov	r4, r0
   256d4:	b923      	cbnz	r3, 256e0 <stream_handler_flush+0x12>
   256d6:	2016      	movs	r0, #22
   256d8:	e007      	b.n	256ea <stream_handler_flush+0x1c>
   256da:	4620      	mov	r0, r4
   256dc:	f7ff ff39 	bl	25552 <stream_handler_free_packet>
   256e0:	68e0      	ldr	r0, [r4, #12]
   256e2:	f000 fa5a 	bl	25b9a <linked_list_size_get>
   256e6:	2800      	cmp	r0, #0
   256e8:	d1f7      	bne.n	256da <stream_handler_flush+0xc>
   256ea:	bd10      	pop	{r4, pc}

000256ec <stream_handler_free>:
   256ec:	68c3      	ldr	r3, [r0, #12]
   256ee:	b510      	push	{r4, lr}
   256f0:	4604      	mov	r4, r0
   256f2:	b133      	cbz	r3, 25702 <stream_handler_free+0x16>
   256f4:	f7ff ffeb 	bl	256ce <stream_handler_flush>
   256f8:	68e0      	ldr	r0, [r4, #12]
   256fa:	f7f0 ffdd 	bl	166b8 <nrf_modem_os_free>
   256fe:	2300      	movs	r3, #0
   25700:	60e3      	str	r3, [r4, #12]
   25702:	bd10      	pop	{r4, pc}

00025704 <datagram_handler_free_packet>:
   25704:	b530      	push	{r4, r5, lr}
   25706:	4605      	mov	r5, r0
   25708:	b085      	sub	sp, #20
   2570a:	68c0      	ldr	r0, [r0, #12]
   2570c:	f000 fa35 	bl	25b7a <linked_list_pop>
   25710:	4604      	mov	r4, r0
   25712:	b170      	cbz	r0, 25732 <datagram_handler_free_packet+0x2e>
   25714:	6843      	ldr	r3, [r0, #4]
   25716:	9300      	str	r3, [sp, #0]
   25718:	6883      	ldr	r3, [r0, #8]
   2571a:	9301      	str	r3, [sp, #4]
   2571c:	6903      	ldr	r3, [r0, #16]
   2571e:	9302      	str	r3, [sp, #8]
   25720:	68c3      	ldr	r3, [r0, #12]
   25722:	4668      	mov	r0, sp
   25724:	9303      	str	r3, [sp, #12]
   25726:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2572a:	4798      	blx	r3
   2572c:	4620      	mov	r0, r4
   2572e:	f7f0 ffc3 	bl	166b8 <nrf_modem_os_free>
   25732:	b005      	add	sp, #20
   25734:	bd30      	pop	{r4, r5, pc}

00025736 <datagram_handler_init>:
   25736:	b510      	push	{r4, lr}
   25738:	4604      	mov	r4, r0
   2573a:	200c      	movs	r0, #12
   2573c:	f7f0 ffb2 	bl	166a4 <nrf_modem_os_alloc>
   25740:	60e0      	str	r0, [r4, #12]
   25742:	b118      	cbz	r0, 2574c <datagram_handler_init+0x16>
   25744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25748:	f000 b9fb 	b.w	25b42 <linked_list_init>
   2574c:	200c      	movs	r0, #12
   2574e:	bd10      	pop	{r4, pc}

00025750 <datagram_handler_put>:
   25750:	b570      	push	{r4, r5, r6, lr}
   25752:	4606      	mov	r6, r0
   25754:	2014      	movs	r0, #20
   25756:	460d      	mov	r5, r1
   25758:	f7f0 ffa4 	bl	166a4 <nrf_modem_os_alloc>
   2575c:	4604      	mov	r4, r0
   2575e:	b178      	cbz	r0, 25780 <datagram_handler_put+0x30>
   25760:	682b      	ldr	r3, [r5, #0]
   25762:	4601      	mov	r1, r0
   25764:	6043      	str	r3, [r0, #4]
   25766:	686b      	ldr	r3, [r5, #4]
   25768:	6083      	str	r3, [r0, #8]
   2576a:	68eb      	ldr	r3, [r5, #12]
   2576c:	60c3      	str	r3, [r0, #12]
   2576e:	68ab      	ldr	r3, [r5, #8]
   25770:	6103      	str	r3, [r0, #16]
   25772:	68f0      	ldr	r0, [r6, #12]
   25774:	f000 f9ee 	bl	25b54 <linked_list_push>
   25778:	b128      	cbz	r0, 25786 <datagram_handler_put+0x36>
   2577a:	4620      	mov	r0, r4
   2577c:	f7f0 ff9c 	bl	166b8 <nrf_modem_os_free>
   25780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25784:	e000      	b.n	25788 <datagram_handler_put+0x38>
   25786:	6868      	ldr	r0, [r5, #4]
   25788:	bd70      	pop	{r4, r5, r6, pc}

0002578a <datagram_handler_get>:
   2578a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2578c:	4607      	mov	r7, r0
   2578e:	68c0      	ldr	r0, [r0, #12]
   25790:	460c      	mov	r4, r1
   25792:	4616      	mov	r6, r2
   25794:	f000 f9fb 	bl	25b8e <linked_list_peek>
   25798:	4605      	mov	r5, r0
   2579a:	b328      	cbz	r0, 257e8 <datagram_handler_get+0x5e>
   2579c:	6882      	ldr	r2, [r0, #8]
   2579e:	6863      	ldr	r3, [r4, #4]
   257a0:	6820      	ldr	r0, [r4, #0]
   257a2:	429a      	cmp	r2, r3
   257a4:	bf28      	it	cs
   257a6:	461a      	movcs	r2, r3
   257a8:	6062      	str	r2, [r4, #4]
   257aa:	b110      	cbz	r0, 257b2 <datagram_handler_get+0x28>
   257ac:	6869      	ldr	r1, [r5, #4]
   257ae:	f001 f848 	bl	26842 <memcpy>
   257b2:	68a0      	ldr	r0, [r4, #8]
   257b4:	b1a8      	cbz	r0, 257e2 <datagram_handler_get+0x58>
   257b6:	6929      	ldr	r1, [r5, #16]
   257b8:	b199      	cbz	r1, 257e2 <datagram_handler_get+0x58>
   257ba:	68eb      	ldr	r3, [r5, #12]
   257bc:	b18b      	cbz	r3, 257e2 <datagram_handler_get+0x58>
   257be:	68e2      	ldr	r2, [r4, #12]
   257c0:	429a      	cmp	r2, r3
   257c2:	bf28      	it	cs
   257c4:	461a      	movcs	r2, r3
   257c6:	60e2      	str	r2, [r4, #12]
   257c8:	f001 f83b 	bl	26842 <memcpy>
   257cc:	0732      	lsls	r2, r6, #28
   257ce:	68ad      	ldr	r5, [r5, #8]
   257d0:	d402      	bmi.n	257d8 <datagram_handler_get+0x4e>
   257d2:	4638      	mov	r0, r7
   257d4:	f7ff ff96 	bl	25704 <datagram_handler_free_packet>
   257d8:	06b3      	lsls	r3, r6, #26
   257da:	bf4c      	ite	mi
   257dc:	4628      	movmi	r0, r5
   257de:	6860      	ldrpl	r0, [r4, #4]
   257e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   257e2:	2300      	movs	r3, #0
   257e4:	60e3      	str	r3, [r4, #12]
   257e6:	e7f1      	b.n	257cc <datagram_handler_get+0x42>
   257e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   257ec:	e7f8      	b.n	257e0 <datagram_handler_get+0x56>

000257ee <datagram_handler_available>:
   257ee:	b508      	push	{r3, lr}
   257f0:	68c0      	ldr	r0, [r0, #12]
   257f2:	f000 f9cc 	bl	25b8e <linked_list_peek>
   257f6:	b108      	cbz	r0, 257fc <datagram_handler_available+0xe>
   257f8:	6880      	ldr	r0, [r0, #8]
   257fa:	bd08      	pop	{r3, pc}
   257fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25800:	e7fb      	b.n	257fa <datagram_handler_available+0xc>

00025802 <datagram_handler_flush>:
   25802:	68c3      	ldr	r3, [r0, #12]
   25804:	b510      	push	{r4, lr}
   25806:	4604      	mov	r4, r0
   25808:	b923      	cbnz	r3, 25814 <datagram_handler_flush+0x12>
   2580a:	2016      	movs	r0, #22
   2580c:	e007      	b.n	2581e <datagram_handler_flush+0x1c>
   2580e:	4620      	mov	r0, r4
   25810:	f7ff ff78 	bl	25704 <datagram_handler_free_packet>
   25814:	68e0      	ldr	r0, [r4, #12]
   25816:	f000 f9c0 	bl	25b9a <linked_list_size_get>
   2581a:	2800      	cmp	r0, #0
   2581c:	d1f7      	bne.n	2580e <datagram_handler_flush+0xc>
   2581e:	bd10      	pop	{r4, pc}

00025820 <datagram_handler_free>:
   25820:	68c3      	ldr	r3, [r0, #12]
   25822:	b510      	push	{r4, lr}
   25824:	4604      	mov	r4, r0
   25826:	b133      	cbz	r3, 25836 <datagram_handler_free+0x16>
   25828:	f7ff ffeb 	bl	25802 <datagram_handler_flush>
   2582c:	68e0      	ldr	r0, [r4, #12]
   2582e:	f7f0 ff43 	bl	166b8 <nrf_modem_os_free>
   25832:	2300      	movs	r3, #0
   25834:	60e3      	str	r3, [r4, #12]
   25836:	bd10      	pop	{r4, pc}

00025838 <packet_handler_delete>:
   25838:	b510      	push	{r4, lr}
   2583a:	4604      	mov	r4, r0
   2583c:	6803      	ldr	r3, [r0, #0]
   2583e:	691b      	ldr	r3, [r3, #16]
   25840:	4798      	blx	r3
   25842:	6823      	ldr	r3, [r4, #0]
   25844:	4620      	mov	r0, r4
   25846:	695b      	ldr	r3, [r3, #20]
   25848:	4798      	blx	r3
   2584a:	4620      	mov	r0, r4
   2584c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25850:	f7f0 bf32 	b.w	166b8 <nrf_modem_os_free>

00025854 <nrf_modem_recoverable_error_handler>:
   25854:	4770      	bx	lr

00025856 <nrf_modem_platform_error_handler>:
   25856:	b508      	push	{r3, lr}
   25858:	f7ff fffc 	bl	25854 <nrf_modem_recoverable_error_handler>
   2585c:	bd08      	pop	{r3, pc}

0002585e <unimplemented_method>:
   2585e:	b40f      	push	{r0, r1, r2, r3}
   25860:	b508      	push	{r3, lr}
   25862:	205f      	movs	r0, #95	; 0x5f
   25864:	f7fe f8e3 	bl	23a2e <nrf_modem_os_errno_set>
   25868:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2586c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25870:	b004      	add	sp, #16
   25872:	4770      	bx	lr

00025874 <rpc_transport_ipc_fault_handler>:
   25874:	f7ff bfef 	b.w	25856 <nrf_modem_platform_error_handler>

00025878 <nrf_modem_platform_init>:
   25878:	b513      	push	{r0, r1, r4, lr}
   2587a:	4604      	mov	r4, r0
   2587c:	f7f0 ff36 	bl	166ec <nrf_modem_os_init>
   25880:	6a23      	ldr	r3, [r4, #32]
   25882:	4668      	mov	r0, sp
   25884:	9400      	str	r4, [sp, #0]
   25886:	f88d 3004 	strb.w	r3, [sp, #4]
   2588a:	f7f6 f8e7 	bl	1ba5c <rpc_transport_ipc_init>
   2588e:	4604      	mov	r4, r0
   25890:	b948      	cbnz	r0, 258a6 <nrf_modem_platform_init+0x2e>
   25892:	f7f6 fa37 	bl	1bd04 <interface_init>
   25896:	f7f8 f909 	bl	1daac <nrf_modem_at_init>
   2589a:	4604      	mov	r4, r0
   2589c:	b918      	cbnz	r0, 258a6 <nrf_modem_platform_init+0x2e>
   2589e:	f7f6 fbf1 	bl	1c084 <ip_interface_init>
   258a2:	f7f7 fca3 	bl	1d1ec <tls_interface_init>
   258a6:	4620      	mov	r0, r4
   258a8:	b002      	add	sp, #8
   258aa:	bd10      	pop	{r4, pc}

000258ac <nrf_modem_platform_fd_method_table_get>:
   258ac:	b510      	push	{r4, lr}
   258ae:	f7f6 fafb 	bl	1bea8 <interface_socket_from_handle_get>
   258b2:	4604      	mov	r4, r0
   258b4:	b130      	cbz	r0, 258c4 <nrf_modem_platform_fd_method_table_get+0x18>
   258b6:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   258ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   258be:	68c0      	ldr	r0, [r0, #12]
   258c0:	f7f8 bf60 	b.w	1e784 <nrf_modem_platform_af_method_table_get>
   258c4:	2009      	movs	r0, #9
   258c6:	f7fe f8b2 	bl	23a2e <nrf_modem_os_errno_set>
   258ca:	4620      	mov	r0, r4
   258cc:	bd10      	pop	{r4, pc}

000258ce <internal_poll>:
   258ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   258d2:	2600      	movs	r6, #0
   258d4:	4688      	mov	r8, r1
   258d6:	4604      	mov	r4, r0
   258d8:	4637      	mov	r7, r6
   258da:	4546      	cmp	r6, r8
   258dc:	d103      	bne.n	258e6 <internal_poll+0x18>
   258de:	4638      	mov	r0, r7
   258e0:	b002      	add	sp, #8
   258e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   258e6:	88a5      	ldrh	r5, [r4, #4]
   258e8:	6820      	ldr	r0, [r4, #0]
   258ea:	a901      	add	r1, sp, #4
   258ec:	f7ff fa8c 	bl	24e08 <interface_socket_event_get>
   258f0:	f005 0503 	and.w	r5, r5, #3
   258f4:	9b01      	ldr	r3, [sp, #4]
   258f6:	f045 051c 	orr.w	r5, r5, #28
   258fa:	401d      	ands	r5, r3
   258fc:	6820      	ldr	r0, [r4, #0]
   258fe:	80e5      	strh	r5, [r4, #6]
   25900:	f7f6 fad2 	bl	1bea8 <interface_socket_from_handle_get>
   25904:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   25908:	b168      	cbz	r0, 25926 <internal_poll+0x58>
   2590a:	071a      	lsls	r2, r3, #28
   2590c:	d50b      	bpl.n	25926 <internal_poll+0x58>
   2590e:	6942      	ldr	r2, [r0, #20]
   25910:	2a01      	cmp	r2, #1
   25912:	d003      	beq.n	2591c <internal_poll+0x4e>
   25914:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   25918:	2a01      	cmp	r2, #1
   2591a:	d802      	bhi.n	25922 <internal_poll+0x54>
   2591c:	f043 0301 	orr.w	r3, r3, #1
   25920:	80e3      	strh	r3, [r4, #6]
   25922:	3701      	adds	r7, #1
   25924:	e001      	b.n	2592a <internal_poll+0x5c>
   25926:	2b00      	cmp	r3, #0
   25928:	d1fb      	bne.n	25922 <internal_poll+0x54>
   2592a:	3601      	adds	r6, #1
   2592c:	3408      	adds	r4, #8
   2592e:	e7d4      	b.n	258da <internal_poll+0xc>

00025930 <nrf_modem_platform_getaddrinfo>:
   25930:	f7f7 b854 	b.w	1c9dc <ip_interface_getaddrinfo>

00025934 <nrf_modem_platform_freeaddrinfo>:
   25934:	f7f7 b950 	b.w	1cbd8 <ip_interface_freeaddrinfo>

00025938 <nrf_modem_platform_poll>:
   25938:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2593a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   2593e:	2908      	cmp	r1, #8
   25940:	4605      	mov	r5, r0
   25942:	460e      	mov	r6, r1
   25944:	9201      	str	r2, [sp, #4]
   25946:	d906      	bls.n	25956 <nrf_modem_platform_poll+0x1e>
   25948:	2016      	movs	r0, #22
   2594a:	f7fe f870 	bl	23a2e <nrf_modem_os_errno_set>
   2594e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25952:	b002      	add	sp, #8
   25954:	bd70      	pop	{r4, r5, r6, pc}
   25956:	b910      	cbnz	r0, 2595e <nrf_modem_platform_poll+0x26>
   25958:	b109      	cbz	r1, 2595e <nrf_modem_platform_poll+0x26>
   2595a:	200e      	movs	r0, #14
   2595c:	e7f5      	b.n	2594a <nrf_modem_platform_poll+0x12>
   2595e:	4631      	mov	r1, r6
   25960:	4628      	mov	r0, r5
   25962:	f7ff ffb4 	bl	258ce <internal_poll>
   25966:	2400      	movs	r4, #0
   25968:	2800      	cmp	r0, #0
   2596a:	d1f2      	bne.n	25952 <nrf_modem_platform_poll+0x1a>
   2596c:	2c00      	cmp	r4, #0
   2596e:	d1f0      	bne.n	25952 <nrf_modem_platform_poll+0x1a>
   25970:	4628      	mov	r0, r5
   25972:	a901      	add	r1, sp, #4
   25974:	f7fd ffc3 	bl	238fe <nrf_modem_os_timedwait>
   25978:	4604      	mov	r4, r0
   2597a:	b118      	cbz	r0, 25984 <nrf_modem_platform_poll+0x4c>
   2597c:	2874      	cmp	r0, #116	; 0x74
   2597e:	d001      	beq.n	25984 <nrf_modem_platform_poll+0x4c>
   25980:	200b      	movs	r0, #11
   25982:	e7e2      	b.n	2594a <nrf_modem_platform_poll+0x12>
   25984:	4631      	mov	r1, r6
   25986:	4628      	mov	r0, r5
   25988:	f7ff ffa1 	bl	258ce <internal_poll>
   2598c:	e7ec      	b.n	25968 <nrf_modem_platform_poll+0x30>

0002598e <nrf_modem_platform_fcntl>:
   2598e:	f7f6 bb1d 	b.w	1bfcc <interface_socket_fcntl>

00025992 <nrf_socket>:
   25992:	b570      	push	{r4, r5, r6, lr}
   25994:	4604      	mov	r4, r0
   25996:	460d      	mov	r5, r1
   25998:	4616      	mov	r6, r2
   2599a:	f7f8 fef3 	bl	1e784 <nrf_modem_platform_af_method_table_get>
   2599e:	b130      	cbz	r0, 259ae <nrf_socket+0x1c>
   259a0:	4632      	mov	r2, r6
   259a2:	4629      	mov	r1, r5
   259a4:	6803      	ldr	r3, [r0, #0]
   259a6:	4620      	mov	r0, r4
   259a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   259ac:	4718      	bx	r3
   259ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   259b2:	bd70      	pop	{r4, r5, r6, pc}

000259b4 <nrf_close>:
   259b4:	b510      	push	{r4, lr}
   259b6:	4604      	mov	r4, r0
   259b8:	f7ff ff78 	bl	258ac <nrf_modem_platform_fd_method_table_get>
   259bc:	b120      	cbz	r0, 259c8 <nrf_close+0x14>
   259be:	6843      	ldr	r3, [r0, #4]
   259c0:	4620      	mov	r0, r4
   259c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   259c6:	4718      	bx	r3
   259c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   259cc:	bd10      	pop	{r4, pc}

000259ce <nrf_sendto>:
   259ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   259d0:	4604      	mov	r4, r0
   259d2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   259d6:	e9cd 2102 	strd	r2, r1, [sp, #8]
   259da:	9301      	str	r3, [sp, #4]
   259dc:	f7ff ff66 	bl	258ac <nrf_modem_platform_fd_method_table_get>
   259e0:	b158      	cbz	r0, 259fa <nrf_sendto+0x2c>
   259e2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   259e6:	e9cd 5608 	strd	r5, r6, [sp, #32]
   259ea:	6885      	ldr	r5, [r0, #8]
   259ec:	4620      	mov	r0, r4
   259ee:	46ac      	mov	ip, r5
   259f0:	9903      	ldr	r1, [sp, #12]
   259f2:	b004      	add	sp, #16
   259f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   259f8:	4760      	bx	ip
   259fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   259fe:	b004      	add	sp, #16
   25a00:	bd70      	pop	{r4, r5, r6, pc}

00025a02 <nrf_recvfrom>:
   25a02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   25a04:	4604      	mov	r4, r0
   25a06:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   25a0a:	e9cd 2102 	strd	r2, r1, [sp, #8]
   25a0e:	9301      	str	r3, [sp, #4]
   25a10:	f7ff ff4c 	bl	258ac <nrf_modem_platform_fd_method_table_get>
   25a14:	b158      	cbz	r0, 25a2e <nrf_recvfrom+0x2c>
   25a16:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   25a1a:	e9cd 5608 	strd	r5, r6, [sp, #32]
   25a1e:	68c5      	ldr	r5, [r0, #12]
   25a20:	4620      	mov	r0, r4
   25a22:	46ac      	mov	ip, r5
   25a24:	9903      	ldr	r1, [sp, #12]
   25a26:	b004      	add	sp, #16
   25a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25a2c:	4760      	bx	ip
   25a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25a32:	b004      	add	sp, #16
   25a34:	bd70      	pop	{r4, r5, r6, pc}

00025a36 <nrf_connect>:
   25a36:	b513      	push	{r0, r1, r4, lr}
   25a38:	4604      	mov	r4, r0
   25a3a:	e9cd 2100 	strd	r2, r1, [sp]
   25a3e:	f7ff ff35 	bl	258ac <nrf_modem_platform_fd_method_table_get>
   25a42:	b138      	cbz	r0, 25a54 <nrf_connect+0x1e>
   25a44:	e9dd 2100 	ldrd	r2, r1, [sp]
   25a48:	6943      	ldr	r3, [r0, #20]
   25a4a:	4620      	mov	r0, r4
   25a4c:	b002      	add	sp, #8
   25a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25a52:	4718      	bx	r3
   25a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25a58:	b002      	add	sp, #8
   25a5a:	bd10      	pop	{r4, pc}

00025a5c <nrf_listen>:
   25a5c:	b513      	push	{r0, r1, r4, lr}
   25a5e:	4604      	mov	r4, r0
   25a60:	9101      	str	r1, [sp, #4]
   25a62:	f7ff ff23 	bl	258ac <nrf_modem_platform_fd_method_table_get>
   25a66:	b130      	cbz	r0, 25a76 <nrf_listen+0x1a>
   25a68:	6983      	ldr	r3, [r0, #24]
   25a6a:	4620      	mov	r0, r4
   25a6c:	9901      	ldr	r1, [sp, #4]
   25a6e:	b002      	add	sp, #8
   25a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25a74:	4718      	bx	r3
   25a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25a7a:	b002      	add	sp, #8
   25a7c:	bd10      	pop	{r4, pc}

00025a7e <nrf_accept>:
   25a7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25a80:	4604      	mov	r4, r0
   25a82:	e9cd 2100 	strd	r2, r1, [sp]
   25a86:	f7ff ff11 	bl	258ac <nrf_modem_platform_fd_method_table_get>
   25a8a:	b148      	cbz	r0, 25aa0 <nrf_accept+0x22>
   25a8c:	e9dd 2100 	ldrd	r2, r1, [sp]
   25a90:	69c5      	ldr	r5, [r0, #28]
   25a92:	2300      	movs	r3, #0
   25a94:	4620      	mov	r0, r4
   25a96:	46ac      	mov	ip, r5
   25a98:	b003      	add	sp, #12
   25a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   25a9e:	4760      	bx	ip
   25aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25aa4:	b003      	add	sp, #12
   25aa6:	bd30      	pop	{r4, r5, pc}

00025aa8 <nrf_bind>:
   25aa8:	b513      	push	{r0, r1, r4, lr}
   25aaa:	4604      	mov	r4, r0
   25aac:	e9cd 2100 	strd	r2, r1, [sp]
   25ab0:	f7ff fefc 	bl	258ac <nrf_modem_platform_fd_method_table_get>
   25ab4:	b138      	cbz	r0, 25ac6 <nrf_bind+0x1e>
   25ab6:	e9dd 2100 	ldrd	r2, r1, [sp]
   25aba:	6903      	ldr	r3, [r0, #16]
   25abc:	4620      	mov	r0, r4
   25abe:	b002      	add	sp, #8
   25ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25ac4:	4718      	bx	r3
   25ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25aca:	b002      	add	sp, #8
   25acc:	bd10      	pop	{r4, pc}

00025ace <nrf_setsockopt>:
   25ace:	b530      	push	{r4, r5, lr}
   25ad0:	b085      	sub	sp, #20
   25ad2:	4604      	mov	r4, r0
   25ad4:	e9cd 2102 	strd	r2, r1, [sp, #8]
   25ad8:	9d08      	ldr	r5, [sp, #32]
   25ada:	9301      	str	r3, [sp, #4]
   25adc:	f7ff fee6 	bl	258ac <nrf_modem_platform_fd_method_table_get>
   25ae0:	b150      	cbz	r0, 25af8 <nrf_setsockopt+0x2a>
   25ae2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   25ae6:	9508      	str	r5, [sp, #32]
   25ae8:	6a05      	ldr	r5, [r0, #32]
   25aea:	4620      	mov	r0, r4
   25aec:	46ac      	mov	ip, r5
   25aee:	9903      	ldr	r1, [sp, #12]
   25af0:	b005      	add	sp, #20
   25af2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   25af6:	4760      	bx	ip
   25af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25afc:	b005      	add	sp, #20
   25afe:	bd30      	pop	{r4, r5, pc}

00025b00 <nrf_getsockopt>:
   25b00:	b530      	push	{r4, r5, lr}
   25b02:	b085      	sub	sp, #20
   25b04:	4604      	mov	r4, r0
   25b06:	e9cd 2102 	strd	r2, r1, [sp, #8]
   25b0a:	9d08      	ldr	r5, [sp, #32]
   25b0c:	9301      	str	r3, [sp, #4]
   25b0e:	f7ff fecd 	bl	258ac <nrf_modem_platform_fd_method_table_get>
   25b12:	b150      	cbz	r0, 25b2a <nrf_getsockopt+0x2a>
   25b14:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   25b18:	9508      	str	r5, [sp, #32]
   25b1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   25b1c:	4620      	mov	r0, r4
   25b1e:	46ac      	mov	ip, r5
   25b20:	9903      	ldr	r1, [sp, #12]
   25b22:	b005      	add	sp, #20
   25b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   25b28:	4760      	bx	ip
   25b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b2e:	b005      	add	sp, #20
   25b30:	bd30      	pop	{r4, r5, pc}

00025b32 <nrf_getaddrinfo>:
   25b32:	f7ff befd 	b.w	25930 <nrf_modem_platform_getaddrinfo>

00025b36 <nrf_freeaddrinfo>:
   25b36:	f7ff befd 	b.w	25934 <nrf_modem_platform_freeaddrinfo>

00025b3a <nrf_poll>:
   25b3a:	f7ff befd 	b.w	25938 <nrf_modem_platform_poll>

00025b3e <nrf_fcntl>:
   25b3e:	f7ff bf26 	b.w	2598e <nrf_modem_platform_fcntl>

00025b42 <linked_list_init>:
   25b42:	b128      	cbz	r0, 25b50 <linked_list_init+0xe>
   25b44:	2300      	movs	r3, #0
   25b46:	e9c0 3301 	strd	r3, r3, [r0, #4]
   25b4a:	6003      	str	r3, [r0, #0]
   25b4c:	4618      	mov	r0, r3
   25b4e:	4770      	bx	lr
   25b50:	2016      	movs	r0, #22
   25b52:	4770      	bx	lr

00025b54 <linked_list_push>:
   25b54:	6803      	ldr	r3, [r0, #0]
   25b56:	3301      	adds	r3, #1
   25b58:	d00d      	beq.n	25b76 <linked_list_push+0x22>
   25b5a:	2300      	movs	r3, #0
   25b5c:	600b      	str	r3, [r1, #0]
   25b5e:	6803      	ldr	r3, [r0, #0]
   25b60:	b933      	cbnz	r3, 25b70 <linked_list_push+0x1c>
   25b62:	6041      	str	r1, [r0, #4]
   25b64:	6803      	ldr	r3, [r0, #0]
   25b66:	6081      	str	r1, [r0, #8]
   25b68:	3301      	adds	r3, #1
   25b6a:	6003      	str	r3, [r0, #0]
   25b6c:	2000      	movs	r0, #0
   25b6e:	4770      	bx	lr
   25b70:	6883      	ldr	r3, [r0, #8]
   25b72:	6019      	str	r1, [r3, #0]
   25b74:	e7f6      	b.n	25b64 <linked_list_push+0x10>
   25b76:	200c      	movs	r0, #12
   25b78:	4770      	bx	lr

00025b7a <linked_list_pop>:
   25b7a:	4603      	mov	r3, r0
   25b7c:	6800      	ldr	r0, [r0, #0]
   25b7e:	b128      	cbz	r0, 25b8c <linked_list_pop+0x12>
   25b80:	6858      	ldr	r0, [r3, #4]
   25b82:	6802      	ldr	r2, [r0, #0]
   25b84:	605a      	str	r2, [r3, #4]
   25b86:	681a      	ldr	r2, [r3, #0]
   25b88:	3a01      	subs	r2, #1
   25b8a:	601a      	str	r2, [r3, #0]
   25b8c:	4770      	bx	lr

00025b8e <linked_list_peek>:
   25b8e:	6803      	ldr	r3, [r0, #0]
   25b90:	b10b      	cbz	r3, 25b96 <linked_list_peek+0x8>
   25b92:	6840      	ldr	r0, [r0, #4]
   25b94:	4770      	bx	lr
   25b96:	4618      	mov	r0, r3
   25b98:	4770      	bx	lr

00025b9a <linked_list_size_get>:
   25b9a:	6800      	ldr	r0, [r0, #0]
   25b9c:	4770      	bx	lr

00025b9e <linked_list_get_next>:
   25b9e:	6800      	ldr	r0, [r0, #0]
   25ba0:	4770      	bx	lr

00025ba2 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   25ba2:	b148      	cbz	r0, 25bb8 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   25ba4:	68c3      	ldr	r3, [r0, #12]
   25ba6:	8818      	ldrh	r0, [r3, #0]
   25ba8:	f3c0 0008 	ubfx	r0, r0, #0, #9
   25bac:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   25bb0:	bf14      	ite	ne
   25bb2:	2000      	movne	r0, #0
   25bb4:	2001      	moveq	r0, #1
   25bb6:	4770      	bx	lr
		return false;
   25bb8:	2000      	movs	r0, #0
}
   25bba:	4770      	bx	lr

00025bbc <k_heap_init>:
{
   25bbc:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   25bbe:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   25bc2:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   25bc4:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   25bc6:	f7fc fb74 	bl	222b2 <sys_heap_init>
}
   25bca:	bd10      	pop	{r4, pc}

00025bcc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   25bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25bd0:	b087      	sub	sp, #28
   25bd2:	4680      	mov	r8, r0
   25bd4:	9103      	str	r1, [sp, #12]
   25bd6:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25bd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   25bdc:	f000 fcfe 	bl	265dc <sys_clock_timeout_end_calc>
   25be0:	4681      	mov	r9, r0
   25be2:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25be4:	f108 0314 	add.w	r3, r8, #20
   25be8:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   25bea:	f04f 0320 	mov.w	r3, #32
   25bee:	f3ef 8511 	mrs	r5, BASEPRI
   25bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   25bf6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   25bfa:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   25bfe:	4654      	mov	r4, sl

	while (ret == NULL) {
   25c00:	e00f      	b.n	25c22 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   25c02:	e9cd 6700 	strd	r6, r7, [sp]
   25c06:	f108 020c 	add.w	r2, r8, #12
   25c0a:	4629      	mov	r1, r5
   25c0c:	9805      	ldr	r0, [sp, #20]
   25c0e:	f7f9 fec7 	bl	1f9a0 <z_pend_curr>
   25c12:	f04f 0320 	mov.w	r3, #32
   25c16:	f3ef 8511 	mrs	r5, BASEPRI
   25c1a:	f383 8812 	msr	BASEPRI_MAX, r3
   25c1e:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   25c22:	b9b4      	cbnz	r4, 25c52 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   25c24:	9a04      	ldr	r2, [sp, #16]
   25c26:	9903      	ldr	r1, [sp, #12]
   25c28:	4640      	mov	r0, r8
   25c2a:	f7fc fad1 	bl	221d0 <sys_heap_aligned_alloc>
   25c2e:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   25c30:	f7fa fa6a 	bl	20108 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   25c34:	b96c      	cbnz	r4, 25c52 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   25c36:	ebb9 0600 	subs.w	r6, r9, r0
   25c3a:	eb6b 0701 	sbc.w	r7, fp, r1
   25c3e:	2e01      	cmp	r6, #1
   25c40:	f177 0300 	sbcs.w	r3, r7, #0
   25c44:	db05      	blt.n	25c52 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   25c46:	f1ba 0f00 	cmp.w	sl, #0
   25c4a:	d1da      	bne.n	25c02 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   25c4c:	f04f 0a01 	mov.w	sl, #1
   25c50:	e7d7      	b.n	25c02 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   25c52:	f385 8811 	msr	BASEPRI, r5
   25c56:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   25c5a:	4620      	mov	r0, r4
   25c5c:	b007      	add	sp, #28
   25c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025c62 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   25c62:	b500      	push	{lr}
   25c64:	b083      	sub	sp, #12
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   25c66:	e9cd 2300 	strd	r2, r3, [sp]
   25c6a:	460a      	mov	r2, r1
   25c6c:	2104      	movs	r1, #4
   25c6e:	f7ff ffad 	bl	25bcc <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   25c72:	b003      	add	sp, #12
   25c74:	f85d fb04 	ldr.w	pc, [sp], #4

00025c78 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   25c78:	b570      	push	{r4, r5, r6, lr}
   25c7a:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25c7c:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   25c80:	f04f 0320 	mov.w	r3, #32
   25c84:	f3ef 8511 	mrs	r5, BASEPRI
   25c88:	f383 8812 	msr	BASEPRI_MAX, r3
   25c8c:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   25c90:	f7fc fa5a 	bl	22148 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   25c94:	f104 000c 	add.w	r0, r4, #12
   25c98:	f000 fbd0 	bl	2643c <z_unpend_all>
   25c9c:	b920      	cbnz	r0, 25ca8 <k_heap_free+0x30>
	__asm__ volatile(
   25c9e:	f385 8811 	msr	BASEPRI, r5
   25ca2:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   25ca6:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   25ca8:	4629      	mov	r1, r5
   25caa:	4630      	mov	r0, r6
   25cac:	f7f9 fd14 	bl	1f6d8 <z_reschedule>
   25cb0:	e7f9      	b.n	25ca6 <k_heap_free+0x2e>

00025cb2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   25cb2:	68c2      	ldr	r2, [r0, #12]
   25cb4:	6903      	ldr	r3, [r0, #16]
   25cb6:	431a      	orrs	r2, r3
   25cb8:	f012 0203 	ands.w	r2, r2, #3
   25cbc:	d10d      	bne.n	25cda <create_free_list+0x28>
	slab->free_list = NULL;
   25cbe:	2100      	movs	r1, #0
   25cc0:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   25cc2:	e005      	b.n	25cd0 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   25cc4:	6941      	ldr	r1, [r0, #20]
   25cc6:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   25cc8:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   25cca:	68c1      	ldr	r1, [r0, #12]
   25ccc:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   25cce:	3201      	adds	r2, #1
   25cd0:	6881      	ldr	r1, [r0, #8]
   25cd2:	4291      	cmp	r1, r2
   25cd4:	d8f6      	bhi.n	25cc4 <create_free_list+0x12>
	return 0;
   25cd6:	2000      	movs	r0, #0
   25cd8:	4770      	bx	lr
		return -EINVAL;
   25cda:	f06f 0015 	mvn.w	r0, #21
}
   25cde:	4770      	bx	lr

00025ce0 <k_mem_slab_init>:
{
   25ce0:	b510      	push	{r4, lr}
   25ce2:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   25ce4:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   25ce6:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   25ce8:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   25cea:	2300      	movs	r3, #0
   25cec:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   25cee:	f7ff ffe0 	bl	25cb2 <create_free_list>
	if (rc < 0) {
   25cf2:	2800      	cmp	r0, #0
   25cf4:	db01      	blt.n	25cfa <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   25cf6:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   25cf8:	6064      	str	r4, [r4, #4]
}
   25cfa:	bd10      	pop	{r4, pc}

00025cfc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   25cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25cfe:	4604      	mov	r4, r0
   25d00:	460d      	mov	r5, r1
	__asm__ volatile(
   25d02:	f04f 0320 	mov.w	r3, #32
   25d06:	f3ef 8611 	mrs	r6, BASEPRI
   25d0a:	f383 8812 	msr	BASEPRI_MAX, r3
   25d0e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   25d12:	6943      	ldr	r3, [r0, #20]
   25d14:	b163      	cbz	r3, 25d30 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   25d16:	682b      	ldr	r3, [r5, #0]
   25d18:	6962      	ldr	r2, [r4, #20]
   25d1a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   25d1c:	682b      	ldr	r3, [r5, #0]
   25d1e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   25d20:	69a3      	ldr	r3, [r4, #24]
   25d22:	3b01      	subs	r3, #1
   25d24:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   25d26:	f386 8811 	msr	BASEPRI, r6
   25d2a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   25d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25d30:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   25d34:	f000 fb57 	bl	263e6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   25d38:	2800      	cmp	r0, #0
   25d3a:	d0ec      	beq.n	25d16 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   25d3c:	682a      	ldr	r2, [r5, #0]
   25d3e:	2100      	movs	r1, #0
   25d40:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   25d44:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   25d46:	f000 fa8c 	bl	26262 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   25d4a:	4631      	mov	r1, r6
   25d4c:	4638      	mov	r0, r7
   25d4e:	f7f9 fcc3 	bl	1f6d8 <z_reschedule>
			return;
   25d52:	e7ec      	b.n	25d2e <k_mem_slab_free+0x32>

00025d54 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25d54:	3207      	adds	r2, #7
   25d56:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   25d5a:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   25d5e:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   25d62:	2300      	movs	r3, #0
   25d64:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
   25d68:	1888      	adds	r0, r1, r2
   25d6a:	4770      	bx	lr

00025d6c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25d6c:	f3ef 8005 	mrs	r0, IPSR
}
   25d70:	3800      	subs	r0, #0
   25d72:	bf18      	it	ne
   25d74:	2001      	movne	r0, #1
   25d76:	4770      	bx	lr

00025d78 <k_thread_name_get>:
}
   25d78:	3078      	adds	r0, #120	; 0x78
   25d7a:	4770      	bx	lr

00025d7c <z_impl_k_thread_start>:
{
   25d7c:	b508      	push	{r3, lr}
	z_sched_start(thread);
   25d7e:	f7f9 fdd5 	bl	1f92c <z_sched_start>
}
   25d82:	bd08      	pop	{r3, pc}

00025d84 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   25d84:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   25d86:	2400      	movs	r4, #0
   25d88:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   25d8a:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   25d8c:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   25d8e:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   25d90:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   25d92:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   25d94:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   25d96:	f85d 4b04 	ldr.w	r4, [sp], #4
   25d9a:	4770      	bx	lr

00025d9c <z_impl_k_thread_create>:
{
   25d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d9e:	b087      	sub	sp, #28
   25da0:	4604      	mov	r4, r0
   25da2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25da6:	2500      	movs	r5, #0
   25da8:	9505      	str	r5, [sp, #20]
   25daa:	9d10      	ldr	r5, [sp, #64]	; 0x40
   25dac:	9504      	str	r5, [sp, #16]
   25dae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   25db0:	9503      	str	r5, [sp, #12]
   25db2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   25db4:	9502      	str	r5, [sp, #8]
   25db6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   25db8:	9501      	str	r5, [sp, #4]
   25dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   25dbc:	9500      	str	r5, [sp, #0]
   25dbe:	f7f8 ffaf 	bl	1ed20 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   25dc2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   25dc6:	bf08      	it	eq
   25dc8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   25dcc:	d102      	bne.n	25dd4 <z_impl_k_thread_create+0x38>
}
   25dce:	4620      	mov	r0, r4
   25dd0:	b007      	add	sp, #28
   25dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   25dd4:	4632      	mov	r2, r6
   25dd6:	463b      	mov	r3, r7
   25dd8:	4620      	mov	r0, r4
   25dda:	f7f8 ff8f 	bl	1ecfc <schedule_new_thread>
   25dde:	e7f6      	b.n	25dce <z_impl_k_thread_create+0x32>

00025de0 <z_pm_save_idle_exit>:
{
   25de0:	b508      	push	{r3, lr}
	pm_system_resume();
   25de2:	f7ed fe4d 	bl	13a80 <pm_system_resume>
	sys_clock_idle_exit();
   25de6:	f7fd fd05 	bl	237f4 <sys_clock_idle_exit>
}
   25dea:	bd08      	pop	{r3, pc}

00025dec <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   25dec:	4288      	cmp	r0, r1
   25dee:	da00      	bge.n	25df2 <new_prio_for_inheritance+0x6>
   25df0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   25df2:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   25df6:	db01      	blt.n	25dfc <new_prio_for_inheritance+0x10>
   25df8:	4608      	mov	r0, r1
   25dfa:	4770      	bx	lr
   25dfc:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   25e00:	4770      	bx	lr

00025e02 <adjust_owner_prio>:
{
   25e02:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   25e04:	6880      	ldr	r0, [r0, #8]
   25e06:	f990 300e 	ldrsb.w	r3, [r0, #14]
   25e0a:	428b      	cmp	r3, r1
   25e0c:	d101      	bne.n	25e12 <adjust_owner_prio+0x10>
	return false;
   25e0e:	2000      	movs	r0, #0
}
   25e10:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   25e12:	f7f9 fdd9 	bl	1f9c8 <z_set_prio>
   25e16:	e7fb      	b.n	25e10 <adjust_owner_prio+0xe>

00025e18 <z_impl_k_mutex_init>:
{
   25e18:	4603      	mov	r3, r0
	mutex->owner = NULL;
   25e1a:	2000      	movs	r0, #0
   25e1c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   25e1e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   25e20:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   25e22:	605b      	str	r3, [r3, #4]
}
   25e24:	4770      	bx	lr

00025e26 <prepare_thread_to_run>:
{
   25e26:	b508      	push	{r3, lr}
   25e28:	2200      	movs	r2, #0
   25e2a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   25e2e:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   25e30:	f000 fa17 	bl	26262 <z_ready_thread>
}
   25e34:	bd08      	pop	{r3, pc}

00025e36 <queue_insert>:
{
   25e36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25e3a:	4605      	mov	r5, r0
   25e3c:	460e      	mov	r6, r1
   25e3e:	4614      	mov	r4, r2
   25e40:	461f      	mov	r7, r3
   25e42:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25e46:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   25e4a:	f04f 0320 	mov.w	r3, #32
   25e4e:	f3ef 8911 	mrs	r9, BASEPRI
   25e52:	f383 8812 	msr	BASEPRI_MAX, r3
   25e56:	f3bf 8f6f 	isb	sy
	if (is_append) {
   25e5a:	b102      	cbz	r2, 25e5e <queue_insert+0x28>
	return list->tail;
   25e5c:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25e5e:	4640      	mov	r0, r8
   25e60:	f000 fac1 	bl	263e6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   25e64:	b9a0      	cbnz	r0, 25e90 <queue_insert+0x5a>
	if (alloc) {
   25e66:	b9e7      	cbnz	r7, 25ea2 <queue_insert+0x6c>
	node->next_and_flags = flags;
   25e68:	2300      	movs	r3, #0
   25e6a:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25e6c:	b356      	cbz	r6, 25ec4 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25e6e:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25e70:	f033 0303 	bics.w	r3, r3, #3
   25e74:	d134      	bne.n	25ee0 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25e76:	6823      	ldr	r3, [r4, #0]
   25e78:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   25e7c:	6023      	str	r3, [r4, #0]
	return list->tail;
   25e7e:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   25e80:	b35a      	cbz	r2, 25eda <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25e82:	6813      	ldr	r3, [r2, #0]
   25e84:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   25e88:	4323      	orrs	r3, r4
   25e8a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   25e8c:	606c      	str	r4, [r5, #4]
}
   25e8e:	e031      	b.n	25ef4 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   25e90:	4621      	mov	r1, r4
   25e92:	f7ff ffc8 	bl	25e26 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   25e96:	4649      	mov	r1, r9
   25e98:	4640      	mov	r0, r8
   25e9a:	f7f9 fc1d 	bl	1f6d8 <z_reschedule>
		return 0;
   25e9e:	2000      	movs	r0, #0
   25ea0:	e032      	b.n	25f08 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   25ea2:	2108      	movs	r1, #8
   25ea4:	2000      	movs	r0, #0
   25ea6:	f7fa fcdf 	bl	20868 <z_thread_aligned_alloc>
		if (anode == NULL) {
   25eaa:	b120      	cbz	r0, 25eb6 <queue_insert+0x80>
		anode->data = data;
   25eac:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   25eae:	2201      	movs	r2, #1
   25eb0:	6002      	str	r2, [r0, #0]
		data = anode;
   25eb2:	4604      	mov	r4, r0
   25eb4:	e7da      	b.n	25e6c <queue_insert+0x36>
	__asm__ volatile(
   25eb6:	f389 8811 	msr	BASEPRI, r9
   25eba:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   25ebe:	f06f 000b 	mvn.w	r0, #11
   25ec2:	e021      	b.n	25f08 <queue_insert+0xd2>
	return list->head;
   25ec4:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25ec6:	6823      	ldr	r3, [r4, #0]
   25ec8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   25ecc:	4313      	orrs	r3, r2
   25ece:	6023      	str	r3, [r4, #0]
	list->head = node;
   25ed0:	602c      	str	r4, [r5, #0]
	return list->tail;
   25ed2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   25ed4:	b973      	cbnz	r3, 25ef4 <queue_insert+0xbe>
	list->tail = node;
   25ed6:	606c      	str	r4, [r5, #4]
}
   25ed8:	e00c      	b.n	25ef4 <queue_insert+0xbe>
	list->tail = node;
   25eda:	606c      	str	r4, [r5, #4]
	list->head = node;
   25edc:	602c      	str	r4, [r5, #0]
}
   25ede:	e009      	b.n	25ef4 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25ee0:	6822      	ldr	r2, [r4, #0]
   25ee2:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   25ee6:	4313      	orrs	r3, r2
   25ee8:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25eea:	6833      	ldr	r3, [r6, #0]
   25eec:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   25ef0:	431c      	orrs	r4, r3
   25ef2:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25ef4:	2104      	movs	r1, #4
   25ef6:	f105 0010 	add.w	r0, r5, #16
   25efa:	f000 fc38 	bl	2676e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25efe:	4649      	mov	r1, r9
   25f00:	4640      	mov	r0, r8
   25f02:	f7f9 fbe9 	bl	1f6d8 <z_reschedule>
	return 0;
   25f06:	2000      	movs	r0, #0
}
   25f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025f0c <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   25f0c:	b160      	cbz	r0, 25f28 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25f0e:	6803      	ldr	r3, [r0, #0]
   25f10:	f013 0f03 	tst.w	r3, #3
   25f14:	d008      	beq.n	25f28 <z_queue_node_peek+0x1c>
{
   25f16:	b510      	push	{r4, lr}
		ret = anode->data;
   25f18:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25f1a:	b909      	cbnz	r1, 25f20 <z_queue_node_peek+0x14>
		ret = anode->data;
   25f1c:	4620      	mov	r0, r4
}
   25f1e:	bd10      	pop	{r4, pc}
			k_free(anode);
   25f20:	f000 fc49 	bl	267b6 <k_free>
		ret = anode->data;
   25f24:	4620      	mov	r0, r4
   25f26:	e7fa      	b.n	25f1e <z_queue_node_peek+0x12>
}
   25f28:	4770      	bx	lr

00025f2a <k_queue_append>:
{
   25f2a:	b500      	push	{lr}
   25f2c:	b083      	sub	sp, #12
   25f2e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   25f30:	2301      	movs	r3, #1
   25f32:	9300      	str	r3, [sp, #0]
   25f34:	2300      	movs	r3, #0
   25f36:	4619      	mov	r1, r3
   25f38:	f7ff ff7d 	bl	25e36 <queue_insert>
}
   25f3c:	b003      	add	sp, #12
   25f3e:	f85d fb04 	ldr.w	pc, [sp], #4

00025f42 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   25f42:	b15a      	cbz	r2, 25f5c <z_impl_k_sem_init+0x1a>
   25f44:	428a      	cmp	r2, r1
   25f46:	d30c      	bcc.n	25f62 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   25f48:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   25f4a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   25f4c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   25f4e:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   25f50:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   25f54:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   25f56:	6143      	str	r3, [r0, #20]
	return 0;
   25f58:	2000      	movs	r0, #0
   25f5a:	4770      	bx	lr
		return -EINVAL;
   25f5c:	f06f 0015 	mvn.w	r0, #21
   25f60:	4770      	bx	lr
   25f62:	f06f 0015 	mvn.w	r0, #21
}
   25f66:	4770      	bx	lr

00025f68 <cancel_async_locked>:
{
   25f68:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   25f6a:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25f6c:	f012 0f02 	tst.w	r2, #2
   25f70:	d009      	beq.n	25f86 <cancel_async_locked+0x1e>
	return *flagp;
   25f72:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   25f74:	f012 000f 	ands.w	r0, r2, #15
   25f78:	d038      	beq.n	25fec <cancel_async_locked+0x84>
	*flagp |= BIT(bit);
   25f7a:	f042 0202 	orr.w	r2, r2, #2
   25f7e:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   25f80:	f002 000f 	and.w	r0, r2, #15
	return ret;
   25f84:	4770      	bx	lr
{
   25f86:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   25f88:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   25f8a:	f022 0104 	bic.w	r1, r2, #4
   25f8e:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   25f90:	f012 0f04 	tst.w	r2, #4
   25f94:	d011      	beq.n	25fba <cancel_async_locked+0x52>
	return list->head;
   25f96:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25f9a:	2100      	movs	r1, #0
   25f9c:	b16a      	cbz	r2, 25fba <cancel_async_locked+0x52>
   25f9e:	4290      	cmp	r0, r2
   25fa0:	d002      	beq.n	25fa8 <cancel_async_locked+0x40>
   25fa2:	4611      	mov	r1, r2
   25fa4:	6812      	ldr	r2, [r2, #0]
   25fa6:	e7f9      	b.n	25f9c <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   25fa8:	b199      	cbz	r1, 25fd2 <cancel_async_locked+0x6a>
	return node->next;
   25faa:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   25fac:	600a      	str	r2, [r1, #0]
	return list->tail;
   25fae:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
Z_GENLIST_REMOVE(slist, snode)
   25fb2:	4293      	cmp	r3, r2
   25fb4:	d017      	beq.n	25fe6 <cancel_async_locked+0x7e>
	parent->next = child;
   25fb6:	2200      	movs	r2, #0
   25fb8:	601a      	str	r2, [r3, #0]
	return *flagp;
   25fba:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   25fbc:	f012 000f 	ands.w	r0, r2, #15
   25fc0:	d004      	beq.n	25fcc <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   25fc2:	f042 0202 	orr.w	r2, r2, #2
   25fc6:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   25fc8:	f002 000f 	and.w	r0, r2, #15
}
   25fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
   25fd0:	4770      	bx	lr
	return node->next;
   25fd2:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   25fd4:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
	return list->tail;
   25fd8:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
Z_GENLIST_REMOVE(slist, snode)
   25fdc:	428b      	cmp	r3, r1
   25fde:	d1ea      	bne.n	25fb6 <cancel_async_locked+0x4e>
	list->tail = node;
   25fe0:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
}
   25fe4:	e7e7      	b.n	25fb6 <cancel_async_locked+0x4e>
	list->tail = node;
   25fe6:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
}
   25fea:	e7e4      	b.n	25fb6 <cancel_async_locked+0x4e>
   25fec:	4770      	bx	lr

00025fee <work_timeout>:
{
   25fee:	b510      	push	{r4, lr}
   25ff0:	b082      	sub	sp, #8
   25ff2:	4603      	mov	r3, r0
	__asm__ volatile(
   25ff4:	f04f 0220 	mov.w	r2, #32
   25ff8:	f3ef 8411 	mrs	r4, BASEPRI
   25ffc:	f382 8812 	msr	BASEPRI_MAX, r2
   26000:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   26004:	2200      	movs	r2, #0
   26006:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   26008:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   2600c:	f022 0108 	bic.w	r1, r2, #8
   26010:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26014:	f012 0f08 	tst.w	r2, #8
   26018:	d105      	bne.n	26026 <work_timeout+0x38>
	__asm__ volatile(
   2601a:	f384 8811 	msr	BASEPRI, r4
   2601e:	f3bf 8f6f 	isb	sy
}
   26022:	b002      	add	sp, #8
   26024:	bd10      	pop	{r4, pc}
   26026:	3810      	subs	r0, #16
		queue = dw->queue;
   26028:	699b      	ldr	r3, [r3, #24]
   2602a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2602c:	a901      	add	r1, sp, #4
   2602e:	f7f9 f95f 	bl	1f2f0 <submit_to_queue_locked>
   26032:	e7f2      	b.n	2601a <work_timeout+0x2c>

00026034 <cancel_delayable_async_locked>:
{
   26034:	b510      	push	{r4, lr}
   26036:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   26038:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2603a:	f023 0208 	bic.w	r2, r3, #8
   2603e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26040:	f013 0f08 	tst.w	r3, #8
   26044:	d103      	bne.n	2604e <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   26046:	4620      	mov	r0, r4
   26048:	f7ff ff8e 	bl	25f68 <cancel_async_locked>
}
   2604c:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   2604e:	3010      	adds	r0, #16
   26050:	f000 fa57 	bl	26502 <z_abort_timeout>
		ret = true;
   26054:	e7f7      	b.n	26046 <cancel_delayable_async_locked+0x12>

00026056 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   26056:	2300      	movs	r3, #0
   26058:	6003      	str	r3, [r0, #0]
   2605a:	6083      	str	r3, [r0, #8]
   2605c:	60c3      	str	r3, [r0, #12]
   2605e:	6041      	str	r1, [r0, #4]
}
   26060:	4770      	bx	lr

00026062 <k_work_submit_to_queue>:
{
   26062:	b530      	push	{r4, r5, lr}
   26064:	b083      	sub	sp, #12
   26066:	9001      	str	r0, [sp, #4]
   26068:	4608      	mov	r0, r1
	__asm__ volatile(
   2606a:	f04f 0320 	mov.w	r3, #32
   2606e:	f3ef 8511 	mrs	r5, BASEPRI
   26072:	f383 8812 	msr	BASEPRI_MAX, r3
   26076:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2607a:	a901      	add	r1, sp, #4
   2607c:	f7f9 f938 	bl	1f2f0 <submit_to_queue_locked>
   26080:	4604      	mov	r4, r0
	__asm__ volatile(
   26082:	f385 8811 	msr	BASEPRI, r5
   26086:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2608a:	2800      	cmp	r0, #0
   2608c:	dc02      	bgt.n	26094 <k_work_submit_to_queue+0x32>
}
   2608e:	4620      	mov	r0, r4
   26090:	b003      	add	sp, #12
   26092:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   26094:	f7f9 fe80 	bl	1fd98 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   26098:	2800      	cmp	r0, #0
   2609a:	d0f8      	beq.n	2608e <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   2609c:	f7f9 fdb6 	bl	1fc0c <z_impl_k_yield>
	return ret;
   260a0:	e7f5      	b.n	2608e <k_work_submit_to_queue+0x2c>

000260a2 <k_work_init_delayable>:
{
   260a2:	b538      	push	{r3, r4, r5, lr}
   260a4:	4604      	mov	r4, r0
   260a6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   260a8:	2230      	movs	r2, #48	; 0x30
   260aa:	2100      	movs	r1, #0
   260ac:	f000 fbe9 	bl	26882 <memset>
   260b0:	6065      	str	r5, [r4, #4]
   260b2:	f44f 7380 	mov.w	r3, #256	; 0x100
   260b6:	60e3      	str	r3, [r4, #12]
}
   260b8:	bd38      	pop	{r3, r4, r5, pc}

000260ba <k_work_delayable_busy_get>:
	__asm__ volatile(
   260ba:	f04f 0220 	mov.w	r2, #32
   260be:	f3ef 8311 	mrs	r3, BASEPRI
   260c2:	f382 8812 	msr	BASEPRI_MAX, r2
   260c6:	f3bf 8f6f 	isb	sy
	return *flagp;
   260ca:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   260cc:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   260d0:	f383 8811 	msr	BASEPRI, r3
   260d4:	f3bf 8f6f 	isb	sy
}
   260d8:	4770      	bx	lr

000260da <k_work_schedule_for_queue>:
{
   260da:	b510      	push	{r4, lr}
   260dc:	b082      	sub	sp, #8
   260de:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   260e0:	f04f 0020 	mov.w	r0, #32
   260e4:	f3ef 8411 	mrs	r4, BASEPRI
   260e8:	f380 8812 	msr	BASEPRI_MAX, r0
   260ec:	f3bf 8f6f 	isb	sy
	return *flagp;
   260f0:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   260f2:	f010 0f0e 	tst.w	r0, #14
   260f6:	d006      	beq.n	26106 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   260f8:	2000      	movs	r0, #0
	__asm__ volatile(
   260fa:	f384 8811 	msr	BASEPRI, r4
   260fe:	f3bf 8f6f 	isb	sy
}
   26102:	b002      	add	sp, #8
   26104:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   26106:	a801      	add	r0, sp, #4
   26108:	f7f9 fa12 	bl	1f530 <schedule_for_queue_locked>
   2610c:	e7f5      	b.n	260fa <k_work_schedule_for_queue+0x20>

0002610e <k_work_reschedule_for_queue>:
{
   2610e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26110:	b083      	sub	sp, #12
   26112:	9001      	str	r0, [sp, #4]
   26114:	460c      	mov	r4, r1
   26116:	4616      	mov	r6, r2
   26118:	461d      	mov	r5, r3
	__asm__ volatile(
   2611a:	f04f 0320 	mov.w	r3, #32
   2611e:	f3ef 8711 	mrs	r7, BASEPRI
   26122:	f383 8812 	msr	BASEPRI_MAX, r3
   26126:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   2612a:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   2612c:	f023 0208 	bic.w	r2, r3, #8
   26130:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26132:	f013 0f08 	tst.w	r3, #8
   26136:	d10b      	bne.n	26150 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   26138:	4632      	mov	r2, r6
   2613a:	462b      	mov	r3, r5
   2613c:	4621      	mov	r1, r4
   2613e:	a801      	add	r0, sp, #4
   26140:	f7f9 f9f6 	bl	1f530 <schedule_for_queue_locked>
	__asm__ volatile(
   26144:	f387 8811 	msr	BASEPRI, r7
   26148:	f3bf 8f6f 	isb	sy
}
   2614c:	b003      	add	sp, #12
   2614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   26150:	f101 0010 	add.w	r0, r1, #16
   26154:	f000 f9d5 	bl	26502 <z_abort_timeout>
		ret = true;
   26158:	e7ee      	b.n	26138 <k_work_reschedule_for_queue+0x2a>

0002615a <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2615a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2615c:	f04f 0320 	mov.w	r3, #32
   26160:	f3ef 8411 	mrs	r4, BASEPRI
   26164:	f383 8812 	msr	BASEPRI_MAX, r3
   26168:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   2616c:	f7ff ff62 	bl	26034 <cancel_delayable_async_locked>
	__asm__ volatile(
   26170:	f384 8811 	msr	BASEPRI, r4
   26174:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   26178:	bd10      	pop	{r4, pc}

0002617a <thread_active_elsewhere>:
}
   2617a:	2000      	movs	r0, #0
   2617c:	4770      	bx	lr

0002617e <pended_on_thread>:
}
   2617e:	6880      	ldr	r0, [r0, #8]
   26180:	4770      	bx	lr

00026182 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   26182:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   26186:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2618a:	4283      	cmp	r3, r0
   2618c:	d001      	beq.n	26192 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2618e:	1ac0      	subs	r0, r0, r3
   26190:	4770      	bx	lr
	return 0;
   26192:	2000      	movs	r0, #0
}
   26194:	4770      	bx	lr

00026196 <z_unpend_thread_no_timeout>:
{
   26196:	b538      	push	{r3, r4, r5, lr}
   26198:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2619a:	2300      	movs	r3, #0
	__asm__ volatile(
   2619c:	f04f 0220 	mov.w	r2, #32
   261a0:	f3ef 8511 	mrs	r5, BASEPRI
   261a4:	f382 8812 	msr	BASEPRI_MAX, r2
   261a8:	f3bf 8f6f 	isb	sy
   261ac:	b98b      	cbnz	r3, 261d2 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   261ae:	4620      	mov	r0, r4
   261b0:	f7ff ffe5 	bl	2617e <pended_on_thread>
   261b4:	4621      	mov	r1, r4
   261b6:	f000 f822 	bl	261fe <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   261ba:	7b63      	ldrb	r3, [r4, #13]
   261bc:	f023 0302 	bic.w	r3, r3, #2
   261c0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   261c2:	2300      	movs	r3, #0
   261c4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   261c6:	f385 8811 	msr	BASEPRI, r5
   261ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   261ce:	2301      	movs	r3, #1
   261d0:	e7ec      	b.n	261ac <z_unpend_thread_no_timeout+0x16>
}
   261d2:	bd38      	pop	{r3, r4, r5, pc}

000261d4 <z_reschedule_irqlock>:
{
   261d4:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   261d6:	4603      	mov	r3, r0
   261d8:	b920      	cbnz	r0, 261e4 <z_reschedule_irqlock+0x10>
   261da:	f3ef 8205 	mrs	r2, IPSR
   261de:	b942      	cbnz	r2, 261f2 <z_reschedule_irqlock+0x1e>
   261e0:	2201      	movs	r2, #1
   261e2:	e000      	b.n	261e6 <z_reschedule_irqlock+0x12>
   261e4:	2200      	movs	r2, #0
	if (resched(key)) {
   261e6:	b932      	cbnz	r2, 261f6 <z_reschedule_irqlock+0x22>
   261e8:	f383 8811 	msr	BASEPRI, r3
   261ec:	f3bf 8f6f 	isb	sy
}
   261f0:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   261f2:	2200      	movs	r2, #0
   261f4:	e7f7      	b.n	261e6 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   261f6:	4618      	mov	r0, r3
   261f8:	f7ed fea6 	bl	13f48 <arch_swap>
	return ret;
   261fc:	e7f8      	b.n	261f0 <z_reschedule_irqlock+0x1c>

000261fe <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   261fe:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   26200:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   26202:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26204:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26206:	2300      	movs	r3, #0
   26208:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   2620a:	604b      	str	r3, [r1, #4]
}
   2620c:	4770      	bx	lr

0002620e <z_unpend_thread>:
{
   2620e:	b538      	push	{r3, r4, r5, lr}
   26210:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   26212:	2300      	movs	r3, #0
	__asm__ volatile(
   26214:	f04f 0220 	mov.w	r2, #32
   26218:	f3ef 8511 	mrs	r5, BASEPRI
   2621c:	f382 8812 	msr	BASEPRI_MAX, r2
   26220:	f3bf 8f6f 	isb	sy
   26224:	b98b      	cbnz	r3, 2624a <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26226:	4620      	mov	r0, r4
   26228:	f7ff ffa9 	bl	2617e <pended_on_thread>
   2622c:	4621      	mov	r1, r4
   2622e:	f7ff ffe6 	bl	261fe <z_priq_dumb_remove>
   26232:	7b63      	ldrb	r3, [r4, #13]
   26234:	f023 0302 	bic.w	r3, r3, #2
   26238:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2623a:	2300      	movs	r3, #0
   2623c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2623e:	f385 8811 	msr	BASEPRI, r5
   26242:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26246:	2301      	movs	r3, #1
   26248:	e7ec      	b.n	26224 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   2624a:	f104 0018 	add.w	r0, r4, #24
   2624e:	f000 f958 	bl	26502 <z_abort_timeout>
}
   26252:	bd38      	pop	{r3, r4, r5, pc}

00026254 <z_priq_dumb_best>:
{
   26254:	4603      	mov	r3, r0
	return list->head == list;
   26256:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26258:	4283      	cmp	r3, r0
   2625a:	d000      	beq.n	2625e <z_priq_dumb_best+0xa>
}
   2625c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2625e:	2000      	movs	r0, #0
	return thread;
   26260:	e7fc      	b.n	2625c <z_priq_dumb_best+0x8>

00026262 <z_ready_thread>:
{
   26262:	b538      	push	{r3, r4, r5, lr}
   26264:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   26266:	2300      	movs	r3, #0
	__asm__ volatile(
   26268:	f04f 0220 	mov.w	r2, #32
   2626c:	f3ef 8511 	mrs	r5, BASEPRI
   26270:	f382 8812 	msr	BASEPRI_MAX, r2
   26274:	f3bf 8f6f 	isb	sy
   26278:	e007      	b.n	2628a <z_ready_thread+0x28>
			ready_thread(thread);
   2627a:	4620      	mov	r0, r4
   2627c:	f7f9 fb16 	bl	1f8ac <ready_thread>
	__asm__ volatile(
   26280:	f385 8811 	msr	BASEPRI, r5
   26284:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26288:	2301      	movs	r3, #1
   2628a:	b92b      	cbnz	r3, 26298 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   2628c:	4620      	mov	r0, r4
   2628e:	f7ff ff74 	bl	2617a <thread_active_elsewhere>
   26292:	2800      	cmp	r0, #0
   26294:	d1f4      	bne.n	26280 <z_ready_thread+0x1e>
   26296:	e7f0      	b.n	2627a <z_ready_thread+0x18>
}
   26298:	bd38      	pop	{r3, r4, r5, pc}

0002629a <z_thread_timeout>:
{
   2629a:	b570      	push	{r4, r5, r6, lr}
   2629c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2629e:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   262a2:	2300      	movs	r3, #0
	__asm__ volatile(
   262a4:	f04f 0220 	mov.w	r2, #32
   262a8:	f3ef 8611 	mrs	r6, BASEPRI
   262ac:	f382 8812 	msr	BASEPRI_MAX, r2
   262b0:	f3bf 8f6f 	isb	sy
   262b4:	e019      	b.n	262ea <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   262b6:	4628      	mov	r0, r5
   262b8:	f7ff ff61 	bl	2617e <pended_on_thread>
   262bc:	4629      	mov	r1, r5
   262be:	f7ff ff9e 	bl	261fe <z_priq_dumb_remove>
   262c2:	7b6b      	ldrb	r3, [r5, #13]
   262c4:	f023 0302 	bic.w	r3, r3, #2
   262c8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   262ca:	2300      	movs	r3, #0
   262cc:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   262ce:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   262d2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   262d6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   262da:	4628      	mov	r0, r5
   262dc:	f7f9 fae6 	bl	1f8ac <ready_thread>
	__asm__ volatile(
   262e0:	f386 8811 	msr	BASEPRI, r6
   262e4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   262e8:	2301      	movs	r3, #1
   262ea:	b94b      	cbnz	r3, 26300 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   262ec:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   262f0:	f013 0f28 	tst.w	r3, #40	; 0x28
   262f4:	d1f4      	bne.n	262e0 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   262f6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   262fa:	2b00      	cmp	r3, #0
   262fc:	d1db      	bne.n	262b6 <z_thread_timeout+0x1c>
   262fe:	e7e6      	b.n	262ce <z_thread_timeout+0x34>
}
   26300:	bd70      	pop	{r4, r5, r6, pc}

00026302 <add_to_waitq_locked>:
{
   26302:	b570      	push	{r4, r5, r6, lr}
   26304:	4605      	mov	r5, r0
   26306:	460e      	mov	r6, r1
	unready_thread(thread);
   26308:	f7f9 fb2e 	bl	1f968 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2630c:	7b6b      	ldrb	r3, [r5, #13]
   2630e:	f043 0302 	orr.w	r3, r3, #2
   26312:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   26314:	b1b6      	cbz	r6, 26344 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   26316:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   26318:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2631a:	42a6      	cmp	r6, r4
   2631c:	d019      	beq.n	26352 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2631e:	b164      	cbz	r4, 2633a <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26320:	4621      	mov	r1, r4
   26322:	4628      	mov	r0, r5
   26324:	f7ff ff2d 	bl	26182 <z_sched_prio_cmp>
   26328:	2800      	cmp	r0, #0
   2632a:	dc0c      	bgt.n	26346 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2632c:	b12c      	cbz	r4, 2633a <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   2632e:	6873      	ldr	r3, [r6, #4]
   26330:	429c      	cmp	r4, r3
   26332:	d002      	beq.n	2633a <add_to_waitq_locked+0x38>
   26334:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26336:	2c00      	cmp	r4, #0
   26338:	d1f1      	bne.n	2631e <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   2633a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2633c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   2633e:	606b      	str	r3, [r5, #4]
	tail->next = node;
   26340:	601d      	str	r5, [r3, #0]
	list->tail = node;
   26342:	6075      	str	r5, [r6, #4]
}
   26344:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   26346:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   26348:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2634a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2634c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2634e:	6065      	str	r5, [r4, #4]
}
   26350:	e7f8      	b.n	26344 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26352:	2400      	movs	r4, #0
   26354:	e7e3      	b.n	2631e <add_to_waitq_locked+0x1c>

00026356 <pend>:
{
   26356:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2635a:	4605      	mov	r5, r0
   2635c:	460f      	mov	r7, r1
   2635e:	4691      	mov	r9, r2
   26360:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   26362:	2400      	movs	r4, #0
	__asm__ volatile(
   26364:	f04f 0320 	mov.w	r3, #32
   26368:	f3ef 8611 	mrs	r6, BASEPRI
   2636c:	f383 8812 	msr	BASEPRI_MAX, r3
   26370:	f3bf 8f6f 	isb	sy
   26374:	b94c      	cbnz	r4, 2638a <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   26376:	4639      	mov	r1, r7
   26378:	4628      	mov	r0, r5
   2637a:	f7ff ffc2 	bl	26302 <add_to_waitq_locked>
	__asm__ volatile(
   2637e:	f386 8811 	msr	BASEPRI, r6
   26382:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26386:	2401      	movs	r4, #1
   26388:	e7f4      	b.n	26374 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   2638a:	464a      	mov	r2, r9
   2638c:	4643      	mov	r3, r8
   2638e:	4628      	mov	r0, r5
   26390:	f7f9 f940 	bl	1f614 <add_thread_timeout>
}
   26394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026398 <z_unpend1_no_timeout>:
{
   26398:	b570      	push	{r4, r5, r6, lr}
   2639a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2639c:	2300      	movs	r3, #0
	__asm__ volatile(
   2639e:	f04f 0220 	mov.w	r2, #32
   263a2:	f3ef 8511 	mrs	r5, BASEPRI
   263a6:	f382 8812 	msr	BASEPRI_MAX, r2
   263aa:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   263ae:	461c      	mov	r4, r3
   263b0:	e00f      	b.n	263d2 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   263b2:	f7ff fee4 	bl	2617e <pended_on_thread>
   263b6:	4621      	mov	r1, r4
   263b8:	f7ff ff21 	bl	261fe <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   263bc:	7b63      	ldrb	r3, [r4, #13]
   263be:	f023 0302 	bic.w	r3, r3, #2
   263c2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   263c4:	2300      	movs	r3, #0
   263c6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   263c8:	f385 8811 	msr	BASEPRI, r5
   263cc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   263d0:	2301      	movs	r3, #1
   263d2:	b933      	cbnz	r3, 263e2 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   263d4:	4630      	mov	r0, r6
   263d6:	f7ff ff3d 	bl	26254 <z_priq_dumb_best>
		if (thread != NULL) {
   263da:	4604      	mov	r4, r0
   263dc:	2800      	cmp	r0, #0
   263de:	d1e8      	bne.n	263b2 <z_unpend1_no_timeout+0x1a>
   263e0:	e7f2      	b.n	263c8 <z_unpend1_no_timeout+0x30>
}
   263e2:	4620      	mov	r0, r4
   263e4:	bd70      	pop	{r4, r5, r6, pc}

000263e6 <z_unpend_first_thread>:
{
   263e6:	b570      	push	{r4, r5, r6, lr}
   263e8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   263ea:	2300      	movs	r3, #0
	__asm__ volatile(
   263ec:	f04f 0220 	mov.w	r2, #32
   263f0:	f3ef 8511 	mrs	r5, BASEPRI
   263f4:	f382 8812 	msr	BASEPRI_MAX, r2
   263f8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   263fc:	461c      	mov	r4, r3
   263fe:	e013      	b.n	26428 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26400:	f7ff febd 	bl	2617e <pended_on_thread>
   26404:	4621      	mov	r1, r4
   26406:	f7ff fefa 	bl	261fe <z_priq_dumb_remove>
   2640a:	7b63      	ldrb	r3, [r4, #13]
   2640c:	f023 0302 	bic.w	r3, r3, #2
   26410:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26412:	2300      	movs	r3, #0
   26414:	60a3      	str	r3, [r4, #8]
   26416:	f104 0018 	add.w	r0, r4, #24
   2641a:	f000 f872 	bl	26502 <z_abort_timeout>
	__asm__ volatile(
   2641e:	f385 8811 	msr	BASEPRI, r5
   26422:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26426:	2301      	movs	r3, #1
   26428:	b933      	cbnz	r3, 26438 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   2642a:	4630      	mov	r0, r6
   2642c:	f7ff ff12 	bl	26254 <z_priq_dumb_best>
		if (thread != NULL) {
   26430:	4604      	mov	r4, r0
   26432:	2800      	cmp	r0, #0
   26434:	d1e4      	bne.n	26400 <z_unpend_first_thread+0x1a>
   26436:	e7f2      	b.n	2641e <z_unpend_first_thread+0x38>
}
   26438:	4620      	mov	r0, r4
   2643a:	bd70      	pop	{r4, r5, r6, pc}

0002643c <z_unpend_all>:
{
   2643c:	b538      	push	{r3, r4, r5, lr}
   2643e:	4605      	mov	r5, r0
	int need_sched = 0;
   26440:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26442:	e006      	b.n	26452 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   26444:	4620      	mov	r0, r4
   26446:	f7ff fee2 	bl	2620e <z_unpend_thread>
		z_ready_thread(thread);
   2644a:	4620      	mov	r0, r4
   2644c:	f7ff ff09 	bl	26262 <z_ready_thread>
		need_sched = 1;
   26450:	2001      	movs	r0, #1
	return list->head == list;
   26452:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26454:	42a5      	cmp	r5, r4
   26456:	d001      	beq.n	2645c <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26458:	2c00      	cmp	r4, #0
   2645a:	d1f3      	bne.n	26444 <z_unpend_all+0x8>
}
   2645c:	bd38      	pop	{r3, r4, r5, pc}

0002645e <init_ready_q>:
	sys_dlist_init(&rq->runq);
   2645e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   26460:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   26462:	6083      	str	r3, [r0, #8]
}
   26464:	4770      	bx	lr

00026466 <z_sched_wake>:
{
   26466:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2646a:	4606      	mov	r6, r0
   2646c:	4688      	mov	r8, r1
   2646e:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   26470:	2300      	movs	r3, #0
	__asm__ volatile(
   26472:	f04f 0220 	mov.w	r2, #32
   26476:	f3ef 8511 	mrs	r5, BASEPRI
   2647a:	f382 8812 	msr	BASEPRI_MAX, r2
   2647e:	f3bf 8f6f 	isb	sy
	bool ret = false;
   26482:	4699      	mov	r9, r3
   26484:	e01b      	b.n	264be <z_sched_wake+0x58>
   26486:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   2648a:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2648c:	f7ff fe77 	bl	2617e <pended_on_thread>
   26490:	4621      	mov	r1, r4
   26492:	f7ff feb4 	bl	261fe <z_priq_dumb_remove>
   26496:	7b63      	ldrb	r3, [r4, #13]
   26498:	f023 0302 	bic.w	r3, r3, #2
   2649c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2649e:	2300      	movs	r3, #0
   264a0:	60a3      	str	r3, [r4, #8]
   264a2:	f104 0018 	add.w	r0, r4, #24
   264a6:	f000 f82c 	bl	26502 <z_abort_timeout>
			ready_thread(thread);
   264aa:	4620      	mov	r0, r4
   264ac:	f7f9 f9fe 	bl	1f8ac <ready_thread>
			ret = true;
   264b0:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   264b4:	f385 8811 	msr	BASEPRI, r5
   264b8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   264bc:	2301      	movs	r3, #1
   264be:	b933      	cbnz	r3, 264ce <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   264c0:	4630      	mov	r0, r6
   264c2:	f7ff fec7 	bl	26254 <z_priq_dumb_best>
		if (thread != NULL) {
   264c6:	4604      	mov	r4, r0
   264c8:	2800      	cmp	r0, #0
   264ca:	d1dc      	bne.n	26486 <z_sched_wake+0x20>
   264cc:	e7f2      	b.n	264b4 <z_sched_wake+0x4e>
}
   264ce:	4648      	mov	r0, r9
   264d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000264d4 <remove_timeout>:
{
   264d4:	b538      	push	{r3, r4, r5, lr}
   264d6:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   264d8:	f7f9 fccc 	bl	1fe74 <next>
   264dc:	b148      	cbz	r0, 264f2 <remove_timeout+0x1e>
   264de:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   264e0:	6920      	ldr	r0, [r4, #16]
   264e2:	6965      	ldr	r5, [r4, #20]
   264e4:	6913      	ldr	r3, [r2, #16]
   264e6:	6951      	ldr	r1, [r2, #20]
   264e8:	181b      	adds	r3, r3, r0
   264ea:	eb45 0101 	adc.w	r1, r5, r1
   264ee:	6113      	str	r3, [r2, #16]
   264f0:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   264f2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   264f4:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   264f6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   264f8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   264fa:	2300      	movs	r3, #0
   264fc:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   264fe:	6063      	str	r3, [r4, #4]
}
   26500:	bd38      	pop	{r3, r4, r5, pc}

00026502 <z_abort_timeout>:
{
   26502:	b570      	push	{r4, r5, r6, lr}
   26504:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   26506:	2300      	movs	r3, #0
	__asm__ volatile(
   26508:	f04f 0220 	mov.w	r2, #32
   2650c:	f3ef 8611 	mrs	r6, BASEPRI
   26510:	f382 8812 	msr	BASEPRI_MAX, r2
   26514:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   26518:	f06f 0015 	mvn.w	r0, #21
   2651c:	e008      	b.n	26530 <z_abort_timeout+0x2e>
			remove_timeout(to);
   2651e:	4620      	mov	r0, r4
   26520:	f7ff ffd8 	bl	264d4 <remove_timeout>
			ret = 0;
   26524:	4628      	mov	r0, r5
	__asm__ volatile(
   26526:	f386 8811 	msr	BASEPRI, r6
   2652a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2652e:	2301      	movs	r3, #1
   26530:	461d      	mov	r5, r3
   26532:	b91b      	cbnz	r3, 2653c <z_abort_timeout+0x3a>
	return node->next != NULL;
   26534:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   26536:	2b00      	cmp	r3, #0
   26538:	d1f1      	bne.n	2651e <z_abort_timeout+0x1c>
   2653a:	e7f4      	b.n	26526 <z_abort_timeout+0x24>
}
   2653c:	bd70      	pop	{r4, r5, r6, pc}

0002653e <z_get_next_timeout_expiry>:
{
   2653e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   26540:	2300      	movs	r3, #0
	__asm__ volatile(
   26542:	f04f 0220 	mov.w	r2, #32
   26546:	f3ef 8411 	mrs	r4, BASEPRI
   2654a:	f382 8812 	msr	BASEPRI_MAX, r2
   2654e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   26552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	LOCKED(&timeout_lock) {
   26556:	b93b      	cbnz	r3, 26568 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   26558:	f7f9 fca4 	bl	1fea4 <next_timeout>
	__asm__ volatile(
   2655c:	f384 8811 	msr	BASEPRI, r4
   26560:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   26564:	2301      	movs	r3, #1
   26566:	e7f6      	b.n	26556 <z_get_next_timeout_expiry+0x18>
}
   26568:	bd10      	pop	{r4, pc}

0002656a <z_set_timeout_expiry>:
{
   2656a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2656c:	4606      	mov	r6, r0
   2656e:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   26570:	2300      	movs	r3, #0
	__asm__ volatile(
   26572:	f04f 0220 	mov.w	r2, #32
   26576:	f3ef 8511 	mrs	r5, BASEPRI
   2657a:	f382 8812 	msr	BASEPRI_MAX, r2
   2657e:	f3bf 8f6f 	isb	sy
   26582:	e00a      	b.n	2659a <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   26584:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   26586:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2658a:	2801      	cmp	r0, #1
   2658c:	dd00      	ble.n	26590 <z_set_timeout_expiry+0x26>
   2658e:	b97c      	cbnz	r4, 265b0 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   26590:	f385 8811 	msr	BASEPRI, r5
   26594:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   26598:	2301      	movs	r3, #1
   2659a:	461c      	mov	r4, r3
   2659c:	b97b      	cbnz	r3, 265be <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   2659e:	f7f9 fc81 	bl	1fea4 <next_timeout>
			      || (ticks <= next_to);
   265a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   265a6:	d0ed      	beq.n	26584 <z_set_timeout_expiry+0x1a>
   265a8:	42b0      	cmp	r0, r6
   265aa:	dbec      	blt.n	26586 <z_set_timeout_expiry+0x1c>
   265ac:	2401      	movs	r4, #1
   265ae:	e7ea      	b.n	26586 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   265b0:	4639      	mov	r1, r7
   265b2:	42b0      	cmp	r0, r6
   265b4:	bfa8      	it	ge
   265b6:	4630      	movge	r0, r6
   265b8:	f7ef fef2 	bl	163a0 <sys_clock_set_timeout>
   265bc:	e7e8      	b.n	26590 <z_set_timeout_expiry+0x26>
}
   265be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000265c0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   265c0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   265c2:	f7f9 fda1 	bl	20108 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   265c6:	bd08      	pop	{r3, pc}

000265c8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   265c8:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   265ca:	f7f9 fd9d 	bl	20108 <sys_clock_tick_get>
}
   265ce:	bd08      	pop	{r3, pc}

000265d0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   265d0:	b900      	cbnz	r0, 265d4 <z_impl_k_busy_wait+0x4>
   265d2:	4770      	bx	lr
{
   265d4:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   265d6:	f7ec f9cd 	bl	12974 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   265da:	bd08      	pop	{r3, pc}

000265dc <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   265dc:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   265de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   265e2:	bf08      	it	eq
   265e4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   265e8:	d024      	beq.n	26634 <sys_clock_timeout_end_calc+0x58>
   265ea:	4604      	mov	r4, r0
   265ec:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   265ee:	ea54 0105 	orrs.w	r1, r4, r5
   265f2:	d00d      	beq.n	26610 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   265f4:	f06f 0101 	mvn.w	r1, #1
   265f8:	1a0a      	subs	r2, r1, r0
   265fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   265fe:	eb61 0305 	sbc.w	r3, r1, r5
   26602:	2a00      	cmp	r2, #0
   26604:	f173 0100 	sbcs.w	r1, r3, #0
   26608:	db05      	blt.n	26616 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2660a:	4610      	mov	r0, r2
   2660c:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2660e:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   26610:	f7f9 fd7a 	bl	20108 <sys_clock_tick_get>
   26614:	e7fb      	b.n	2660e <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   26616:	f7f9 fd77 	bl	20108 <sys_clock_tick_get>
   2661a:	4623      	mov	r3, r4
   2661c:	462a      	mov	r2, r5
   2661e:	2c01      	cmp	r4, #1
   26620:	f175 0400 	sbcs.w	r4, r5, #0
   26624:	db03      	blt.n	2662e <sys_clock_timeout_end_calc+0x52>
   26626:	18c0      	adds	r0, r0, r3
   26628:	eb42 0101 	adc.w	r1, r2, r1
   2662c:	e7ef      	b.n	2660e <sys_clock_timeout_end_calc+0x32>
   2662e:	2301      	movs	r3, #1
   26630:	2200      	movs	r2, #0
   26632:	e7f8      	b.n	26626 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   26634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26638:	4601      	mov	r1, r0
   2663a:	e7e8      	b.n	2660e <sys_clock_timeout_end_calc+0x32>

0002663c <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   2663c:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   2663e:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   26640:	2300      	movs	r3, #0
   26642:	6303      	str	r3, [r0, #48]	; 0x30
   26644:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   26648:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2664a:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   2664c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2664e:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   26650:	6343      	str	r3, [r0, #52]	; 0x34
}
   26652:	4770      	bx	lr

00026654 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   26654:	b510      	push	{r4, lr}
   26656:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   26658:	f7ff ff53 	bl	26502 <z_abort_timeout>

	if (inactive) {
   2665c:	b9a0      	cbnz	r0, 26688 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   2665e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26660:	b10b      	cbz	r3, 26666 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   26662:	4620      	mov	r0, r4
   26664:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   26666:	f104 0018 	add.w	r0, r4, #24
   2666a:	f7ff fe95 	bl	26398 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2666e:	b158      	cbz	r0, 26688 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   26670:	f7ff fdf7 	bl	26262 <z_ready_thread>
	__asm__ volatile(
   26674:	f04f 0320 	mov.w	r3, #32
   26678:	f3ef 8011 	mrs	r0, BASEPRI
   2667c:	f383 8812 	msr	BASEPRI_MAX, r3
   26680:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26684:	f7ff fda6 	bl	261d4 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   26688:	bd10      	pop	{r4, pc}

0002668a <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2668a:	b108      	cbz	r0, 26690 <poller_thread+0x6>
   2668c:	3860      	subs	r0, #96	; 0x60
   2668e:	4770      	bx	lr
}
   26690:	4770      	bx	lr

00026692 <signal_poller>:
{
   26692:	b538      	push	{r3, r4, r5, lr}
   26694:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   26696:	6880      	ldr	r0, [r0, #8]
   26698:	f7ff fff7 	bl	2668a <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2669c:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   2669e:	f013 0f02 	tst.w	r3, #2
   266a2:	d028      	beq.n	266f6 <signal_poller+0x64>
   266a4:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   266a6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   266aa:	f06f 0001 	mvn.w	r0, #1
   266ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   266b2:	428b      	cmp	r3, r1
   266b4:	bf08      	it	eq
   266b6:	4282      	cmpeq	r2, r0
   266b8:	d01f      	beq.n	266fa <signal_poller+0x68>
	z_unpend_thread(thread);
   266ba:	4620      	mov	r0, r4
   266bc:	f7ff fda7 	bl	2620e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   266c0:	2d08      	cmp	r5, #8
   266c2:	d00a      	beq.n	266da <signal_poller+0x48>
   266c4:	2300      	movs	r3, #0
   266c6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   266ca:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   266cc:	f013 0f1f 	tst.w	r3, #31
   266d0:	d108      	bne.n	266e4 <signal_poller+0x52>
	return node->next != NULL;
   266d2:	69a3      	ldr	r3, [r4, #24]
   266d4:	b123      	cbz	r3, 266e0 <signal_poller+0x4e>
   266d6:	2300      	movs	r3, #0
   266d8:	e005      	b.n	266e6 <signal_poller+0x54>
   266da:	f06f 0303 	mvn.w	r3, #3
   266de:	e7f2      	b.n	266c6 <signal_poller+0x34>
   266e0:	2301      	movs	r3, #1
   266e2:	e000      	b.n	266e6 <signal_poller+0x54>
   266e4:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   266e6:	b90b      	cbnz	r3, 266ec <signal_poller+0x5a>
		return 0;
   266e8:	2000      	movs	r0, #0
   266ea:	e005      	b.n	266f8 <signal_poller+0x66>
	z_ready_thread(thread);
   266ec:	4620      	mov	r0, r4
   266ee:	f7ff fdb8 	bl	26262 <z_ready_thread>
	return 0;
   266f2:	2000      	movs	r0, #0
   266f4:	e000      	b.n	266f8 <signal_poller+0x66>
		return 0;
   266f6:	2000      	movs	r0, #0
}
   266f8:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   266fa:	f06f 000a 	mvn.w	r0, #10
   266fe:	e7fb      	b.n	266f8 <signal_poller+0x66>

00026700 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   26700:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   26702:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   26704:	7823      	ldrb	r3, [r4, #0]
   26706:	b173      	cbz	r3, 26726 <signal_triggered_work+0x26>
   26708:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2670c:	b15d      	cbz	r5, 26726 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2670e:	f1a4 0614 	sub.w	r6, r4, #20
   26712:	f104 0014 	add.w	r0, r4, #20
   26716:	f7ff fef4 	bl	26502 <z_abort_timeout>
		twork->poll_result = 0;
   2671a:	2300      	movs	r3, #0
   2671c:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2671e:	4631      	mov	r1, r6
   26720:	4628      	mov	r0, r5
   26722:	f7ff fc9e 	bl	26062 <k_work_submit_to_queue>
	}

	return 0;
}
   26726:	2000      	movs	r0, #0
   26728:	bd70      	pop	{r4, r5, r6, pc}

0002672a <signal_poll_event>:
{
   2672a:	b570      	push	{r4, r5, r6, lr}
   2672c:	4604      	mov	r4, r0
   2672e:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   26730:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   26732:	b1d6      	cbz	r6, 2676a <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   26734:	7873      	ldrb	r3, [r6, #1]
   26736:	2b01      	cmp	r3, #1
   26738:	d00d      	beq.n	26756 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2673a:	2b02      	cmp	r3, #2
   2673c:	d012      	beq.n	26764 <signal_poll_event+0x3a>
		poller->is_polling = false;
   2673e:	2000      	movs	r0, #0
   26740:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   26742:	2300      	movs	r3, #0
   26744:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   26746:	68e3      	ldr	r3, [r4, #12]
   26748:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2674c:	430d      	orrs	r5, r1
   2674e:	f365 3352 	bfi	r3, r5, #13, #6
   26752:	60e3      	str	r3, [r4, #12]
}
   26754:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   26756:	f7ff ff9c 	bl	26692 <signal_poller>
		poller->is_polling = false;
   2675a:	2300      	movs	r3, #0
   2675c:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   2675e:	4298      	cmp	r0, r3
   26760:	daef      	bge.n	26742 <signal_poll_event+0x18>
   26762:	e7f7      	b.n	26754 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   26764:	f7ff ffcc 	bl	26700 <signal_triggered_work>
   26768:	e7f7      	b.n	2675a <signal_poll_event+0x30>
	int retcode = 0;
   2676a:	2000      	movs	r0, #0
   2676c:	e7e9      	b.n	26742 <signal_poll_event+0x18>

0002676e <z_handle_obj_poll_events>:
{
   2676e:	b508      	push	{r3, lr}
   26770:	4603      	mov	r3, r0
	return list->head == list;
   26772:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   26774:	4283      	cmp	r3, r0
   26776:	d009      	beq.n	2678c <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   26778:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2677a:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2677c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2677e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26780:	2300      	movs	r3, #0
   26782:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   26784:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   26786:	b108      	cbz	r0, 2678c <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   26788:	f7ff ffcf 	bl	2672a <signal_poll_event>
}
   2678c:	bd08      	pop	{r3, pc}

0002678e <z_heap_aligned_alloc>:
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   2678e:	3204      	adds	r2, #4
   26790:	d20f      	bcs.n	267b2 <z_heap_aligned_alloc+0x24>
{
   26792:	b5d0      	push	{r4, r6, r7, lr}
   26794:	b082      	sub	sp, #8
   26796:	4604      	mov	r4, r0
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   26798:	2600      	movs	r6, #0
   2679a:	2700      	movs	r7, #0
   2679c:	e9cd 6700 	strd	r6, r7, [sp]
   267a0:	f041 0104 	orr.w	r1, r1, #4
   267a4:	f7ff fa12 	bl	25bcc <k_heap_aligned_alloc>
	if (mem == NULL) {
   267a8:	b108      	cbz	r0, 267ae <z_heap_aligned_alloc+0x20>
	*heap_ref = heap;
   267aa:	f840 4b04 	str.w	r4, [r0], #4
}
   267ae:	b002      	add	sp, #8
   267b0:	bdd0      	pop	{r4, r6, r7, pc}
		return NULL;
   267b2:	2000      	movs	r0, #0
}
   267b4:	4770      	bx	lr

000267b6 <k_free>:
	if (ptr != NULL) {
   267b6:	b130      	cbz	r0, 267c6 <k_free+0x10>
{
   267b8:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   267ba:	1f01      	subs	r1, r0, #4
   267bc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   267c0:	f7ff fa5a 	bl	25c78 <k_heap_free>
}
   267c4:	bd08      	pop	{r3, pc}
   267c6:	4770      	bx	lr

000267c8 <k_malloc>:
{
   267c8:	b508      	push	{r3, lr}
   267ca:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   267cc:	2004      	movs	r0, #4
   267ce:	f7fa f841 	bl	20854 <k_aligned_alloc>
}
   267d2:	bd08      	pop	{r3, pc}

000267d4 <k_calloc>:
{
   267d4:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   267d6:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   267da:	b138      	cbz	r0, 267ec <k_calloc+0x18>
   267dc:	fbb4 f0f0 	udiv	r0, r4, r0
   267e0:	4281      	cmp	r1, r0
   267e2:	d001      	beq.n	267e8 <k_calloc+0x14>
   267e4:	2301      	movs	r3, #1
   267e6:	e002      	b.n	267ee <k_calloc+0x1a>
   267e8:	2300      	movs	r3, #0
   267ea:	e000      	b.n	267ee <k_calloc+0x1a>
   267ec:	2300      	movs	r3, #0
	if (size_mul_overflow(nmemb, size, &bounds)) {
   267ee:	b953      	cbnz	r3, 26806 <k_calloc+0x32>
	ret = k_malloc(bounds);
   267f0:	4620      	mov	r0, r4
   267f2:	f7ff ffe9 	bl	267c8 <k_malloc>
	if (ret != NULL) {
   267f6:	4605      	mov	r5, r0
   267f8:	b118      	cbz	r0, 26802 <k_calloc+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   267fa:	4622      	mov	r2, r4
   267fc:	2100      	movs	r1, #0
   267fe:	f000 f840 	bl	26882 <memset>
}
   26802:	4628      	mov	r0, r5
   26804:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   26806:	2500      	movs	r5, #0
   26808:	e7fb      	b.n	26802 <k_calloc+0x2e>

0002680a <memchr>:
   2680a:	b2c9      	uxtb	r1, r1
   2680c:	4402      	add	r2, r0
   2680e:	b510      	push	{r4, lr}
   26810:	4290      	cmp	r0, r2
   26812:	4603      	mov	r3, r0
   26814:	d101      	bne.n	2681a <memchr+0x10>
   26816:	2300      	movs	r3, #0
   26818:	e003      	b.n	26822 <memchr+0x18>
   2681a:	781c      	ldrb	r4, [r3, #0]
   2681c:	3001      	adds	r0, #1
   2681e:	428c      	cmp	r4, r1
   26820:	d1f6      	bne.n	26810 <memchr+0x6>
   26822:	4618      	mov	r0, r3
   26824:	bd10      	pop	{r4, pc}

00026826 <memcmp>:
   26826:	b530      	push	{r4, r5, lr}
   26828:	3901      	subs	r1, #1
   2682a:	2400      	movs	r4, #0
   2682c:	42a2      	cmp	r2, r4
   2682e:	d101      	bne.n	26834 <memcmp+0xe>
   26830:	2000      	movs	r0, #0
   26832:	e005      	b.n	26840 <memcmp+0x1a>
   26834:	5d03      	ldrb	r3, [r0, r4]
   26836:	3401      	adds	r4, #1
   26838:	5d0d      	ldrb	r5, [r1, r4]
   2683a:	42ab      	cmp	r3, r5
   2683c:	d0f6      	beq.n	2682c <memcmp+0x6>
   2683e:	1b58      	subs	r0, r3, r5
   26840:	bd30      	pop	{r4, r5, pc}

00026842 <memcpy>:
   26842:	440a      	add	r2, r1
   26844:	1e43      	subs	r3, r0, #1
   26846:	4291      	cmp	r1, r2
   26848:	d100      	bne.n	2684c <memcpy+0xa>
   2684a:	4770      	bx	lr
   2684c:	b510      	push	{r4, lr}
   2684e:	f811 4b01 	ldrb.w	r4, [r1], #1
   26852:	4291      	cmp	r1, r2
   26854:	f803 4f01 	strb.w	r4, [r3, #1]!
   26858:	d1f9      	bne.n	2684e <memcpy+0xc>
   2685a:	bd10      	pop	{r4, pc}

0002685c <__memcpy_chk>:
   2685c:	429a      	cmp	r2, r3
   2685e:	b508      	push	{r3, lr}
   26860:	d901      	bls.n	26866 <__memcpy_chk+0xa>
   26862:	f7ee faa5 	bl	14db0 <__chk_fail>
   26866:	4281      	cmp	r1, r0
   26868:	d804      	bhi.n	26874 <__memcpy_chk+0x18>
   2686a:	188b      	adds	r3, r1, r2
   2686c:	4298      	cmp	r0, r3
   2686e:	d3f8      	bcc.n	26862 <__memcpy_chk+0x6>
   26870:	4281      	cmp	r1, r0
   26872:	d102      	bne.n	2687a <__memcpy_chk+0x1e>
   26874:	1883      	adds	r3, r0, r2
   26876:	4299      	cmp	r1, r3
   26878:	d3f3      	bcc.n	26862 <__memcpy_chk+0x6>
   2687a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2687e:	f7ff bfe0 	b.w	26842 <memcpy>

00026882 <memset>:
   26882:	4402      	add	r2, r0
   26884:	4603      	mov	r3, r0
   26886:	4293      	cmp	r3, r2
   26888:	d100      	bne.n	2688c <memset+0xa>
   2688a:	4770      	bx	lr
   2688c:	f803 1b01 	strb.w	r1, [r3], #1
   26890:	e7f9      	b.n	26886 <memset+0x4>

00026892 <__sprintf_chk>:
   26892:	b408      	push	{r3}
   26894:	b517      	push	{r0, r1, r2, r4, lr}
   26896:	ab05      	add	r3, sp, #20
   26898:	1e14      	subs	r4, r2, #0
   2689a:	f853 1b04 	ldr.w	r1, [r3], #4
   2689e:	9301      	str	r3, [sp, #4]
   268a0:	da07      	bge.n	268b2 <__sprintf_chk+0x20>
   268a2:	461a      	mov	r2, r3
   268a4:	f7fa fb84 	bl	20fb0 <vsiprintf>
   268a8:	b003      	add	sp, #12
   268aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   268ae:	b001      	add	sp, #4
   268b0:	4770      	bx	lr
   268b2:	460a      	mov	r2, r1
   268b4:	4621      	mov	r1, r4
   268b6:	f7fa fb57 	bl	20f68 <vsniprintf>
   268ba:	2800      	cmp	r0, #0
   268bc:	dbf4      	blt.n	268a8 <__sprintf_chk+0x16>
   268be:	42a0      	cmp	r0, r4
   268c0:	d3f2      	bcc.n	268a8 <__sprintf_chk+0x16>
   268c2:	f7ee fa75 	bl	14db0 <__chk_fail>

000268c6 <__seofread>:
   268c6:	2000      	movs	r0, #0
   268c8:	4770      	bx	lr

000268ca <strchr>:
   268ca:	b2c9      	uxtb	r1, r1
   268cc:	4603      	mov	r3, r0
   268ce:	f810 2b01 	ldrb.w	r2, [r0], #1
   268d2:	b11a      	cbz	r2, 268dc <strchr+0x12>
   268d4:	428a      	cmp	r2, r1
   268d6:	d1f9      	bne.n	268cc <strchr+0x2>
   268d8:	4618      	mov	r0, r3
   268da:	4770      	bx	lr
   268dc:	2900      	cmp	r1, #0
   268de:	bf18      	it	ne
   268e0:	2300      	movne	r3, #0
   268e2:	e7f9      	b.n	268d8 <strchr+0xe>

000268e4 <strcpy>:
   268e4:	4603      	mov	r3, r0
   268e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   268ea:	f803 2b01 	strb.w	r2, [r3], #1
   268ee:	2a00      	cmp	r2, #0
   268f0:	d1f9      	bne.n	268e6 <strcpy+0x2>
   268f2:	4770      	bx	lr

000268f4 <strncmp>:
   268f4:	b510      	push	{r4, lr}
   268f6:	b16a      	cbz	r2, 26914 <strncmp+0x20>
   268f8:	3901      	subs	r1, #1
   268fa:	1884      	adds	r4, r0, r2
   268fc:	f810 3b01 	ldrb.w	r3, [r0], #1
   26900:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26904:	4293      	cmp	r3, r2
   26906:	d103      	bne.n	26910 <strncmp+0x1c>
   26908:	42a0      	cmp	r0, r4
   2690a:	d001      	beq.n	26910 <strncmp+0x1c>
   2690c:	2b00      	cmp	r3, #0
   2690e:	d1f5      	bne.n	268fc <strncmp+0x8>
   26910:	1a98      	subs	r0, r3, r2
   26912:	bd10      	pop	{r4, pc}
   26914:	4610      	mov	r0, r2
   26916:	e7fc      	b.n	26912 <strncmp+0x1e>

00026918 <strncpy>:
   26918:	3901      	subs	r1, #1
   2691a:	4603      	mov	r3, r0
   2691c:	b510      	push	{r4, lr}
   2691e:	b132      	cbz	r2, 2692e <strncpy+0x16>
   26920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26924:	3a01      	subs	r2, #1
   26926:	f803 4b01 	strb.w	r4, [r3], #1
   2692a:	2c00      	cmp	r4, #0
   2692c:	d1f7      	bne.n	2691e <strncpy+0x6>
   2692e:	441a      	add	r2, r3
   26930:	2100      	movs	r1, #0
   26932:	4293      	cmp	r3, r2
   26934:	d100      	bne.n	26938 <strncpy+0x20>
   26936:	bd10      	pop	{r4, pc}
   26938:	f803 1b01 	strb.w	r1, [r3], #1
   2693c:	e7f9      	b.n	26932 <strncpy+0x1a>

0002693e <strnlen>:
   2693e:	4602      	mov	r2, r0
   26940:	4401      	add	r1, r0
   26942:	b510      	push	{r4, lr}
   26944:	428a      	cmp	r2, r1
   26946:	4613      	mov	r3, r2
   26948:	d101      	bne.n	2694e <strnlen+0x10>
   2694a:	1a18      	subs	r0, r3, r0
   2694c:	bd10      	pop	{r4, pc}
   2694e:	781c      	ldrb	r4, [r3, #0]
   26950:	3201      	adds	r2, #1
   26952:	2c00      	cmp	r4, #0
   26954:	d1f6      	bne.n	26944 <strnlen+0x6>
   26956:	e7f8      	b.n	2694a <strnlen+0xc>

00026958 <strstr>:
   26958:	b5f0      	push	{r4, r5, r6, r7, lr}
   2695a:	780c      	ldrb	r4, [r1, #0]
   2695c:	b164      	cbz	r4, 26978 <strstr+0x20>
   2695e:	4603      	mov	r3, r0
   26960:	781a      	ldrb	r2, [r3, #0]
   26962:	4618      	mov	r0, r3
   26964:	1c5e      	adds	r6, r3, #1
   26966:	b90a      	cbnz	r2, 2696c <strstr+0x14>
   26968:	4610      	mov	r0, r2
   2696a:	e005      	b.n	26978 <strstr+0x20>
   2696c:	4294      	cmp	r4, r2
   2696e:	d108      	bne.n	26982 <strstr+0x2a>
   26970:	460d      	mov	r5, r1
   26972:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   26976:	b902      	cbnz	r2, 2697a <strstr+0x22>
   26978:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2697a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   2697e:	4297      	cmp	r7, r2
   26980:	d0f7      	beq.n	26972 <strstr+0x1a>
   26982:	4633      	mov	r3, r6
   26984:	e7ec      	b.n	26960 <strstr+0x8>

00026986 <_strtol_r>:
   26986:	f7fa b949 	b.w	20c1c <_strtol_l.isra.0>

0002698a <_strtoul_r>:
   2698a:	f7fa ba69 	b.w	20e60 <_strtoul_l.isra.0>

0002698e <_vsniprintf_r>:
   2698e:	b530      	push	{r4, r5, lr}
   26990:	1e14      	subs	r4, r2, #0
   26992:	4605      	mov	r5, r0
   26994:	b09b      	sub	sp, #108	; 0x6c
   26996:	4618      	mov	r0, r3
   26998:	da05      	bge.n	269a6 <_vsniprintf_r+0x18>
   2699a:	238b      	movs	r3, #139	; 0x8b
   2699c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   269a0:	602b      	str	r3, [r5, #0]
   269a2:	b01b      	add	sp, #108	; 0x6c
   269a4:	bd30      	pop	{r4, r5, pc}
   269a6:	f44f 7302 	mov.w	r3, #520	; 0x208
   269aa:	4602      	mov	r2, r0
   269ac:	9100      	str	r1, [sp, #0]
   269ae:	4628      	mov	r0, r5
   269b0:	f8ad 300c 	strh.w	r3, [sp, #12]
   269b4:	bf14      	ite	ne
   269b6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   269ba:	4623      	moveq	r3, r4
   269bc:	9104      	str	r1, [sp, #16]
   269be:	4669      	mov	r1, sp
   269c0:	9302      	str	r3, [sp, #8]
   269c2:	9305      	str	r3, [sp, #20]
   269c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   269c8:	f8ad 300e 	strh.w	r3, [sp, #14]
   269cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   269ce:	f7fa fb33 	bl	21038 <_svfiprintf_r>
   269d2:	1c43      	adds	r3, r0, #1
   269d4:	bfbc      	itt	lt
   269d6:	238b      	movlt	r3, #139	; 0x8b
   269d8:	602b      	strlt	r3, [r5, #0]
   269da:	2c00      	cmp	r4, #0
   269dc:	d0e1      	beq.n	269a2 <_vsniprintf_r+0x14>
   269de:	9b00      	ldr	r3, [sp, #0]
   269e0:	2200      	movs	r2, #0
   269e2:	701a      	strb	r2, [r3, #0]
   269e4:	e7dd      	b.n	269a2 <_vsniprintf_r+0x14>

000269e6 <__ssputs_r>:
   269e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   269ea:	688e      	ldr	r6, [r1, #8]
   269ec:	4682      	mov	sl, r0
   269ee:	460c      	mov	r4, r1
   269f0:	4690      	mov	r8, r2
   269f2:	429e      	cmp	r6, r3
   269f4:	461f      	mov	r7, r3
   269f6:	d838      	bhi.n	26a6a <__ssputs_r+0x84>
   269f8:	898a      	ldrh	r2, [r1, #12]
   269fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
   269fe:	d032      	beq.n	26a66 <__ssputs_r+0x80>
   26a00:	6825      	ldr	r5, [r4, #0]
   26a02:	3301      	adds	r3, #1
   26a04:	6909      	ldr	r1, [r1, #16]
   26a06:	eba5 0901 	sub.w	r9, r5, r1
   26a0a:	6965      	ldr	r5, [r4, #20]
   26a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26a10:	444b      	add	r3, r9
   26a12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   26a16:	106d      	asrs	r5, r5, #1
   26a18:	429d      	cmp	r5, r3
   26a1a:	bf38      	it	cc
   26a1c:	461d      	movcc	r5, r3
   26a1e:	0553      	lsls	r3, r2, #21
   26a20:	d531      	bpl.n	26a86 <__ssputs_r+0xa0>
   26a22:	4629      	mov	r1, r5
   26a24:	f7fa f85c 	bl	20ae0 <_malloc_r>
   26a28:	4606      	mov	r6, r0
   26a2a:	b950      	cbnz	r0, 26a42 <__ssputs_r+0x5c>
   26a2c:	230c      	movs	r3, #12
   26a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a32:	f8ca 3000 	str.w	r3, [sl]
   26a36:	89a3      	ldrh	r3, [r4, #12]
   26a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26a3c:	81a3      	strh	r3, [r4, #12]
   26a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26a42:	464a      	mov	r2, r9
   26a44:	6921      	ldr	r1, [r4, #16]
   26a46:	f7ff fefc 	bl	26842 <memcpy>
   26a4a:	89a3      	ldrh	r3, [r4, #12]
   26a4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   26a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26a54:	81a3      	strh	r3, [r4, #12]
   26a56:	6126      	str	r6, [r4, #16]
   26a58:	444e      	add	r6, r9
   26a5a:	6165      	str	r5, [r4, #20]
   26a5c:	eba5 0509 	sub.w	r5, r5, r9
   26a60:	6026      	str	r6, [r4, #0]
   26a62:	463e      	mov	r6, r7
   26a64:	60a5      	str	r5, [r4, #8]
   26a66:	42be      	cmp	r6, r7
   26a68:	d900      	bls.n	26a6c <__ssputs_r+0x86>
   26a6a:	463e      	mov	r6, r7
   26a6c:	4632      	mov	r2, r6
   26a6e:	4641      	mov	r1, r8
   26a70:	6820      	ldr	r0, [r4, #0]
   26a72:	f000 f94d 	bl	26d10 <memmove>
   26a76:	68a3      	ldr	r3, [r4, #8]
   26a78:	6822      	ldr	r2, [r4, #0]
   26a7a:	2000      	movs	r0, #0
   26a7c:	1b9b      	subs	r3, r3, r6
   26a7e:	4432      	add	r2, r6
   26a80:	60a3      	str	r3, [r4, #8]
   26a82:	6022      	str	r2, [r4, #0]
   26a84:	e7db      	b.n	26a3e <__ssputs_r+0x58>
   26a86:	462a      	mov	r2, r5
   26a88:	f000 f95c 	bl	26d44 <_realloc_r>
   26a8c:	4606      	mov	r6, r0
   26a8e:	2800      	cmp	r0, #0
   26a90:	d1e1      	bne.n	26a56 <__ssputs_r+0x70>
   26a92:	6921      	ldr	r1, [r4, #16]
   26a94:	4650      	mov	r0, sl
   26a96:	f7f9 ffd3 	bl	20a40 <_free_r>
   26a9a:	e7c7      	b.n	26a2c <__ssputs_r+0x46>

00026a9c <_sungetc_r>:
   26a9c:	b538      	push	{r3, r4, r5, lr}
   26a9e:	1c4b      	adds	r3, r1, #1
   26aa0:	4614      	mov	r4, r2
   26aa2:	d103      	bne.n	26aac <_sungetc_r+0x10>
   26aa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26aa8:	4628      	mov	r0, r5
   26aaa:	bd38      	pop	{r3, r4, r5, pc}
   26aac:	8993      	ldrh	r3, [r2, #12]
   26aae:	b2cd      	uxtb	r5, r1
   26ab0:	f023 0320 	bic.w	r3, r3, #32
   26ab4:	8193      	strh	r3, [r2, #12]
   26ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26ab8:	6852      	ldr	r2, [r2, #4]
   26aba:	b18b      	cbz	r3, 26ae0 <_sungetc_r+0x44>
   26abc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26abe:	4293      	cmp	r3, r2
   26ac0:	dd08      	ble.n	26ad4 <_sungetc_r+0x38>
   26ac2:	6823      	ldr	r3, [r4, #0]
   26ac4:	1e5a      	subs	r2, r3, #1
   26ac6:	6022      	str	r2, [r4, #0]
   26ac8:	f803 5c01 	strb.w	r5, [r3, #-1]
   26acc:	6863      	ldr	r3, [r4, #4]
   26ace:	3301      	adds	r3, #1
   26ad0:	6063      	str	r3, [r4, #4]
   26ad2:	e7e9      	b.n	26aa8 <_sungetc_r+0xc>
   26ad4:	4621      	mov	r1, r4
   26ad6:	f000 f8e4 	bl	26ca2 <__submore>
   26ada:	2800      	cmp	r0, #0
   26adc:	d0f1      	beq.n	26ac2 <_sungetc_r+0x26>
   26ade:	e7e1      	b.n	26aa4 <_sungetc_r+0x8>
   26ae0:	6921      	ldr	r1, [r4, #16]
   26ae2:	6823      	ldr	r3, [r4, #0]
   26ae4:	b151      	cbz	r1, 26afc <_sungetc_r+0x60>
   26ae6:	4299      	cmp	r1, r3
   26ae8:	d208      	bcs.n	26afc <_sungetc_r+0x60>
   26aea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   26aee:	42a9      	cmp	r1, r5
   26af0:	d104      	bne.n	26afc <_sungetc_r+0x60>
   26af2:	3b01      	subs	r3, #1
   26af4:	3201      	adds	r2, #1
   26af6:	6023      	str	r3, [r4, #0]
   26af8:	6062      	str	r2, [r4, #4]
   26afa:	e7d5      	b.n	26aa8 <_sungetc_r+0xc>
   26afc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   26b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
   26b04:	6363      	str	r3, [r4, #52]	; 0x34
   26b06:	2303      	movs	r3, #3
   26b08:	63a3      	str	r3, [r4, #56]	; 0x38
   26b0a:	4623      	mov	r3, r4
   26b0c:	f803 5f46 	strb.w	r5, [r3, #70]!
   26b10:	6023      	str	r3, [r4, #0]
   26b12:	2301      	movs	r3, #1
   26b14:	e7dc      	b.n	26ad0 <_sungetc_r+0x34>

00026b16 <__ssrefill_r>:
   26b16:	b510      	push	{r4, lr}
   26b18:	460c      	mov	r4, r1
   26b1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
   26b1c:	b169      	cbz	r1, 26b3a <__ssrefill_r+0x24>
   26b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   26b22:	4299      	cmp	r1, r3
   26b24:	d001      	beq.n	26b2a <__ssrefill_r+0x14>
   26b26:	f7f9 ff8b 	bl	20a40 <_free_r>
   26b2a:	2000      	movs	r0, #0
   26b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   26b2e:	6360      	str	r0, [r4, #52]	; 0x34
   26b30:	6063      	str	r3, [r4, #4]
   26b32:	b113      	cbz	r3, 26b3a <__ssrefill_r+0x24>
   26b34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   26b36:	6023      	str	r3, [r4, #0]
   26b38:	bd10      	pop	{r4, pc}
   26b3a:	6923      	ldr	r3, [r4, #16]
   26b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26b40:	6023      	str	r3, [r4, #0]
   26b42:	2300      	movs	r3, #0
   26b44:	6063      	str	r3, [r4, #4]
   26b46:	89a3      	ldrh	r3, [r4, #12]
   26b48:	f043 0320 	orr.w	r3, r3, #32
   26b4c:	81a3      	strh	r3, [r4, #12]
   26b4e:	e7f3      	b.n	26b38 <__ssrefill_r+0x22>

00026b50 <_printf_common>:
   26b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26b54:	4616      	mov	r6, r2
   26b56:	4699      	mov	r9, r3
   26b58:	688a      	ldr	r2, [r1, #8]
   26b5a:	4607      	mov	r7, r0
   26b5c:	690b      	ldr	r3, [r1, #16]
   26b5e:	460c      	mov	r4, r1
   26b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
   26b64:	4293      	cmp	r3, r2
   26b66:	bfb8      	it	lt
   26b68:	4613      	movlt	r3, r2
   26b6a:	6033      	str	r3, [r6, #0]
   26b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   26b70:	b10a      	cbz	r2, 26b76 <_printf_common+0x26>
   26b72:	3301      	adds	r3, #1
   26b74:	6033      	str	r3, [r6, #0]
   26b76:	6823      	ldr	r3, [r4, #0]
   26b78:	0699      	lsls	r1, r3, #26
   26b7a:	bf42      	ittt	mi
   26b7c:	6833      	ldrmi	r3, [r6, #0]
   26b7e:	3302      	addmi	r3, #2
   26b80:	6033      	strmi	r3, [r6, #0]
   26b82:	6825      	ldr	r5, [r4, #0]
   26b84:	f015 0506 	ands.w	r5, r5, #6
   26b88:	d106      	bne.n	26b98 <_printf_common+0x48>
   26b8a:	f104 0a19 	add.w	sl, r4, #25
   26b8e:	68e3      	ldr	r3, [r4, #12]
   26b90:	6832      	ldr	r2, [r6, #0]
   26b92:	1a9b      	subs	r3, r3, r2
   26b94:	42ab      	cmp	r3, r5
   26b96:	dc29      	bgt.n	26bec <_printf_common+0x9c>
   26b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   26b9c:	1e13      	subs	r3, r2, #0
   26b9e:	6822      	ldr	r2, [r4, #0]
   26ba0:	bf18      	it	ne
   26ba2:	2301      	movne	r3, #1
   26ba4:	0692      	lsls	r2, r2, #26
   26ba6:	d42e      	bmi.n	26c06 <_printf_common+0xb6>
   26ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   26bac:	4649      	mov	r1, r9
   26bae:	4638      	mov	r0, r7
   26bb0:	47c0      	blx	r8
   26bb2:	3001      	adds	r0, #1
   26bb4:	d021      	beq.n	26bfa <_printf_common+0xaa>
   26bb6:	6823      	ldr	r3, [r4, #0]
   26bb8:	341a      	adds	r4, #26
   26bba:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   26bbe:	f003 0306 	and.w	r3, r3, #6
   26bc2:	6832      	ldr	r2, [r6, #0]
   26bc4:	2600      	movs	r6, #0
   26bc6:	2b04      	cmp	r3, #4
   26bc8:	f854 3c12 	ldr.w	r3, [r4, #-18]
   26bcc:	bf08      	it	eq
   26bce:	1aad      	subeq	r5, r5, r2
   26bd0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   26bd4:	bf14      	ite	ne
   26bd6:	2500      	movne	r5, #0
   26bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   26bdc:	4293      	cmp	r3, r2
   26bde:	bfc4      	itt	gt
   26be0:	1a9b      	subgt	r3, r3, r2
   26be2:	18ed      	addgt	r5, r5, r3
   26be4:	42b5      	cmp	r5, r6
   26be6:	d11a      	bne.n	26c1e <_printf_common+0xce>
   26be8:	2000      	movs	r0, #0
   26bea:	e008      	b.n	26bfe <_printf_common+0xae>
   26bec:	2301      	movs	r3, #1
   26bee:	4652      	mov	r2, sl
   26bf0:	4649      	mov	r1, r9
   26bf2:	4638      	mov	r0, r7
   26bf4:	47c0      	blx	r8
   26bf6:	3001      	adds	r0, #1
   26bf8:	d103      	bne.n	26c02 <_printf_common+0xb2>
   26bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26c02:	3501      	adds	r5, #1
   26c04:	e7c3      	b.n	26b8e <_printf_common+0x3e>
   26c06:	18e1      	adds	r1, r4, r3
   26c08:	1c5a      	adds	r2, r3, #1
   26c0a:	2030      	movs	r0, #48	; 0x30
   26c0c:	3302      	adds	r3, #2
   26c0e:	4422      	add	r2, r4
   26c10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   26c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   26c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   26c1c:	e7c4      	b.n	26ba8 <_printf_common+0x58>
   26c1e:	2301      	movs	r3, #1
   26c20:	4622      	mov	r2, r4
   26c22:	4649      	mov	r1, r9
   26c24:	4638      	mov	r0, r7
   26c26:	47c0      	blx	r8
   26c28:	3001      	adds	r0, #1
   26c2a:	d0e6      	beq.n	26bfa <_printf_common+0xaa>
   26c2c:	3601      	adds	r6, #1
   26c2e:	e7d9      	b.n	26be4 <_printf_common+0x94>

00026c30 <__sccl>:
   26c30:	b570      	push	{r4, r5, r6, lr}
   26c32:	780b      	ldrb	r3, [r1, #0]
   26c34:	4604      	mov	r4, r0
   26c36:	2b5e      	cmp	r3, #94	; 0x5e
   26c38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   26c3c:	bf13      	iteet	ne
   26c3e:	1c48      	addne	r0, r1, #1
   26c40:	1c88      	addeq	r0, r1, #2
   26c42:	784b      	ldrbeq	r3, [r1, #1]
   26c44:	2200      	movne	r2, #0
   26c46:	bf08      	it	eq
   26c48:	2201      	moveq	r2, #1
   26c4a:	1e61      	subs	r1, r4, #1
   26c4c:	f801 2f01 	strb.w	r2, [r1, #1]!
   26c50:	42a9      	cmp	r1, r5
   26c52:	d1fb      	bne.n	26c4c <__sccl+0x1c>
   26c54:	b90b      	cbnz	r3, 26c5a <__sccl+0x2a>
   26c56:	3801      	subs	r0, #1
   26c58:	bd70      	pop	{r4, r5, r6, pc}
   26c5a:	f082 0101 	eor.w	r1, r2, #1
   26c5e:	1c42      	adds	r2, r0, #1
   26c60:	54e1      	strb	r1, [r4, r3]
   26c62:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   26c66:	1e56      	subs	r6, r2, #1
   26c68:	4610      	mov	r0, r2
   26c6a:	2d2d      	cmp	r5, #45	; 0x2d
   26c6c:	d006      	beq.n	26c7c <__sccl+0x4c>
   26c6e:	2d5d      	cmp	r5, #93	; 0x5d
   26c70:	d0f2      	beq.n	26c58 <__sccl+0x28>
   26c72:	b90d      	cbnz	r5, 26c78 <__sccl+0x48>
   26c74:	4630      	mov	r0, r6
   26c76:	e7ef      	b.n	26c58 <__sccl+0x28>
   26c78:	462b      	mov	r3, r5
   26c7a:	e7f0      	b.n	26c5e <__sccl+0x2e>
   26c7c:	7816      	ldrb	r6, [r2, #0]
   26c7e:	2e5d      	cmp	r6, #93	; 0x5d
   26c80:	d0fa      	beq.n	26c78 <__sccl+0x48>
   26c82:	42b3      	cmp	r3, r6
   26c84:	dcf8      	bgt.n	26c78 <__sccl+0x48>
   26c86:	4618      	mov	r0, r3
   26c88:	3001      	adds	r0, #1
   26c8a:	4286      	cmp	r6, r0
   26c8c:	5421      	strb	r1, [r4, r0]
   26c8e:	dcfb      	bgt.n	26c88 <__sccl+0x58>
   26c90:	43d8      	mvns	r0, r3
   26c92:	1c5d      	adds	r5, r3, #1
   26c94:	3202      	adds	r2, #2
   26c96:	4430      	add	r0, r6
   26c98:	42b3      	cmp	r3, r6
   26c9a:	bfa8      	it	ge
   26c9c:	2000      	movge	r0, #0
   26c9e:	182b      	adds	r3, r5, r0
   26ca0:	e7df      	b.n	26c62 <__sccl+0x32>

00026ca2 <__submore>:
   26ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ca6:	460c      	mov	r4, r1
   26ca8:	6b49      	ldr	r1, [r1, #52]	; 0x34
   26caa:	f104 0344 	add.w	r3, r4, #68	; 0x44
   26cae:	4299      	cmp	r1, r3
   26cb0:	d11a      	bne.n	26ce8 <__submore+0x46>
   26cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   26cb6:	f7f9 ff13 	bl	20ae0 <_malloc_r>
   26cba:	b918      	cbnz	r0, 26cc4 <__submore+0x22>
   26cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26cc8:	6360      	str	r0, [r4, #52]	; 0x34
   26cca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   26cce:	63a3      	str	r3, [r4, #56]	; 0x38
   26cd0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   26cd4:	7083      	strb	r3, [r0, #2]
   26cd6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   26cda:	7043      	strb	r3, [r0, #1]
   26cdc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   26ce0:	7003      	strb	r3, [r0, #0]
   26ce2:	6020      	str	r0, [r4, #0]
   26ce4:	2000      	movs	r0, #0
   26ce6:	e7eb      	b.n	26cc0 <__submore+0x1e>
   26ce8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   26cea:	0077      	lsls	r7, r6, #1
   26cec:	463a      	mov	r2, r7
   26cee:	f000 f829 	bl	26d44 <_realloc_r>
   26cf2:	4605      	mov	r5, r0
   26cf4:	2800      	cmp	r0, #0
   26cf6:	d0e1      	beq.n	26cbc <__submore+0x1a>
   26cf8:	eb00 0806 	add.w	r8, r0, r6
   26cfc:	4601      	mov	r1, r0
   26cfe:	4632      	mov	r2, r6
   26d00:	4640      	mov	r0, r8
   26d02:	f7ff fd9e 	bl	26842 <memcpy>
   26d06:	f8c4 8000 	str.w	r8, [r4]
   26d0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   26d0e:	e7e9      	b.n	26ce4 <__submore+0x42>

00026d10 <memmove>:
   26d10:	4288      	cmp	r0, r1
   26d12:	b510      	push	{r4, lr}
   26d14:	eb01 0402 	add.w	r4, r1, r2
   26d18:	d902      	bls.n	26d20 <memmove+0x10>
   26d1a:	4284      	cmp	r4, r0
   26d1c:	4623      	mov	r3, r4
   26d1e:	d807      	bhi.n	26d30 <memmove+0x20>
   26d20:	1e43      	subs	r3, r0, #1
   26d22:	42a1      	cmp	r1, r4
   26d24:	d008      	beq.n	26d38 <memmove+0x28>
   26d26:	f811 2b01 	ldrb.w	r2, [r1], #1
   26d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
   26d2e:	e7f8      	b.n	26d22 <memmove+0x12>
   26d30:	4402      	add	r2, r0
   26d32:	4601      	mov	r1, r0
   26d34:	428a      	cmp	r2, r1
   26d36:	d100      	bne.n	26d3a <memmove+0x2a>
   26d38:	bd10      	pop	{r4, pc}
   26d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   26d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   26d42:	e7f7      	b.n	26d34 <memmove+0x24>

00026d44 <_realloc_r>:
   26d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d46:	4607      	mov	r7, r0
   26d48:	4614      	mov	r4, r2
   26d4a:	460e      	mov	r6, r1
   26d4c:	b921      	cbnz	r1, 26d58 <_realloc_r+0x14>
   26d4e:	4611      	mov	r1, r2
   26d50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26d54:	f7f9 bec4 	b.w	20ae0 <_malloc_r>
   26d58:	b922      	cbnz	r2, 26d64 <_realloc_r+0x20>
   26d5a:	4625      	mov	r5, r4
   26d5c:	f7f9 fe70 	bl	20a40 <_free_r>
   26d60:	4628      	mov	r0, r5
   26d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26d64:	f000 f814 	bl	26d90 <_malloc_usable_size_r>
   26d68:	42a0      	cmp	r0, r4
   26d6a:	d20f      	bcs.n	26d8c <_realloc_r+0x48>
   26d6c:	4621      	mov	r1, r4
   26d6e:	4638      	mov	r0, r7
   26d70:	f7f9 feb6 	bl	20ae0 <_malloc_r>
   26d74:	4605      	mov	r5, r0
   26d76:	2800      	cmp	r0, #0
   26d78:	d0f2      	beq.n	26d60 <_realloc_r+0x1c>
   26d7a:	4631      	mov	r1, r6
   26d7c:	4622      	mov	r2, r4
   26d7e:	f7ff fd60 	bl	26842 <memcpy>
   26d82:	4631      	mov	r1, r6
   26d84:	4638      	mov	r0, r7
   26d86:	f7f9 fe5b 	bl	20a40 <_free_r>
   26d8a:	e7e9      	b.n	26d60 <_realloc_r+0x1c>
   26d8c:	4635      	mov	r5, r6
   26d8e:	e7e7      	b.n	26d60 <_realloc_r+0x1c>

00026d90 <_malloc_usable_size_r>:
   26d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
   26d94:	1f18      	subs	r0, r3, #4
   26d96:	2b00      	cmp	r3, #0
   26d98:	bfbc      	itt	lt
   26d9a:	580b      	ldrlt	r3, [r1, r0]
   26d9c:	18c0      	addlt	r0, r0, r3
   26d9e:	4770      	bx	lr

00026da0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   26da0:	f7f3 bd34 	b.w	1a80c <SystemInit>
